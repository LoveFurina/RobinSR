// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerBasicInfo {
    #[prost(string, tag = "1")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, tag = "4")]
    pub stamina: u32,
    #[prost(uint32, tag = "5")]
    pub mcoin: u32,
    #[prost(uint32, tag = "6")]
    pub hcoin: u32,
    #[prost(uint32, tag = "7")]
    pub scoin: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpProgress {
    #[prost(uint32, tag = "1")]
    pub sp_cur: u32,
    #[prost(uint32, tag = "2")]
    pub sp_need: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlackInfo {
    #[prost(int64, tag = "1")]
    pub begin_time: i64,
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(uint32, tag = "3")]
    pub limit_level: u32,
    #[prost(uint32, tag = "4")]
    pub ban_type: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmamieaaodh {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgfnmflbiam {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub clkbpijjaap: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientDownloadData {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(int64, tag = "2")]
    pub time: i64,
    #[prost(bytes = "vec", tag = "3")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imomemjfagh {
    #[prost(bytes = "vec", tag = "1")]
    pub gcfgfkajeep: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "2")]
    pub hdhpoaagdem: ::core::option::Option<ClientDownloadData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientUploadData {
    #[prost(string, tag = "1")]
    pub tag: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmpcfdhlpie {
    #[prost(uint32, repeated, tag = "1")]
    pub jancobnhdgd: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeatureSwitchInfo {
    #[prost(enumeration = "FeatureSwitchType", tag = "1")]
    pub r#type: i32,
    #[prost(message, repeated, tag = "2")]
    pub switch_list: ::prost::alloc::vec::Vec<Pmpcfdhlpie>,
    #[prost(bool, tag = "3")]
    pub is_all_closed: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbofjhojgph {
    #[prost(string, tag = "1")]
    pub hpifcabfbpa: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub ipljneeomdp: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub apmgpgghokn: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub iobdkibfiaj: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub jblmmlkkdkn: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub hmmclkjhige: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub fkojgdfhpep: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlhgcplikkp {
    #[prost(uint64, tag = "1")]
    pub pjlagobkdmo: u64,
    #[prost(enumeration = "ReplayType", tag = "2")]
    pub blnoeiceljf: i32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(string, tag = "5")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub bmfhibobmhp: u32,
    #[prost(string, tag = "7")]
    pub aedhlhjgfpg: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub fgilieldboi: u64,
    #[prost(uint32, tag = "9")]
    pub lfnjmcnfhha: u32,
    #[prost(uint32, tag = "10")]
    pub oeoikijbcfg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleAvatar {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleRecord {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub damage_hp: u32,
    #[prost(bool, tag = "3")]
    pub is_final_hit: bool,
    #[prost(uint32, tag = "4")]
    pub over_kill_damage_hp: u32,
    #[prost(string, tag = "5")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<PunkLordBattleAvatar>,
    #[prost(uint32, tag = "7")]
    pub assist_score: u32,
    #[prost(uint32, tag = "8")]
    pub damage_score: u32,
    #[prost(uint32, tag = "9")]
    pub final_hit_score: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgljkmekiom {
    #[prost(message, repeated, tag = "1")]
    pub eolalkfgdal: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbbaohkdklj {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aapoalmfpan {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub pfbnanpcdjh: u32,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(int64, tag = "5")]
    pub fgilieldboi: i64,
    #[prost(uint32, tag = "6")]
    pub left_hp: u32,
    #[prost(uint32, tag = "7")]
    pub lgkegiimjka: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "8")]
    pub cpefaednmcc: i32,
    #[prost(bool, tag = "9")]
    pub kjpdknocoeo: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkLordBattleReplay {
    #[prost(string, tag = "1")]
    pub battle_replay_key: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub replay_info: ::core::option::Option<Nlhgcplikkp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Naondbibjjo {
    #[prost(uint64, tag = "1")]
    pub pomlpdggdfc: u64,
    #[prost(uint32, tag = "2")]
    pub dfpkdpmefac: u32,
    #[prost(uint32, tag = "3")]
    pub hngamdhjhld: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kicjpjalbbh {
    #[prost(message, optional, tag = "101")]
    pub mjjmhnkknlb: ::core::option::Option<Naondbibjjo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerData {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub dispatch_url: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub env_type: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub msg: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalDispatchData {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, tag = "2")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ajkbajlebhn: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub server_list: ::prost::alloc::vec::Vec<ServerData>,
    #[prost(string, tag = "5")]
    pub odbdlipeoog: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanSettings {
    #[prost(uint32, tag = "1")]
    pub rarity_bitset: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub relic_set_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub body_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub foot_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub sphere_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub rope_main_property_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub is_include_filter_sub_property: bool,
    #[prost(uint32, tag = "8")]
    pub sub_property_num: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub sub_property_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleOp {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub action_entity_id: u32,
    #[prost(uint32, tag = "4")]
    pub target_entity_id: u32,
    #[prost(uint32, tag = "5")]
    pub op_type: u32,
    #[prost(uint32, tag = "6")]
    pub skill_index: u32,
    #[prost(uint32, tag = "7")]
    pub operation_counter: u32,
    #[prost(string, tag = "8")]
    pub pmepgjijdmc: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleEquipment {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleRelic {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub main_affix_id: u32,
    #[prost(message, repeated, tag = "4")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "5")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub peehdpfeeoo: u32,
    #[prost(uint32, tag = "7")]
    pub slot: u32,
    #[prost(uint32, tag = "8")]
    pub ckcmdjnelkb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarSkillTree {
    #[prost(uint32, tag = "1")]
    pub point_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicAffix {
    #[prost(uint32, tag = "1")]
    pub affix_id: u32,
    #[prost(uint32, tag = "2")]
    pub cnt: u32,
    #[prost(uint32, tag = "3")]
    pub step: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnompbkahnm {
    #[prost(bool, tag = "1")]
    pub cghmoccghlb: bool,
    #[prost(uint32, repeated, tag = "2")]
    pub kafibpbdljp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub hfhlhamjfpm: u32,
    #[prost(uint32, tag = "4")]
    pub findipnanjj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleAvatar {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
    #[prost(uint32, tag = "5")]
    pub index: u32,
    #[prost(message, repeated, tag = "6")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "7")]
    pub equipment_list: ::prost::alloc::vec::Vec<BattleEquipment>,
    #[prost(uint32, tag = "8")]
    pub hp: u32,
    #[prost(uint32, tag = "10")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "11")]
    pub relic_list: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
    #[prost(message, optional, tag = "15")]
    pub mpoioekkgli: ::core::option::Option<Gnompbkahnm>,
    #[prost(message, optional, tag = "16")]
    pub sp: ::core::option::Option<SpProgress>,
    #[prost(uint32, tag = "17")]
    pub iojopnilicf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjbomedfedo {
    #[prost(uint32, tag = "1")]
    pub ednldnkdhim: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub gcljbgjckpi: u32,
    #[prost(uint32, tag = "4")]
    pub gmimbapadel: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fndpkoiaoco {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "3")]
    pub max_hp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcpmkggdeaj {
    #[prost(message, repeated, tag = "1")]
    pub gojhgccipnp: ::prost::alloc::vec::Vec<Fndpkoiaoco>,
    #[prost(message, optional, tag = "2")]
    pub djicbhlfoga: ::core::option::Option<Cjbomedfedo>,
    #[prost(uint32, tag = "3")]
    pub jmdhdbhgjhj: u32,
    #[prost(uint32, tag = "4")]
    pub comggjmfjao: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleBuff {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub owner_index: u32,
    #[prost(uint32, tag = "4")]
    pub wave_flag: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub target_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "string, float", tag = "6")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cojkoonnbee {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub dpepdejdlka: u32,
    #[prost(uint32, tag = "3")]
    pub obeicoahpbg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ieimejdokoc {
    #[prost(uint32, tag = "1")]
    pub iheiaoggmoc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nimklecdanj {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub dpepdejdlka: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pajllggkegp {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleTarget {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
    #[prost(uint32, tag = "3")]
    pub total_progress: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleTargetList {
    #[prost(message, repeated, tag = "1")]
    pub knbbhojnoff: ::prost::alloc::vec::Vec<BattleTarget>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleLineup {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<Jcpmkggdeaj>,
    #[prost(message, repeated, tag = "3")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
    #[prost(map = "uint32, message", tag = "9")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, optional, tag = "10")]
    pub mgacgfelfph: ::core::option::Option<Ieimejdokoc>,
    #[prost(message, repeated, tag = "11")]
    pub lphaolobnol: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(message, optional, tag = "12")]
    pub bcilaimkepo: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "13")]
    pub obneanlbpjf: ::core::option::Option<Cbipmgkdbmj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbipmgkdbmj {
    #[prost(map = "uint32, uint32", tag = "1")]
    pub nbippcmhdij: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub bfhblojhfbn: u32,
    #[prost(uint32, tag = "3")]
    pub eccooggmmkm: u32,
    #[prost(uint32, tag = "4")]
    pub ogoballkjcg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dohhfaklimj {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub index: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub pbcjjbpdaco: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Gkaagdjgcjj", tag = "5")]
    pub iaknlgphklb: i32,
    #[prost(message, optional, tag = "6")]
    pub sp: ::core::option::Option<SpProgress>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gepemalmpkc {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Dohhfaklimj>,
    #[prost(message, repeated, tag = "2")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<Jcpmkggdeaj>,
    #[prost(message, repeated, tag = "3")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<BattleBuff>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Faekpkgkkfn {
    #[prost(uint32, tag = "1")]
    pub turn_counter: u32,
    #[prost(uint32, tag = "2")]
    pub nnkhhlofopd: u32,
    #[prost(uint32, tag = "3")]
    pub amchcneihno: u32,
    #[prost(message, repeated, tag = "4")]
    pub fgopniajipd: ::prost::alloc::vec::Vec<Aeeaaeghbcf>,
    #[prost(message, repeated, tag = "5")]
    pub opjffhdcimd: ::prost::alloc::vec::Vec<Lhbjccjikld>,
    #[prost(uint32, tag = "6")]
    pub eejampcafkf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GamecoreConfig {
    #[prost(bool, tag = "1")]
    pub is_skip_verify: bool,
    #[prost(uint32, tag = "2")]
    pub max_turn_cnt: u32,
    #[prost(bool, tag = "3")]
    pub is_auto_fight: bool,
    #[prost(string, tag = "4")]
    pub csv_path: ::prost::alloc::string::String,
    #[prost(bool, tag = "5")]
    pub occpagnninm: bool,
    #[prost(bool, tag = "6")]
    pub kohhcdnlhkk: bool,
    #[prost(uint32, tag = "7")]
    pub hgbiemklalm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjobkecmmdg {
    #[prost(uint32, repeated, tag = "1")]
    pub id: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub gmgpibhkomg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub fcdfcganbdh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub opejjkdakho: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jengakjkbap {
    #[prost(uint32, tag = "1")]
    pub mdkaibfcgkm: u32,
    #[prost(uint32, tag = "2")]
    pub iognnoaljjj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abjdkbhcagj {
    #[prost(bool, tag = "1")]
    pub mbmlkfbaebi: bool,
    #[prost(map = "string, message", tag = "2")]
    pub foelnpbpkef: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        Jengakjkbap,
    >,
    #[prost(bytes = "vec", tag = "3")]
    pub jgabaooklbg: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlpkjmbokmg {
    #[prost(message, repeated, tag = "1")]
    pub mpkfbobkglo: ::prost::alloc::vec::Vec<Faekpkgkkfn>,
    #[prost(string, tag = "2")]
    pub ikbigpbobak: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub clhgagmlpgk: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub bgcniallbni: ::prost::alloc::vec::Vec<Ncokmoifijp>,
    #[prost(uint32, tag = "5")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
    #[prost(uint32, tag = "7")]
    pub epeofnhnbob: u32,
    #[prost(uint32, tag = "8")]
    pub faonpmhplea: u32,
    #[prost(message, optional, tag = "9")]
    pub nljgmpkelkd: ::core::option::Option<Abjdkbhcagj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleReplay {
    #[prost(uint32, tag = "1")]
    pub version: u32,
    #[prost(uint32, tag = "2")]
    pub logic_random_seed: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<BattleLineup>,
    #[prost(message, repeated, tag = "5")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
    #[prost(bytes = "vec", tag = "6")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "7")]
    pub inpimhmcgli: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub maze_plane_id: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "9")]
    pub is_ai_consider_ultra_skill: bool,
    #[prost(enumeration = "BattleCheckStrategyType", tag = "10")]
    pub check_strategy: i32,
    #[prost(enumeration = "BattleModuleType", tag = "11")]
    pub battle_module_type: i32,
    #[prost(message, repeated, tag = "12")]
    pub apkpbammnhm: ::prost::alloc::vec::Vec<Pldmljcickk>,
    #[prost(uint32, tag = "14")]
    pub cycle_count: u32,
    #[prost(message, optional, tag = "15")]
    pub lillnioocan: ::core::option::Option<GamecoreConfig>,
    #[prost(bytes = "vec", tag = "16")]
    pub game_core_log_encode: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "17")]
    pub pafnmmndegp: u32,
    #[prost(uint32, tag = "18")]
    pub monster_wave_length: u32,
    #[prost(message, optional, tag = "19")]
    pub dfmnmhpbbfa: ::core::option::Option<Gepemalmpkc>,
    #[prost(message, optional, tag = "100")]
    pub pofphcbemla: ::core::option::Option<Nlpkjmbokmg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncokmoifijp {
    #[prost(int32, tag = "1")]
    pub ddeebkcfmih: i32,
    #[prost(string, tag = "2")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarProperty {
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    #[prost(double, tag = "2")]
    pub attack: f64,
    #[prost(double, tag = "3")]
    pub defence: f64,
    #[prost(double, tag = "4")]
    pub speed: f64,
    #[prost(double, tag = "5")]
    pub left_hp: f64,
    #[prost(double, tag = "6")]
    pub left_sp: f64,
    #[prost(double, tag = "7")]
    pub max_sp: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipmentPropert {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AttackDamageProperty {
    #[prost(string, tag = "1")]
    pub attack_type: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub damage: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SkillUseProperty {
    #[prost(uint32, tag = "1")]
    pub hskill_id: u32,
    #[prost(string, tag = "2")]
    pub skill_type: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub skill_level: u32,
    #[prost(uint32, tag = "4")]
    pub skill_use_count: u32,
    #[prost(uint32, tag = "5")]
    pub okoebgnppii: u32,
    #[prost(uint32, tag = "6")]
    pub ipacnpiogji: u32,
    #[prost(uint32, tag = "7")]
    pub cmhakdimelf: u32,
    #[prost(uint32, tag = "8")]
    pub edmjmnfgmad: u32,
    #[prost(uint32, tag = "9")]
    pub okffdjngjed: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llnhnhhlcip {
    #[prost(uint32, tag = "1")]
    pub hgnfloilneg: u32,
    #[prost(double, tag = "2")]
    pub nkgnnpndkfj: f64,
    #[prost(uint32, repeated, tag = "3")]
    pub nkpcaindgao: ::prost::alloc::vec::Vec<u32>,
    #[prost(double, tag = "4")]
    pub ohfcbnkchlo: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnpiljhejfe {
    #[prost(string, tag = "1")]
    pub gnfpnbgacdf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub pomclecifom: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgghpnnojej {
    #[prost(string, tag = "1")]
    pub efjpeijemee: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub clkbpijjaap: u32,
    #[prost(double, tag = "3")]
    pub fcadgcfhlce: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AvatarBattleInfo {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    /// Token: 0x400046D;
    #[prost(uint32, tag = "2")]
    pub id: u32,
    /// Token: 0x400046F;
    #[prost(uint32, tag = "3")]
    pub avatar_level: u32,
    /// Token: 0x4000471;
    #[prost(uint32, tag = "4")]
    pub avatar_rank: u32,
    /// Token: 0x4000473;
    #[prost(uint32, tag = "5")]
    pub avatar_promotion: u32,
    #[prost(message, optional, tag = "6")]
    pub avatar_status: ::core::option::Option<AvatarProperty>,
    #[prost(message, repeated, tag = "7")]
    pub avatar_skill: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(message, repeated, tag = "8")]
    pub avatar_equipment: ::prost::alloc::vec::Vec<EquipmentPropert>,
    /// Token: 0x400047D;
    #[prost(uint32, tag = "9")]
    pub total_turns: u32,
    /// Token: 0x400047F;
    #[prost(double, tag = "10")]
    pub total_damage: f64,
    /// Token: 0x4000481;
    #[prost(double, tag = "11")]
    pub total_heal: f64,
    /// Token: 0x4000483;
    #[prost(double, tag = "12")]
    pub total_damage_taken: f64,
    /// Token: 0x4000485;
    #[prost(double, tag = "13")]
    pub total_hp_recover: f64,
    /// Token: 0x4000487;
    #[prost(double, tag = "14")]
    pub total_sp_cost: f64,
    /// Token: 0x4000489;
    #[prost(uint32, tag = "15")]
    pub stage_id: u32,
    /// Token: 0x400048B;
    #[prost(uint32, tag = "16")]
    pub stage_type: u32,
    /// Token: 0x400048D;
    #[prost(double, tag = "17")]
    pub total_break_damage: f64,
    /// Token: 0x400048F;
    #[prost(message, repeated, tag = "18")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    /// Token: 0x4000492;
    #[prost(message, repeated, tag = "19")]
    pub attack_type_break_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    /// Token: 0x4000495;
    #[prost(message, repeated, tag = "20")]
    pub attack_type_max_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(message, repeated, tag = "21")]
    pub cohhcjjmfil: ::prost::alloc::vec::Vec<SkillUseProperty>,
    #[prost(double, tag = "22")]
    pub fckomicbfmc: f64,
    #[prost(uint32, tag = "23")]
    pub okpkiancelf: u32,
    #[prost(message, repeated, tag = "24")]
    pub sp_add_source: ::prost::alloc::vec::Vec<Nnpiljhejfe>,
    /// Token: 0x40004A2;
    #[prost(uint32, tag = "25")]
    pub total_bp_cost: u32,
    /// Token: 0x40004A4;
    #[prost(uint32, tag = "26")]
    pub die_times: u32,
    /// Token: 0x40004A6;
    #[prost(uint32, tag = "27")]
    pub revive_times: u32,
    /// Token: 0x40004A8;
    #[prost(uint32, tag = "28")]
    pub break_times: u32,
    /// Token: 0x40004AA;
    #[prost(uint32, tag = "29")]
    pub extra_turns: u32,
    /// Token: 0x40004AC;
    #[prost(double, tag = "30")]
    pub total_shield: f64,
    /// Token: 0x40004AE;
    #[prost(double, tag = "31")]
    pub total_shield_taken: f64,
    /// Token: 0x40004B0;
    #[prost(double, tag = "32")]
    pub total_shield_damage: f64,
    /// Token: 0x40004B2;
    #[prost(message, optional, tag = "33")]
    pub initial_status: ::core::option::Option<AvatarProperty>,
    /// Token: 0x40004B4;
    #[prost(message, repeated, tag = "34")]
    pub relics: ::prost::alloc::vec::Vec<BattleRelic>,
    #[prost(uint32, tag = "35")]
    pub slot: u32,
    #[prost(message, repeated, tag = "36")]
    pub pnnbhmgbbaf: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    #[prost(double, tag = "37")]
    pub ifogdklojaj: f64,
    #[prost(double, tag = "38")]
    pub fpokhaemoli: f64,
    #[prost(double, tag = "39")]
    pub gdljjodkiip: f64,
    #[prost(double, tag = "40")]
    pub mldjfbabhek: f64,
    #[prost(message, repeated, tag = "41")]
    pub jacedoenhfa: ::prost::alloc::vec::Vec<Hgghpnnojej>,
    #[prost(uint32, tag = "42")]
    pub faomiaggpaa: u32,
    #[prost(uint32, tag = "43")]
    pub fadjmlcifbf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonsterProperty {
    /// Token: 0x40004CE;
    #[prost(double, tag = "1")]
    pub max_hp: f64,
    /// Token: 0x40004D0;
    #[prost(double, tag = "2")]
    pub attack: f64,
    /// Token: 0x40004D2;
    #[prost(double, tag = "3")]
    pub defence: f64,
    /// Token: 0x40004D4;
    #[prost(double, tag = "4")]
    pub shield: f64,
    /// Token: 0x40004D6;
    #[prost(double, tag = "5")]
    pub speed: f64,
    /// Token: 0x40004D8;
    #[prost(double, tag = "6")]
    pub left_hp: f64,
    /// Token: 0x40004DA;
    #[prost(double, tag = "7")]
    pub hjhnjbbpjnc: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdofgnnbigl {
    #[prost(uint32, tag = "1")]
    pub eijiiekodce: u32,
    #[prost(double, tag = "2")]
    pub nccjkbdbimf: f64,
    #[prost(uint32, tag = "3")]
    pub jbmkkgchkgf: u32,
    #[prost(uint32, tag = "4")]
    pub omhlpnoflne: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonsterBattleInfo {
    /// Token: 0x40004EA;
    #[prost(uint32, tag = "1")]
    pub entity_id: u32,
    /// Token: 0x40004EC;
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    /// Token: 0x40004EE;
    #[prost(uint32, tag = "3")]
    pub monster_template_id: u32,
    /// Token: 0x40004F0;
    #[prost(uint32, tag = "4")]
    pub monster_level: u32,
    #[prost(message, optional, tag = "5")]
    pub monster_status: ::core::option::Option<MonsterProperty>,
    /// Token: 0x40004F4;
    #[prost(uint32, tag = "6")]
    pub total_turns: u32,
    /// Token: 0x40004F6;
    #[prost(double, tag = "7")]
    pub total_damage: f64,
    /// Token: 0x40004F8;
    #[prost(double, tag = "8")]
    pub total_heal: f64,
    /// Token: 0x40004FA;
    #[prost(double, tag = "9")]
    pub total_damage_taken: f64,
    /// Token: 0x40004FC;
    #[prost(double, tag = "10")]
    pub total_stance_damage_taken: f64,
    /// Token: 0x40004FE;
    #[prost(double, tag = "11")]
    pub total_hp_recover: f64,
    /// Token: 0x4000500;
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
    /// Token: 0x4000502;
    #[prost(uint32, tag = "13")]
    pub battle_id: u32,
    /// Token: 0x4000504;
    #[prost(uint32, tag = "14")]
    pub monster_type: u32,
    /// Token: 0x4000506;
    #[prost(message, repeated, tag = "15")]
    pub attack_type_damage: ::prost::alloc::vec::Vec<AttackDamageProperty>,
    /// Token: 0x4000509;
    #[prost(message, repeated, tag = "16")]
    pub skill_times: ::prost::alloc::vec::Vec<SkillUseProperty>,
    /// Token: 0x400050C;
    #[prost(uint32, tag = "17")]
    pub stage_type: u32,
    /// Token: 0x400050E;
    #[prost(double, tag = "18")]
    pub total_break_damage_taken: f64,
    /// Token: 0x4000510;
    #[prost(double, tag = "19")]
    pub delay_cumulate: f64,
    /// Token: 0x4000512;
    #[prost(enumeration = "DeathSource", tag = "20")]
    pub death_source: i32,
    /// Token: 0x4000514;
    #[prost(uint32, tag = "21")]
    pub wave: u32,
    /// Token: 0x4000516;
    #[prost(int32, tag = "22")]
    pub index_in_wave: i32,
    /// Token: 0x4000518;
    #[prost(uint32, tag = "23")]
    pub phase: u32,
    /// Token: 0x400051A;
    #[prost(uint32, tag = "24")]
    pub max_phase: u32,
    #[prost(message, repeated, tag = "26")]
    pub hhapkchnbea: ::prost::alloc::vec::Vec<Llnhnhhlcip>,
    #[prost(uint32, tag = "27")]
    pub dpmoonnbhaf: u32,
    #[prost(message, repeated, tag = "28")]
    pub egngccehkaj: ::prost::alloc::vec::Vec<Kdofgnnbigl>,
    #[prost(uint32, tag = "29")]
    pub eopdilcmffl: u32,
    #[prost(uint32, tag = "30")]
    pub anahoapange: u32,
    #[prost(enumeration = "Cmhfgepjlfl", tag = "31")]
    pub leffngnjgkg: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chcjbneicfa {
    #[prost(message, optional, tag = "2")]
    pub sp: ::core::option::Option<SpProgress>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pldmljcickk {
    #[prost(uint32, tag = "1")]
    pub ghhnoefibke: u32,
    #[prost(message, optional, tag = "2")]
    pub status: ::core::option::Option<Chcjbneicfa>,
    #[prost(message, repeated, tag = "3")]
    pub hhapkchnbea: ::prost::alloc::vec::Vec<Llnhnhhlcip>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfgemgamfma {
    #[prost(uint32, tag = "1")]
    pub jcjkjhddkcf: u32,
    #[prost(uint32, tag = "2")]
    pub lpgaoolbbfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dllfnlcjiaa {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub ilcjbmhadch: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub gnfpnbgacdf: u32,
    #[prost(double, tag = "4")]
    pub ohfcbnkchlo: f64,
    #[prost(uint32, repeated, tag = "5")]
    pub fgecaendmjj: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "6")]
    pub nhfpnkffjgf: i32,
    #[prost(double, tag = "7")]
    pub hadlfdifcal: f64,
    #[prost(uint32, tag = "8")]
    pub caomnkckhhk: u32,
    #[prost(uint32, tag = "9")]
    pub wave: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eceobeagdad {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(int32, tag = "2")]
    pub gnhadjpljbo: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbbhaaodpgl {
    #[prost(uint32, tag = "1")]
    pub eijiiekodce: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
    #[prost(message, repeated, tag = "3")]
    pub ngcppmnflba: ::prost::alloc::vec::Vec<Eceobeagdad>,
    #[prost(uint32, tag = "4")]
    pub nkgnnpndkfj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hllmbjmbieh {
    #[prost(enumeration = "Lbbkaebelpp", tag = "1")]
    pub slot: i32,
    #[prost(uint32, tag = "2")]
    pub iigaapiiddb: u32,
    #[prost(uint32, tag = "3")]
    pub iihookopmmk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjnjilkjjaf {
    #[prost(uint32, tag = "1")]
    pub licjmbbbbpo: u32,
    #[prost(uint32, tag = "2")]
    pub akneacgkoia: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oojccnomfia {
    #[prost(uint32, tag = "1")]
    pub onjeogniggp: u32,
    #[prost(bool, tag = "2")]
    pub kjbihcphcco: bool,
    #[prost(message, optional, tag = "3")]
    pub kncldmlpjec: ::core::option::Option<Jjnjilkjjaf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgbiollmcpi {
    #[prost(uint32, tag = "1")]
    pub pkeohpicjkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildGearDamageInfo {
    #[prost(uint32, tag = "1")]
    pub gear_id: u32,
    #[prost(double, tag = "2")]
    pub damage: f64,
    #[prost(double, tag = "3")]
    pub hp_damage: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Joiiobnkcbh {
    #[prost(uint32, repeated, tag = "1")]
    pub mgemlbmpcgb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjfmcnckmgd {
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(uint32, tag = "2")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "3")]
    pub ndkkogolmal: u32,
    #[prost(message, repeated, tag = "4")]
    pub mmegdkinbcn: ::prost::alloc::vec::Vec<Jjnjilkjjaf>,
    #[prost(float, tag = "5")]
    pub nkgnnpndkfj: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghilljbihfa {
    #[prost(uint32, tag = "1")]
    pub jnpdoibnicc: u32,
    #[prost(message, repeated, tag = "2")]
    pub pcnkojjcfie: ::prost::alloc::vec::Vec<Hjfmcnckmgd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildBattleInfo {
    #[prost(uint32, tag = "1")]
    pub cur_level_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_period: u32,
    #[prost(uint32, tag = "3")]
    pub cur_coin: u32,
    #[prost(message, repeated, tag = "4")]
    pub weapon_slot_list: ::prost::alloc::vec::Vec<Oojccnomfia>,
    #[prost(message, repeated, tag = "5")]
    pub accessory_slot_list: ::prost::alloc::vec::Vec<Oojccnomfia>,
    #[prost(uint32, repeated, tag = "6")]
    pub ban_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "7")]
    pub collection: ::core::option::Option<Joiiobnkcbh>,
    #[prost(uint32, repeated, tag = "8")]
    pub allowed_gear_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub cur_exp: u32,
    #[prost(uint32, tag = "10")]
    pub cur_reroll: u32,
    #[prost(uint32, tag = "11")]
    pub cur_treasure_miss_cnt: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub cur_gear_lost_cnt: u32,
    #[prost(uint32, tag = "14")]
    pub cur_wave: u32,
    #[prost(bool, tag = "15")]
    pub is_unlock_gear_reroll: bool,
    #[prost(bool, tag = "16")]
    pub is_unlock_gear_ban: bool,
    #[prost(message, repeated, tag = "17")]
    pub card_list: ::prost::alloc::vec::Vec<Fgbiollmcpi>,
    #[prost(message, repeated, tag = "18")]
    pub gear_damage_list: ::prost::alloc::vec::Vec<EvolveBuildGearDamageInfo>,
    #[prost(uint32, repeated, tag = "19")]
    pub stat_params: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "20")]
    pub is_giveup: bool,
    #[prost(uint32, tag = "21")]
    pub cur_unused_round_cnt: u32,
    #[prost(message, optional, tag = "22")]
    pub stat_log_info: ::core::option::Option<Ghilljbihfa>,
    #[prost(uint32, tag = "23")]
    pub period_first_random_seed: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmnnafiaafp {
    #[prost(string, tag = "1")]
    pub djemibiamha: ::prost::alloc::string::String,
    #[prost(float, tag = "2")]
    pub mjlbfjkonhd: f32,
    #[prost(float, tag = "3")]
    pub amabfdlohmk: f32,
    #[prost(uint32, tag = "4")]
    pub iedlbcpkgon: u32,
    #[prost(uint32, tag = "5")]
    pub hdccniamncp: u32,
    #[prost(uint32, tag = "6")]
    pub lbbhinoknng: u32,
    #[prost(uint32, tag = "7")]
    pub ndembhkchba: u32,
    #[prost(uint32, tag = "8")]
    pub bkihfdilonh: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub ajcndmbmimb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub cmdpbhlgmeo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnegdknfdfj {
    #[prost(uint32, tag = "1")]
    pub enihajmdhhp: u32,
    #[prost(uint32, tag = "2")]
    pub kccnlbdlima: u32,
    #[prost(uint32, tag = "3")]
    pub pjhcepapfoo: u32,
    #[prost(uint32, tag = "4")]
    pub lohcjdhdnlp: u32,
    #[prost(uint32, tag = "5")]
    pub kgfmdacaapm: u32,
    #[prost(uint32, tag = "6")]
    pub khnnhomamnn: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub mbknfpcaghc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub ifphmbnpcec: ::prost::alloc::vec::Vec<Lmnnafiaafp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfhlelkfecd {
    #[prost(uint32, tag = "1")]
    pub wave: u32,
    #[prost(double, tag = "2")]
    pub pfggnfbgjef: f64,
    #[prost(double, tag = "3")]
    pub njmdeogblko: f64,
    #[prost(uint32, tag = "4")]
    pub dbooppgpefo: u32,
    #[prost(uint32, tag = "5")]
    pub ekfilfopihm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkdalpnlnpp {
    #[prost(string, tag = "1")]
    pub pfmlckgckob: ::prost::alloc::string::String,
    #[prost(double, tag = "2")]
    pub value: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogchmgibmee {
    #[prost(uint32, tag = "1")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub dbopmmcclja: u32,
    #[prost(uint32, tag = "3")]
    pub dbooppgpefo: u32,
    #[prost(uint32, tag = "4")]
    pub ekfilfopihm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iehmgigdfgi {
    #[prost(uint32, tag = "1")]
    pub mmeaphlkfnh: u32,
    #[prost(double, tag = "2")]
    pub lpgejjgcjfi: f64,
    #[prost(double, tag = "3")]
    pub ialkcegdpoj: f64,
    #[prost(uint32, tag = "4")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub dbopmmcclja: u32,
    #[prost(double, tag = "6")]
    pub ncmmbhpfmpp: f64,
    #[prost(double, tag = "7")]
    pub mkdomgoogbd: f64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijbeafbgipi {
    #[prost(uint32, tag = "1")]
    pub pgonjaacafm: u32,
    #[prost(uint32, tag = "2")]
    pub kkhjioepbpb: u32,
    #[prost(double, tag = "3")]
    pub dcgodnihhph: f64,
    #[prost(uint32, tag = "4")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub dbopmmcclja: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilomdgdoidb {
    #[prost(message, repeated, tag = "1")]
    pub afcpodfhplf: ::prost::alloc::vec::Vec<Ogchmgibmee>,
    #[prost(message, repeated, tag = "2")]
    pub llpagigkmdd: ::prost::alloc::vec::Vec<Iehmgigdfgi>,
    #[prost(message, repeated, tag = "3")]
    pub hfojdfpnied: ::prost::alloc::vec::Vec<Ijbeafbgipi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpconokhbfi {
    #[prost(message, optional, tag = "1")]
    pub oadeikogppf: ::core::option::Option<Ilomdgdoidb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleStatistics {
    #[prost(uint32, tag = "1")]
    pub total_battle_turns: u32,
    #[prost(uint32, tag = "2")]
    pub total_auto_turns: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub ultra_cnt: u32,
    #[prost(double, tag = "5")]
    pub total_delay_cumulate: f64,
    #[prost(double, tag = "6")]
    pub cost_time: f64,
    #[prost(message, repeated, tag = "7")]
    pub onjclkidofe: ::prost::alloc::vec::Vec<AvatarBattleInfo>,
    #[prost(message, repeated, tag = "8")]
    pub monster_battle_list: ::prost::alloc::vec::Vec<MonsterBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub round_cnt: u32,
    #[prost(uint32, tag = "10")]
    pub cocoon_dead_wave: u32,
    #[prost(uint32, tag = "11")]
    pub avatar_battle_turns: u32,
    #[prost(uint32, tag = "12")]
    pub monster_battle_turns: u32,
    #[prost(map = "string, float", tag = "13")]
    pub custom_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint32, tag = "14")]
    pub challenge_score: u32,
    #[prost(message, repeated, tag = "16")]
    pub gmdmfihphoc: ::prost::alloc::vec::Vec<Pldmljcickk>,
    #[prost(enumeration = "BattleEndReason", tag = "19")]
    pub gflgglklflo: i32,
    #[prost(message, repeated, tag = "21")]
    pub kafhlccjdpe: ::prost::alloc::vec::Vec<Dllfnlcjiaa>,
    #[prost(int32, repeated, tag = "22")]
    pub bkbifgcidje: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "23")]
    pub cbdokccplbl: ::prost::alloc::vec::Vec<Dbbhaaodpgl>,
    #[prost(message, repeated, tag = "26")]
    pub eojhikielja: ::prost::alloc::vec::Vec<Hllmbjmbieh>,
    #[prost(message, repeated, tag = "27")]
    pub gfiihegmnbc: ::prost::alloc::vec::Vec<Njfhjpmofkj>,
    #[prost(map = "uint32, message", tag = "28")]
    pub pkilellljap: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(message, repeated, tag = "29")]
    pub lepkomadmba: ::prost::alloc::vec::Vec<Mofdljpgdjc>,
    #[prost(message, optional, tag = "30")]
    pub bcilaimkepo: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, optional, tag = "31")]
    pub eebjfpdkkla: ::core::option::Option<Jnegdknfdfj>,
    #[prost(bool, tag = "32")]
    pub ckopikjmnno: bool,
    #[prost(message, repeated, tag = "33")]
    pub pcnkojjcfie: ::prost::alloc::vec::Vec<Gfhlelkfecd>,
    #[prost(message, repeated, tag = "34")]
    pub gccpcejdpgf: ::prost::alloc::vec::Vec<Fkdalpnlnpp>,
    #[prost(uint32, tag = "35")]
    pub bfjbhggehfp: u32,
    #[prost(message, optional, tag = "37")]
    pub fmloeohebom: ::core::option::Option<Mpconokhbfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mofdljpgdjc {
    #[prost(uint32, tag = "1")]
    pub lhbdodgndmj: u32,
    #[prost(uint32, tag = "2")]
    pub ealjhgebino: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njfhjpmofkj {
    #[prost(enumeration = "Gkaagdjgcjj", tag = "1")]
    pub slot: i32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(message, optional, tag = "3")]
    pub sp: ::core::option::Option<SpProgress>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egfppaehfmb {
    #[prost(uint32, tag = "1")]
    pub fooekjjlepi: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BattleResult {
    #[prost(enumeration = "BattleCheckResultType", tag = "1")]
    pub retcode: i32,
    #[prost(enumeration = "BattleEndStatus", tag = "2")]
    pub end_status: i32,
    #[prost(message, optional, tag = "3")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(bytes = "vec", tag = "4")]
    pub game_core_log_encode: ::prost::alloc::vec::Vec<u8>,
    #[prost(map = "string, uint32", tag = "5")]
    pub tags: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "6")]
    pub mismatch_turn_count: u32,
    #[prost(uint32, tag = "7")]
    pub liidlgebipm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeeaaeghbcf {
    #[prost(uint32, tag = "1")]
    pub jmfgaemkdao: u32,
    #[prost(uint64, repeated, tag = "2")]
    pub glgkbnnobem: ::prost::alloc::vec::Vec<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhbjccjikld {
    #[prost(string, tag = "1")]
    pub llgkepoegkh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub clkbpijjaap: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dilkchlpoba {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(string, tag = "3")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub nnlodfdobia: u32,
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform: i32,
    #[prost(string, tag = "6")]
    pub meijfajkmmp: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub mjalbnjgfmj: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub version: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhpgipfhpjm {
    #[prost(enumeration = "Eaejedljpgh", tag = "1")]
    pub ipfplgihdbj: i32,
    #[prost(enumeration = "Gienaojphnb", tag = "2")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijbclkbblen {
    #[prost(uint32, tag = "1")]
    pub kkgeojnphcn: u32,
    #[prost(bool, tag = "2")]
    pub icpnclpicnm: bool,
    #[prost(uint32, tag = "3")]
    pub ileodajnnlf: u32,
    #[prost(uint32, tag = "4")]
    pub eehicmneonc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnnkgnfmmll {
    #[prost(string, repeated, tag = "1")]
    pub mjkmfnjeddo: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(bool, tag = "2")]
    pub oommfhnmaci: bool,
    #[prost(message, optional, tag = "1001")]
    pub kpjaichmnce: ::core::option::Option<Ijbclkbblen>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egokacjfaen {
    #[prost(message, optional, tag = "1")]
    pub basic_info: ::core::option::Option<Dilkchlpoba>,
    #[prost(message, optional, tag = "2")]
    pub lhhkllkkgki: ::core::option::Option<Jhpgipfhpjm>,
    #[prost(message, optional, tag = "3")]
    pub akfdaaaiich: ::core::option::Option<Lnnkgnfmmll>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obminlghola {
    #[prost(uint32, tag = "1")]
    pub gkhlagcmbep: u32,
    #[prost(uint32, tag = "2")]
    pub chhlgofkode: u32,
    #[prost(uint32, tag = "3")]
    pub ohendokilbg: u32,
    #[prost(uint32, tag = "4")]
    pub kdldpilbjih: u32,
    #[prost(uint32, tag = "5")]
    pub doppanjiahe: u32,
    #[prost(uint32, tag = "6")]
    pub lgbmfnociof: u32,
    #[prost(uint32, tag = "7")]
    pub pbcfilehadp: u32,
    #[prost(uint32, tag = "8")]
    pub mfkojkldhlg: u32,
    #[prost(uint32, tag = "9")]
    pub ofolhglfdbe: u32,
    #[prost(uint32, tag = "10")]
    pub ohhndhfpidi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfoaahgomic {
    #[prost(uint64, tag = "1")]
    pub ejphmffiidi: u64,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "2")]
    pub cicgmfacfbc: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbbjjfnjnde {
    #[prost(uint64, tag = "1")]
    pub id: u64,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "2")]
    pub kcffnljmjdj: i32,
    #[prost(message, repeated, tag = "3")]
    pub fjifpjhfgdd: ::prost::alloc::vec::Vec<Egokacjfaen>,
    #[prost(enumeration = "Nkbjfdkkbid", tag = "4")]
    pub slot: i32,
    #[prost(uint64, tag = "5")]
    pub pomlpdggdfc: u64,
    #[prost(uint64, tag = "6")]
    pub kiofoicccjm: u64,
    #[prost(uint32, tag = "7")]
    pub mnpddkgcfcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Diiejhpccka {
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub ahbndelkkga: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub mjeboiagemn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goghbjmckpf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iehdhmbibej {
    #[prost(message, repeated, tag = "8")]
    pub pilpgdhcfpj: ::prost::alloc::vec::Vec<Diiejhpccka>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okdbmkchdkn {
    #[prost(uint32, tag = "13")]
    pub ldifpkekjem: u32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgmgmpemfoa {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub ldifpkekjem: u32,
    #[prost(message, optional, tag = "12")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lijpgeadohh {
    #[prost(int64, tag = "9")]
    pub end_time: i64,
    #[prost(uint32, tag = "11")]
    pub fjlnncjahng: u32,
    #[prost(uint32, tag = "12")]
    pub pafpcpmikin: u32,
    #[prost(int64, tag = "5")]
    pub begin_time: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Echeijpcegj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gflgabppabo {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub aodbfcdoebg: ::prost::alloc::vec::Vec<Lijpgeadohh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdkfnmappch {
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(bool, tag = "15")]
    pub nnbeodpchid: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncnchnfkgaa {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ancjfimhcdb {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub nkjbcpmopcj: ::prost::alloc::vec::Vec<Hdkfnmappch>,
    #[prost(uint32, tag = "3")]
    pub npibcfnnihn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjmmamcffan {
    #[prost(message, optional, tag = "1")]
    pub oiflpfmkkjd: ::core::option::Option<Hdkfnmappch>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddjfjiknjjb {
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foolfaejeco {
    #[prost(message, optional, tag = "2")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmjfplfkocb {
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibojkphiodl {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hliiigamfan {
    #[prost(uint32, tag = "12")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iepggioobee {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgpjnoeklme {
    #[prost(uint32, tag = "7")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpnfdalcpca {
    #[prost(uint32, tag = "10")]
    pub stage_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eogebgjmnbe {
    #[prost(enumeration = "Ijngjmooekn", tag = "13")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub npibcfnnihn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eeakpgmghbd {
    #[prost(bool, tag = "7")]
    pub ejihdbnphdl: bool,
    #[prost(uint32, tag = "3")]
    pub fpnbgdmjmon: u32,
    #[prost(uint32, tag = "14")]
    pub fjlnncjahng: u32,
    #[prost(bool, tag = "8")]
    pub mkideamcloh: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnbinnnmhnh {
    #[prost(int64, tag = "2")]
    pub end_time: i64,
    #[prost(int64, tag = "12")]
    pub begin_time: i64,
    #[prost(uint32, tag = "1")]
    pub fpnbgdmjmon: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfhncokdkpc {
    #[prost(uint32, repeated, tag = "9")]
    pub gpngkbfnpjn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbondjmecmi {
    #[prost(message, repeated, tag = "11")]
    pub licjdggocfp: ::prost::alloc::vec::Vec<Jnbinnnmhnh>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub hopdkjbimil: ::prost::alloc::vec::Vec<Eeakpgmghbd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhjnpjibfoj {
    #[prost(uint32, tag = "10")]
    pub fpnbgdmjmon: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojldjlaldbe {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub fpnbgdmjmon: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmckncmeneo {
    #[prost(uint32, tag = "3")]
    pub fpnbgdmjmon: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgnehcjidmd {
    #[prost(uint32, tag = "14")]
    pub fpnbgdmjmon: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiidgcpimha {
    #[prost(uint32, tag = "7")]
    pub lnjapmhfcck: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klfnolgpgbe {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iicgnbgleen {
    #[prost(uint32, tag = "7")]
    pub dopfcokpjei: u32,
    #[prost(int64, tag = "6")]
    pub end_time: i64,
    #[prost(int64, tag = "5")]
    pub begin_time: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpcilhkfijn {
    #[prost(uint32, repeated, tag = "6")]
    pub cdahnimckpe: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbfhaemjbdb {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub ejncilpcmjo: ::prost::alloc::vec::Vec<Iicgnbgleen>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgighfcglnn {
    #[prost(uint32, tag = "9")]
    pub jnmpconhdgp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dngkkjooice {
    #[prost(uint32, tag = "4")]
    pub jnmpconhdgp: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdgedjogkjp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnobihjhmec {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhnkeioipjg {
    #[prost(uint32, tag = "10")]
    pub skill_index: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub ohainjgiflk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub kapkegapokf: ::prost::alloc::vec::Vec<Fnmhaajaaek>,
    #[prost(uint32, tag = "3")]
    pub gbhffcbgjoc: u32,
    #[prost(uint32, tag = "6")]
    pub egofdbhnple: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpedbbbiedb {
    #[prost(uint32, tag = "6")]
    pub gbhffcbgjoc: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ibllilenejp: ::core::option::Option<Dlibcbeoehg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plhgdnknphm {
    #[prost(uint32, tag = "13")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "11")]
    pub cagbdbjkknd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjlahapdbog {
    #[prost(message, optional, tag = "5")]
    pub ibllilenejp: ::core::option::Option<Dlibcbeoehg>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Daclbmikbfi {
    #[prost(uint32, tag = "5")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "9")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Panjkdddido {
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(uint32, tag = "1")]
    pub promotion: u32,
    #[prost(message, optional, tag = "3")]
    pub sp: ::core::option::Option<SpProgress>,
    #[prost(uint32, tag = "2")]
    pub jfckjahhbcp: u32,
    #[prost(uint32, tag = "13")]
    pub bkjidpkfapk: u32,
    #[prost(message, repeated, tag = "10")]
    pub pbcjjbpdaco: ::prost::alloc::vec::Vec<Daclbmikbfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djeclbkkegk {
    #[prost(uint32, repeated, tag = "9")]
    pub doilhmkhjkj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahhnbnjlmgc {
    #[prost(uint32, tag = "10")]
    pub kagnbjdmamf: u32,
    #[prost(uint32, tag = "6")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "7")]
    pub lcmieeegeoh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dojnnbdinke {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnbmpdajjkh {
    #[prost(uint32, tag = "9")]
    pub nllaboenkeb: u32,
    #[prost(uint32, tag = "2")]
    pub pomjmhpaije: u32,
    #[prost(message, repeated, tag = "8")]
    pub habbaannlmg: ::prost::alloc::vec::Vec<Panjkdddido>,
    #[prost(uint32, tag = "1")]
    pub fcbhnhpkbck: u32,
    #[prost(message, repeated, tag = "7")]
    pub lineup_list: ::prost::alloc::vec::Vec<Djeclbkkegk>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub igbnihgbkkc: u32,
    #[prost(message, repeated, tag = "13")]
    pub djmeejmcdfm: ::prost::alloc::vec::Vec<Ahhnbnjlmgc>,
    #[prost(uint32, tag = "6")]
    pub djmfidjhakm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjipjkneplj {
    #[prost(message, optional, tag = "8")]
    pub lineup: ::core::option::Option<Djeclbkkegk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkcmnkoblgi {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<Djeclbkkegk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kknohjjfloa {
    #[prost(uint32, tag = "15")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "1")]
    pub jfckjahhbcp: u32,
    #[prost(uint32, tag = "10")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emfbdoapndp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub nlpkicoldah: ::core::option::Option<Ahhnbnjlmgc>,
    #[prost(message, optional, tag = "9")]
    pub ifflhdajmfl: ::core::option::Option<Panjkdddido>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blikhfgpooe {
    #[prost(uint32, tag = "7")]
    pub jfckjahhbcp: u32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhocaolkmof {
    #[prost(message, optional, tag = "5")]
    pub nlpkicoldah: ::core::option::Option<Ahhnbnjlmgc>,
    #[prost(message, optional, tag = "11")]
    pub ifflhdajmfl: ::core::option::Option<Panjkdddido>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjamedhohel {
    #[prost(uint32, tag = "2")]
    pub deimfkdnmfd: u32,
    #[prost(uint32, tag = "14")]
    pub jfckjahhbcp: u32,
    #[prost(uint32, tag = "7")]
    pub igbnihgbkkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmbpnklhbjm {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub igbnihgbkkc: u32,
    #[prost(message, optional, tag = "14")]
    pub ifflhdajmfl: ::core::option::Option<Panjkdddido>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nonalgbapfh {
    #[prost(uint32, tag = "4")]
    pub cagbdbjkknd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjenopmgncf {
    #[prost(uint32, tag = "2")]
    pub cagbdbjkknd: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cllelklhkol {
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eapddobkofp {
    #[prost(message, optional, tag = "15")]
    pub ibllilenejp: ::core::option::Option<Dlibcbeoehg>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdelimjibne {
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<Djeclbkkegk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imhegmolifk {
    #[prost(message, optional, tag = "3")]
    pub ifflhdajmfl: ::core::option::Option<Panjkdddido>,
    #[prost(message, repeated, tag = "13")]
    pub klcbbgahmon: ::prost::alloc::vec::Vec<Panjkdddido>,
    #[prost(uint32, tag = "12")]
    pub igbnihgbkkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iepaafhgkkh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Comcfkpmacm {
    #[prost(uint32, repeated, tag = "6")]
    pub bapkilajgne: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub gjonbpebope: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub caaogbkeibf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oafokgigjif {
    #[prost(uint32, tag = "11")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekpogeffanm {
    #[prost(uint32, tag = "1")]
    pub fcbhnhpkbck: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dliphlmaege {
    #[prost(uint32, tag = "11")]
    pub kagnbjdmamf: u32,
    #[prost(uint32, tag = "2")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nimfecemimn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdelhifcdfi {
    #[prost(uint32, tag = "14")]
    pub nllaboenkeb: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eachgfoknhm {
    #[prost(uint32, tag = "12")]
    pub nllaboenkeb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ciimogjledo {
    #[prost(uint32, tag = "1")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dknombpgohe {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Loapiplimjn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohjhhhgpcgg {
    #[prost(uint32, tag = "14")]
    pub fkbknefjpko: u32,
    #[prost(uint32, tag = "12")]
    pub lnjapmhfcck: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hejgfgdhldh {
    #[prost(uint32, tag = "12")]
    pub fgohomljegm: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icfmgfdlfbf {
    #[prost(message, repeated, tag = "15")]
    pub pkmpinidbem: ::prost::alloc::vec::Vec<LogisticsScore>,
    #[prost(message, repeated, tag = "13")]
    pub kgphnjjjfjh: ::prost::alloc::vec::Vec<Ohjhhhgpcgg>,
    #[prost(message, repeated, tag = "8")]
    pub jfmgicmieni: ::prost::alloc::vec::Vec<Kcjbohglbkg>,
    #[prost(uint32, repeated, tag = "9")]
    pub mnbhmefmgck: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beljfmihinc {
    #[prost(uint32, tag = "6")]
    pub nndnjlaloij: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub ikifmbckbhe: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub fkpnjjecflg: ::core::option::Option<Icfmgfdlfbf>,
    #[prost(message, repeated, tag = "14")]
    pub llhoijjnhbc: ::prost::alloc::vec::Vec<Dooingjidio>,
    #[prost(map = "uint32, uint32", tag = "8")]
    pub ndjkkklopgp: ::std::collections::HashMap<u32, u32>,
    #[prost(message, optional, tag = "2")]
    pub hifdompfogo: ::core::option::Option<Hladmhdfejp>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub njhmoljoand: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub doglnbjjbnn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "3")]
    pub iaagjjojjng: ::core::option::Option<Mdagbigodjh>,
    #[prost(uint32, repeated, tag = "13")]
    pub hjigclklgic: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fadlnhgpedm {
    #[prost(uint32, tag = "10")]
    pub idmndadbjbj: u32,
    #[prost(uint32, tag = "2")]
    pub ihiffnbnoma: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgpnljgebli {
    #[prost(uint32, tag = "4")]
    pub ififlmjnmdk: u32,
    #[prost(message, repeated, tag = "10")]
    pub glhlojgnlbf: ::prost::alloc::vec::Vec<Fadlnhgpedm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AlleyPlacingShip {
    #[prost(message, repeated, tag = "3")]
    pub goods_list: ::prost::alloc::vec::Vec<Dgpnljgebli>,
    #[prost(uint32, tag = "13")]
    pub ship_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhjeidcchdm {
    #[prost(uint32, tag = "5")]
    pub melnmeleaof: u32,
    #[prost(message, optional, tag = "2")]
    pub doobkcfngij: ::core::option::Option<AlleyPlacingShip>,
    #[prost(uint32, tag = "11")]
    pub aehccpbhofa: u32,
    #[prost(uint32, tag = "10")]
    pub einjppkhadm: u32,
    #[prost(uint32, tag = "4")]
    pub jojofajfiaa: u32,
    #[prost(uint32, tag = "13")]
    pub ifgaoheijdh: u32,
    #[prost(uint32, tag = "14")]
    pub mknfiokmpkc: u32,
    #[prost(uint32, tag = "8")]
    pub cost_time: u32,
    #[prost(uint32, tag = "9")]
    pub pcdbbpgcjnd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pikdnogokln {
    #[prost(uint32, tag = "15")]
    pub jfonlmmohcn: u32,
    #[prost(uint32, tag = "4")]
    pub jljeangppkc: u32,
    #[prost(uint32, tag = "12")]
    pub event_id: u32,
    #[prost(uint32, tag = "10")]
    pub pamdbajlfcl: u32,
    #[prost(uint32, tag = "3")]
    pub dcoihiogahc: u32,
    #[prost(uint32, tag = "8")]
    pub joeakofeomk: u32,
    #[prost(uint32, tag = "1")]
    pub obegnholjba: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocmgldjcfji {
    #[prost(message, optional, tag = "15")]
    pub doobkcfngij: ::core::option::Option<AlleyPlacingShip>,
    #[prost(uint32, tag = "8")]
    pub ninapcangoo: u32,
    #[prost(uint32, tag = "7")]
    pub melnmeleaof: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebpbcjefmgm {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub ninapcangoo: u32,
    #[prost(uint32, tag = "9")]
    pub melnmeleaof: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hladmhdfejp {
    #[prost(uint32, tag = "13")]
    pub cafjmafcfoe: u32,
    #[prost(uint32, tag = "4")]
    pub akcnolgdkfn: u32,
    #[prost(bool, tag = "10")]
    pub hklljapbdgp: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub opnlgkllekk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub jgcckagocaa: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub aofhdgapibo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gomcgdopbbp {
    #[prost(message, optional, tag = "3")]
    pub aehfkplienl: ::core::option::Option<Hladmhdfejp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cchhoggfaan {
    #[prost(uint32, tag = "5")]
    pub locobbjbeoj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgapkkdbooj {
    #[prost(uint32, repeated, tag = "6")]
    pub ofoaoamacnm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub cjologpmmfj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub mlfjgaifmhg: u32,
    #[prost(uint32, tag = "4")]
    pub oeeplaejecp: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub gonbjnkpphb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub fgohomljegm: u32,
    #[prost(uint32, tag = "11")]
    pub dfejfmhieaj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcjbohglbkg {
    #[prost(uint32, tag = "8")]
    pub cost_time: u32,
    #[prost(uint32, tag = "10")]
    pub lnjapmhfcck: u32,
    #[prost(message, repeated, tag = "7")]
    pub cniofkimkih: ::prost::alloc::vec::Vec<Hgapkkdbooj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LogisticsScore {
    #[prost(uint32, tag = "4")]
    pub cur_score: u32,
    #[prost(uint32, tag = "15")]
    pub unlock_level: u32,
    #[prost(message, optional, tag = "6")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub last_level: u32,
    #[prost(uint32, tag = "3")]
    pub last_max_score: u32,
    #[prost(uint32, tag = "13")]
    pub map_id: u32,
    #[prost(uint32, tag = "2")]
    pub max_score: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cblobpbbioh {
    #[prost(bool, tag = "5")]
    pub gfiadoibado: bool,
    #[prost(message, repeated, tag = "11")]
    pub ffabaoopmam: ::prost::alloc::vec::Vec<Kcjbohglbkg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jinedikcnpg {
    #[prost(message, repeated, tag = "13")]
    pub pkmpinidbem: ::prost::alloc::vec::Vec<LogisticsScore>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icegdbgdilo {
    #[prost(message, repeated, tag = "3")]
    pub pkmpinidbem: ::prost::alloc::vec::Vec<LogisticsScore>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(bool, tag = "9")]
    pub gfiadoibado: bool,
    #[prost(uint32, tag = "6")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dooingjidio {
    #[prost(enumeration = "Hadkcbmomck", tag = "13")]
    pub state: i32,
    #[prost(uint32, tag = "5")]
    pub event_id: u32,
    #[prost(uint32, tag = "2")]
    pub lfofmmafena: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpdpdkgmoem {
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jemgejfhlea {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hemiegnodli {
    #[prost(uint32, tag = "7")]
    pub liabblpojlg: u32,
    #[prost(message, optional, tag = "1")]
    pub aeajedehfdj: ::core::option::Option<Dooingjidio>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbclchmkfof {
    #[prost(uint32, tag = "14")]
    pub gnmibkehipe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fipfnjdahae {
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Neiehjicaab {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiokkgmgdhi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdgmddbhlhm {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agbibfofjhe {
    #[prost(uint32, tag = "6")]
    pub njhmoljoand: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aiacifopgjh {
    #[prost(message, repeated, tag = "12")]
    pub ffabaoopmam: ::prost::alloc::vec::Vec<Kcjbohglbkg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofpielcbnie {
    #[prost(message, repeated, tag = "12")]
    pub ffabaoopmam: ::prost::alloc::vec::Vec<Kcjbohglbkg>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fleomlhekmb {
    #[prost(message, optional, tag = "4")]
    pub fkpnjjecflg: ::core::option::Option<Icfmgfdlfbf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdagbigodjh {
    #[prost(uint32, tag = "8")]
    pub idliicjndbe: u32,
    #[prost(map = "uint32, uint32", tag = "6")]
    pub ifcilmngdbd: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "2")]
    pub fggaonkbpcf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Didlmcoobee {
    #[prost(message, optional, tag = "15")]
    pub mfgpjihdebb: ::core::option::Option<Mdagbigodjh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kojkhmpimdb {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nalpogbfcld {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub jfmgicmieni: ::prost::alloc::vec::Vec<Kcjbohglbkg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnllbbflcmp {
    #[prost(map = "uint32, uint32", tag = "12")]
    pub ndjkkklopgp: ::std::collections::HashMap<u32, u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gecmagkkaih {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eienjkdigbh {
    #[prost(uint32, tag = "2")]
    pub pfjnehlmhpn: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iohkbhphefg {
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haoeobccick {
    #[prost(message, optional, tag = "15")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inoillgmnli {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihjgeegflgi {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahegmfopalb {
    #[prost(uint32, tag = "3")]
    pub peehdpfeeoo: u32,
    #[prost(uint32, tag = "8")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djckakhhhng {
    #[prost(uint32, tag = "9")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArchiveData {
    #[prost(message, repeated, tag = "2")]
    pub oljfbmbjkhk: ::prost::alloc::vec::Vec<Ahegmfopalb>,
    #[prost(message, repeated, tag = "5")]
    pub gbgamckgokf: ::prost::alloc::vec::Vec<Djckakhhhng>,
    #[prost(uint32, repeated, tag = "12")]
    pub fidmcoeiklh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub kbmoknknjod: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub apfenmjpknc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Monllamhagk {}
/// PALEFBFKMMF OR GetArchiveDataScRsp
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetArchiveDataScRsp {
    #[prost(message, optional, tag = "3")]
    pub dbmehhgkijj: ::core::option::Option<ArchiveData>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhpjpmkfmkk {}
/// LLCHDBDLJIL OR GetArchiveDataScRsp
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llchdbdljil {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub dbmehhgkijj: ::core::option::Option<ArchiveData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataCsReq {
    #[prost(uint32, repeated, tag = "1")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "3")]
    pub is_get_all: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EquipRelic {
    #[prost(uint32, tag = "13")]
    pub relic_unique_id: u32,
    #[prost(uint32, tag = "9")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Avatar {
    #[prost(uint32, tag = "15")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub equipment_unique_id: u32,
    #[prost(message, repeated, tag = "2")]
    pub equip_relic_list: ::prost::alloc::vec::Vec<EquipRelic>,
    #[prost(message, repeated, tag = "14")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint64, tag = "4")]
    pub mcoghhfmpdo: u64,
    #[prost(uint32, tag = "13")]
    pub rank: u32,
    #[prost(uint32, tag = "8")]
    pub nknepgafjhl: u32,
    #[prost(bool, tag = "6")]
    pub bhfagdddack: bool,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "9")]
    pub promotion: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub has_taken_reward_level_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAvatarDataScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub cibnempfije: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "4")]
    pub is_all: bool,
    #[prost(message, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aecnomadcjh {
    #[prost(message, optional, tag = "4")]
    pub loibeelnjih: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpnomfffpdc {
    #[prost(message, repeated, tag = "11")]
    pub hdolepooefa: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpbljmklimk {
    #[prost(message, repeated, tag = "15")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<ItemCost>,
    #[prost(uint32, tag = "10")]
    pub point_id: u32,
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lokkkoegcel {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub point_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgallhinmcg {
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
    #[prost(message, repeated, tag = "6")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<ItemCost>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiegpcndglm {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbakagckfoj {
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "7")]
    pub equipment_unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijcahocdgaf {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adgdhlnhjbo {
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpifpmeobhn {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hplmogikbmg {
    #[prost(message, optional, tag = "13")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "11")]
    pub kollpgccdil: bool,
    #[prost(uint32, tag = "6")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "AddAvatarSrc", tag = "14")]
    pub mmjnpopdfbd: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Encpolfcbdh {
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "6")]
    pub rank: u32,
    #[prost(message, optional, tag = "8")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lalbonaknbj {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lihdafanjjb {
    #[prost(uint32, tag = "6")]
    pub glibnobaaec: u32,
    #[prost(uint32, tag = "5")]
    pub relic_unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnmdebbkhno {
    #[prost(uint32, tag = "15")]
    pub avatar_id: u32,
    #[prost(message, repeated, tag = "13")]
    pub jancobnhdgd: ::prost::alloc::vec::Vec<Lihdafanjjb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kangfjjbiof {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Loekhbimbge {
    #[prost(uint32, repeated, tag = "15")]
    pub meifmmgjlpe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piacfnkpnfl {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhfgooafpmn {
    #[prost(uint32, tag = "1")]
    pub promotion: u32,
    #[prost(uint32, tag = "2")]
    pub base_avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilpkijpmbem {
    #[prost(message, optional, tag = "9")]
    pub dekonpmjeen: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hipenifkepd {
    #[prost(uint32, tag = "10")]
    pub ikebgemjjdh: u32,
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pncgiifooab {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agbmkannnln {
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iekgcdbdjcb {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkgenbbckgd {
    #[prost(uint32, tag = "12")]
    pub ikebgemjjdh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cefjkkokjgm {
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(bool, tag = "3")]
    pub bhfagdddack: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpfokchobkj {
    #[prost(bool, tag = "10")]
    pub bhfagdddack: bool,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultCsReq {
    #[prost(uint32, tag = "5")]
    pub stage_id: u32,
    #[prost(map = "string, uint32", tag = "7")]
    pub npgbkdmfjjh: ::std::collections::HashMap<::prost::alloc::string::String, u32>,
    #[prost(uint32, tag = "13")]
    pub cost_time: u32,
    #[prost(uint32, tag = "14")]
    pub pafnmmndegp: u32,
    #[prost(uint32, tag = "4")]
    pub hfgoninpkpp: u32,
    #[prost(bool, tag = "15")]
    pub is_auto_fight: bool,
    #[prost(enumeration = "BattleEndStatus", tag = "1")]
    pub end_status: i32,
    #[prost(bytes = "vec", tag = "8")]
    pub turn_snapshot_hash: ::prost::alloc::vec::Vec<u8>,
    #[prost(message, optional, tag = "12")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(bool, tag = "2")]
    pub is_ai_consider_ultra_skill: bool,
    #[prost(uint32, tag = "9")]
    pub battle_id: u32,
    #[prost(bool, tag = "3")]
    pub eeadhljcghf: bool,
    #[prost(string, tag = "11")]
    pub clhgagmlpgk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub hcgjomkbloh: u32,
    #[prost(message, repeated, tag = "6")]
    pub op_list: ::prost::alloc::vec::Vec<BattleOp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PveBattleResultScRsp {
    #[prost(bool, tag = "4")]
    pub oomdpegblgd: bool,
    #[prost(message, repeated, tag = "7")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(uint32, tag = "14")]
    pub mismatch_turn_count: u32,
    #[prost(string, tag = "12")]
    pub pgocjkihbbe: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
    #[prost(uint32, tag = "6")]
    pub battle_id: u32,
    #[prost(uint32, tag = "13")]
    pub glplpadhfpd: u32,
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
    #[prost(message, optional, tag = "5")]
    pub mlnnahkhdjm: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub eahkgakocfi: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "73")]
    pub cbilddggofb: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "8")]
    pub acpoidmpoae: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub gndhohdfcaj: u32,
    #[prost(string, tag = "10")]
    pub afpcepepdbn: ::prost::alloc::string::String,
    #[prost(enumeration = "BattleEndStatus", tag = "2")]
    pub end_status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijgbbedmofi {
    #[prost(message, optional, tag = "11")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(enumeration = "Camlhbegnmo", tag = "7")]
    pub nnpfabenejo: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cobbpkkomfl {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkkpikecajo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbflmfphidd {
    #[prost(message, optional, tag = "12")]
    pub ipnlaoiegjo: ::core::option::Option<Dlibcbeoehg>,
    #[prost(uint32, tag = "3")]
    pub nlkgekahldd: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(enumeration = "BattleEndStatus", tag = "5")]
    pub hcnfeokapob: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcakjakjjom {
    #[prost(uint32, tag = "7")]
    pub hcgjomkbloh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkabhpeeggp {
    #[prost(uint32, tag = "3")]
    pub hcgjomkbloh: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjkiphnkgdp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldnjbhdlmmg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnnpfbnehhf {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(bool, tag = "13")]
    pub inhkilleipi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjhmgepebdo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jomaaeonbkl {
    #[prost(bool, tag = "4")]
    pub anhhbjmpmnl: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgckhgkoldc {
    #[prost(message, optional, tag = "5")]
    pub stt: ::core::option::Option<BattleStatistics>,
    #[prost(enumeration = "Camlhbegnmo", tag = "10")]
    pub nnpfabenejo: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fapaimaejep {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdboegaepjc {
    #[prost(uint32, tag = "14")]
    pub opmjfaoockc: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub njicdmlcfel: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Peakflfemij {
    #[prost(uint32, tag = "5")]
    pub opmjfaoockc: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub njicdmlcfel: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piohfiefgli {
    #[prost(uint32, tag = "9")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gilcdginico {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glllkpaohkp {
    #[prost(uint64, tag = "5")]
    pub hfimlipbgjj: u64,
    #[prost(uint64, tag = "15")]
    pub odfppnaaaha: u64,
    #[prost(uint64, tag = "7")]
    pub doelnfpchgj: u64,
    #[prost(uint64, tag = "12")]
    pub ofkndpopolb: u64,
    #[prost(uint64, tag = "6")]
    pub ifhjejgkkii: u64,
    #[prost(uint64, tag = "3")]
    pub bflofpnhhbe: u64,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub negckedpalm: u32,
    #[prost(uint32, tag = "4")]
    pub exp: u32,
    #[prost(uint64, tag = "11")]
    pub mlcjknjonla: u64,
    #[prost(enumeration = "Lhcilpbmhdj", tag = "13")]
    pub hjaacgfhkeh: i32,
    #[prost(uint64, tag = "8")]
    pub eigfdpnbaib: u64,
    #[prost(uint32, tag = "14")]
    pub ikphhdkihnl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igfohhehkfi {
    #[prost(enumeration = "Bbfkmccgbef", tag = "9")]
    pub slot: i32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub apbdbeabddj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgglkpbaipp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jakmhbhfbom {
    #[prost(uint32, tag = "2")]
    pub dnafdalifpp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojleilicgce {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OptionalReward {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub optional_reward_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djpcigjcohb {
    #[prost(message, repeated, tag = "13")]
    pub eeoepeflnib: ::prost::alloc::vec::Vec<OptionalReward>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnndbijgjig {
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjdaenekphc {
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddlbgkgfefc {
    #[prost(uint32, tag = "14")]
    pub gelihlenpmn: u32,
    #[prost(message, repeated, tag = "15")]
    pub lcpkdabedpe: ::prost::alloc::vec::Vec<Kjdaenekphc>,
    #[prost(uint32, tag = "12")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "6")]
    pub ngibpgbbhbb: u32,
    #[prost(uint32, tag = "13")]
    pub dejlogoemeb: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "3")]
    pub aanccmiilfi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub jhcijabbjdd: u32,
    #[prost(bool, tag = "7")]
    pub pokejdagclb: bool,
    #[prost(uint32, tag = "1")]
    pub hdonjgpeieg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kogajoogclp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mppfhakefln {
    #[prost(message, repeated, tag = "1")]
    pub cjbdijhedpo: ::prost::alloc::vec::Vec<Ddlbgkgfefc>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlhocmdjnel {
    #[prost(enumeration = "AvatarType", tag = "13")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjngkchibgi {
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "14")]
    pub lcpkdabedpe: ::prost::alloc::vec::Vec<Mlhocmdjnel>,
    #[prost(uint32, tag = "2")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flaecklplkf {
    #[prost(message, optional, tag = "5")]
    pub ocdbilliofd: ::core::option::Option<Ddlbgkgfefc>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aliciecaofg {
    #[prost(uint32, tag = "1")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "10")]
    pub hdonjgpeieg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmonebbpblj {
    #[prost(message, optional, tag = "14")]
    pub ocdbilliofd: ::core::option::Option<Ddlbgkgfefc>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geebeknbjna {
    #[prost(uint32, tag = "1")]
    pub dcpoeimegli: u32,
    #[prost(message, repeated, tag = "5")]
    pub lcpkdabedpe: ::prost::alloc::vec::Vec<Mlhocmdjnel>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekdglijkhoo {
    #[prost(message, optional, tag = "9")]
    pub ocdbilliofd: ::core::option::Option<Ddlbgkgfefc>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flchghojicb {
    #[prost(uint32, tag = "10")]
    pub hehoaaidbbn: u32,
    #[prost(uint32, tag = "7")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fookkgeekfb {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ocdbilliofd: ::core::option::Option<Ddlbgkgfefc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abdgefcecmn {
    #[prost(uint32, tag = "15")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Impmdpaofpk {
    #[prost(uint32, tag = "11")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beldnodphni {
    #[prost(uint32, tag = "3")]
    pub dcpoeimegli: u32,
    #[prost(bool, tag = "7")]
    pub piofaglkghg: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahbkhblnhib {
    #[prost(message, optional, tag = "14")]
    pub ocdbilliofd: ::core::option::Option<Ddlbgkgfefc>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fklbhjaoomk {
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "12")]
    pub mmnebfbnoni: bool,
    #[prost(uint32, tag = "11")]
    pub dejlogoemeb: u32,
    #[prost(uint32, tag = "13")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcklddogipb {
    #[prost(message, optional, tag = "8")]
    pub ocdbilliofd: ::core::option::Option<Ddlbgkgfefc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aelfdiclnkj {
    #[prost(uint32, tag = "9")]
    pub oohfncljbab: u32,
    #[prost(uint32, tag = "1")]
    pub pamafmppefi: u32,
    #[prost(bool, tag = "3")]
    pub acjjpgnpdii: bool,
    #[prost(uint32, tag = "7")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "10")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "2")]
    pub hgmihaljjfa: u32,
    #[prost(message, optional, tag = "5")]
    pub akfdaaaiich: ::core::option::Option<Odmpfgdalba>,
    #[prost(uint32, tag = "6")]
    pub nnbeodpchid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbobcmidndl {
    #[prost(uint64, tag = "3")]
    pub bcoonaoafoo: u64,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmdfdiamoak {
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub jplhmpiafoe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmkeciemdah {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oafififjgec {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub fgoeihnocab: u32,
    #[prost(message, repeated, tag = "2")]
    pub kembjappmba: ::prost::alloc::vec::Vec<Dmdfdiamoak>,
    #[prost(message, repeated, tag = "1")]
    pub cjbdijhedpo: ::prost::alloc::vec::Vec<Aelfdiclnkj>,
    #[prost(message, repeated, tag = "14")]
    pub bpmldkchbeg: ::prost::alloc::vec::Vec<Gbobcmidndl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohfljdcpecn {
    #[prost(uint32, tag = "13")]
    pub ifckabbiilb: u32,
    #[prost(uint32, tag = "2")]
    pub bopehbonhll: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oaflmpicpnm {
    #[prost(uint32, tag = "3")]
    pub ifckabbiilb: u32,
    #[prost(uint32, tag = "10")]
    pub bopehbonhll: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhoiohjgali {
    #[prost(message, optional, tag = "7")]
    pub ekglbfofkkd: ::core::option::Option<Ohfljdcpecn>,
    #[prost(message, optional, tag = "8")]
    pub mbknfpcaghc: ::core::option::Option<Oaflmpicpnm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmeoceelold {
    #[prost(uint32, tag = "12")]
    pub dcpoeimegli: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub bddkedmgijc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub fkieaedpfgi: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "2")]
    pub akfdaaaiich: ::core::option::Option<Bhoiohjgali>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maobdckbobc {
    #[prost(message, optional, tag = "8")]
    pub ggjjigjjodm: ::core::option::Option<Acdfcngdkhe>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(message, optional, tag = "15")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "4")]
    pub akfdaaaiich: ::core::option::Option<Odmpfgdalba>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hacocboddac {
    #[prost(uint32, tag = "12")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "10")]
    pub dcpoeimegli: u32,
    #[prost(bool, tag = "4")]
    pub ffobdiljlbp: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjeeompliao {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "6")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub ggjjigjjodm: ::core::option::Option<Acdfcngdkhe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfiiknkcjmf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiajnnddmdd {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldlkkfajcdc {
    #[prost(uint32, tag = "7")]
    pub fgoeihnocab: u32,
    #[prost(uint32, tag = "12")]
    pub oohfncljbab: u32,
    #[prost(message, optional, tag = "10")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub pamafmppefi: u32,
    #[prost(uint32, tag = "5")]
    pub dcpoeimegli: u32,
    #[prost(bool, tag = "4")]
    pub mmnebfbnoni: bool,
    #[prost(uint32, repeated, tag = "6")]
    pub mlafjaohnmf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub oadpmnmpcjl: u32,
    #[prost(message, optional, tag = "11")]
    pub nfkimondhio: ::core::option::Option<Dmdfdiamoak>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpefjfdabmm {
    #[prost(uint32, tag = "1")]
    pub emkljnkkgmg: u32,
    #[prost(uint32, tag = "2")]
    pub monster_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmipieeojnc {
    #[prost(uint32, repeated, tag = "1")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcmlopfaobm {
    #[prost(uint32, repeated, tag = "10")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub jjnilbbbmac: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjfmbfoaelh {
    #[prost(message, optional, tag = "9")]
    pub hnekacjplga: ::core::option::Option<Pmipieeojnc>,
    #[prost(message, optional, tag = "8")]
    pub bhfcjdajfke: ::core::option::Option<Lcmlopfaobm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acdfcngdkhe {
    #[prost(uint32, tag = "5")]
    pub oohfncljbab: u32,
    #[prost(message, repeated, tag = "10")]
    pub gbgamckgokf: ::prost::alloc::vec::Vec<Dpefjfdabmm>,
    #[prost(uint32, tag = "14")]
    pub lpgaoolbbfm: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "11")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "4")]
    pub dcpoeimegli: u32,
    #[prost(message, optional, tag = "7")]
    pub akfdaaaiich: ::core::option::Option<Bjfmbfoaelh>,
    #[prost(uint32, tag = "13")]
    pub lfjefbdikln: u32,
    #[prost(uint32, tag = "6")]
    pub fphjhbmlogm: u32,
    #[prost(enumeration = "ChallengeStatus", tag = "1")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iblcoiiaigc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Coiegofghdn {
    #[prost(message, optional, tag = "3")]
    pub ggjjigjjodm: ::core::option::Option<Acdfcngdkhe>,
    #[prost(message, repeated, tag = "4")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnagiibkhlh {
    #[prost(enumeration = "ExtraLineupType", tag = "2")]
    pub extra_lineup_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hibdmpkciin {
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpjbamecahp {
    #[prost(message, repeated, tag = "5")]
    pub bodjegpjphj: ::prost::alloc::vec::Vec<Pahjkfkgbop>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pahjkfkgbop {
    #[prost(message, optional, tag = "2")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "13")]
    pub dhlffjdmbig: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khjddbffahk {
    #[prost(uint32, tag = "3")]
    pub hgmihaljjfa: u32,
    #[prost(message, optional, tag = "4")]
    pub pijailpolmf: ::core::option::Option<Npmodmpagii>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imiaeepmcje {
    #[prost(message, optional, tag = "4")]
    pub pijailpolmf: ::core::option::Option<Nhecleammpi>,
    #[prost(uint32, tag = "15")]
    pub hgmihaljjfa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cinndmfnbij {
    #[prost(message, optional, tag = "7")]
    pub pijailpolmf: ::core::option::Option<Adfmfjbomfm>,
    #[prost(uint32, tag = "12")]
    pub hgmihaljjfa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npmodmpagii {
    #[prost(message, repeated, tag = "12")]
    pub lineup_list: ::prost::alloc::vec::Vec<Mdhdfopebgl>,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub lfjefbdikln: u32,
    #[prost(uint32, tag = "2")]
    pub knbgpmdmbkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhecleammpi {
    #[prost(message, repeated, tag = "10")]
    pub lineup_list: ::prost::alloc::vec::Vec<Mdhdfopebgl>,
    #[prost(uint32, tag = "11")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub knbgpmdmbkc: u32,
    #[prost(uint32, tag = "4")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "12")]
    pub ifckabbiilb: u32,
    #[prost(uint32, tag = "2")]
    pub bopehbonhll: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adfmfjbomfm {
    #[prost(uint32, tag = "1")]
    pub knbgpmdmbkc: u32,
    #[prost(message, repeated, tag = "9")]
    pub lineup_list: ::prost::alloc::vec::Vec<Mdhdfopebgl>,
    #[prost(uint32, tag = "13")]
    pub bopehbonhll: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "11")]
    pub ifckabbiilb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdhdfopebgl {
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ehbjmdabinj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehbjmdabinj {
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub id: u32,
    #[prost(uint32, tag = "5")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjpadlbjdhm {
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jilinnlgcoe {
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub icoibnhjhec: ::core::option::Option<Khjddbffahk>,
    #[prost(message, optional, tag = "7")]
    pub ckbeijmmbjp: ::core::option::Option<Imiaeepmcje>,
    #[prost(message, optional, tag = "8")]
    pub idcpcalknen: ::core::option::Option<Cinndmfnbij>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfkejoedman {
    #[prost(uint32, tag = "3")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "14")]
    pub gakmanenkmh: u32,
    #[prost(bool, tag = "12")]
    pub mmnebfbnoni: bool,
    #[prost(bool, tag = "13")]
    pub lkipegajnfo: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gohiddnlhbd {
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub rank: u32,
    #[prost(uint32, tag = "9")]
    pub unique_id: u32,
    #[prost(uint32, tag = "4")]
    pub promotion: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkbkidbcjnc {
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(message, repeated, tag = "7")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "6")]
    pub unique_id: u32,
    #[prost(uint32, tag = "5")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncjlkljhjcf {
    #[prost(map = "uint32, message", tag = "6")]
    pub mcabmcmjjeh: ::std::collections::HashMap<u32, Jkbkidbcjnc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pofampodbff {
    #[prost(message, optional, tag = "1")]
    pub ifpgckbegmc: ::core::option::Option<Bfkejoedman>,
    #[prost(map = "uint32, message", tag = "6")]
    pub pkadbaodmol: ::std::collections::HashMap<u32, Gohiddnlhbd>,
    #[prost(map = "uint32, message", tag = "11")]
    pub nidhakjenjj: ::std::collections::HashMap<u32, Ncjlkljhjcf>,
    #[prost(uint32, repeated, tag = "3")]
    pub fkieaedpfgi: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub clmoamecein: ::core::option::Option<Bfkejoedman>,
    #[prost(bool, tag = "13")]
    pub docbgbkpbgk: bool,
    #[prost(uint32, repeated, tag = "12")]
    pub bddkedmgijc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odmpfgdalba {
    #[prost(message, optional, tag = "4")]
    pub mbknfpcaghc: ::core::option::Option<Pofampodbff>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agacnfgjjhm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcpmkpfgiid {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akiopjcikpi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oabnlkaifkd {
    #[prost(message, optional, tag = "1")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dodphlphodk {
    #[prost(uint32, tag = "13")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "2")]
    pub oohfncljbab: u32,
    #[prost(uint32, tag = "3")]
    pub oadpmnmpcjl: u32,
    #[prost(bool, tag = "6")]
    pub pbiaoddhipc: bool,
    #[prost(message, repeated, tag = "1")]
    pub eifkjpfgipi: ::prost::alloc::vec::Vec<BattleTarget>,
    #[prost(uint32, tag = "12")]
    pub djemibiamha: u32,
    #[prost(bool, tag = "11")]
    pub mmnebfbnoni: bool,
    #[prost(bool, tag = "7")]
    pub bjihmliecnf: bool,
    #[prost(uint32, tag = "4")]
    pub pamafmppefi: u32,
    #[prost(uint32, tag = "14")]
    pub oilhgpfbeel: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oojihblbeip {
    #[prost(uint32, tag = "7")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcobllmhael {
    #[prost(uint32, tag = "6")]
    pub pmdhhigakcp: u32,
    #[prost(uint32, tag = "3")]
    pub kmfboahjjhd: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub bddkedmgijc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub fkieaedpfgi: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfkcgfoomed {
    #[prost(uint32, tag = "2")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub bdjmhpbiaag: ::prost::alloc::vec::Vec<Gcobllmhael>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgCsReq {
    #[prost(enumeration = "ChatType", tag = "1")]
    pub chat_type: i32,
    #[prost(enumeration = "MsgType", tag = "3")]
    pub message_type: i32,
    #[prost(uint32, repeated, tag = "15")]
    pub fblgpmnmbcc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "11")]
    pub gpcnecedgof: ::core::option::Option<Kicjpjalbbh>,
    #[prost(string, tag = "6")]
    pub message_text: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub extra_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SendMsgScRsp {
    #[prost(uint64, tag = "5")]
    pub end_time: u64,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdolecgmpnp {
    #[prost(uint32, tag = "2")]
    pub ehjdlppngmf: u32,
    #[prost(message, optional, tag = "8")]
    pub gpcnecedgof: ::core::option::Option<Kicjpjalbbh>,
    #[prost(string, tag = "11")]
    pub ekomgpknmnn: ::prost::alloc::string::String,
    #[prost(uint64, tag = "12")]
    pub fgilieldboi: u64,
    #[prost(uint32, tag = "3")]
    pub extra_id: u32,
    #[prost(enumeration = "MsgType", tag = "10")]
    pub message_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohiiebnlkpb {
    #[prost(uint32, tag = "9")]
    pub nlhlnacaplk: u32,
    #[prost(string, tag = "7")]
    pub message_text: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub extra_id: u32,
    #[prost(enumeration = "MsgType", tag = "1")]
    pub message_type: i32,
    #[prost(uint32, tag = "12")]
    pub jlddmekleop: u32,
    #[prost(message, optional, tag = "14")]
    pub gpcnecedgof: ::core::option::Option<Kicjpjalbbh>,
    #[prost(enumeration = "ChatType", tag = "10")]
    pub chat_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbghgfnkini {
    #[prost(uint32, repeated, tag = "10")]
    pub dbdnooapmlm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njgnkanbknc {
    #[prost(uint32, tag = "2")]
    pub hbnlpjhkkcj: u32,
    #[prost(uint32, tag = "1")]
    pub bmgnoinbocb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okbaaoadhco {
    #[prost(uint32, tag = "7")]
    pub hbnlpjhkkcj: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub bmgnoinbocb: u32,
    #[prost(message, repeated, tag = "9")]
    pub pbnkofcamlc: ::prost::alloc::vec::Vec<Fdolecgmpnp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iogcdknhcgm {
    #[prost(uint32, tag = "9")]
    pub hbnlpjhkkcj: u32,
    #[prost(int64, tag = "7")]
    pub bgmailkkaki: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kinamnleoon {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghdebmkbflc {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub cbkidlkcjcc: ::prost::alloc::vec::Vec<Iogcdknhcgm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfkfollpamf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Modcpiakhbc {
    #[prost(uint32, repeated, tag = "13")]
    pub heeeklmagdp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baoekbknfkb {
    #[prost(bool, tag = "10")]
    pub mkbgjbobhal: bool,
    #[prost(uint32, tag = "4")]
    pub extra_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbjplhlkclc {
    #[prost(bool, tag = "2")]
    pub mkbgjbobhal: bool,
    #[prost(uint32, tag = "14")]
    pub extra_id: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bafalbdiboe {
    #[prost(uint32, repeated, tag = "12")]
    pub iilhhecoogb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hghnaejjjgj {
    #[prost(uint32, repeated, tag = "1")]
    pub iilhhecoogb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lghifpmgaic {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdmbaangnpa {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub dbdnooapmlm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Micfnaphmnb {
    #[prost(message, optional, tag = "7")]
    pub joipnmmehbm: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hefgcbjdeem {
    #[prost(message, optional, tag = "10")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Memfcodlioa {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub glkbddbdebh: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nidknnfjgmp {
    #[prost(message, repeated, tag = "8")]
    pub mojaejmnmge: ::prost::alloc::vec::Vec<Memfcodlioa>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhogcidfaoc {
    #[prost(int32, tag = "1139")]
    pub aneolijdglc: i32,
    #[prost(bool, tag = "984")]
    pub kbiicjjlpnd: bool,
    #[prost(message, optional, tag = "1645")]
    pub djaocncjcoa: ::core::option::Option<Gflokgogjgh>,
    #[prost(uint32, tag = "3")]
    pub iojokhhnnaf: u32,
    #[prost(message, optional, tag = "481")]
    pub pmngenljclp: ::core::option::Option<Bakpidleifi>,
    #[prost(uint32, repeated, tag = "1804")]
    pub cbplaahapne: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub haccokolmcb: u32,
    #[prost(uint32, tag = "5")]
    pub pefeejkjmko: u32,
    #[prost(uint32, tag = "1")]
    pub lgjapibjhec: u32,
    #[prost(message, optional, tag = "1631")]
    pub dicpimdppco: ::core::option::Option<Dcbalomaani>,
    #[prost(bool, tag = "2")]
    pub jheghpmkabh: bool,
    #[prost(uint32, tag = "4")]
    pub ddgbdajebji: u32,
    #[prost(uint32, tag = "12")]
    pub bbcjfajjbof: u32,
    #[prost(uint32, tag = "9")]
    pub jinmpgfgcbc: u32,
    #[prost(enumeration = "Omlpnkhdeog", tag = "13")]
    pub lkbimfkbocp: i32,
    #[prost(enumeration = "Ffcjbkjenjp", tag = "11")]
    pub gllfonoipoc: i32,
    #[prost(uint32, tag = "10")]
    pub ddfbfpoeima: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgdjkjeikif {
    #[prost(uint32, tag = "6")]
    pub aoecepofobe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgialipdago {
    #[prost(message, optional, tag = "2")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub ffcidfndcij: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gapcdcdlhao {
    #[prost(uint32, tag = "6")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njnoikdeemg {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aljedjonndl {
    #[prost(uint32, tag = "12")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub mepjekicoob: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pifejklcgii {
    #[prost(uint32, tag = "1")]
    pub kjigdihdnaj: u32,
    #[prost(bool, tag = "12")]
    pub mecjmchknde: bool,
    #[prost(message, repeated, tag = "3")]
    pub jlpgaheinlb: ::prost::alloc::vec::Vec<Aljedjonndl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppdhjomdhpg {
    #[prost(uint32, repeated, tag = "14")]
    pub nehaljheool: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub kdmnfdglfij: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfompdgfppa {
    #[prost(message, optional, tag = "13")]
    pub jpblhpkdnff: ::core::option::Option<Pifejklcgii>,
    #[prost(message, optional, tag = "1")]
    pub fhkibjkjnjf: ::core::option::Option<Ppdhjomdhpg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkjhocdnhpk {
    #[prost(message, optional, tag = "2")]
    pub jpblhpkdnff: ::core::option::Option<Pifejklcgii>,
    #[prost(message, optional, tag = "5")]
    pub fhkibjkjnjf: ::core::option::Option<Ppdhjomdhpg>,
    #[prost(message, optional, tag = "6")]
    pub ogicojhhcnf: ::core::option::Option<Dfompdgfppa>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fffkbmhfeed {
    #[prost(uint32, tag = "5")]
    pub mfdelanaicp: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub khdgocghkea: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub mmpflgiclpa: u32,
    #[prost(uint32, tag = "3")]
    pub fipmfocjcgm: u32,
    #[prost(message, optional, tag = "4")]
    pub akfdaaaiich: ::core::option::Option<Kkjhocdnhpk>,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(enumeration = "Idpjmbnedeg", tag = "7")]
    pub mkpjijjipfe: i32,
    #[prost(uint32, tag = "13")]
    pub pgnccoldebp: u32,
    #[prost(enumeration = "Mknnebnfbej", tag = "8")]
    pub gmchjnfpjdm: i32,
    #[prost(bool, tag = "1")]
    pub ddlinaajdoh: bool,
    #[prost(bool, tag = "9")]
    pub dnmhgkbcinm: bool,
    #[prost(uint32, tag = "12")]
    pub opooflefkol: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdkhifelmcd {
    #[prost(uint32, tag = "9")]
    pub gfphfakjiip: u32,
    #[prost(message, repeated, tag = "2")]
    pub hdkkdjobple: ::prost::alloc::vec::Vec<Fffkbmhfeed>,
    #[prost(uint32, tag = "12")]
    pub kjfpfijkmic: u32,
    #[prost(uint32, tag = "10")]
    pub pbegapcffcg: u32,
    #[prost(uint32, tag = "8")]
    pub kgphiiiehfj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dogofabhmnk {
    #[prost(uint32, tag = "11")]
    pub mfdelanaicp: u32,
    #[prost(uint32, tag = "6")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkcpdacdmkm {
    #[prost(message, optional, tag = "6")]
    pub jjfopmclfgp: ::core::option::Option<Bakpidleifi>,
    #[prost(uint32, tag = "12")]
    pub odbonchifmm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iegahkdghjc {
    #[prost(message, repeated, tag = "9")]
    pub acdpcbenidp: ::prost::alloc::vec::Vec<Dogofabhmnk>,
    #[prost(uint32, tag = "6")]
    pub ffkkpmlkkcc: u32,
    #[prost(enumeration = "Mknnebnfbej", tag = "10")]
    pub bgdnnmcklaf: i32,
    #[prost(message, optional, tag = "2")]
    pub pondjadjphm: ::core::option::Option<Kkcpdacdmkm>,
    #[prost(message, optional, tag = "7")]
    pub jhbiihbamfp: ::core::option::Option<Fdkhifelmcd>,
    #[prost(uint32, tag = "15")]
    pub jaeaoepglog: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub lahdpgmdloa: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bincokigfgm {
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, tag = "15")]
    pub jpjmfomlibc: u32,
    #[prost(message, optional, tag = "9")]
    pub onlcphdmmpm: ::core::option::Option<Iegahkdghjc>,
    #[prost(int32, tag = "5")]
    pub glkcbfpeijb: i32,
    #[prost(int32, tag = "10")]
    pub palokcoicgp: i32,
    #[prost(uint32, tag = "7")]
    pub mknhgcengfk: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub meoekcpafch: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub kdkdheomlmo: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub pcpganjlmml: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnhfgpglbae {
    #[prost(uint32, tag = "3")]
    pub bajeglndfpe: u32,
    #[prost(uint32, tag = "14")]
    pub opmjfaoockc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lafgnipaikl {
    #[prost(message, repeated, tag = "5")]
    pub emoohedjinn: ::prost::alloc::vec::Vec<Gnhfgpglbae>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhakogbpaen {
    #[prost(uint32, repeated, tag = "5")]
    pub hbjejpcphbf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub agndiegkeih: u32,
    #[prost(message, optional, tag = "10")]
    pub pncgddoigad: ::core::option::Option<Lafgnipaikl>,
    #[prost(int32, tag = "3")]
    pub onlljjegjdc: i32,
    #[prost(message, optional, tag = "2")]
    pub jjfopmclfgp: ::core::option::Option<Bakpidleifi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eapcpnbdbbg {
    #[prost(uint32, tag = "3")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "8")]
    pub mfionjgelel: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccohodejlfe {
    #[prost(message, optional, tag = "6")]
    pub boijkbofiid: ::core::option::Option<Micfnaphmnb>,
    #[prost(message, repeated, tag = "15")]
    pub njmnddboopd: ::prost::alloc::vec::Vec<Eapcpnbdbbg>,
}
/// ? GetSceneMapInfoCsReq **
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cndojeanndh {
    #[prost(uint32, tag = "11")]
    pub dajmkddckgh: u32,
    #[prost(bool, tag = "4")]
    pub hholaeabopa: bool,
    #[prost(uint32, repeated, tag = "13")]
    pub ghmkcfhnejp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub jbjjpnlonkm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkggceplagl {
    #[prost(int32, tag = "8")]
    pub ljbbdccelmh: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahdfkbajdlh {
    #[prost(uint32, repeated, tag = "2")]
    pub ikddpmdgcaj: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcldbblbapn {
    #[prost(message, optional, tag = "3")]
    pub ehkdpkipimp: ::core::option::Option<Jkggceplagl>,
    #[prost(message, optional, tag = "15")]
    pub lfleifodebe: ::core::option::Option<Blhhnmhcodp>,
    #[prost(message, optional, tag = "4")]
    pub ekglbfofkkd: ::core::option::Option<Cndojeanndh>,
    #[prost(message, optional, tag = "11")]
    pub nnibggkcbdj: ::core::option::Option<Ccohodejlfe>,
    #[prost(message, optional, tag = "5")]
    pub finbdgjedjo: ::core::option::Option<Dkmldddplbi>,
    #[prost(uint32, tag = "6")]
    pub fhpollcfknc: u32,
    #[prost(message, repeated, tag = "10")]
    pub hifokbodgbe: ::prost::alloc::vec::Vec<Cbgphimaond>,
    #[prost(message, optional, tag = "13")]
    pub lickecpakcj: ::core::option::Option<Bincokigfgm>,
    #[prost(message, optional, tag = "958")]
    pub gjbcapfdgka: ::core::option::Option<Ahdfkbajdlh>,
    #[prost(message, optional, tag = "1")]
    pub pmoenkofnla: ::core::option::Option<Cgcbkhnbohm>,
    #[prost(message, optional, tag = "7")]
    pub pogejanpebj: ::core::option::Option<Oobhdlegikm>,
    #[prost(message, optional, tag = "2")]
    pub dgohjiekiai: ::core::option::Option<Pdoifoocoll>,
    #[prost(message, optional, tag = "14")]
    pub kjicoehehhk: ::core::option::Option<Lhakogbpaen>,
    #[prost(message, optional, tag = "9")]
    pub ocjhnoaacgc: ::core::option::Option<Glbffhmcbkd>,
    #[prost(message, optional, tag = "12")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keljbjcgfja {
    #[prost(message, optional, tag = "12")]
    pub nbbglnjencp: ::core::option::Option<Jjablbdmgfj>,
    #[prost(message, optional, tag = "13")]
    pub dgohjiekiai: ::core::option::Option<Pdoifoocoll>,
    #[prost(message, optional, tag = "3")]
    pub gjbcapfdgka: ::core::option::Option<Dbecpakjhjj>,
    #[prost(uint32, repeated, tag = "7")]
    pub pcpganjlmml: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub meoekcpafch: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "6")]
    pub pncgddoigad: ::core::option::Option<Lafgnipaikl>,
    #[prost(message, optional, tag = "2")]
    pub bbanknacajb: ::core::option::Option<Mpjedkpbkbi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffadoeiaejd {
    #[prost(message, repeated, tag = "8")]
    pub hifokbodgbe: ::prost::alloc::vec::Vec<Cbgphimaond>,
    #[prost(uint32, tag = "12")]
    pub fhpollcfknc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlgkofmempm {
    #[prost(message, optional, tag = "7")]
    pub nbbglnjencp: ::core::option::Option<Jjablbdmgfj>,
    #[prost(message, optional, tag = "10")]
    pub pncgddoigad: ::core::option::Option<Lafgnipaikl>,
    #[prost(uint32, repeated, tag = "2")]
    pub meoekcpafch: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub bbanknacajb: ::core::option::Option<Mpjedkpbkbi>,
    #[prost(uint32, repeated, tag = "6")]
    pub pcpganjlmml: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "14")]
    pub gjbcapfdgka: ::core::option::Option<Dbecpakjhjj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgcppamgheh {
    #[prost(uint32, tag = "1")]
    pub kahhjlklcjl: u32,
    #[prost(uint32, tag = "14")]
    pub fpjdkccalmk: u32,
    #[prost(bool, tag = "10")]
    pub hdnieedkagk: bool,
    #[prost(uint32, tag = "901")]
    pub akigkkfhhei: u32,
    #[prost(uint32, tag = "1227")]
    pub kbofiolbnan: u32,
    #[prost(message, optional, tag = "3")]
    pub pogejanpebj: ::core::option::Option<Eijagapkfad>,
    #[prost(uint32, tag = "1436")]
    pub fhpollcfknc: u32,
    #[prost(uint32, tag = "8")]
    pub bjhddalojnh: u32,
    #[prost(uint32, tag = "13")]
    pub cblhpijhdge: u32,
    #[prost(uint32, tag = "679")]
    pub lpgaoolbbfm: u32,
    #[prost(message, optional, tag = "1090")]
    pub finbdgjedjo: ::core::option::Option<Dkmldddplbi>,
    #[prost(message, optional, tag = "9")]
    pub ccfbdacgomf: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub cgcgiimcaaa: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "Pkkjdbmkgck", tag = "4")]
    pub emkjkjbnelj: i32,
    #[prost(uint32, repeated, tag = "7")]
    pub fealelmejhl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1118")]
    pub ilfkfbfheea: u32,
    #[prost(message, optional, tag = "5")]
    pub pmoenkofnla: ::core::option::Option<Hpphifdfjjj>,
    #[prost(uint32, tag = "11")]
    pub khbgofeemkc: u32,
    #[prost(uint32, tag = "12")]
    pub fpgaklkbimb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lepofdcgpgo {
    #[prost(message, repeated, tag = "10")]
    pub hdkkdjobple: ::prost::alloc::vec::Vec<Fffkbmhfeed>,
    #[prost(uint32, tag = "12")]
    pub moegphddhbf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmkclmlbhgc {
    #[prost(uint32, tag = "11")]
    pub khbgofeemkc: u32,
    #[prost(uint32, tag = "3")]
    pub ibcbbnibjai: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ichpoajgklm {
    #[prost(uint32, tag = "15")]
    pub dajmkddckgh: u32,
    #[prost(uint32, tag = "7")]
    pub ppahlalicma: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdhoocpacib {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmakianogec {
    #[prost(message, optional, tag = "15")]
    pub mmppaiggmon: ::core::option::Option<Keljbjcgfja>,
    #[prost(message, optional, tag = "3")]
    pub jpaolljmggn: ::core::option::Option<Jcldbblbapn>,
    #[prost(message, optional, tag = "14")]
    pub fecdamigijp: ::core::option::Option<Mlgkofmempm>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub iegpchobmgo: ::core::option::Option<Kgcppamgheh>,
    #[prost(message, optional, tag = "10")]
    pub gngfcddjjbi: ::core::option::Option<Ffadoeiaejd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjkdmgaifpn {
    #[prost(uint32, tag = "14")]
    pub mnnlebgmeee: u32,
    #[prost(uint32, tag = "5")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goablpdaaph {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub jpaolljmggn: ::core::option::Option<Jcldbblbapn>,
    #[prost(message, optional, tag = "3")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(message, optional, tag = "1")]
    pub gngfcddjjbi: ::core::option::Option<Ffadoeiaejd>,
    #[prost(uint32, tag = "13")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obhcibfiedf {
    #[prost(uint32, tag = "13")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhhphednkmj {
    #[prost(message, optional, tag = "7")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(message, optional, tag = "9")]
    pub gngfcddjjbi: ::core::option::Option<Ffadoeiaejd>,
    #[prost(message, optional, tag = "12")]
    pub jpaolljmggn: ::core::option::Option<Jcldbblbapn>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijocfggamla {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klajnbalbkc {
    #[prost(message, optional, tag = "3")]
    pub kjicoehehhk: ::core::option::Option<Lhakogbpaen>,
    #[prost(message, optional, tag = "1")]
    pub fecdamigijp: ::core::option::Option<Mlgkofmempm>,
    #[prost(message, optional, tag = "7")]
    pub mmppaiggmon: ::core::option::Option<Keljbjcgfja>,
    #[prost(message, optional, tag = "12")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmohaodeehg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfcohkmgeml {
    #[prost(message, optional, tag = "10")]
    pub iegpchobmgo: ::core::option::Option<Kgcppamgheh>,
    #[prost(message, optional, tag = "1")]
    pub kjicoehehhk: ::core::option::Option<Lhakogbpaen>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub mmppaiggmon: ::core::option::Option<Keljbjcgfja>,
    #[prost(message, optional, tag = "13")]
    pub fecdamigijp: ::core::option::Option<Mlgkofmempm>,
    #[prost(message, optional, tag = "6")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckheiddckpi {
    #[prost(uint32, repeated, tag = "11")]
    pub eabjmdoajdk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub bajeglndfpe: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub ddkgbmlkdkk: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub oocjacfoofn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pljckbilfkd {
    #[prost(message, optional, tag = "8")]
    pub jpaolljmggn: ::core::option::Option<Jcldbblbapn>,
    #[prost(message, optional, tag = "12")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "14")]
    pub nimbhcolfld: ::core::option::Option<Lepofdcgpgo>,
    #[prost(message, optional, tag = "4")]
    pub gngfcddjjbi: ::core::option::Option<Ffadoeiaejd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pinamnlfehm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ancdaaalmie {
    #[prost(message, optional, tag = "5")]
    pub jpaolljmggn: ::core::option::Option<Lafgnipaikl>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjpomjhoidj {
    #[prost(message, optional, tag = "12")]
    pub jpaolljmggn: ::core::option::Option<Gnhfgpglbae>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekocemphhkp {
    #[prost(uint32, tag = "11")]
    pub mnnlebgmeee: u32,
    #[prost(uint32, tag = "15")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpfekedneha {
    #[prost(uint32, tag = "12")]
    pub mnnlebgmeee: u32,
    #[prost(uint32, tag = "7")]
    pub pbonhgdihdk: u32,
    #[prost(message, optional, tag = "1")]
    pub pnchhcaekef: ::core::option::Option<Kiadjegoijf>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbigniokkbd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehnicpcloei {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub jpaolljmggn: ::core::option::Option<Nidknnfjgmp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jffoofblfgc {
    #[prost(uint32, tag = "9")]
    pub idllpehphcb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efhfafjmnid {
    #[prost(uint32, tag = "14")]
    pub idllpehphcb: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lddenbcdjcm: ::core::option::Option<Memfcodlioa>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfemgjanplj {
    #[prost(uint32, repeated, tag = "10")]
    pub fealelmejhl: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub lickecpakcj: ::core::option::Option<Bincokigfgm>,
    #[prost(uint32, tag = "14")]
    pub kahhjlklcjl: u32,
    #[prost(message, optional, tag = "13")]
    pub iegpchobmgo: ::core::option::Option<Kgcppamgheh>,
    #[prost(uint32, tag = "11")]
    pub kdkdheomlmo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikkaedikpbe {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blpodikpfic {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub jkdkdpoblli: ::core::option::Option<Ddjfkekakdb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjgiingohfc {
    #[prost(uint32, tag = "4")]
    pub paofpgekpfe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nidoadddcnf {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(bool, tag = "15")]
    pub boeaanepgoc: bool,
    #[prost(message, optional, tag = "4")]
    pub amikofgncbo: ::core::option::Option<Mnicidbdjfi>,
    #[prost(message, optional, tag = "2")]
    pub jkdkdpoblli: ::core::option::Option<Ddjfkekakdb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkonjahngcd {
    #[prost(uint32, repeated, tag = "15")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pabnmaidjgp {
    #[prost(uint32, repeated, tag = "4")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub nnibggkcbdj: ::core::option::Option<Ccohodejlfe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dieombfmkal {
    #[prost(uint32, repeated, tag = "9")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epkaofjiehg {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub boijkbofiid: ::core::option::Option<Micfnaphmnb>,
    #[prost(uint32, repeated, tag = "4")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pihfnpbmhpi {
    #[prost(message, optional, tag = "7")]
    pub boijkbofiid: ::core::option::Option<Micfnaphmnb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Molameggbnh {
    #[prost(message, optional, tag = "11")]
    pub ocjhnoaacgc: ::core::option::Option<Glbffhmcbkd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hookmgahiji {
    #[prost(message, optional, tag = "3")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcbionfiecl {
    #[prost(enumeration = "Mmfnjjmglfd", tag = "13")]
    pub mgdnainpahe: i32,
    #[prost(enumeration = "Kebkmnaehol", tag = "2")]
    pub mknhgcengfk: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkbldbjahoj {
    #[prost(uint32, tag = "5")]
    pub miheclofkjj: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub lahdpgmdloa: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkgplpehibh {
    #[prost(message, optional, tag = "3")]
    pub fkomandpfne: ::core::option::Option<Fdkhifelmcd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aengjlbaelj {
    #[prost(uint32, tag = "1")]
    pub bajeglndfpe: u32,
    #[prost(int32, tag = "12")]
    pub onlljjegjdc: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikehgclkdnj {
    #[prost(int32, tag = "3")]
    pub gcgeikpacmj: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flofloehlha {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChessRogueSkipTeachingLevelScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub skip_reward_list: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iegdfbolnpn {
    #[prost(uint32, repeated, tag = "8")]
    pub pcpganjlmml: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpfdplfbohc {
    #[prost(uint32, tag = "13")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fagoefkbbcl {
    #[prost(message, optional, tag = "5")]
    pub gngfcddjjbi: ::core::option::Option<Ffadoeiaejd>,
    #[prost(message, optional, tag = "3")]
    pub kbneaoehnob: ::core::option::Option<Jcldbblbapn>,
    #[prost(message, optional, tag = "2")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(message, optional, tag = "6")]
    pub nimbhcolfld: ::core::option::Option<Lepofdcgpgo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebkgloopkbg {
    #[prost(uint32, tag = "12")]
    pub aoecepofobe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onmlnleopmo {
    #[prost(message, optional, tag = "15")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chhnekmendf {
    #[prost(uint32, tag = "6")]
    pub aoecepofobe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdieigbnhnc {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Leklclkagec {
    #[prost(uint32, tag = "13")]
    pub aoecepofobe: u32,
    #[prost(uint32, tag = "3")]
    pub fnhpplpmjcn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djopeekdjlo {
    #[prost(message, optional, tag = "8")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
    #[prost(uint32, tag = "3")]
    pub iphdoglidch: u32,
    #[prost(uint32, tag = "1")]
    pub fnhpplpmjcn: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Almpmbojjki {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghkdffbobdn {
    #[prost(message, optional, tag = "6")]
    pub ehdpkgafikp: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub emmkiajfeeh: ::core::option::Option<Jhogcidfaoc>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgdnbmieblp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgolkgmjajg {
    #[prost(message, optional, tag = "1")]
    pub jpaolljmggn: ::core::option::Option<Jcldbblbapn>,
    #[prost(message, optional, tag = "8")]
    pub gngfcddjjbi: ::core::option::Option<Ffadoeiaejd>,
    #[prost(message, optional, tag = "14")]
    pub iegpchobmgo: ::core::option::Option<Kgcppamgheh>,
    #[prost(message, optional, tag = "10")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub lickecpakcj: ::core::option::Option<Bincokigfgm>,
    #[prost(message, optional, tag = "2")]
    pub kjicoehehhk: ::core::option::Option<Lhakogbpaen>,
    #[prost(message, optional, tag = "3")]
    pub fecdamigijp: ::core::option::Option<Mlgkofmempm>,
    #[prost(message, optional, tag = "15")]
    pub mmppaiggmon: ::core::option::Option<Keljbjcgfja>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iiaonghgoeo {
    #[prost(message, optional, tag = "6")]
    pub lickecpakcj: ::core::option::Option<Bincokigfgm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmpogaffecc {
    #[prost(uint32, tag = "3")]
    pub jdhhhgeinmj: u32,
    #[prost(uint32, tag = "15")]
    pub mooblpaanag: u32,
    #[prost(message, optional, tag = "2")]
    pub jhbiihbamfp: ::core::option::Option<Fdkhifelmcd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmmcjlgdhoc {
    #[prost(enumeration = "Idlkgpjlfhc", tag = "2")]
    pub hmkjakicjka: i32,
    #[prost(enumeration = "Alapdfpdlno", tag = "6")]
    pub mgdnainpahe: i32,
    #[prost(uint32, tag = "14")]
    pub miheclofkjj: u32,
    #[prost(message, repeated, tag = "12")]
    pub hdkkdjobple: ::prost::alloc::vec::Vec<Fffkbmhfeed>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibibbeddebh {
    #[prost(uint32, tag = "1")]
    pub gjbdmneacbj: u32,
    #[prost(uint32, tag = "11")]
    pub fmjcephcaka: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndlofgjnkee {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehndihmpnan {
    #[prost(message, repeated, tag = "14")]
    pub ilfngpkdijj: ::prost::alloc::vec::Vec<Nmkclmlbhgc>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub eimobfbmipk: ::prost::alloc::vec::Vec<Ichpoajgklm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajpjjijdnbp {
    #[prost(uint32, tag = "7")]
    pub nbgahcjbbao: u32,
    #[prost(uint32, tag = "12")]
    pub cckegompfdi: u32,
    #[prost(uint32, tag = "3")]
    pub pdklekppbkf: u32,
    #[prost(uint32, tag = "13")]
    pub dajmkddckgh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npdkkfojanm {
    #[prost(uint32, tag = "14")]
    pub pdklekppbkf: u32,
    #[prost(uint32, tag = "10")]
    pub nbgahcjbbao: u32,
    #[prost(uint32, tag = "2")]
    pub cckegompfdi: u32,
    #[prost(uint32, tag = "7")]
    pub dajmkddckgh: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icleefeiefg {
    #[prost(uint32, tag = "9")]
    pub nbgahcjbbao: u32,
    #[prost(uint32, tag = "13")]
    pub pdklekppbkf: u32,
    #[prost(uint32, tag = "7")]
    pub dajmkddckgh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkhambafchc {
    #[prost(uint32, tag = "9")]
    pub nbgahcjbbao: u32,
    #[prost(uint32, tag = "10")]
    pub khbgofeemkc: u32,
    #[prost(uint32, tag = "12")]
    pub dajmkddckgh: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub pdklekppbkf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kagcmpmikjb {
    #[prost(int32, tag = "15")]
    pub palokcoicgp: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mggndkkjmla {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajkfhpgmhda {
    #[prost(message, optional, tag = "2")]
    pub akfdaaaiich: ::core::option::Option<Hefgcbjdeem>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elcidaalfbo {
    #[prost(uint32, tag = "15")]
    pub hgfnojflbcl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddofecncbfo {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "10")]
    pub lpflcicnioa: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "4")]
    pub hgfnojflbcl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eanjmiidoga {
    #[prost(uint32, tag = "10")]
    pub ibcbbnibjai: u32,
    #[prost(uint32, tag = "15")]
    pub khbgofeemkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Coemajoahgi {
    #[prost(message, optional, tag = "3")]
    pub ehkdpkipimp: ::core::option::Option<Jkggceplagl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhlldhikfpo {
    #[prost(uint32, tag = "7")]
    pub khbgofeemkc: u32,
    #[prost(enumeration = "Emeefgmahof", tag = "9")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aegpheebldn {
    #[prost(uint32, tag = "8")]
    pub pdklekppbkf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjbpionpapm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldckdflfhpa {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub eimobfbmipk: ::prost::alloc::vec::Vec<Aegpheebldn>,
    #[prost(message, repeated, tag = "11")]
    pub ilfngpkdijj: ::prost::alloc::vec::Vec<Dhlldhikfpo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifnibapmpae {
    #[prost(uint32, tag = "10")]
    pub pdklekppbkf: u32,
    #[prost(uint32, tag = "1")]
    pub cckegompfdi: u32,
    #[prost(uint32, tag = "2")]
    pub nbgahcjbbao: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgbhelkjiab {
    #[prost(uint32, tag = "6")]
    pub cckegompfdi: u32,
    #[prost(uint32, tag = "3")]
    pub pdklekppbkf: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub nbgahcjbbao: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpglhbhphjh {
    #[prost(uint32, tag = "6")]
    pub nbgahcjbbao: u32,
    #[prost(uint32, tag = "5")]
    pub pdklekppbkf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fenoahlblkf {
    #[prost(uint32, tag = "3")]
    pub pdklekppbkf: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub nbgahcjbbao: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnfopjcoagg {
    #[prost(uint32, tag = "4")]
    pub pdklekppbkf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Faflfkhkkik {
    #[prost(message, repeated, tag = "10")]
    pub ilfngpkdijj: ::prost::alloc::vec::Vec<Dhlldhikfpo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkmldddplbi {
    #[prost(uint32, repeated, tag = "14")]
    pub fdfgpknlkag: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub pdklekppbkf: u32,
    #[prost(bool, tag = "6")]
    pub gjdghpkgkga: bool,
    #[prost(bool, tag = "2")]
    pub hholaeabopa: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub jgiplhnepil: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub jokigggoefl: u32,
    #[prost(uint32, tag = "12")]
    pub khbgofeemkc: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub nfdcfmgbflc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbfffjngdfj {
    #[prost(uint32, tag = "7")]
    pub fnhpplpmjcn: u32,
    #[prost(uint32, tag = "6")]
    pub dcipfijnhoi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcbalomaani {
    #[prost(uint32, tag = "10")]
    pub ddkgbmlkdkk: u32,
    #[prost(uint32, tag = "5")]
    pub lhigmcoilgo: u32,
    #[prost(uint32, tag = "6")]
    pub nddbnbipbon: u32,
    #[prost(message, repeated, tag = "9")]
    pub pdfpgbmampk: ::prost::alloc::vec::Vec<Gbfffjngdfj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjablbdmgfj {
    #[prost(enumeration = "Cieanjnnbbg", tag = "7")]
    pub fbgcbokaopf: i32,
    #[prost(uint32, repeated, tag = "12")]
    pub pefldkdahmf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub kcmmhoijgbh: ::prost::alloc::vec::Vec<Dcbalomaani>,
    #[prost(map = "uint32, bool", tag = "10")]
    pub dgpfcmkpkii: ::std::collections::HashMap<u32, bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdoifoocoll {
    #[prost(uint32, tag = "15")]
    pub mdnnnihndjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpjedkpbkbi {
    #[prost(uint32, tag = "3")]
    pub mdnnnihndjk: u32,
    #[prost(message, optional, tag = "2")]
    pub fnbokobiimm: ::core::option::Option<Lljpmigaffg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbecpakjhjj {
    #[prost(uint32, repeated, tag = "3")]
    pub bimildojagm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lndljfdkjag {
    #[prost(message, optional, tag = "3")]
    pub nbbglnjencp: ::core::option::Option<Dcbalomaani>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndghlaenmgh {
    #[prost(message, optional, tag = "3")]
    pub nbbglnjencp: ::core::option::Option<Dcbalomaani>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldpnmbfakgo {
    #[prost(message, optional, tag = "5")]
    pub najieibfdnb: ::core::option::Option<Jjablbdmgfj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Depkckidjjj {
    #[prost(uint32, tag = "14")]
    pub jcjnhohkpan: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nokgciolbop {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aebddiinfcf {
    #[prost(message, optional, tag = "1")]
    pub bbanknacajb: ::core::option::Option<Lljpmigaffg>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub mdnnnihndjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlgbnfinpel {
    #[prost(uint32, tag = "5")]
    pub hehehnicpjn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gliplffjdbn {
    #[prost(uint32, tag = "9")]
    pub mdnnnihndjk: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub bbanknacajb: ::core::option::Option<Lljpmigaffg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpcjpojlbff {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lflcalafnbo {
    #[prost(uint32, tag = "9")]
    pub ogkiomjegel: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub kadnckpogfc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fafhmldeiem {
    #[prost(uint32, tag = "9")]
    pub progress: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub gegdnnbdlhe: u32,
    #[prost(uint32, tag = "8")]
    pub gndjgaoeccp: u32,
    #[prost(message, repeated, tag = "2")]
    pub bekholgcbpf: ::prost::alloc::vec::Vec<Lflcalafnbo>,
    #[prost(uint32, repeated, tag = "1")]
    pub kdfdefeppnh: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lalaekmflhg {
    #[prost(uint32, tag = "4")]
    pub hehehnicpjn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efoabakdjig {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub hehehnicpjn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpaeciapkbc {
    #[prost(uint32, tag = "8")]
    pub ogkiomjegel: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub panfmkbdjnp: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocencfaabof {
    #[prost(uint32, tag = "6")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlfokjajmmp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkbmbpagojn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cokgknggkaa {
    #[prost(uint32, tag = "6")]
    pub jmfddoomihg: u32,
    #[prost(uint32, tag = "7")]
    pub pkeohpicjkc: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ihchbmafcen: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpemelkknjb {
    #[prost(uint32, repeated, tag = "12")]
    pub ihchbmafcen: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub phklikjmgkn: ::prost::alloc::vec::Vec<Cokgknggkaa>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpcmempnhjk {
    #[prost(message, optional, tag = "6")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Golmjbpcaga {
    #[prost(message, optional, tag = "7")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjoghfefnmh {
    #[prost(message, optional, tag = "13")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mefjdljoeaf {
    #[prost(message, optional, tag = "2")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
    #[prost(uint32, tag = "10")]
    pub ohmaodidhnl: u32,
    #[prost(uint32, tag = "14")]
    pub pgbbcblgkkh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmiiahhlhco {
    #[prost(message, optional, tag = "5")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjbmmmepaci {
    #[prost(bool, tag = "4")]
    pub fbmbjgbkokp: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Godnbimdidi {
    #[prost(uint32, tag = "7")]
    pub edpdfcplkpa: u32,
    #[prost(message, optional, tag = "8")]
    pub ilhjcnegkjf: ::core::option::Option<Pkbmbpagojn>,
    #[prost(message, optional, tag = "9")]
    pub bkfakhgfilo: ::core::option::Option<Lpcmempnhjk>,
    #[prost(message, optional, tag = "3")]
    pub pepfpijodhi: ::core::option::Option<Golmjbpcaga>,
    #[prost(message, optional, tag = "4")]
    pub bfbjbaghama: ::core::option::Option<Jjoghfefnmh>,
    #[prost(message, optional, tag = "6")]
    pub emmenkcdomi: ::core::option::Option<Mefjdljoeaf>,
    #[prost(message, optional, tag = "15")]
    pub mdimhompfcm: ::core::option::Option<Hmiiahhlhco>,
    #[prost(message, optional, tag = "2")]
    pub jghficgepaa: ::core::option::Option<Pjbmmmepaci>,
    #[prost(bool, tag = "11")]
    pub klkhknehfbg: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blmojdpmnjf {
    #[prost(int32, tag = "11")]
    pub gaganbkanln: i32,
    #[prost(int32, tag = "1")]
    pub fciejeohcja: i32,
    #[prost(int32, tag = "6")]
    pub pbndpcofgla: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lladomjnlko {
    #[prost(uint32, tag = "15")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "9")]
    pub ijpcadfeknn: u32,
    #[prost(uint64, tag = "6")]
    pub unique_id: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Logafbjdpkc {
    #[prost(message, repeated, tag = "15")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Lladomjnlko>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpmoddlbhga {
    #[prost(message, optional, tag = "7")]
    pub jlgjdhoibma: ::core::option::Option<Godnbimdidi>,
    #[prost(message, optional, tag = "1")]
    pub pogejanpebj: ::core::option::Option<Logafbjdpkc>,
    #[prost(uint32, tag = "4")]
    pub bpnhlfahnkm: u32,
    #[prost(string, tag = "11")]
    pub elnofkbfhea: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub cdaemdonfaj: u32,
    #[prost(uint32, tag = "15")]
    pub mhhndeiccmp: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub pmgcchiledo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub ogkiomjegel: u32,
    #[prost(message, optional, tag = "2")]
    pub hnloeinfmcg: ::core::option::Option<Blmojdpmnjf>,
    #[prost(uint32, tag = "10")]
    pub boibnciibil: u32,
    #[prost(uint32, tag = "5")]
    pub cpkngiamnli: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjnapobgchd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Giapdiikfmk {
    #[prost(message, optional, tag = "5")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlghaphnkch {
    #[prost(uint32, tag = "5")]
    pub mkdneojkaal: u32,
    #[prost(bool, tag = "13")]
    pub mmnebfbnoni: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Miepedklkmi {
    #[prost(uint32, repeated, tag = "1")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnbdlbcjbgg {
    #[prost(uint32, tag = "7")]
    pub ohmaodidhnl: u32,
    #[prost(bool, tag = "12")]
    pub gpanoppmekp: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpfbakaodom {
    #[prost(uint32, tag = "10")]
    pub mkdneojkaal: u32,
    #[prost(bool, tag = "11")]
    pub mmnebfbnoni: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aifdfhgdmdk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcgbmdfclno {
    #[prost(uint32, tag = "2")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "15")]
    pub edpdfcplkpa: u32,
    #[prost(message, optional, tag = "14")]
    pub dejnhinclci: ::core::option::Option<Hjnapobgchd>,
    #[prost(message, optional, tag = "7")]
    pub eoecodhkjah: ::core::option::Option<Giapdiikfmk>,
    #[prost(message, optional, tag = "13")]
    pub gdgfpnoeajd: ::core::option::Option<Jlghaphnkch>,
    #[prost(message, optional, tag = "5")]
    pub emhomnipcon: ::core::option::Option<Miepedklkmi>,
    #[prost(message, optional, tag = "8")]
    pub lgkmmlmpdom: ::core::option::Option<Dnbdlbcjbgg>,
    #[prost(message, optional, tag = "4")]
    pub hnhkbenjmmb: ::core::option::Option<Mpfbakaodom>,
    #[prost(message, optional, tag = "12")]
    pub enofefmhaca: ::core::option::Option<Aifdfhgdmdk>,
    #[prost(uint32, tag = "6")]
    pub cdaemdonfaj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaklaachmin {
    #[prost(message, optional, tag = "12")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "10")]
    pub acjjpgnpdii: bool,
    #[prost(uint32, tag = "14")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "5")]
    pub progress: u32,
    #[prost(uint32, tag = "7")]
    pub mhhndeiccmp: u32,
    #[prost(bool, tag = "9")]
    pub jihjhonolea: bool,
    #[prost(uint32, tag = "4")]
    pub cpkngiamnli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpgmjingckf {
    #[prost(uint32, tag = "3")]
    pub edpdfcplkpa: u32,
    #[prost(uint32, tag = "13")]
    pub jecdljepbci: u32,
    #[prost(enumeration = "Jfenpgffadc", tag = "9")]
    pub nhbkmmbehka: i32,
    #[prost(uint32, tag = "10")]
    pub fndhpfbmefj: u32,
    #[prost(message, optional, tag = "1")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edhecinachi {
    #[prost(bool, tag = "5")]
    pub ejkepfpphed: bool,
    #[prost(uint32, tag = "15")]
    pub ogkiomjegel: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kklhdojledj {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odojpidlebk {
    #[prost(uint32, tag = "5")]
    pub edpdfcplkpa: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebipbjdklnc {
    #[prost(uint32, tag = "7")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "13")]
    pub edpdfcplkpa: u32,
    #[prost(uint64, tag = "12")]
    pub unique_id: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhpnedjanoe {
    #[prost(uint32, tag = "3")]
    pub edpdfcplkpa: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub ogkiomjegel: u32,
    #[prost(message, optional, tag = "12")]
    pub pogejanpebj: ::core::option::Option<Logafbjdpkc>,
    #[prost(message, optional, tag = "1363")]
    pub gbbbdblomio: ::core::option::Option<Kpemelkknjb>,
    #[prost(message, optional, tag = "602")]
    pub hnloeinfmcg: ::core::option::Option<Blmojdpmnjf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opdhfiokgml {
    #[prost(message, optional, tag = "2")]
    pub mjhepdejndc: ::core::option::Option<Aaklaachmin>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Item {
    #[prost(uint32, tag = "2")]
    pub promotion: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub num: u32,
    #[prost(uint32, tag = "15")]
    pub unique_id: u32,
    #[prost(uint32, tag = "3")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "9")]
    pub rank: u32,
    #[prost(uint32, tag = "13")]
    pub item_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemList {
    #[prost(message, repeated, tag = "10")]
    pub item_list: ::prost::alloc::vec::Vec<Item>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PileItem {
    #[prost(uint32, tag = "12")]
    pub item_num: u32,
    #[prost(uint32, tag = "14")]
    pub item_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ItemCost {
    #[prost(message, optional, tag = "12")]
    pub pile_item: ::core::option::Option<PileItem>,
    #[prost(uint32, tag = "11")]
    pub equipment_unique_id: u32,
    #[prost(uint32, tag = "13")]
    pub relic_unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lanbmmohblp {
    #[prost(message, repeated, tag = "9")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<ItemCost>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnmjmkmbnof {
    #[prost(uint32, tag = "8")]
    pub olfhccbiidg: u32,
    #[prost(uint32, tag = "12")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Golpjolbjjh {
    #[prost(uint32, tag = "8")]
    pub exp: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
    #[prost(uint32, tag = "9")]
    pub rank: u32,
    #[prost(uint32, tag = "3")]
    pub promotion: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmmefhpfkof {
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub main_affix_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "13")]
    pub exp: u32,
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Echcjdnihko {
    #[prost(message, optional, tag = "4")]
    pub lpkpmmpdaho: ::core::option::Option<Jnmjmkmbnof>,
    #[prost(message, optional, tag = "5")]
    pub kfnielbllhi: ::core::option::Option<Golpjolbjjh>,
    #[prost(message, optional, tag = "1")]
    pub bkpajknnngf: ::core::option::Option<Bmmefhpfkof>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffjpgmkmopp {
    #[prost(message, repeated, tag = "4")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<Echcjdnihko>,
}
/// ? x y z
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Vector {
    #[prost(int32, tag = "14")]
    pub x: i32,
    #[prost(int32, tag = "5")]
    pub y: i32,
    #[prost(int32, tag = "3")]
    pub z: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MotionInfo {
    #[prost(message, optional, tag = "14")]
    pub pos: ::core::option::Option<Vector>,
    #[prost(message, optional, tag = "13")]
    pub rot: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpplpnacdhe {
    #[prost(float, tag = "10")]
    pub y: f32,
    #[prost(float, tag = "11")]
    pub miejckfhoib: f32,
    #[prost(float, tag = "13")]
    pub x: f32,
    #[prost(float, tag = "15")]
    pub z: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMonsterWaveParam {
    #[prost(uint32, tag = "10")]
    pub gmimbapadel: u32,
    #[prost(uint32, tag = "6")]
    pub ednldnkdhim: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub gcljbgjckpi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMonsterData {
    #[prost(uint32, tag = "7")]
    pub max_hp: u32,
    #[prost(uint32, tag = "15")]
    pub monster_id: u32,
    #[prost(uint32, tag = "2")]
    pub cur_hp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneMonsterWave {
    #[prost(uint32, tag = "14")]
    pub jmdhdbhgjhj: u32,
    #[prost(message, repeated, tag = "4")]
    pub monster_list: ::prost::alloc::vec::Vec<SceneMonsterData>,
    #[prost(uint32, tag = "10")]
    pub wave_index: u32,
    #[prost(message, repeated, tag = "3")]
    pub drop_list: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, optional, tag = "13")]
    pub monster_wave_param: ::core::option::Option<SceneMonsterWaveParam>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneBattleInfo {
    #[prost(message, optional, tag = "1315")]
    pub mgacgfelfph: ::core::option::Option<Ieimejdokoc>,
    #[prost(message, repeated, tag = "321")]
    pub apkpbammnhm: ::prost::alloc::vec::Vec<Pldmljcickk>,
    #[prost(message, optional, tag = "471")]
    pub bcilaimkepo: ::core::option::Option<EvolveBuildBattleInfo>,
    #[prost(message, repeated, tag = "14")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(message, repeated, tag = "5")]
    pub buff_list: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(bool, tag = "11")]
    pub nlhcbhebgog: bool,
    #[prost(message, repeated, tag = "7")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<BattleAvatar>,
    #[prost(uint32, tag = "6")]
    pub logic_random_seed: u32,
    #[prost(map = "uint32, message", tag = "892")]
    pub battle_target_info: ::std::collections::HashMap<u32, BattleTargetList>,
    #[prost(uint32, tag = "4")]
    pub cycle_count: u32,
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
    #[prost(uint32, tag = "9")]
    pub monster_wave_length: u32,
    #[prost(message, optional, tag = "1394")]
    pub obneanlbpjf: ::core::option::Option<Cbipmgkdbmj>,
    #[prost(uint32, tag = "12")]
    pub battle_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlibcbeoehg {
    #[prost(uint32, tag = "3")]
    pub logic_random_seed: u32,
    #[prost(bool, tag = "1")]
    pub nlhcbhebgog: bool,
    #[prost(message, repeated, tag = "2")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<BattleBuff>,
    #[prost(uint32, tag = "13")]
    pub stage_id: u32,
    #[prost(uint32, tag = "7")]
    pub battle_id: u32,
    #[prost(message, repeated, tag = "11")]
    pub battle_avatar_list: ::prost::alloc::vec::Vec<Dohhfaklimj>,
    #[prost(message, repeated, tag = "9")]
    pub monster_wave_list: ::prost::alloc::vec::Vec<SceneMonsterWave>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flffdckajej {
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub slot: u32,
    #[prost(uint32, tag = "8")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eljjmdjcfip {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klpphbabnkg {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub cpiogbbagop: ::core::option::Option<Nokiblegoej>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dolnimnfefl {
    #[prost(enumeration = "Dahcfllbegc", tag = "12")]
    pub status: i32,
    #[prost(uint32, tag = "8")]
    pub nfcojigifbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nokiblegoej {
    #[prost(uint32, tag = "2")]
    pub emgkdgbhaff: u32,
    #[prost(message, repeated, tag = "14")]
    pub haeppfknbnm: ::prost::alloc::vec::Vec<Dolnimnfefl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdlnbolokbg {
    #[prost(message, optional, tag = "5")]
    pub cpiogbbagop: ::core::option::Option<Nokiblegoej>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phndakdnjde {
    #[prost(uint32, tag = "2")]
    pub nfcojigifbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pllgamkcmjg {
    #[prost(uint32, tag = "2")]
    pub nfcojigifbb: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Foihggokfbb {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icfpaflkela {
    #[prost(bool, tag = "2")]
    pub cabgicnohpe: bool,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub lbchikhgjeh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgdgghnmhfn {
    #[prost(uint32, tag = "4")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iicbhcbpphj {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(message, optional, tag = "14")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngdihfikbgh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbjfkaalpjj {
    #[prost(uint32, tag = "9")]
    pub lbchikhgjeh: u32,
    #[prost(message, repeated, tag = "8")]
    pub gkicdejmadl: ::prost::alloc::vec::Vec<Icfpaflkela>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub jojnmdhhbgn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcgpdfjjnln {
    #[prost(message, repeated, tag = "10")]
    pub gkicdejmadl: ::prost::alloc::vec::Vec<Icfpaflkela>,
    #[prost(uint32, tag = "13")]
    pub lbchikhgjeh: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub jojnmdhhbgn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmnjdlbffep {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iobaelpjman {
    #[prost(message, optional, tag = "3")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "9")]
    pub eoejiijmano: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DrinkMakerGuest {
    #[prost(uint32, tag = "15")]
    pub faith: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub unlocked_favor_tag_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub guest_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiohpedmpgh {
    #[prost(uint32, tag = "6")]
    pub oppccjnkkol: u32,
    #[prost(uint32, tag = "4")]
    pub fjaipfboaco: u32,
    #[prost(uint32, tag = "9")]
    pub dfolakpjbng: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub imfflnefonh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub dlboofmcbci: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbojkhimobg {
    #[prost(uint32, tag = "2")]
    pub pjnlecpgpjn: u32,
    #[prost(bool, tag = "11")]
    pub boeaanepgoc: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bicijfapjfd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkgmfclponb {
    #[prost(uint32, tag = "10")]
    pub fkekjbialhi: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(message, optional, tag = "14")]
    pub lcbphjfming: ::core::option::Option<Jiohpedmpgh>,
    #[prost(uint32, tag = "9")]
    pub opekgfgamcn: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub kjgjcgihamm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub lpdoanmocje: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(message, repeated, tag = "5")]
    pub jlcgnooajli: ::prost::alloc::vec::Vec<DrinkMakerGuest>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub apnalmnfjed: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgogcdpljoc {
    #[prost(uint32, tag = "5")]
    pub lpdoanmocje: u32,
    #[prost(message, optional, tag = "4")]
    pub okdlpmffmpd: ::core::option::Option<Jiohpedmpgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeDrinkScRsp {
    #[prost(uint32, tag = "9")]
    pub next_chat_id: u32,
    #[prost(bool, tag = "4")]
    pub is_succ: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bppikoolpik {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EndDrinkMakerSequenceScRsp {
    #[prost(message, optional, tag = "10")]
    pub guest: ::core::option::Option<DrinkMakerGuest>,
    #[prost(uint32, tag = "12")]
    pub next_sequence_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub request_list: ::prost::alloc::vec::Vec<Cbojkhimobg>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub tips: u32,
    #[prost(message, optional, tag = "14")]
    pub reward: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oglifdlpdgh {
    #[prost(bool, tag = "1")]
    pub chbdfdolhoc: bool,
    #[prost(message, optional, tag = "5")]
    pub okdlpmffmpd: ::core::option::Option<Jiohpedmpgh>,
    #[prost(uint32, tag = "8")]
    pub pjnlecpgpjn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MakeMissionDrinkScRsp {
    #[prost(message, optional, tag = "14")]
    pub custom_drink: ::core::option::Option<Jiohpedmpgh>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(bool, tag = "10")]
    pub is_succ: bool,
    #[prost(bool, tag = "1")]
    pub is_save: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfflmglefbc {
    #[prost(uint32, tag = "8")]
    pub bfcfeikpjin: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cckofijijcb {
    #[prost(uint32, tag = "12")]
    pub dcpoeimegli: u32,
    #[prost(message, optional, tag = "10")]
    pub okdlpmffmpd: ::core::option::Option<Jiohpedmpgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cedfilghpcm {
    #[prost(uint32, tag = "15")]
    pub dcpoeimegli: u32,
    #[prost(bool, tag = "11")]
    pub boeaanepgoc: bool,
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ploaocedhcc {
    #[prost(uint32, tag = "7")]
    pub apnalmnfjed: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildAvatar {
    #[prost(enumeration = "AvatarType", tag = "8")]
    pub avatar_type: i32,
    #[prost(double, tag = "2")]
    pub damage: f64,
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildLevelInfo {
    #[prost(message, repeated, tag = "9")]
    pub battle_target_list: ::prost::alloc::vec::Vec<BattleTarget>,
    #[prost(uint32, tag = "5")]
    pub round_cnt: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub period_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "4")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(uint32, tag = "1")]
    pub cur_game_exp: u32,
    #[prost(message, optional, tag = "11")]
    pub battle_info: ::core::option::Option<EvolveBuildBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iommdlefkle {
    #[prost(uint32, tag = "13")]
    pub lcmkbhbmdob: u32,
    #[prost(uint32, tag = "7")]
    pub mmkkliclehe: u32,
    #[prost(uint32, tag = "4")]
    pub gakmanenkmh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hggmojlcdff {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "9")]
    pub emgbcbhhnnh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndablbkbief {
    #[prost(uint32, tag = "11")]
    pub lcmkbhbmdob: u32,
    #[prost(bool, tag = "2")]
    pub lilifielcec: bool,
    #[prost(bool, tag = "6")]
    pub ekfjbcahhnf: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub kcafipgelge: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ealaijgkglo {
    #[prost(uint32, tag = "11")]
    pub dbgaojmndmc: u32,
    #[prost(message, repeated, tag = "9")]
    pub lcpjnpofamc: ::prost::alloc::vec::Vec<Ndablbkbief>,
    #[prost(message, repeated, tag = "6")]
    pub nhfefdfeeee: ::prost::alloc::vec::Vec<Iommdlefkle>,
    #[prost(uint32, repeated, tag = "14")]
    pub lpfgjabpheh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub cnlcfhiilig: ::prost::alloc::vec::Vec<Hggmojlcdff>,
    #[prost(bool, tag = "12")]
    pub nmnkfefpnbi: bool,
    #[prost(bool, tag = "13")]
    pub looknnadffi: bool,
    #[prost(uint32, tag = "15")]
    pub lhhpfphakkf: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub egkfpbokkfb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbgncknlmck {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmoicnodokk {
    #[prost(message, optional, tag = "1")]
    pub lickecpakcj: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub gngfcddjjbi: ::core::option::Option<Ealaijgkglo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilbbkldbfpf {
    #[prost(message, optional, tag = "13")]
    pub pmhjcfngckn: ::core::option::Option<Jjnjilkjjaf>,
    #[prost(message, repeated, tag = "11")]
    pub avatar_list: ::prost::alloc::vec::Vec<EvolveBuildAvatar>,
    #[prost(uint32, tag = "1")]
    pub lcmkbhbmdob: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gageijjpjpi {
    #[prost(message, optional, tag = "11")]
    pub lickecpakcj: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub cfehgidmfln: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmjpbnbkjmj {
    #[prost(uint32, tag = "13")]
    pub lcmkbhbmdob: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kljhelgcfkg {
    #[prost(message, optional, tag = "9")]
    pub cfehgidmfln: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub lickecpakcj: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hedeldocgmj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fddgkmbaojb {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub lickecpakcj: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Diglamopjaj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfjggilinle {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub lickecpakcj: ::core::option::Option<EvolveBuildLevelInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EvolveBuildFinishScNotify {
    #[prost(enumeration = "Alcgocanpjh", tag = "4")]
    pub battle_result_type: i32,
    #[prost(uint32, tag = "9")]
    pub coin: u32,
    #[prost(message, optional, tag = "14")]
    pub level_info: ::core::option::Option<EvolveBuildLevelInfo>,
    #[prost(uint32, tag = "12")]
    pub level_id: u32,
    #[prost(uint32, tag = "7")]
    pub score: u32,
    #[prost(uint32, tag = "6")]
    pub wave: u32,
    #[prost(uint32, tag = "8")]
    pub cur_period_type: u32,
    #[prost(uint32, tag = "3")]
    pub exp: u32,
    #[prost(bool, tag = "2")]
    pub is_lose: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khkgdappaba {
    #[prost(uint32, tag = "8")]
    pub lcmkbhbmdob: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajejhajoaed {
    #[prost(message, optional, tag = "3")]
    pub dofaojjibho: ::core::option::Option<Ndablbkbief>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibmcoganhdo {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub emgbcbhhnnh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncimlbjjfma {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub emgbcbhhnnh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljeglglledc {
    #[prost(uint32, tag = "4")]
    pub emgbcbhhnnh: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pijcaekfcmm {
    #[prost(uint32, tag = "1")]
    pub emgbcbhhnnh: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghaikcokfdm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okijlmlkdej {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub lhhpfphakkf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pklkahjeako {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hemcijemcam {
    #[prost(uint32, tag = "3")]
    pub dbgaojmndmc: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub cnlcfhiilig: ::prost::alloc::vec::Vec<Hggmojlcdff>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nikfgadelbi {
    #[prost(uint32, tag = "3")]
    pub dbgaojmndmc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glkeieeanpc {
    #[prost(bool, tag = "10")]
    pub looknnadffi: bool,
    #[prost(bool, tag = "7")]
    pub nmnkfefpnbi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bneeceoibjo {
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub pklpfcaegpk: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "12")]
    pub hclhbmghdfi: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmioacmpkma {
    #[prost(uint32, repeated, tag = "5")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "11")]
    pub hclhbmghdfi: i64,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub accgikfcocn: u32,
    #[prost(uint32, tag = "3")]
    pub boijjckjecp: u32,
    #[prost(uint32, tag = "13")]
    pub bakgnipojdh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfdgkgjflln {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceiomlofmmi {
    #[prost(uint32, tag = "15")]
    pub acgclmagmjf: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub lglgoiogekc: ::prost::alloc::vec::Vec<Mmioacmpkma>,
    #[prost(message, repeated, tag = "10")]
    pub llfpgndaaem: ::prost::alloc::vec::Vec<Bneeceoibjo>,
    #[prost(uint32, repeated, tag = "12")]
    pub gkmmbllhhjc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub dhdakbhkcoe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "4")]
    pub hfkegmkakah: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akkgnnilafl {
    #[prost(message, optional, tag = "1")]
    pub ochjpiphefm: ::core::option::Option<Bneeceoibjo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flccbmnmhfj {
    #[prost(message, optional, tag = "11")]
    pub ochjpiphefm: ::core::option::Option<Bneeceoibjo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gekhpfaofka {
    #[prost(message, repeated, tag = "12")]
    pub ikmghkjhncf: ::prost::alloc::vec::Vec<Bneeceoibjo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adncblilpnb {
    #[prost(message, repeated, tag = "10")]
    pub nppdmmdjfoe: ::prost::alloc::vec::Vec<Bneeceoibjo>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beamljlopld {
    #[prost(uint32, tag = "9")]
    pub hcecpndimnb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmdgggchgkm {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub hcecpndimnb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljfajdccblm {
    #[prost(uint32, tag = "11")]
    pub hcecpndimnb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fheopjpopld {
    #[prost(uint32, tag = "2")]
    pub hcecpndimnb: u32,
    #[prost(message, optional, tag = "3")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub jdlekhchhpl: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbdcpnmdkio {
    #[prost(uint32, repeated, tag = "14")]
    pub mhmiemcbccl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhbblcflegm {
    #[prost(message, repeated, tag = "2")]
    pub hjblaeagbod: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, repeated, tag = "1")]
    pub hgfffpjkodl: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(message, optional, tag = "4")]
    pub jdlekhchhpl: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub clkpoonplnp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "14")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nomgloommie {
    #[prost(uint32, repeated, tag = "15")]
    pub hfkegmkakah: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub gkmmbllhhjc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub acgclmagmjf: u32,
    #[prost(message, repeated, tag = "7")]
    pub llfpgndaaem: ::prost::alloc::vec::Vec<Bneeceoibjo>,
    #[prost(message, repeated, tag = "11")]
    pub lglgoiogekc: ::prost::alloc::vec::Vec<Mmioacmpkma>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmieefhdbfn {
    #[prost(message, optional, tag = "3")]
    pub dkfmmcbfjca: ::core::option::Option<Mmioacmpkma>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjeebfmobdo {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub dkfmmcbfjca: ::core::option::Option<Mmioacmpkma>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpcmgbkmkci {
    #[prost(uint32, tag = "12")]
    pub iffgchlchlm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Koepbfdgiap {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub iffgchlchlm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gckdmhcokmj {
    #[prost(uint32, tag = "1")]
    pub iffgchlchlm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkjajbjddaa {
    #[prost(uint32, tag = "11")]
    pub lpgaoolbbfm: u32,
    #[prost(message, optional, tag = "5")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub jdlekhchhpl: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub iffgchlchlm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oimcalddonh {
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<Helmlfaekga>,
    #[prost(uint32, repeated, tag = "8")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agmeeiifjma {
    #[prost(uint32, repeated, tag = "2")]
    pub jfpjojfjeck: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub gfjeahnelpp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub jpgoledkkcl: u32,
    #[prost(map = "uint32, message", tag = "8")]
    pub cmoflobaiod: ::std::collections::HashMap<u32, Oimcalddonh>,
    #[prost(uint32, repeated, tag = "4")]
    pub jafiagcefhl: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "uint32, uint32", tag = "11")]
    pub cmmpeimdkdl: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub ahbbinilgld: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beefgailkel {
    #[prost(uint32, tag = "5")]
    pub jpgoledkkcl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiepldjlmij {
    #[prost(message, optional, tag = "3")]
    pub fijoabhcpgf: ::core::option::Option<Agmeeiifjma>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kondnnncfcl {
    #[prost(message, optional, tag = "8")]
    pub fijoabhcpgf: ::core::option::Option<Agmeeiifjma>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Helmlfaekga {
    #[prost(enumeration = "AvatarType", tag = "2")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "3")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjhhffhpneh {
    #[prost(uint32, tag = "13")]
    pub battle_id: u32,
    #[prost(uint32, tag = "8")]
    pub jpgoledkkcl: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "2")]
    pub avatar_list: ::prost::alloc::vec::Vec<Helmlfaekga>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mofedkjbcai {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub jpgoledkkcl: u32,
    #[prost(uint32, tag = "8")]
    pub battle_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbogodofokj {
    #[prost(uint32, tag = "1")]
    pub jpgoledkkcl: u32,
    #[prost(uint32, tag = "14")]
    pub ojdjhonlcoc: u32,
    #[prost(uint32, tag = "10")]
    pub battle_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbphicgdjga {
    #[prost(uint32, tag = "6")]
    pub jccolmabopj: u32,
    #[prost(uint32, tag = "8")]
    pub kpiihcgmagg: u32,
    #[prost(enumeration = "Fpofnnofeeh", tag = "10")]
    pub gjmokpigjag: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acfkhehkkja {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idfkboehdbp {
    #[prost(message, repeated, tag = "2")]
    pub bdegbfalcni: ::prost::alloc::vec::Vec<Dbphicgdjga>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eookgadnnmb {
    #[prost(enumeration = "Fpofnnofeeh", tag = "12")]
    pub jgaaeecdfal: i32,
    #[prost(uint32, tag = "7")]
    pub igfhcehhhoi: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "4")]
    pub mphcmmfkpog: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmkibfaecip {
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(message, repeated, tag = "13")]
    pub avatar_list: ::prost::alloc::vec::Vec<Lmamieaaodh>,
    #[prost(uint32, tag = "5")]
    pub fndnmbljapc: u32,
    #[prost(uint32, tag = "9")]
    pub oioglfmcbpe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkfcopmhkci {
    #[prost(message, optional, tag = "6")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blpmdeopfmm {
    #[prost(string, tag = "5")]
    pub jdjmjenhhhl: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub platform: u32,
    #[prost(uint32, tag = "13")]
    pub gmcheopahkc: u32,
    #[prost(uint32, tag = "1")]
    pub khegeddmhme: u32,
    #[prost(uint64, tag = "9")]
    pub hdnnjibaggl: u64,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
    #[prost(uint32, tag = "11")]
    pub hcgjomkbloh: u32,
    #[prost(uint32, tag = "15")]
    pub pcmajmegbld: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dioeanbidmp {
    #[prost(bool, tag = "11")]
    pub kcicanjloba: bool,
    #[prost(uint64, tag = "6")]
    pub server_timestamp_ms: u64,
    #[prost(uint64, tag = "12")]
    pub secret_key_seed: u64,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub khegeddmhme: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aabddaeaapg {
    #[prost(uint32, tag = "3")]
    pub mkgnjoaekdm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikklnkijkho {
    #[prost(enumeration = "Iafdbbcgofo", tag = "15")]
    pub nfgdkiijjen: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnpmfcmbadi {
    #[prost(uint64, tag = "10")]
    pub client_time_ms: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggnmbncnfmg {
    #[prost(uint64, tag = "6")]
    pub server_time_ms: u64,
    #[prost(uint64, tag = "14")]
    pub client_time_ms: u64,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhdbjheacpc {
    #[prost(message, optional, tag = "14")]
    pub nchhhomjbdk: ::core::option::Option<Mfoaahgomic>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FightActivityGroup {
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
    #[prost(uint32, tag = "5")]
    pub endless_max_wave: u32,
    #[prost(uint32, tag = "2")]
    pub passed_max_difficulty_level: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub taken_difficulty_level_reward_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdehcoinapm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hicipecahde {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "13")]
    pub eibgbnaebod: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "7")]
    pub world_level: u32,
    #[prost(message, repeated, tag = "10")]
    pub hnhhdaccogm: ::prost::alloc::vec::Vec<FightActivityGroup>,
    #[prost(bool, tag = "1")]
    pub biokakgphop: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oiacopadblk {
    #[prost(message, repeated, tag = "13")]
    pub hnhhdaccogm: ::prost::alloc::vec::Vec<FightActivityGroup>,
    #[prost(map = "uint32, uint32", tag = "2")]
    pub eibgbnaebod: ::std::collections::HashMap<u32, u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mooihlnlibk {
    #[prost(uint32, tag = "15")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Liaagefbjci {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "5")]
    pub neakgefbcdd: ::prost::alloc::vec::Vec<Mooihlnlibk>,
    #[prost(uint32, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub odgoeojelah: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfgbeapdfbh {
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "6")]
    pub odgoeojelah: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmgpmgiieok {
    #[prost(uint32, tag = "14")]
    pub odgoeojelah: u32,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Effddphipan {
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub group_id: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub odgoeojelah: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cllckidkjnp {
    #[prost(uint32, tag = "12")]
    pub moidpjnooeb: u32,
    #[prost(uint32, tag = "4")]
    pub jccolmabopj: u32,
    #[prost(uint32, tag = "2")]
    pub dcpoeimegli: u32,
    #[prost(enumeration = "Pakokghoagp", tag = "1")]
    pub gjmokpigjag: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clhaiohidij {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cooiplcedfe {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub dbgaojmndmc: u32,
    #[prost(message, repeated, tag = "13")]
    pub cjbdijhedpo: ::prost::alloc::vec::Vec<Cllckidkjnp>,
    #[prost(uint32, repeated, tag = "1")]
    pub poiemdhbkoj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub lpgaoolbbfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afgllplofkl {
    #[prost(enumeration = "AvatarType", tag = "7")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pijkiokgmep {
    #[prost(uint32, repeated, tag = "9")]
    pub poiemdhbkoj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<Afgllplofkl>,
    #[prost(enumeration = "Ojikhafakmn", tag = "1")]
    pub slot: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpndidajned {
    #[prost(enumeration = "Ojikhafakmn", tag = "3")]
    pub slot: i32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub id: u32,
    #[prost(message, optional, tag = "10")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glhifmjnbka {
    #[prost(uint32, tag = "4")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "12")]
    pub efadknhaeci: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajjjfojpcka {
    #[prost(uint32, tag = "11")]
    pub dginkacilnf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hobfkjhmmhp {
    #[prost(uint32, tag = "6")]
    pub jccolmabopj: u32,
    #[prost(enumeration = "Pakokghoagp", tag = "9")]
    pub jahjmcacppe: i32,
    #[prost(enumeration = "Pakokghoagp", tag = "7")]
    pub rank: i32,
    #[prost(uint32, tag = "10")]
    pub mphcmmfkpog: u32,
    #[prost(uint32, tag = "2")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egkofpmnofo {
    #[prost(uint32, tag = "10")]
    pub dbgaojmndmc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abmnfjmimho {
    #[prost(uint32, tag = "6")]
    pub rank: u32,
    #[prost(uint32, tag = "1")]
    pub mdnckipflpb: u32,
    #[prost(bool, tag = "11")]
    pub jbfkipajfnk: bool,
    #[prost(enumeration = "Dblancjjchp", tag = "13")]
    pub state: i32,
    #[prost(uint32, tag = "2")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "15")]
    pub fdomecikbcg: u32,
    #[prost(uint32, tag = "9")]
    pub oabkcckodej: u32,
    #[prost(uint32, tag = "12")]
    pub hp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgmgbcpimab {
    #[prost(message, repeated, tag = "6")]
    pub hgjiomhlaoh: ::prost::alloc::vec::Vec<Abmnfjmimho>,
    #[prost(enumeration = "Ignpcapkdfc", tag = "2")]
    pub ioolphicdme: i32,
    #[prost(uint32, repeated, tag = "10")]
    pub dhkokjlaakb: ::prost::alloc::vec::Vec<u32>,
    #[prost(int32, tag = "13")]
    pub djkomhjmehn: i32,
    #[prost(uint32, tag = "4")]
    pub ajdemhpcfmo: u32,
    #[prost(uint64, tag = "11")]
    pub lkgpmmckpbg: u64,
    #[prost(message, optional, tag = "9")]
    pub akondfcfgek: ::core::option::Option<Eapbfaifbaf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Denoijbaaod {
    #[prost(uint32, tag = "2")]
    pub mebdjjncnfg: u32,
    #[prost(uint32, tag = "12")]
    pub bmocnnjijdp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eapbfaifbaf {
    #[prost(uint32, tag = "3")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "7")]
    pub cur_hp: u32,
    #[prost(uint32, tag = "11")]
    pub gfcihemdoga: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub jbehccpnhfh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub jpbipampend: u32,
    #[prost(uint32, tag = "2")]
    pub gnmmfgoppki: u32,
    #[prost(uint32, tag = "8")]
    pub ofeiiikacfl: u32,
    #[prost(uint32, tag = "1")]
    pub ggndffpkohn: u32,
    #[prost(message, optional, tag = "6")]
    pub bnageejckgi: ::core::option::Option<Obminlghola>,
    #[prost(enumeration = "Dblancjjchp", tag = "13")]
    pub gdkmhgekcen: i32,
    #[prost(uint32, tag = "4")]
    pub anecodblgcb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oponljijhpa {
    #[prost(enumeration = "Aipongicanm", tag = "5")]
    pub pdamihhlilg: i32,
    #[prost(message, optional, tag = "3")]
    pub jejijnmpehb: ::core::option::Option<Eapbfaifbaf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmljciklojl {
    #[prost(int32, tag = "5")]
    pub hckegfdpdml: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljnlgoohfil {
    #[prost(message, repeated, tag = "10")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
    #[prost(message, optional, tag = "5")]
    pub cpiogbbagop: ::core::option::Option<Kgmgbcpimab>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djdbegggakl {
    #[prost(message, optional, tag = "5")]
    pub cpiogbbagop: ::core::option::Option<Kgmgbcpimab>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iffhpbefklj {
    #[prost(message, optional, tag = "3")]
    pub djipmgbjenc: ::core::option::Option<Kgmgbcpimab>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egbdfmaknfn {
    #[prost(message, optional, tag = "4")]
    pub pajkkaimfck: ::core::option::Option<Kgmgbcpimab>,
    #[prost(message, optional, tag = "1")]
    pub bhppkjnffbj: ::core::option::Option<Kgmgbcpimab>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjlkimboidh {
    #[prost(uint32, tag = "4")]
    pub cieklmgokpd: u32,
    #[prost(message, optional, tag = "12")]
    pub bbfkjghijja: ::core::option::Option<Denoijbaaod>,
    #[prost(message, repeated, tag = "9")]
    pub gbglgkegimi: ::prost::alloc::vec::Vec<Oponljijhpa>,
    #[prost(message, optional, tag = "2")]
    pub anajpndkpme: ::core::option::Option<Denoijbaaod>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcgbgdmfikl {
    #[prost(bool, tag = "2")]
    pub mnnnjdmpfni: bool,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub pondkmjicai: ::core::option::Option<Eapbfaifbaf>,
    #[prost(uint32, tag = "12")]
    pub cieklmgokpd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbmkjlidaci {
    #[prost(enumeration = "Dblancjjchp", tag = "13")]
    pub state: i32,
    #[prost(uint32, tag = "7")]
    pub hp: u32,
    #[prost(uint32, tag = "8")]
    pub ajdemhpcfmo: u32,
    #[prost(uint32, tag = "3")]
    pub oabkcckodej: u32,
    #[prost(uint32, tag = "1")]
    pub lpgaoolbbfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bimejcgcjoo {
    #[prost(uint32, tag = "3")]
    pub choodflmenc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmhegjjneid {
    #[prost(uint32, tag = "2")]
    pub choodflmenc: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baebomlpnfe {
    #[prost(uint32, tag = "5")]
    pub fbncflddjfe: u32,
    #[prost(uint32, tag = "9")]
    pub choodflmenc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eldpaljlpmj {
    #[prost(message, optional, tag = "5")]
    pub cpiogbbagop: ::core::option::Option<Kgmgbcpimab>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AssistSimpleInfo {
    #[prost(uint32, tag = "6")]
    pub pos: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "15")]
    pub dressed_skin_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdfpbmlnbjp {
    #[prost(uint32, tag = "8")]
    pub nknakibilel: u32,
    #[prost(uint32, tag = "11")]
    pub nncdpbdokbj: u32,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
    #[prost(uint32, tag = "2")]
    pub jfekengnnak: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oikoefdidbh {
    #[prost(uint32, tag = "12")]
    pub kdhdjdloanj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alehlddneko {
    #[prost(uint32, repeated, tag = "7")]
    pub hdaomndcpma: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub kdhdjdloanj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bacbclhpcng {
    #[prost(message, optional, tag = "1")]
    pub aiifbempaee: ::core::option::Option<Alehlddneko>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljpfhbjfjcm {
    #[prost(message, optional, tag = "5")]
    pub kdnemeljjld: ::core::option::Option<Oikoefdidbh>,
    #[prost(message, optional, tag = "7")]
    pub lbjomgooifa: ::core::option::Option<Bacbclhpcng>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbnkemlblen {
    #[prost(enumeration = "Okfachfdjei", tag = "10")]
    pub gapjajnhglk: i32,
    #[prost(message, optional, tag = "12")]
    pub mbomdpgaieo: ::core::option::Option<Ljpfhbjfjcm>,
    #[prost(message, optional, tag = "5")]
    pub abefnadegid: ::core::option::Option<Jdfpbmlnbjp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerSimpleInfo {
    #[prost(uint32, tag = "5")]
    pub alamlcfpglh: u32,
    #[prost(string, tag = "6")]
    pub cpkikinabfj: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "1")]
    pub assist_simple_info_list: ::prost::alloc::vec::Vec<AssistSimpleInfo>,
    #[prost(string, tag = "10")]
    pub meijfajkmmp: ::prost::alloc::string::String,
    #[prost(enumeration = "PlatformType", tag = "3")]
    pub platform: i32,
    #[prost(int64, tag = "11")]
    pub logout_time: i64,
    #[prost(uint32, tag = "8")]
    pub bmfhibobmhp: u32,
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(bool, tag = "4")]
    pub is_banned: bool,
    #[prost(string, tag = "7")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(enumeration = "FriendOnlineStatus", tag = "14")]
    pub online_status: i32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
    #[prost(string, tag = "2")]
    pub dmdcpeiefkg: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iflncpapggb {
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(uint32, tag = "5")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(uint32, tag = "15")]
    pub promotion: u32,
    #[prost(uint32, tag = "4")]
    pub rank: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngdlamibchp {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(message, repeated, tag = "15")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(uint32, tag = "2")]
    pub slot: u32,
    #[prost(uint32, tag = "9")]
    pub exp: u32,
    #[prost(uint32, tag = "11")]
    pub main_affix_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DisplayAvatarDetailInfo {
    #[prost(uint32, tag = "14")]
    pub dressed_skin_id: u32,
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(message, optional, tag = "15")]
    pub equipment: ::core::option::Option<Iflncpapggb>,
    #[prost(uint32, tag = "5")]
    pub pos: u32,
    #[prost(uint32, tag = "12")]
    pub exp: u32,
    #[prost(uint32, tag = "10")]
    pub rank: u32,
    #[prost(message, repeated, tag = "7")]
    pub skilltree_list: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub promotion: u32,
    #[prost(message, repeated, tag = "13")]
    pub relic_list: ::prost::alloc::vec::Vec<Ngdlamibchp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnfohmhcfeh {
    #[prost(uint32, tag = "11")]
    pub lejlbfifpef: u32,
    #[prost(uint32, tag = "4")]
    pub japackcehbb: u32,
    #[prost(uint32, tag = "8")]
    pub apjnodeccnm: u32,
    #[prost(uint32, tag = "10")]
    pub eedccmgbfah: u32,
    #[prost(uint32, tag = "2")]
    pub gnnbopjfgma: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcpeplljigk {
    #[prost(uint32, tag = "14")]
    pub kcpbmdfjgge: u32,
    #[prost(uint32, tag = "3")]
    pub jhgeicgbakc: u32,
    #[prost(uint32, tag = "10")]
    pub pfcjkljpfid: u32,
    #[prost(uint32, tag = "6")]
    pub befjfnlleio: u32,
    #[prost(message, optional, tag = "7")]
    pub hciobbpgkbe: ::core::option::Option<Bnfohmhcfeh>,
    #[prost(uint32, tag = "9")]
    pub inmbaeohokj: u32,
    #[prost(uint32, tag = "15")]
    pub fdncldhjmjf: u32,
    #[prost(uint32, tag = "8")]
    pub kmkabfpafnk: u32,
    #[prost(uint32, tag = "13")]
    pub kpglihhnkac: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Diifjpbaoob {
    #[prost(bool, tag = "6")]
    pub bkpaceckiia: bool,
    #[prost(bool, tag = "14")]
    pub jcnincccakl: bool,
    #[prost(bool, tag = "2")]
    pub ggodaiohjif: bool,
    #[prost(bool, tag = "3")]
    pub hhcgdeocomi: bool,
    #[prost(bool, tag = "13")]
    pub kmjdmefgcck: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbndajpeago {
    #[prost(message, repeated, tag = "6")]
    pub cjbdijhedpo: ::prost::alloc::vec::Vec<Jdfpbmlnbjp>,
    #[prost(message, optional, tag = "4")]
    pub mbomdpgaieo: ::core::option::Option<Ljpfhbjfjcm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnmjedikenb {
    #[prost(string, tag = "4")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "8")]
    pub bmfhibobmhp: u32,
    #[prost(enumeration = "PlatformType", tag = "3")]
    pub platform: i32,
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(message, optional, tag = "1743")]
    pub elipgnpmlip: ::core::option::Option<Diifjpbaoob>,
    #[prost(message, repeated, tag = "11")]
    pub mobolckmgai: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(string, tag = "6")]
    pub meijfajkmmp: ::prost::alloc::string::String,
    #[prost(uint32, tag = "9")]
    pub iiengikgngm: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
    #[prost(message, optional, tag = "1297")]
    pub hlbeedlemca: ::core::option::Option<Mbndajpeago>,
    #[prost(string, tag = "14")]
    pub cpkikinabfj: ::prost::alloc::string::String,
    #[prost(bool, tag = "1")]
    pub flenmbplfhl: bool,
    #[prost(bool, tag = "12")]
    pub pghdpnfjbla: bool,
    #[prost(message, repeated, tag = "1700")]
    pub gkhnbcojdge: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(uint32, tag = "2")]
    pub kikoianeodj: u32,
    #[prost(string, tag = "10")]
    pub dmdcpeiefkg: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub nodnhhligdj: ::core::option::Option<Hcpeplljigk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FriendInfo {
    #[prost(message, optional, tag = "7")]
    pub fojelnklcjp: ::core::option::Option<Cbnkemlblen>,
    #[prost(enumeration = "PlayingState", tag = "3")]
    pub friend_playing_state: i32,
    #[prost(string, tag = "13")]
    pub fbgeifghjde: ::prost::alloc::string::String,
    #[prost(int64, tag = "8")]
    pub fgilieldboi: i64,
    #[prost(bool, tag = "4")]
    pub bhfagdddack: bool,
    #[prost(message, optional, tag = "2")]
    pub player_simple_info: ::core::option::Option<PlayerSimpleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pemmdkhpdfp {
    #[prost(int64, tag = "14")]
    pub bnjacmafmid: i64,
    #[prost(message, optional, tag = "7")]
    pub ndplnghkgbk: ::core::option::Option<PlayerSimpleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pihaeebhppc {
    #[prost(message, optional, tag = "14")]
    pub ndplnghkgbk: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(bool, tag = "11")]
    pub lgibggmcnal: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mejkeeapkfn {
    #[prost(message, optional, tag = "3")]
    pub ndplnghkgbk: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(message, optional, tag = "2")]
    pub hiabljmppan: ::core::option::Option<DisplayAvatarDetailInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agnjchncimi {
    #[prost(string, tag = "9")]
    pub dmdcpeiefkg: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub fbgeifghjde: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub bmfhibobmhp: u32,
    #[prost(uint32, tag = "4")]
    pub foiahmcbchb: u32,
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(enumeration = "PlatformType", tag = "6")]
    pub platform: i32,
    #[prost(string, tag = "15")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eijlpffenlk {
    #[prost(uint32, tag = "8")]
    pub knbgpmdmbkc: u32,
    #[prost(message, optional, tag = "7")]
    pub ndplnghkgbk: ::core::option::Option<PlayerSimpleInfo>,
    #[prost(string, tag = "15")]
    pub fbgeifghjde: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub bopehbonhll: u32,
    #[prost(uint32, tag = "11")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "4")]
    pub ifckabbiilb: u32,
    #[prost(message, repeated, tag = "2")]
    pub lineup_list: ::prost::alloc::vec::Vec<Mdhdfopebgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpdiaaijbhd {
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(uint32, tag = "6")]
    pub jfekengnnak: u32,
    #[prost(message, optional, tag = "795")]
    pub icoibnhjhec: ::core::option::Option<Khjddbffahk>,
    #[prost(message, optional, tag = "802")]
    pub ckbeijmmbjp: ::core::option::Option<Imiaeepmcje>,
    #[prost(message, optional, tag = "266")]
    pub idcpcalknen: ::core::option::Option<Cinndmfnbij>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdahklgefeg {
    #[prost(uint32, tag = "3")]
    pub lnjapmhfcck: u32,
    #[prost(message, optional, tag = "13")]
    pub mjhepdejndc: ::core::option::Option<Dgolpjpbccp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emmlcghkhkc {
    #[prost(uint32, tag = "2")]
    pub agiiieglegk: u32,
    #[prost(message, optional, tag = "3")]
    pub pdbobmjedbc: ::core::option::Option<Bninelnejfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adlmgdkboeo {
    #[prost(uint32, tag = "13")]
    pub mgglchabnnh: u32,
    #[prost(uint32, tag = "12")]
    pub ocboiocjeko: u32,
    #[prost(uint32, tag = "3")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aloefgohkle {
    #[prost(uint32, tag = "1")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "14")]
    pub nnckjbegijk: u32,
    #[prost(uint32, tag = "11")]
    pub lndeejkkcjk: u32,
    #[prost(uint32, tag = "2")]
    pub dlajcfloffl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngpbemiajal {
    #[prost(message, optional, tag = "1301")]
    pub nbjmifjbkmg: ::core::option::Option<Cdahklgefeg>,
    #[prost(message, optional, tag = "1602")]
    pub fbagcbhggge: ::core::option::Option<Emmlcghkhkc>,
    #[prost(message, optional, tag = "3")]
    pub kolfbcfamem: ::core::option::Option<Adlmgdkboeo>,
    #[prost(message, optional, tag = "10")]
    pub cbkjlnjjbmg: ::core::option::Option<Aloefgohkle>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mllfmkokjfk {
    #[prost(uint32, tag = "10")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nioigppbpeh {
    #[prost(uint32, tag = "15")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "10")]
    pub dmacejfjohm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nikomgcpamg {
    #[prost(uint32, tag = "14")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nddaafenheh {
    #[prost(enumeration = "DevelopmentType", tag = "12")]
    pub bmojlopgked: i32,
    #[prost(int64, tag = "4")]
    pub hlnehicbpai: i64,
    #[prost(message, optional, tag = "1319")]
    pub ceofecgihpd: ::core::option::Option<Mllfmkokjfk>,
    #[prost(message, optional, tag = "120")]
    pub jkkhadmdbpn: ::core::option::Option<Nikomgcpamg>,
    #[prost(uint32, tag = "710")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "149")]
    pub dkgkfeeajpd: u32,
    #[prost(uint32, tag = "1496")]
    pub cpkoeodfpmg: u32,
    #[prost(message, optional, tag = "1267")]
    pub lfhojlfbgdi: ::core::option::Option<Nioigppbpeh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnpcbhahcmk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoScRsp {
    #[prost(message, repeated, tag = "3")]
    pub friend_info_list: ::prost::alloc::vec::Vec<FriendInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub idfijahanmn: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnpoaimlole {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dghjmjaopjm {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub bnjanfgfnjh: ::core::option::Option<Pnmjedikenb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Doifbfcpogl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndmajbinolo {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub deiipomgdjf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub aodlekmnldh: ::prost::alloc::vec::Vec<Pemmdkhpdfp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdongajedee {
    #[prost(enumeration = "Mfhcehbfeng", tag = "8")]
    pub gnfpnbgacdf: i32,
    #[prost(uint32, tag = "7")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhiedmcehho {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clkkkmodmcj {
    #[prost(message, optional, tag = "6")]
    pub kfapmddjdec: ::core::option::Option<Pemmdkhpdfp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gohfgmmdkpn {
    #[prost(bool, tag = "12")]
    pub pieecaekfgf: bool,
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbnhlhdekjd {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub pieecaekfgf: bool,
    #[prost(message, optional, tag = "6")]
    pub imlfgeehobj: ::core::option::Option<FriendInfo>,
    #[prost(uint32, tag = "7")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpgbheghmdg {
    #[prost(bool, tag = "2")]
    pub pieecaekfgf: bool,
    #[prost(uint32, tag = "5")]
    pub uid: u32,
    #[prost(message, optional, tag = "8")]
    pub imlfgeehobj: ::core::option::Option<FriendInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idjkfjeodbh {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
    #[prost(uint32, tag = "3")]
    pub egidfmlgcjo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cahgejgdeoi {
    #[prost(uint32, tag = "14")]
    pub uid: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Faecclcogab {
    #[prost(uint32, tag = "1")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpipfdbgeii {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogkjjkbjnfk {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub black_info: ::core::option::Option<PlayerSimpleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Golhljkpnga {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dndjfjinahl {
    #[prost(bool, tag = "7")]
    pub nbaheekiadi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlcmgpajimj {
    #[prost(message, repeated, tag = "12")]
    pub giagnhmaocd: ::prost::alloc::vec::Vec<Pihaeebhppc>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Injlohpekga {
    #[prost(string, tag = "10")]
    pub fbgeifghjde: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub mgdnainpahe: u32,
    #[prost(uint32, tag = "7")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgceiojjkba {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(string, tag = "6")]
    pub fbgeifghjde: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clcipohohgg {
    #[prost(uint32, tag = "1")]
    pub hpcebekndge: u32,
    #[prost(string, tag = "11")]
    pub hfnnbmdgpld: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kabkahihoid {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piejofpnlmi {
    #[prost(uint32, tag = "8")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iekkoalegef {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdfhmlndkna {
    #[prost(uint32, repeated, tag = "6")]
    pub pknbckelhkm: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "15")]
    pub nbaheekiadi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acfamcmejbi {
    #[prost(uint32, repeated, tag = "6")]
    pub aimapkogmab: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub bemfclhconk: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijbekhlpglj {
    #[prost(bool, tag = "2")]
    pub nbaheekiadi: bool,
    #[prost(bool, tag = "6")]
    pub kboahkmenfc: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdmnbfnpoci {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub dhmebnhcebe: ::prost::alloc::vec::Vec<Mejkeeapkfn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dghpjblnheh {
    #[prost(uint32, tag = "7")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkjeclpipmd {
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijcmhjpfbfk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eiogijifkli {
    #[prost(message, optional, tag = "2")]
    pub lbmpcolonhb: ::core::option::Option<Mejkeeapkfn>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgnhfokcmpc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbdhkabpkhh {
    #[prost(uint32, tag = "13")]
    pub egngmiieand: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub iohhmeeaaoe: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub iolgafdolmj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub bhdidahbfpc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkafbnnfkbj {
    #[prost(uint32, tag = "11")]
    pub egngmiieand: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nihmjkiclpe {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eicjcjkdcef {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub clhkfmmlaji: ::prost::alloc::vec::Vec<Agnjchncimi>,
    #[prost(message, optional, tag = "6")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inehlccdmab {
    #[prost(message, optional, tag = "1")]
    pub lbmpcolonhb: ::core::option::Option<Mejkeeapkfn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aifafmlhjbc {
    #[prost(enumeration = "PlatformType", tag = "12")]
    pub platform: i32,
    #[prost(string, repeated, tag = "4")]
    pub ffhkfkdapln: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ognjcfngimi {
    #[prost(message, repeated, tag = "10")]
    pub giagnhmaocd: ::prost::alloc::vec::Vec<PlayerSimpleInfo>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpmgmiipgml {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhpfifghcjl {
    #[prost(bool, tag = "11")]
    pub llcmgmlcjca: bool,
    #[prost(bool, tag = "4")]
    pub degafpjnikk: bool,
    #[prost(uint32, repeated, tag = "7")]
    pub fljpnipdjmh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "9")]
    pub mnacbpjeche: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmfihgpblcc {
    #[prost(bool, tag = "12")]
    pub dklbecnllgj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghjmjggjcle {
    #[prost(bool, tag = "3")]
    pub dklbecnllgj: bool,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjmdialakjb {
    #[prost(uint32, tag = "15")]
    pub uid: u32,
    #[prost(bool, tag = "11")]
    pub ijlbnijghcg: bool,
    #[prost(uint32, tag = "5")]
    pub mgdnainpahe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghdjcmejofl {
    #[prost(bool, tag = "10")]
    pub ijlbnijghcg: bool,
    #[prost(uint32, tag = "8")]
    pub uid: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eiefajnopee {
    #[prost(uint32, repeated, tag = "8")]
    pub kaippbfklgo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub mcochdjinng: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub bmgnoinbocb: u32,
    #[prost(enumeration = "AssistAvatarType", tag = "9")]
    pub hojailmlleb: i32,
    #[prost(bool, tag = "3")]
    pub nbaheekiadi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpfhhdoanpo {
    #[prost(message, repeated, tag = "13")]
    pub dhmebnhcebe: ::prost::alloc::vec::Vec<Mejkeeapkfn>,
    #[prost(uint32, tag = "12")]
    pub bmgnoinbocb: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mldhbildkna {
    #[prost(uint32, tag = "8")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kebdplkjjeb {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(bool, tag = "9")]
    pub cnmpneilgga: bool,
    #[prost(message, repeated, tag = "13")]
    pub bdjmhpbiaag: ::prost::alloc::vec::Vec<Eijlpffenlk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eadfmjgdmhi {
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(uint32, tag = "6")]
    pub dcpoeimegli: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnaniimlgjh {
    #[prost(message, repeated, tag = "10")]
    pub iclpomplljg: ::prost::alloc::vec::Vec<DisplayAvatarDetailInfo>,
    #[prost(uint32, tag = "1")]
    pub dcpoeimegli: u32,
    #[prost(uint32, tag = "9")]
    pub uid: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bldpehfcick {
    #[prost(uint32, tag = "2")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdgefjmdoii {
    #[prost(message, optional, tag = "4")]
    pub bjehkpdclfe: ::core::option::Option<Ngpbemiajal>,
    #[prost(message, repeated, tag = "3")]
    pub fdijjcafkcc: ::prost::alloc::vec::Vec<Mpdiaaijbhd>,
    #[prost(uint32, tag = "14")]
    pub uid: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cclmggmiaan {
    #[prost(uint32, tag = "11")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opdmheamomd {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
    #[prost(message, repeated, tag = "6")]
    pub ggcjfgepjjd: ::prost::alloc::vec::Vec<Nddaafenheh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckjpkncomob {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GachaCeilingAvatar {
    #[prost(uint32, tag = "5")]
    pub repeated_cnt: u32,
    #[prost(uint32, tag = "14")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glmolhnjdpa {
    #[prost(message, repeated, tag = "3")]
    pub avatar_list: ::prost::alloc::vec::Vec<GachaCeilingAvatar>,
    #[prost(bool, tag = "15")]
    pub ikfepnpdgdh: bool,
    #[prost(uint32, tag = "7")]
    pub cehdiclpdmc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdfnajlkgnm {
    #[prost(uint32, tag = "13")]
    pub iponcaehhgl: u32,
    #[prost(message, optional, tag = "15")]
    pub gmhfmbknian: ::core::option::Option<Glmolhnjdpa>,
    #[prost(uint32, repeated, tag = "2")]
    pub ocgpmookjid: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub dopfcokpjei: u32,
    #[prost(int64, tag = "6")]
    pub begin_time: i64,
    #[prost(uint32, repeated, tag = "4")]
    pub pjlidoghbhb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub ecapcfaefbo: u32,
    #[prost(string, tag = "10")]
    pub diafdnfnbfj: ::prost::alloc::string::String,
    #[prost(int64, tag = "5")]
    pub end_time: i64,
    #[prost(string, tag = "9")]
    pub feigoefidio: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkliongbomo {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub ohmaodidhnl: u32,
    #[prost(uint32, tag = "6")]
    pub chmfglghlcf: u32,
    #[prost(message, repeated, tag = "3")]
    pub mdnaaembmpd: ::prost::alloc::vec::Vec<Kdfnajlkgnm>,
    #[prost(uint32, tag = "12")]
    pub lmbmncbfgpj: u32,
    #[prost(uint32, tag = "15")]
    pub hgaoeennejc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfglnfedeph {
    #[prost(uint32, tag = "8")]
    pub oecedagjedd: u32,
    #[prost(uint32, tag = "2")]
    pub lnillbflgnj: u32,
    #[prost(uint32, tag = "9")]
    pub ohmaodidhnl: u32,
    #[prost(uint32, tag = "14")]
    pub dopfcokpjei: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fggllplkaim {
    #[prost(bool, tag = "13")]
    pub kollpgccdil: bool,
    #[prost(message, optional, tag = "4")]
    pub oaobpakmgcg: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub cgninlppfle: ::core::option::Option<Item>,
    #[prost(message, optional, tag = "9")]
    pub fepjfbdhojc: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nglmecbodjd {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub ialfoddhdkp: u32,
    #[prost(uint32, tag = "10")]
    pub ecapcfaefbo: u32,
    #[prost(uint32, tag = "15")]
    pub iponcaehhgl: u32,
    #[prost(message, repeated, tag = "12")]
    pub gndidejjmhc: ::prost::alloc::vec::Vec<Fggllplkaim>,
    #[prost(uint32, tag = "8")]
    pub oecedagjedd: u32,
    #[prost(uint32, tag = "7")]
    pub cehdiclpdmc: u32,
    #[prost(uint32, tag = "6")]
    pub dopfcokpjei: u32,
    #[prost(uint32, tag = "14")]
    pub hgaoeennejc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eemcgfnfocn {
    #[prost(uint32, tag = "7")]
    pub cfgmbhjglbd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjndgooecif {
    #[prost(message, optional, tag = "4")]
    pub gmhfmbknian: ::core::option::Option<Glmolhnjdpa>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub cfgmbhjglbd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecgcblcgmkb {
    #[prost(uint32, tag = "13")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "3")]
    pub cfgmbhjglbd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnginbbbpfj {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(message, optional, tag = "15")]
    pub gmhfmbknian: ::core::option::Option<Glmolhnjdpa>,
    #[prost(uint32, tag = "14")]
    pub cfgmbhjglbd: u32,
    #[prost(message, optional, tag = "10")]
    pub oaobpakmgcg: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okndmaemman {
    #[prost(bool, tag = "9")]
    pub nhjfhkflonm: bool,
    #[prost(uint32, tag = "10")]
    pub joeicfcdnem: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghomiilpjlm {
    #[prost(bool, tag = "9")]
    pub cmmkodhdjga: bool,
    #[prost(enumeration = "Hijpilajhcm", tag = "14")]
    pub pioeiidnhaa: i32,
    #[prost(enumeration = "Mcejjmodajg", tag = "13")]
    pub miijnlbpgml: i32,
    #[prost(uint32, tag = "8")]
    pub ogkiomjegel: u32,
    #[prost(bool, tag = "12")]
    pub fppllcnicea: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flikgghikfg {
    #[prost(uint32, tag = "11")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "7")]
    pub iakfjjgoehb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aofkaaiifbh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbhapnpjnkb {
    #[prost(enumeration = "Acmdlmdecmj", tag = "1")]
    pub pbodiibccdh: i32,
    #[prost(message, repeated, tag = "12")]
    pub cpphjpajnol: ::prost::alloc::vec::Vec<Ghomiilpjlm>,
    #[prost(message, repeated, tag = "4")]
    pub dmhfgcnnlnf: ::prost::alloc::vec::Vec<Flikgghikfg>,
    #[prost(message, repeated, tag = "6")]
    pub cakbfkmlddj: ::prost::alloc::vec::Vec<Okndmaemman>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bljekckdglc {
    #[prost(uint32, tag = "13")]
    pub ipkjompgpok: u32,
    #[prost(uint32, tag = "11")]
    pub ogkiomjegel: u32,
    #[prost(enumeration = "Hijpilajhcm", tag = "8")]
    pub cphllgeadmf: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lololekfldd {
    #[prost(enumeration = "Hijpilajhcm", tag = "4")]
    pub bfajfamllah: i32,
    #[prost(uint32, tag = "5")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnomhdddcio {
    #[prost(uint32, tag = "7")]
    pub ipkjompgpok: u32,
    #[prost(uint32, tag = "3")]
    pub ogkiomjegel: u32,
    #[prost(message, optional, tag = "14")]
    pub pdpfcfglgco: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnhkkljllil {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub ogkiomjegel: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Badomabhanf {
    #[prost(uint32, tag = "1")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "6")]
    pub joeicfcdnem: u32,
    #[prost(uint32, tag = "12")]
    pub ipkjompgpok: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lamebfpllpg {
    #[prost(message, optional, tag = "8")]
    pub dekonpmjeen: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub ogkiomjegel: u32,
    #[prost(uint32, tag = "5")]
    pub joeicfcdnem: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdjhfoaokhp {
    #[prost(message, repeated, tag = "9")]
    pub dmhfgcnnlnf: ::prost::alloc::vec::Vec<Flikgghikfg>,
    #[prost(message, repeated, tag = "11")]
    pub pfocfplopkf: ::prost::alloc::vec::Vec<Okndmaemman>,
    #[prost(enumeration = "Acmdlmdecmj", tag = "7")]
    pub pbodiibccdh: i32,
    #[prost(message, repeated, tag = "15")]
    pub opedeflpfck: ::prost::alloc::vec::Vec<Ghomiilpjlm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccghcafjcpm {
    #[prost(message, optional, tag = "4")]
    pub pgccbpjlkmk: ::core::option::Option<Flikgghikfg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcachphghki {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub pgccbpjlkmk: ::core::option::Option<Flikgghikfg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebligdnnpjk {
    #[prost(uint32, repeated, tag = "8")]
    pub hccebdhpdke: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub nppeghdfaen: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aflbhhdjdef {
    #[prost(uint32, tag = "2")]
    pub pamafmppefi: u32,
    #[prost(uint32, tag = "10")]
    pub dcpoeimegli: u32,
    #[prost(bool, tag = "3")]
    pub lpgaoadlgnd: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HeliobusChallengeLineup {
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub skill_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgfpidkdljb {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgnjkalcidb {
    #[prost(message, optional, tag = "9")]
    pub hhapkchnbea: ::core::option::Option<Ebligdnnpjk>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub djemibiamha: u32,
    #[prost(uint32, tag = "4")]
    pub ginenhkpkmk: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(message, repeated, tag = "13")]
    pub cjbdijhedpo: ::prost::alloc::vec::Vec<Aflbhhdjdef>,
    #[prost(uint32, tag = "6")]
    pub jmbmfaglcke: u32,
    #[prost(message, repeated, tag = "2")]
    pub giclbghfpjg: ::prost::alloc::vec::Vec<HeliobusChallengeLineup>,
    #[prost(uint32, tag = "1")]
    pub hbnoljogigk: u32,
    #[prost(message, repeated, tag = "14")]
    pub nedgdblobgk: ::prost::alloc::vec::Vec<Hncbeeioldh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjpmcapibfn {
    #[prost(message, repeated, tag = "6")]
    pub dgbjoolhhng: ::prost::alloc::vec::Vec<Mjpmcapibfn>,
    #[prost(uint32, tag = "2")]
    pub hcpjodhafbn: u32,
    #[prost(uint32, tag = "5")]
    pub phblfpkjdka: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hncbeeioldh {
    #[prost(uint32, tag = "12")]
    pub emhkjbeckic: u32,
    #[prost(uint32, tag = "14")]
    pub djjmhikpmjl: u32,
    #[prost(bool, tag = "15")]
    pub idegcfnalkn: bool,
    #[prost(uint32, tag = "10")]
    pub fgfcafjgjln: u32,
    #[prost(message, repeated, tag = "5")]
    pub fmnilimjdda: ::prost::alloc::vec::Vec<Mjpmcapibfn>,
    #[prost(uint32, tag = "6")]
    pub lbobjldondf: u32,
    #[prost(uint32, tag = "2")]
    pub nneoodacfgl: u32,
    #[prost(bool, tag = "1")]
    pub bdoimbnnlnb: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhdmapjnpoo {
    #[prost(uint32, tag = "1")]
    pub fgfcafjgjln: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihhcmclehgo {
    #[prost(uint32, tag = "13")]
    pub fgfcafjgjln: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghjfebpdooh {
    #[prost(uint32, tag = "12")]
    pub djjmhikpmjl: u32,
    #[prost(uint32, tag = "9")]
    pub fgfcafjgjln: u32,
    #[prost(uint32, tag = "7")]
    pub lbobjldondf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpilmflopgh {
    #[prost(message, optional, tag = "10")]
    pub hjcbomofobf: ::core::option::Option<Hncbeeioldh>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjjhoepllah {
    #[prost(uint32, tag = "10")]
    pub fgfcafjgjln: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifkgomfnmaa {
    #[prost(uint32, tag = "1")]
    pub fgfcafjgjln: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(bool, tag = "9")]
    pub idegcfnalkn: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Daignniobkk {
    #[prost(uint32, tag = "1")]
    pub limdkgpmgoe: u32,
    #[prost(uint32, tag = "6")]
    pub fgfcafjgjln: u32,
    #[prost(uint32, tag = "9")]
    pub hcpjodhafbn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mipldfahhdi {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub hjcbomofobf: ::core::option::Option<Hncbeeioldh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kaiacbkbgjo {
    #[prost(message, repeated, tag = "8")]
    pub hmhmdaggfni: ::prost::alloc::vec::Vec<Hncbeeioldh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kalbhbfbgbi {
    #[prost(message, repeated, tag = "13")]
    pub hmhmdaggfni: ::prost::alloc::vec::Vec<Hncbeeioldh>,
    #[prost(uint32, tag = "8")]
    pub hbnoljogigk: u32,
    #[prost(uint32, tag = "3")]
    pub djemibiamha: u32,
    #[prost(uint32, tag = "7")]
    pub ginenhkpkmk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jddfhajhdph {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eknlaglphdi {
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfjkhkhilai {
    #[prost(uint32, tag = "15")]
    pub hgnfloilneg: u32,
    #[prost(uint32, tag = "13")]
    pub nppeghdfaen: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmlbcokemme {
    #[prost(uint32, tag = "7")]
    pub event_id: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub hgnfloilneg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alepdepldll {
    #[prost(message, optional, tag = "11")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Naagikaillg {
    #[prost(uint32, tag = "7")]
    pub hgnfloilneg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjfmcmdhnkg {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub hgnfloilneg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akbbkfokide {
    #[prost(message, optional, tag = "4")]
    pub ocdbilliofd: ::core::option::Option<Aflbhhdjdef>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipockoabfmh {
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<HeliobusChallengeLineup>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Balokbjaphf {
    #[prost(uint32, tag = "3")]
    pub hgnfloilneg: u32,
    #[prost(uint32, tag = "5")]
    pub ikpjplopmjk: u32,
    #[prost(uint32, tag = "6")]
    pub bnpfaleifaj: u32,
    #[prost(bool, tag = "11")]
    pub chbdfdolhoc: bool,
    #[prost(uint32, tag = "4")]
    pub prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkgnphblpef {
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<Dnlbhaceial>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flkcekmkejm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Equipment {
    #[prost(uint32, tag = "7")]
    pub rank: u32,
    #[prost(uint32, tag = "12")]
    pub promotion: u32,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "8")]
    pub unique_id: u32,
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub equip_avatar_id: u32,
    #[prost(bool, tag = "14")]
    pub is_protected: bool,
    #[prost(uint32, tag = "13")]
    pub tid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relic {
    #[prost(bool, tag = "11")]
    pub is_discarded: bool,
    #[prost(uint32, tag = "15")]
    pub main_affix_id: u32,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "12")]
    pub tid: u32,
    #[prost(uint32, tag = "8")]
    pub equip_avatar_id: u32,
    #[prost(message, repeated, tag = "10")]
    pub sub_affix_list: ::prost::alloc::vec::Vec<RelicAffix>,
    #[prost(bool, tag = "4")]
    pub is_protected: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Material {
    #[prost(uint32, tag = "6")]
    pub id: u32,
    #[prost(uint64, tag = "9")]
    pub npcgokkdhdf: u64,
    #[prost(uint32, tag = "10")]
    pub num: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipcffjhaijg {
    #[prost(uint32, tag = "12")]
    pub kagnbjdmamf: u32,
    #[prost(uint32, tag = "10")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lglodndhijb {
    #[prost(uint32, tag = "7")]
    pub kagnbjdmamf: u32,
    #[prost(uint64, tag = "8")]
    pub npcgokkdhdf: u64,
    #[prost(uint32, tag = "5")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBagScRsp {
    #[prost(uint32, repeated, tag = "2")]
    pub ikhicomcdhp: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "11")]
    pub ibigdplhfkc: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "4")]
    pub deadfemndnk: ::prost::alloc::vec::Vec<Ipcffjhaijg>,
    #[prost(message, repeated, tag = "5")]
    pub iinhlljekcd: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(message, repeated, tag = "15")]
    pub epbibaobeoj: ::prost::alloc::vec::Vec<Lglodndhijb>,
    #[prost(message, repeated, tag = "10")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(message, repeated, tag = "13")]
    pub flnjichokac: ::prost::alloc::vec::Vec<Lglodndhijb>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub geidcjnjmma: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ngegmhahglm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
    #[prost(enumeration = "Koedfpccpch", repeated, tag = "8")]
    pub jlkdhmeecjm: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, repeated, tag = "1")]
    pub material_list: ::prost::alloc::vec::Vec<Material>,
    #[prost(uint32, repeated, tag = "7")]
    pub kjibmefiben: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfjepdgbohe {
    #[prost(message, optional, tag = "15")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "11")]
    pub equipment_unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdmeoillmgg {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jeobbmnfndi {
    #[prost(uint32, repeated, tag = "10")]
    pub jhpabfhpimo: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "15")]
    pub figgbmnlcdb: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhnkccepneb {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmkdljlllec {
    #[prost(uint32, tag = "15")]
    pub apbdbeabddj: u32,
    #[prost(uint32, tag = "13")]
    pub feonppdpkoj: u32,
    #[prost(uint32, tag = "11")]
    pub nejlfhfmjgb: u32,
    #[prost(bool, tag = "7")]
    pub efjhleknapg: bool,
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub kohajfmhiio: i32,
    #[prost(uint32, tag = "6")]
    pub base_avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emhlhjhbmam {
    #[prost(uint32, tag = "13")]
    pub feonppdpkoj: u32,
    #[prost(message, optional, tag = "4")]
    pub ngkaoednndn: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub ohpbgbelimn: u32,
    #[prost(uint32, tag = "12")]
    pub nejlfhfmjgb: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint64, tag = "7")]
    pub afmgandnccg: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikilhkgmpgo {
    #[prost(message, optional, tag = "8")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "7")]
    pub equipment_unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ganlnnedpfp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ijaofbkgbfo {
    #[prost(message, optional, tag = "12")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "8")]
    pub equipment_unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhoadbjimao {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub hdolepooefa: ::prost::alloc::vec::Vec<PileItem>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmlkkldifnp {
    #[prost(message, optional, tag = "3")]
    pub gbejhehoojg: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "6")]
    pub clkbpijjaap: u32,
    #[prost(uint32, tag = "5")]
    pub kcededdikfd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oniajnkdgah {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub hdolepooefa: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub clkbpijjaap: u32,
    #[prost(uint32, tag = "1")]
    pub kcededdikfd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lejkofpfmeg {
    #[prost(message, optional, tag = "10")]
    pub gbejhehoojg: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "7")]
    pub dacmhmgikdn: u32,
    #[prost(uint32, tag = "14")]
    pub kcededdikfd: u32,
    #[prost(uint32, tag = "8")]
    pub clkbpijjaap: u32,
    #[prost(uint32, tag = "12")]
    pub main_affix_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfacgpoflcm {
    #[prost(message, optional, tag = "8")]
    pub hdolepooefa: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub kcededdikfd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Noinphijimb {
    #[prost(uint32, tag = "11")]
    pub relic_unique_id: u32,
    #[prost(message, optional, tag = "7")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldobfgmocga {
    #[prost(message, repeated, tag = "10")]
    pub hdolepooefa: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aclpgkbjijb {
    #[prost(bool, tag = "1")]
    pub lkamihdhkbe: bool,
    #[prost(uint32, repeated, tag = "4")]
    pub bkjpbalpell: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "5")]
    pub figgbmnlcdb: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dldngoalcdb {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pobgcfghpic {
    #[prost(bool, tag = "6")]
    pub bdfbfehlfgf: bool,
    #[prost(uint32, repeated, tag = "3")]
    pub bkjpbalpell: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "15")]
    pub lkamihdhkbe: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klemlcaknap {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub bdfbfehlfgf: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcjhdmjibck {
    #[prost(message, optional, tag = "5")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(bool, tag = "1")]
    pub fkodidbfdfn: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfjfcpdbgkk {
    #[prost(message, optional, tag = "5")]
    pub hdolepooefa: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RechargeSuccNotify {
    #[prost(message, optional, tag = "7")]
    pub item_list: ::core::option::Option<ItemList>,
    #[prost(string, tag = "13")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub channel_order_no: ::prost::alloc::string::String,
    #[prost(uint64, tag = "3")]
    pub month_card_outdate_time: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjgmgileblk {
    #[prost(uint32, tag = "14")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeHcoinScRsp {
    #[prost(uint32, tag = "4")]
    pub num: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjijjahdjpa {
    #[prost(uint32, tag = "8")]
    pub dkgkfeeajpd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkokdmdgidk {
    #[prost(uint32, repeated, tag = "13")]
    pub icopfphppdi: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaimdlacgcn {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub flnjichokac: ::prost::alloc::vec::Vec<Lglodndhijb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kochkckdbhe {
    #[prost(uint32, tag = "11")]
    pub memkmmilpkd: u32,
    #[prost(uint32, tag = "3")]
    pub bgecmdbfigi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbidbcochhl {
    #[prost(message, repeated, tag = "9")]
    pub nehijgifbke: ::prost::alloc::vec::Vec<Kochkckdbhe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eackoplgbme {
    #[prost(message, optional, tag = "7")]
    pub elnbhiipadp: ::core::option::Option<Kochkckdbhe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hacbjelpoac {
    #[prost(uint32, tag = "1")]
    pub olfhccbiidg: u32,
    #[prost(uint32, tag = "12")]
    pub elkbpopdpjg: u32,
    #[prost(uint32, tag = "4")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnedfmiemjm {
    #[prost(uint32, tag = "13")]
    pub elkbpopdpjg: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oocjhkkkoog {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikhfcbbolnd {
    #[prost(uint32, repeated, tag = "8")]
    pub gddbahogfki: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnceleggnlo {
    #[prost(uint32, tag = "11")]
    pub hgjolgkaofj: u32,
    #[prost(bool, tag = "2")]
    pub bplpnnijlji: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efomgnkkdgd {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub hgjolgkaofj: u32,
    #[prost(bool, tag = "15")]
    pub bplpnnijlji: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnbfccfghfn {
    #[prost(uint32, tag = "3")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhimlhffkmg {
    #[prost(uint32, repeated, tag = "13")]
    pub kjibmefiben: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Koedfpccpch", repeated, tag = "12")]
    pub jlkdhmeecjm: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkjmimbbdnl {
    #[prost(bool, tag = "4")]
    pub lcidaenomif: bool,
    #[prost(enumeration = "Koedfpccpch", tag = "2")]
    pub dpigkeokfmk: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjbmdpigdlk {
    #[prost(bool, tag = "1")]
    pub lcidaenomif: bool,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(enumeration = "Koedfpccpch", tag = "14")]
    pub dpigkeokfmk: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kikenjaacap {
    #[prost(message, repeated, tag = "15")]
    pub gekinokmmci: ::prost::alloc::vec::Vec<PileItem>,
    #[prost(bool, tag = "9")]
    pub ncfldodhkod: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njfonlgigpk {
    #[prost(uint32, tag = "11")]
    pub kbhcaajjkeh: u32,
    #[prost(uint32, tag = "9")]
    pub hmofppjjpfn: u32,
    #[prost(uint32, tag = "4")]
    pub dkgiphjmpih: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Penkoafkhkl {
    #[prost(uint32, tag = "15")]
    pub ojmhmiobhoi: u32,
    #[prost(uint32, tag = "4")]
    pub hmofppjjpfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hicihjimcmh {
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmeeecoggkf {
    #[prost(bool, tag = "6")]
    pub hdpcekiljkc: bool,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub ohdnajnckog: ::prost::alloc::vec::Vec<Penkoafkhkl>,
    #[prost(message, repeated, tag = "3")]
    pub bomphgjmnib: ::prost::alloc::vec::Vec<Penkoafkhkl>,
    #[prost(message, repeated, tag = "14")]
    pub lmogiabffla: ::prost::alloc::vec::Vec<Njfonlgigpk>,
    #[prost(message, repeated, tag = "9")]
    pub moangckpldg: ::prost::alloc::vec::Vec<Penkoafkhkl>,
    #[prost(message, repeated, tag = "5")]
    pub eekmlegahha: ::prost::alloc::vec::Vec<Njfonlgigpk>,
    #[prost(message, repeated, tag = "2")]
    pub noocbpmnmac: ::prost::alloc::vec::Vec<Penkoafkhkl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Joegfcinapg {
    #[prost(uint32, tag = "1")]
    pub ncplfkbobdj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glcehkpmbjo {
    #[prost(bool, tag = "10")]
    pub hdpcekiljkc: bool,
    #[prost(uint32, tag = "5")]
    pub ncplfkbobdj: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlanIcon {
    #[prost(bool, tag = "6")]
    pub is_avatar_icon: bool,
    #[prost(uint32, tag = "3")]
    pub icon_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelicFilterPlan {
    #[prost(message, optional, tag = "3")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(int64, tag = "5")]
    pub update_timestamp: i64,
    #[prost(message, optional, tag = "8")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(string, tag = "12")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub slot_index: u32,
    #[prost(bool, tag = "11")]
    pub is_marked: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fihcjogacni {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRelicFilterPlanScRsp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub relic_filter_plan_list: ::prost::alloc::vec::Vec<RelicFilterPlan>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanCsReq {
    #[prost(message, optional, tag = "14")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(bool, tag = "4")]
    pub is_marked: bool,
    #[prost(message, optional, tag = "13")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AddRelicFilterPlanScRsp {
    #[prost(message, optional, tag = "10")]
    pub plan: ::core::option::Option<RelicFilterPlan>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanCsReq {
    #[prost(uint32, tag = "1")]
    pub slot_index: u32,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "8")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(message, optional, tag = "3")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyRelicFilterPlanScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub slot_index: u32,
    #[prost(int64, tag = "3")]
    pub update_timestamp: i64,
    #[prost(string, tag = "14")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub icon: ::core::option::Option<RelicFilterPlanIcon>,
    #[prost(message, optional, tag = "15")]
    pub settings: ::core::option::Option<RelicFilterPlanSettings>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRelicFilterPlanCsReq {
    #[prost(bool, tag = "5")]
    pub is_batch_op: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnldeoafcne {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub npedodmagkl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanCsReq {
    #[prost(bool, tag = "3")]
    pub is_batch_op: bool,
    #[prost(bool, tag = "13")]
    pub is_mark: bool,
    #[prost(uint32, repeated, tag = "6")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MarkRelicFilterPlanScRsp {
    #[prost(bool, tag = "9")]
    pub is_mark: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub slot_index_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecjbbepkkmj {
    #[prost(uint32, tag = "15")]
    pub afefamkndoo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knfclkceeah {
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(bool, tag = "14")]
    pub efnegejdilo: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cookpmfnbpj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jehaofaoeok {
    #[prost(message, repeated, tag = "1")]
    pub jadihfhpmkh: ::prost::alloc::vec::Vec<Knfclkceeah>,
    #[prost(uint32, tag = "10")]
    pub hbdienejlfn: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hphkmadefmi {
    #[prost(uint32, tag = "12")]
    pub dhppkijmkjg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glakeaclkli {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub dhppkijmkjg: u32,
    #[prost(uint32, tag = "10")]
    pub hbdienejlfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egdjkildooa {
    #[prost(uint32, repeated, tag = "3")]
    pub lejnihkjibm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpogjbmmnaa {
    #[prost(message, repeated, tag = "2")]
    pub jadihfhpmkh: ::prost::alloc::vec::Vec<Knfclkceeah>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub bbjgjddfgdi: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkbnpdmbhoa {
    #[prost(uint32, tag = "14")]
    pub aohkoelbjjc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfmjolhdmld {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub aohkoelbjjc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbmibllpikl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcfbakphcpf {
    #[prost(uint32, tag = "1")]
    pub pkmpoapokhl: u32,
    #[prost(uint32, tag = "4")]
    pub nmedaaeibfk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knhhjmcbnea {
    #[prost(message, repeated, tag = "1")]
    pub bdgmfbaffnm: ::prost::alloc::vec::Vec<Gcfbakphcpf>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineupAvatar {
    #[prost(uint32, tag = "6")]
    pub hp: u32,
    #[prost(uint32, tag = "15")]
    pub satiety: u32,
    #[prost(uint32, tag = "5")]
    pub slot: u32,
    #[prost(enumeration = "AvatarType", tag = "1")]
    pub avatar_type: i32,
    #[prost(message, optional, tag = "14")]
    pub sp: ::core::option::Option<SpProgress>,
    #[prost(uint32, tag = "8")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LineupInfo {
    #[prost(bool, tag = "12")]
    pub njfmkhpamdl: bool,
    #[prost(message, repeated, tag = "2")]
    pub avatar_list: ::prost::alloc::vec::Vec<LineupAvatar>,
    #[prost(uint32, repeated, tag = "11")]
    pub lofekgfcmlc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub ijnpccndcgi: u32,
    #[prost(uint32, tag = "3")]
    pub index: u32,
    #[prost(bool, tag = "15")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "6")]
    pub mp_max: u32,
    #[prost(string, tag = "14")]
    pub name: ::prost::alloc::string::String,
    #[prost(enumeration = "ExtraLineupType", tag = "7")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "10")]
    pub plane_id: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub nlkmjkfhebm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub kclnaimofdl: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub dfkpgckchah: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub mp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfochmockmo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataScRsp {
    #[prost(message, optional, tag = "15")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojallcafkeo {
    #[prost(uint32, tag = "2")]
    pub slot: u32,
    #[prost(uint32, tag = "3")]
    pub index: u32,
    #[prost(uint32, tag = "11")]
    pub base_avatar_id: u32,
    #[prost(bool, tag = "13")]
    pub is_virtual: bool,
    #[prost(enumeration = "AvatarType", tag = "15")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "14")]
    pub plane_id: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "9")]
    pub extra_lineup_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohfahbfdpoj {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffglfjgkkep {
    #[prost(enumeration = "ExtraLineupType", tag = "11")]
    pub extra_lineup_type: i32,
    #[prost(enumeration = "AvatarType", tag = "10")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "8")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "14")]
    pub index: u32,
    #[prost(bool, tag = "7")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "4")]
    pub plane_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjeipadcdjl {
    #[prost(bool, tag = "13")]
    pub is_virtual: bool,
    #[prost(bool, tag = "4")]
    pub aeoafelaneo: bool,
    #[prost(uint32, tag = "1")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub plane_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kniinhmfihm {
    #[prost(bool, tag = "10")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "4")]
    pub bdkilpahpgb: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "9")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "13")]
    pub index: u32,
    #[prost(uint32, tag = "11")]
    pub plane_id: u32,
    #[prost(uint32, tag = "5")]
    pub agkkdgnhcbh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpjippgdpac {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SyncLineupNotify {
    #[prost(enumeration = "SyncLineupReason", repeated, tag = "3")]
    pub reason_list: ::prost::alloc::vec::Vec<i32>,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcmbjlmlbnc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkokliocjho {
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "11")]
    pub hp: u32,
    #[prost(uint32, tag = "12")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfdcahepikp {
    #[prost(message, repeated, tag = "11")]
    pub opimhcppnbc: ::prost::alloc::vec::Vec<Pkokliocjho>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderCsReq {
    #[prost(uint32, tag = "8")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChangeLineupLeaderScRsp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efpogadjkbf {
    #[prost(uint32, tag = "13")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alpmagelkdp {
    #[prost(uint32, tag = "7")]
    pub index: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmmngdpfccf {
    #[prost(string, tag = "9")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Empobajddco {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(string, tag = "5")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jablakijdea {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataScRsp {
    #[prost(uint32, tag = "1")]
    pub cur_index: u32,
    #[prost(message, repeated, tag = "6")]
    pub lineup_list: ::prost::alloc::vec::Vec<LineupInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aocfcjppedm {
    #[prost(uint32, tag = "11")]
    pub plane_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiakofmgdlp {
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReplaceLineupCsReq {
    #[prost(bool, tag = "10")]
    pub is_virtual: bool,
    #[prost(uint32, tag = "4")]
    pub ihbcjpbeghp: u32,
    #[prost(uint32, tag = "7")]
    pub plane_id: u32,
    #[prost(enumeration = "ExtraLineupType", tag = "12")]
    pub extra_lineup_type: i32,
    #[prost(uint32, tag = "3")]
    pub kclnaimofdl: u32,
    #[prost(message, repeated, tag = "9")]
    pub replace_slot_list: ::prost::alloc::vec::Vec<Hiakofmgdlp>,
    #[prost(uint32, tag = "2")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahbjhkinbil {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekmckmcokia {
    #[prost(enumeration = "ExtraLineupType", tag = "9")]
    pub extra_lineup_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbjfonmlbmj {
    #[prost(message, optional, tag = "12")]
    pub iiidiaplofb: ::core::option::Option<Lnnkgnfmmll>,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "5")]
    pub dfpkdpmefac: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clpnbpcgldl {
    #[prost(uint64, tag = "12")]
    pub mfdelanaicp: u64,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "13")]
    pub dfpkdpmefac: i32,
    #[prost(message, repeated, tag = "7")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofpmcomndcd {
    #[prost(uint32, repeated, tag = "4")]
    pub pknbckelhkm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pafhbihlbca {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub pknbckelhkm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbhfcbmhghk {
    #[prost(uint64, tag = "10")]
    pub mfdelanaicp: u64,
    #[prost(message, optional, tag = "8")]
    pub iiidiaplofb: ::core::option::Option<Lnnkgnfmmll>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kikicpknoeb {
    #[prost(uint64, tag = "14")]
    pub mfdelanaicp: u64,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "3")]
    pub dfpkdpmefac: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlhggbldnba {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjofkipdifm {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haffbknmhfm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jaeonekdhmo {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnhoegcoljl {
    #[prost(enumeration = "Ejnhbdlcndj", tag = "2")]
    pub slot: i32,
    #[prost(uint32, tag = "6")]
    pub hfhghfhomfn: u32,
    #[prost(message, optional, tag = "13")]
    pub iiidiaplofb: ::core::option::Option<Lnnkgnfmmll>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npnpnbjahki {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhhnemhmgma {
    #[prost(uint32, tag = "12")]
    pub uid: u32,
    #[prost(enumeration = "Ejnhbdlcndj", tag = "5")]
    pub slot: i32,
    #[prost(message, repeated, tag = "4")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfkkogmpbao {
    #[prost(uint32, tag = "2")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npcdkngjimc {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geddfnpdnao {
    #[prost(uint32, tag = "10")]
    pub ehjdlppngmf: u32,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "15")]
    pub dfpkdpmefac: i32,
    #[prost(uint32, tag = "13")]
    pub mfdelanaicp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhbnnogdkpi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifanbeggfke {
    #[prost(message, repeated, tag = "7")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
    #[prost(uint64, tag = "4")]
    pub jgkindfbegl: u64,
    #[prost(uint64, tag = "11")]
    pub mfdelanaicp: u64,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "14")]
    pub dfpkdpmefac: i32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbjjhaendfo {
    #[prost(uint32, tag = "12")]
    pub afiomfffjda: u32,
    #[prost(uint32, tag = "10")]
    pub enffacoigfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMail {
    #[prost(string, tag = "1")]
    pub title: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "14")]
    pub attachment: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub id: u32,
    #[prost(string, tag = "11")]
    pub content: ::prost::alloc::string::String,
    #[prost(string, repeated, tag = "9")]
    pub para_list: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(uint32, tag = "8")]
    pub template_id: u32,
    #[prost(enumeration = "Boikhbbncba", tag = "4")]
    pub mail_type: i32,
    #[prost(int64, tag = "15")]
    pub time: i64,
    #[prost(int64, tag = "3")]
    pub expire_time: i64,
    #[prost(bool, tag = "13")]
    pub is_read: bool,
    #[prost(string, tag = "7")]
    pub sender: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMailScRsp {
    #[prost(bool, tag = "8")]
    pub is_end: bool,
    #[prost(uint32, tag = "1")]
    pub start: u32,
    #[prost(message, repeated, tag = "4")]
    pub notice_mail_list: ::prost::alloc::vec::Vec<ClientMail>,
    #[prost(uint32, tag = "10")]
    pub total_num: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub mail_list: ::prost::alloc::vec::Vec<ClientMail>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clmibfaghgk {
    #[prost(uint32, tag = "3")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ealjpafdbnc {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inhibijgmff {
    #[prost(uint32, repeated, tag = "14")]
    pub kflgilkbmpn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DelMailScRsp {
    #[prost(uint32, repeated, tag = "15")]
    pub id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahgfoojjjkb {
    #[prost(uint32, tag = "5")]
    pub apbdbeabddj: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub ckpljojpmmm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejglipokcki {
    #[prost(uint32, tag = "15")]
    pub dkhggieoebb: u32,
    #[prost(uint32, tag = "5")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeMailAttachmentScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub attachment: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "12")]
    pub succ_mail_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub fail_mail_list: ::prost::alloc::vec::Vec<Ejglipokcki>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NewMailScNotify {
    #[prost(uint32, repeated, tag = "10")]
    pub mail_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cioeahefpln {
    #[prost(uint32, tag = "1")]
    pub fmcegofhmgc: u32,
    #[prost(bool, tag = "6")]
    pub chmbglidkmm: bool,
    #[prost(message, repeated, tag = "4")]
    pub biefgmhpign: ::prost::alloc::vec::Vec<Khfdnccflpd>,
    #[prost(message, repeated, tag = "12")]
    pub bhckkplnonj: ::prost::alloc::vec::Vec<Ocbfmoemnpp>,
    #[prost(int32, tag = "13")]
    pub afdjikffnjd: i32,
    #[prost(message, optional, tag = "8")]
    pub imelchpnpgc: ::core::option::Option<Gnagomfpbhh>,
    #[prost(message, optional, tag = "3")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihgimimcdpj {
    #[prost(uint32, tag = "14")]
    pub hkohlnhlgnb: u32,
    #[prost(uint32, tag = "4")]
    pub eolhlhcahff: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnagomfpbhh {
    #[prost(message, optional, tag = "3")]
    pub aobmafbkdll: ::core::option::Option<Bpplpnacdhe>,
    #[prost(message, optional, tag = "6")]
    pub hgkfdihpfdm: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldobaeloakm {
    #[prost(uint32, tag = "4")]
    pub afdjikffnjd: u32,
    #[prost(uint32, tag = "1")]
    pub fmcegofhmgc: u32,
    #[prost(message, optional, tag = "6")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Malmdonmidf {
    #[prost(message, optional, tag = "14")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub fmcegofhmgc: u32,
    #[prost(uint32, tag = "2")]
    pub micgnniimak: u32,
    #[prost(uint32, tag = "12")]
    pub afdjikffnjd: u32,
    #[prost(message, optional, tag = "6")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocbfmoemnpp {
    #[prost(uint32, tag = "9")]
    pub ohoibnhjifg: u32,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmdlhgjdmjg {
    #[prost(message, optional, tag = "13")]
    pub hiceoeaiape: ::core::option::Option<Ocbfmoemnpp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apcieeocild {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
    #[prost(message, optional, tag = "1")]
    pub hiceoeaiape: ::core::option::Option<Ocbfmoemnpp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khfdnccflpd {
    #[prost(uint32, tag = "3")]
    pub ohoibnhjifg: u32,
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(float, tag = "14")]
    pub fpmlllfheph: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnfjkiojdib {
    #[prost(message, optional, tag = "15")]
    pub hoakecnahpp: ::core::option::Option<Khfdnccflpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahlcaeifmin {
    #[prost(message, optional, tag = "4")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
    #[prost(message, optional, tag = "10")]
    pub hoakecnahpp: ::core::option::Option<Khfdnccflpd>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bebfhlmmlke {
    #[prost(message, optional, tag = "3")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(message, optional, tag = "11")]
    pub imelchpnpgc: ::core::option::Option<Gnagomfpbhh>,
    #[prost(uint32, tag = "2")]
    pub ohoibnhjifg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibhoeeiidfk {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "5")]
    pub micgnniimak: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnccfjilnia {
    #[prost(message, optional, tag = "9")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nelmkofibag {
    #[prost(uint32, tag = "14")]
    pub micgnniimak: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mepliogppbm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pogkoedgank {
    #[prost(message, optional, tag = "15")]
    pub imelchpnpgc: ::core::option::Option<Gnagomfpbhh>,
    #[prost(int32, tag = "8")]
    pub afdjikffnjd: i32,
    #[prost(bool, tag = "10")]
    pub imfipeiffei: bool,
    #[prost(message, optional, tag = "6")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
    #[prost(message, repeated, tag = "3")]
    pub bhckkplnonj: ::prost::alloc::vec::Vec<Ocbfmoemnpp>,
    #[prost(uint32, tag = "11")]
    pub fmcegofhmgc: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub biefgmhpign: ::prost::alloc::vec::Vec<Khfdnccflpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enilegjbbda {
    #[prost(message, optional, tag = "8")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(message, optional, tag = "10")]
    pub imelchpnpgc: ::core::option::Option<Gnagomfpbhh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjofngoldef {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub micgnniimak: u32,
    #[prost(message, optional, tag = "5")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcnjjjamoej {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbdameobjml {
    #[prost(message, optional, tag = "4")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cohjcefhcmd {
    #[prost(message, repeated, tag = "10")]
    pub bhckkplnonj: ::prost::alloc::vec::Vec<Ocbfmoemnpp>,
    #[prost(message, optional, tag = "6")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
    #[prost(bool, tag = "5")]
    pub imfipeiffei: bool,
    #[prost(message, repeated, tag = "2")]
    pub biefgmhpign: ::prost::alloc::vec::Vec<Khfdnccflpd>,
    #[prost(uint32, tag = "3")]
    pub fmcegofhmgc: u32,
    #[prost(int32, tag = "8")]
    pub afdjikffnjd: i32,
    #[prost(message, optional, tag = "7")]
    pub imelchpnpgc: ::core::option::Option<Gnagomfpbhh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aigabbmnbpi {
    #[prost(message, optional, tag = "12")]
    pub hoakecnahpp: ::core::option::Option<Khfdnccflpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dckpmapfemc {
    #[prost(message, optional, tag = "7")]
    pub hoakecnahpp: ::core::option::Option<Khfdnccflpd>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub anecodblgcb: ::core::option::Option<Ihgimimcdpj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpjihefieki {
    #[prost(message, repeated, tag = "12")]
    pub biefgmhpign: ::prost::alloc::vec::Vec<Khfdnccflpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bglacpgnfnh {
    #[prost(enumeration = "Gkkpbgmoodd", tag = "1")]
    pub dfpkdpmefac: i32,
    #[prost(message, optional, tag = "9")]
    pub iiidiaplofb: ::core::option::Option<Lnnkgnfmmll>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hilcokekkin {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub iiidiaplofb: ::core::option::Option<Lnnkgnfmmll>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hghfdhlfdka {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phindajhpal {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ankmamoalla {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnfjoglaejj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjkhhndmplc {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint64, tag = "11")]
    pub mfdelanaicp: u64,
    #[prost(uint64, tag = "9")]
    pub jgkindfbegl: u64,
    #[prost(enumeration = "Gkkpbgmoodd", tag = "5")]
    pub dfpkdpmefac: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dagjmdgimmm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngdfidbleeg {
    #[prost(uint32, tag = "6")]
    pub dfmnolgmcag: u32,
    #[prost(uint32, tag = "5")]
    pub lcmkbhbmdob: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibilogboici {
    #[prost(uint32, tag = "7")]
    pub kkgeojnphcn: u32,
    #[prost(uint32, tag = "15")]
    pub clkbpijjaap: u32,
    #[prost(uint32, tag = "12")]
    pub pos: u32,
    #[prost(uint32, tag = "1")]
    pub eoegloalcho: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfopglpmagj {
    #[prost(message, repeated, tag = "3")]
    pub bojmeheaade: ::prost::alloc::vec::Vec<Ngdfidbleeg>,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub pjbahhanmfh: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "13")]
    pub agmoeffpkfe: ::std::collections::HashMap<u32, u32>,
    #[prost(message, repeated, tag = "12")]
    pub blnfdkplien: ::prost::alloc::vec::Vec<Ibilogboici>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecppcfackjp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub khliailcpno: ::core::option::Option<Dfopglpmagj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpfflpikfcj {
    #[prost(uint32, tag = "6")]
    pub dfmnolgmcag: u32,
    #[prost(uint32, tag = "7")]
    pub lcmkbhbmdob: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub ebibccdkihb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub eoegloalcho: u32,
    #[prost(string, tag = "3")]
    pub mbmegghhkjl: ::prost::alloc::string::String,
    #[prost(map = "uint32, uint32", tag = "15")]
    pub agmoeffpkfe: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "10")]
    pub kkgeojnphcn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcoocleapmc {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub lcmkbhbmdob: u32,
    #[prost(uint32, tag = "6")]
    pub dfmnolgmcag: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llldfbeojkh {
    #[prost(message, optional, tag = "5")]
    pub khliailcpno: ::core::option::Option<Dfopglpmagj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ieggdbjkahf {
    #[prost(uint32, tag = "15")]
    pub pos: u32,
    #[prost(uint32, tag = "11")]
    pub kkgeojnphcn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkddgonhhma {
    #[prost(uint32, tag = "7")]
    pub pos: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub kkgeojnphcn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ielhgjjhmeg {
    #[prost(uint32, repeated, tag = "7")]
    pub ebbgmahfino: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlibphmclik {
    #[prost(uint32, tag = "6")]
    pub oohldgfnabj: u32,
    #[prost(uint32, tag = "14")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmnjhfhbjdi {
    #[prost(uint32, repeated, tag = "9")]
    pub mcpchaempop: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "6")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<Jlibphmclik>,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(enumeration = "Jnmfgfjpeim", tag = "11")]
    pub status: i32,
    #[prost(uint32, tag = "1")]
    pub hiiadaioiip: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adgfohedeog {
    #[prost(int64, tag = "9")]
    pub cbclgknhnib: i64,
    #[prost(uint32, tag = "11")]
    pub flnokepmaph: u32,
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(message, repeated, tag = "3")]
    pub kkadhofegle: ::prost::alloc::vec::Vec<Fmnjhfhbjdi>,
    #[prost(enumeration = "Pbcofiploko", tag = "12")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dapaodjlepf {
    #[prost(message, repeated, tag = "11")]
    pub gimdcaalgei: ::prost::alloc::vec::Vec<Adgfohedeog>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpaafmajnie {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gopahcfeind {
    #[prost(bool, tag = "2")]
    pub hdnieedkagk: bool,
    #[prost(uint32, tag = "14")]
    pub pnigjhppmln: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dejjkifldfb {
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(int64, tag = "5")]
    pub cbclgknhnib: i64,
    #[prost(enumeration = "Pbcofiploko", tag = "14")]
    pub ppfbnlefano: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnicjgmnafm {
    #[prost(enumeration = "Jnmfgfjpeim", tag = "9")]
    pub lpfpcbhelle: i32,
    #[prost(uint32, tag = "7")]
    pub hgkmoddpamj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecofcnjhkli {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub bjhgmjdmodb: ::prost::alloc::vec::Vec<Gopahcfeind>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgehccfmoje {
    #[prost(uint32, tag = "9")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "15")]
    pub oohldgfnabj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pahneciakhd {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub oohldgfnabj: u32,
    #[prost(uint32, tag = "2")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdnampmbamd {
    #[prost(uint32, tag = "6")]
    pub hgkmoddpamj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Admghjdoklf {
    #[prost(uint32, tag = "7")]
    pub hgkmoddpamj: u32,
    #[prost(message, optional, tag = "5")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibpiaefkdgp {
    #[prost(uint32, tag = "5")]
    pub hgkmoddpamj: u32,
    #[prost(message, repeated, tag = "1")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<Jlibphmclik>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hndgmaplmgk {
    #[prost(message, optional, tag = "3")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(message, repeated, tag = "12")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<Jlibphmclik>,
    #[prost(uint32, tag = "10")]
    pub hgkmoddpamj: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cimoknigome {
    #[prost(uint32, tag = "9")]
    pub kbelpfdopde: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjmmkcjfnfi {
    #[prost(uint32, tag = "7")]
    pub kbelpfdopde: u32,
    #[prost(uint32, tag = "9")]
    pub jllfcnnhobk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddbejjkchmi {
    #[prost(message, optional, tag = "14")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub dcacgeojnnn: ::core::option::Option<Fjmmkcjfnfi>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eifoakckafl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnmjhnkonli {
    #[prost(message, repeated, tag = "7")]
    pub lkanmknegeh: ::prost::alloc::vec::Vec<Fjmmkcjfnfi>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnbegceholg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcjmjchkhcj {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oglabaalopb {
    #[prost(uint32, repeated, tag = "9")]
    pub hjgdifcandc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub empkpmmfmof: u32,
    #[prost(uint32, tag = "6")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbmmebdbdaa {
    #[prost(message, repeated, tag = "1")]
    pub afknhaijkmd: ::prost::alloc::vec::Vec<Oglabaalopb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dicmfnmipif {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgeajlclkpg {
    #[prost(string, repeated, tag = "12")]
    pub pldifcohmkm: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(enumeration = "Mcfficiioho", tag = "4")]
    pub slot: i32,
    #[prost(uint32, repeated, tag = "7")]
    pub hccjhiilppi: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onblgihcbeh {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfbcmjdgkii {
    #[prost(string, tag = "12")]
    pub ipnkbphbnco: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkbpkcfanoa {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpmaoheeohn {
    #[prost(uint32, tag = "6")]
    pub level: u32,
    #[prost(uint32, tag = "11")]
    pub cifpalnlidj: u32,
    #[prost(enumeration = "Gnankafabkp", tag = "13")]
    pub slot: i32,
    #[prost(uint32, tag = "4")]
    pub fikedopgmdl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbkinmiiklg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfenlcjgjhb {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub pnlfdfhaejh: ::prost::alloc::vec::Vec<Lpmaoheeohn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogjjlnpokco {
    #[prost(message, optional, tag = "8")]
    pub ejoalpnccgc: ::core::option::Option<Lpmaoheeohn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jibjbnbadcp {
    #[prost(message, optional, tag = "1")]
    pub ejoalpnccgc: ::core::option::Option<Lpmaoheeohn>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdiljlmlmhp {
    #[prost(uint32, tag = "10")]
    pub fljmjmfonan: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pffiiiednci {
    #[prost(uint32, tag = "1")]
    pub fljmjmfonan: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpnmfccfjbe {
    #[prost(uint32, tag = "2")]
    pub jkaodlmplme: u32,
    #[prost(uint32, tag = "5")]
    pub fikedopgmdl: u32,
    #[prost(bool, tag = "1")]
    pub jpinjmnfgec: bool,
    #[prost(uint32, tag = "13")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pckhbnhnkab {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Impcibghklj {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "8")]
    pub hbomckbjaif: ::prost::alloc::vec::Vec<Dpnmfccfjbe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alhadjbdlmh {
    #[prost(uint32, tag = "15")]
    pub group_id: u32,
    #[prost(message, optional, tag = "13")]
    pub kgmjhehlioi: ::core::option::Option<Dpnmfccfjbe>,
    #[prost(uint32, tag = "10")]
    pub ecgebkmcfcn: u32,
    #[prost(uint64, tag = "3")]
    pub mbmegghhkjl: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgnbbdiojbh {
    #[prost(message, optional, tag = "2")]
    pub kgmjhehlioi: ::core::option::Option<Dpnmfccfjbe>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffimgfmpcdg {
    #[prost(enumeration = "Gdkighgodkj", tag = "11")]
    pub lnmamccmdpa: i32,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(enumeration = "Pchdmnlenjo", tag = "1")]
    pub cbjpfggchfh: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldfaedmjpnj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgopkflejhe {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub haeppfknbnm: ::prost::alloc::vec::Vec<Ffimgfmpcdg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnicmkcbepl {
    #[prost(message, optional, tag = "9")]
    pub cpiogbbagop: ::core::option::Option<Ffimgfmpcdg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmbfidhchpd {
    #[prost(message, optional, tag = "1")]
    pub cpiogbbagop: ::core::option::Option<Ffimgfmpcdg>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub haeppfknbnm: ::prost::alloc::vec::Vec<Ffimgfmpcdg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnefnfaflgi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihgeeangifc {
    #[prost(enumeration = "Kefklcglpbb", tag = "15")]
    pub slot: i32,
    #[prost(uint32, tag = "9")]
    pub iihookopmmk: u32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mission {
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(uint32, tag = "3")]
    pub progress: u32,
    #[prost(enumeration = "MissionStatus", tag = "6")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbianonhjfo {
    #[prost(uint32, tag = "10")]
    pub ogcfmckhlja: u32,
    #[prost(uint32, tag = "15")]
    pub index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhmofllojag {
    #[prost(message, repeated, tag = "12")]
    pub klmfdjlahkg: ::prost::alloc::vec::Vec<Jbianonhjfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbnceknojon {
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(message, repeated, tag = "9")]
    pub klmfdjlahkg: ::prost::alloc::vec::Vec<Jbianonhjfo>,
    #[prost(enumeration = "MissionStatus", tag = "7")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlompnobmja {
    #[prost(uint32, tag = "15")]
    pub id: u32,
    #[prost(message, optional, tag = "649")]
    pub klmfdjlahkg: ::core::option::Option<Hhmofllojag>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klciikcjohp {
    #[prost(uint32, tag = "7")]
    pub idlneeekpjl: u32,
    #[prost(message, optional, tag = "6")]
    pub klmfdjlahkg: ::core::option::Option<Hhmofllojag>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eeapjcmdjml {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "12")]
    pub efmknejbpdn: ::prost::alloc::vec::Vec<Pbnceknojon>,
    #[prost(bool, tag = "15")]
    pub nbgdkmbadki: bool,
    #[prost(uint32, tag = "13")]
    pub kcpgeandlei: u32,
    #[prost(message, repeated, tag = "5")]
    pub hjnfpofkanm: ::prost::alloc::vec::Vec<Mission>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eaonfecplik {
    #[prost(uint32, tag = "15")]
    pub idlneeekpjl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aicicamofge {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub idlneeekpjl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahconmhbloa {
    #[prost(message, repeated, tag = "10")]
    pub klmfdjlahkg: ::prost::alloc::vec::Vec<Jbianonhjfo>,
    #[prost(uint32, tag = "14")]
    pub clkbeandjfm: u32,
    #[prost(string, tag = "7")]
    pub gkanpgfhgpc: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kodjldnfgop {
    #[prost(uint32, tag = "10")]
    pub clkbeandjfm: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(string, tag = "11")]
    pub gkanpgfhgpc: ::prost::alloc::string::String,
    #[prost(message, repeated, tag = "4")]
    pub klmfdjlahkg: ::prost::alloc::vec::Vec<Jbianonhjfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onepplibcki {
    #[prost(message, optional, tag = "8")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "12")]
    pub idlneeekpjl: u32,
    #[prost(uint32, tag = "7")]
    pub clkbeandjfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kocancofkjn {
    #[prost(uint32, tag = "9")]
    pub clkbeandjfm: u32,
    #[prost(message, optional, tag = "2")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekamlkohmlm {
    #[prost(string, tag = "12")]
    pub pfmlckgckob: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afifpimnnfo {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(string, tag = "8")]
    pub pfmlckgckob: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbddhlanhnh {
    #[prost(uint32, tag = "3")]
    pub idlneeekpjl: u32,
    #[prost(bool, tag = "1")]
    pub nhbjkfibgbk: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egnbldpighd {
    #[prost(message, repeated, tag = "6")]
    pub emfdkaekpcm: ::prost::alloc::vec::Vec<Dbddhlanhnh>,
    #[prost(uint32, tag = "9")]
    pub paefafilbjg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpmbfoclibj {
    #[prost(uint32, repeated, tag = "12")]
    pub fddhalpeaon: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdnpngbibbi {
    #[prost(message, optional, tag = "6")]
    pub pdpfcfglgco: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "5")]
    pub clkbeandjfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjefcmjonic {
    #[prost(uint32, tag = "6")]
    pub clkbeandjfm: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hipfnccdlia {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmbggkdligk {
    #[prost(uint32, tag = "12")]
    pub nhfpcalobcc: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub mkbbddpdmoi: ::prost::alloc::vec::Vec<Mission>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mimakllblna {
    #[prost(uint32, tag = "5")]
    pub fajohchbaen: u32,
    #[prost(message, optional, tag = "3")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kecfpmdiopb {
    #[prost(uint32, tag = "11")]
    pub fajohchbaen: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpgplgcbcbe {
    #[prost(message, optional, tag = "7")]
    pub fpgjpmgijom: ::core::option::Option<Mission>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
/// ??
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusCsReq {
    #[prost(uint32, repeated, tag = "8")]
    pub finish_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub sub_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMissionStatusScRsp {
    #[prost(message, repeated, tag = "9")]
    pub mission_event_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "6")]
    pub finished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub sub_mission_status_list: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "1")]
    pub unfinished_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub main_mission_mcv_list: ::prost::alloc::vec::Vec<Klciikcjohp>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub disabled_main_mission_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhkdfjaklfc {
    #[prost(uint32, tag = "15")]
    pub fajohchbaen: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccolbngjjka {
    #[prost(uint32, tag = "2")]
    pub fajohchbaen: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmolkdbaold {
    #[prost(uint32, tag = "6")]
    pub fajohchbaen: u32,
    #[prost(uint32, tag = "2")]
    pub progress: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pahbclhfcoi {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jknakoeidkk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkcpodmepff {
    #[prost(uint32, tag = "2")]
    pub micgnniimak: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gohnnldpomc {
    #[prost(uint32, tag = "13")]
    pub clkbeandjfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgdjnmoibdn {
    #[prost(uint32, tag = "7")]
    pub idlneeekpjl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lliikjdjobb {
    #[prost(uint32, repeated, tag = "6")]
    pub gcihnknpjpk: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cabdaemkaha {
    #[prost(message, repeated, tag = "15")]
    pub efmknejbpdn: ::prost::alloc::vec::Vec<Pbnceknojon>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nabdijonbia {
    #[prost(uint32, repeated, tag = "15")]
    pub mddhgfejnpg: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epchbjbjcck {
    #[prost(uint32, tag = "7")]
    pub kcpgeandlei: u32,
    #[prost(uint32, tag = "12")]
    pub ngeicmomnee: u32,
    #[prost(enumeration = "Hkmebfmeeko", tag = "4")]
    pub gajbbcihmlg: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khconlgbnkp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub ilgfnknhjea: u32,
    #[prost(uint32, tag = "6")]
    pub kcpgeandlei: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgidimidfpn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Joepajdgphk {
    #[prost(bool, tag = "10")]
    pub clnpkcniekd: bool,
    #[prost(uint32, tag = "3")]
    pub ppjbokfgmjh: u32,
    #[prost(uint32, tag = "6")]
    pub minoahpjnmh: u32,
    #[prost(uint32, tag = "2")]
    pub dbgaojmndmc: u32,
    #[prost(bool, tag = "15")]
    pub kpjafhgjmne: bool,
    #[prost(uint32, tag = "13")]
    pub hngcgmnnlej: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgghehlpfmh {
    #[prost(uint32, repeated, tag = "2")]
    pub nahadojjmfc: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Nbbdamgnjpn", tag = "15")]
    pub ckmejojcafi: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhaibieoogh {
    #[prost(uint32, tag = "14")]
    pub ggbdddiffbd: u32,
    #[prost(uint32, tag = "5")]
    pub progress: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajofeagbhof {
    #[prost(uint64, tag = "14")]
    pub npokjeodakc: u64,
    #[prost(bool, tag = "4")]
    pub pedicfiaamc: bool,
    #[prost(bool, tag = "11")]
    pub mkideamcloh: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pohjkgbpdho {
    #[prost(message, repeated, tag = "6")]
    pub pdmjjhpbogd: ::prost::alloc::vec::Vec<Ajofeagbhof>,
    #[prost(uint32, tag = "4")]
    pub phimeblpkfi: u32,
    #[prost(uint64, tag = "12")]
    pub dhkbkjkdnei: u64,
    #[prost(uint32, tag = "14")]
    pub ijccfagbnbc: u32,
    #[prost(message, repeated, tag = "11")]
    pub pajlebhmocf: ::prost::alloc::vec::Vec<Jhaibieoogh>,
    #[prost(bool, tag = "10")]
    pub fmhcopcakec: bool,
    #[prost(uint32, tag = "3")]
    pub mphncdpfiaj: u32,
    #[prost(uint64, tag = "15")]
    pub kopeolbbgel: u64,
    #[prost(string, tag = "812")]
    pub ilcfognhfck: ::prost::alloc::string::String,
    #[prost(string, tag = "1779")]
    pub abmeooeakfk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub bnhepammdhc: u32,
    #[prost(message, repeated, tag = "9")]
    pub ijabojodcao: ::prost::alloc::vec::Vec<Jhaibieoogh>,
    #[prost(message, repeated, tag = "1")]
    pub bggigohgmmb: ::prost::alloc::vec::Vec<Jhaibieoogh>,
    #[prost(uint32, tag = "7")]
    pub bdcnikjepnp: u32,
    #[prost(message, repeated, tag = "13")]
    pub elegbecbahh: ::prost::alloc::vec::Vec<Jhaibieoogh>,
    #[prost(string, tag = "1714")]
    pub klodmjekmjj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "5")]
    pub abggoedcbgi: u32,
    #[prost(uint64, tag = "8")]
    pub cccchhlbkdn: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gioddoihlcn {
    #[prost(message, repeated, tag = "10")]
    pub pniomdhkgan: ::prost::alloc::vec::Vec<Pohjkgbpdho>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebbnakjiafk {
    #[prost(message, optional, tag = "4")]
    pub imbgbpepfnl: ::core::option::Option<Ljmjpodbcae>,
    #[prost(message, optional, tag = "14")]
    pub imelchpnpgc: ::core::option::Option<Oopngmhcnnn>,
    #[prost(uint32, repeated, tag = "15")]
    pub nhknhpjdhlh: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub elfjfncodan: ::core::option::Option<Mgghehlpfmh>,
    #[prost(message, optional, tag = "9")]
    pub pogejanpebj: ::core::option::Option<Ckffbacigpg>,
    #[prost(message, optional, tag = "11")]
    pub plolpndhblk: ::core::option::Option<Defmcecjjbi>,
    #[prost(message, optional, tag = "12")]
    pub odldbbohhkb: ::core::option::Option<Gioddoihlcn>,
    #[prost(message, optional, tag = "5")]
    pub pgbilhdciol: ::core::option::Option<Joepajdgphk>,
    #[prost(message, optional, tag = "6")]
    pub pbjhjhdcafb: ::core::option::Option<Eonniefdoci>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub stt: ::core::option::Option<Kfbeaplbefb>,
    #[prost(message, optional, tag = "3")]
    pub chnjjmhncap: ::core::option::Option<Jogiagpfdml>,
    #[prost(message, optional, tag = "7")]
    pub ogfdpdidmhn: ::core::option::Option<Khdobjbgpnh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Defmcecjjbi {
    #[prost(uint32, repeated, tag = "10")]
    pub jfpnkcbdief: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmonigcbapn {
    #[prost(message, optional, tag = "15")]
    pub plolpndhblk: ::core::option::Option<Defmcecjjbi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfbeaplbefb {
    #[prost(uint32, repeated, tag = "2")]
    pub fdobhgepecn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub imiekbcbdhb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkadmfglmpn {
    #[prost(message, optional, tag = "1")]
    pub stt: ::core::option::Option<Kfbeaplbefb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bocmnkonppn {
    #[prost(uint32, tag = "10")]
    pub lnjapmhfcck: u32,
    #[prost(uint32, tag = "6")]
    pub pbonhgdihdk: u32,
    #[prost(enumeration = "Efjdphpapii", tag = "14")]
    pub fjaomhojlmn: i32,
    #[prost(bool, tag = "5")]
    pub molclcecklo: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oopngmhcnnn {
    #[prost(uint32, tag = "2")]
    pub bfgejigdmfh: u32,
    #[prost(message, optional, tag = "4")]
    pub gedkbbfkdlm: ::core::option::Option<Bocmnkonppn>,
    #[prost(message, repeated, tag = "3")]
    pub gjbkhmihmif: ::prost::alloc::vec::Vec<Bocmnkonppn>,
    #[prost(uint32, tag = "7")]
    pub dhfdgnilgih: u32,
    #[prost(message, repeated, tag = "12")]
    pub mbgmhaapdce: ::prost::alloc::vec::Vec<Bocmnkonppn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jelebjjfjip {
    #[prost(message, repeated, tag = "13")]
    pub gjbkhmihmif: ::prost::alloc::vec::Vec<Bocmnkonppn>,
    #[prost(message, repeated, tag = "9")]
    pub mbgmhaapdce: ::prost::alloc::vec::Vec<Bocmnkonppn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fckifndejlc {
    #[prost(uint32, tag = "9")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pockofmndag {
    #[prost(uint32, tag = "7")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flijbnilblk {
    #[prost(uint32, tag = "12")]
    pub ojkjbeilgdc: u32,
    #[prost(uint32, tag = "9")]
    pub fabndlfdfda: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub cgjnknmgjfo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gigdeinndjo {
    #[prost(uint32, repeated, tag = "8")]
    pub cgjnknmgjfo: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub fabndlfdfda: u32,
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
    #[prost(uint32, tag = "4")]
    pub pinikigmpkm: u32,
    #[prost(uint32, tag = "13")]
    pub fmehjldopnj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfinjohikfn {
    #[prost(message, repeated, tag = "13")]
    pub accbhmpbojc: ::prost::alloc::vec::Vec<Fmaebngghpd>,
    #[prost(uint32, tag = "14")]
    pub dojmahgdgcc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdkjdnogijc {
    #[prost(uint32, tag = "10")]
    pub legjggfllkm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdajldoonep {
    #[prost(uint32, tag = "12")]
    pub fgohomljegm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfkbeabdapm {
    #[prost(uint32, tag = "4")]
    pub hokpfbhcehj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hofaekpedln {
    #[prost(uint32, tag = "9")]
    pub ebdmffdjebm: u32,
    #[prost(uint32, tag = "2")]
    pub dhcakofmnjp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmaebngghpd {
    #[prost(uint32, tag = "2")]
    pub nghdgacfjep: u32,
    #[prost(message, optional, tag = "8")]
    pub ofjbcpnedpd: ::core::option::Option<Fckifndejlc>,
    #[prost(message, optional, tag = "7")]
    pub cflafjbmepk: ::core::option::Option<Pockofmndag>,
    #[prost(message, optional, tag = "9")]
    pub pkjhlljjldp: ::core::option::Option<Flijbnilblk>,
    #[prost(message, optional, tag = "14")]
    pub nhgioeaffbe: ::core::option::Option<Hdkjdnogijc>,
    #[prost(message, optional, tag = "1")]
    pub eemdaiemepm: ::core::option::Option<Kdajldoonep>,
    #[prost(message, optional, tag = "11")]
    pub hfcakgghnim: ::core::option::Option<Nfkbeabdapm>,
    #[prost(message, optional, tag = "12")]
    pub jmbhhodnidd: ::core::option::Option<Hofaekpedln>,
    #[prost(message, optional, tag = "10")]
    pub agpimeoajoj: ::core::option::Option<Gigdeinndjo>,
    #[prost(message, optional, tag = "5")]
    pub jocfgknbpdh: ::core::option::Option<Bfinjohikfn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khdobjbgpnh {
    #[prost(message, optional, tag = "9")]
    pub ckioboniohf: ::core::option::Option<Fmaebngghpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgfifjmmjcp {
    #[prost(message, optional, tag = "9")]
    pub ckioboniohf: ::core::option::Option<Fmaebngghpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpmbhaaklmc {
    #[prost(message, optional, tag = "7")]
    pub gedkbbfkdlm: ::core::option::Option<Bocmnkonppn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjakepglbfd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnoncaefinb {
    #[prost(uint32, tag = "11")]
    pub lnjppbjacmf: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npiijenphib {
    #[prost(uint32, tag = "6")]
    pub jdfifidndhf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haobnmicopa {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub jdfifidndhf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mankodpdeed {
    #[prost(uint32, tag = "14")]
    pub opfpijmggal: u32,
    #[prost(uint32, tag = "6")]
    pub bljdbkkdlgd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfmcdagbcmk {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub ejogkjoehfb: ::prost::alloc::vec::Vec<Bocmnkonppn>,
    #[prost(message, optional, tag = "13")]
    pub imelchpnpgc: ::core::option::Option<Oopngmhcnnn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhejioligcn {
    #[prost(uint32, tag = "6")]
    pub ojkjbeilgdc: u32,
    #[prost(uint32, tag = "4")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjckjdbjkfd {
    #[prost(uint32, tag = "1")]
    pub ojkjbeilgdc: u32,
    #[prost(uint32, tag = "11")]
    pub edifglcdjlo: u32,
    #[prost(uint32, tag = "8")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocijbfdkhad {
    #[prost(message, repeated, tag = "15")]
    pub ckikjffkgfk: ::prost::alloc::vec::Vec<Fjckjdbjkfd>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub ojkjbeilgdc: u32,
    #[prost(uint32, tag = "2")]
    pub event_id: u32,
    #[prost(message, optional, tag = "3")]
    pub ogfdpdidmhn: ::core::option::Option<Fmaebngghpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boooodbdecg {
    #[prost(uint32, tag = "13")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amplplldlmc {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "15")]
    pub event_id: u32,
    #[prost(message, optional, tag = "7")]
    pub ogfdpdidmhn: ::core::option::Option<Fmaebngghpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfhmkhodonh {
    #[prost(uint32, tag = "3")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Moeoggefkjg {
    #[prost(uint32, tag = "2")]
    pub event_id: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub ogfdpdidmhn: ::core::option::Option<Fmaebngghpd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hoohjgiilid {
    #[prost(uint32, tag = "3")]
    pub event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbfcpchblif {
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
    #[prost(message, optional, tag = "15")]
    pub ogfdpdidmhn: ::core::option::Option<Fmaebngghpd>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjnfhooabhh {
    #[prost(uint32, tag = "2")]
    pub ififlmjnmdk: u32,
    #[prost(uint32, tag = "11")]
    pub fgohomljegm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfkkejakcdl {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub ififlmjnmdk: u32,
    #[prost(uint32, tag = "3")]
    pub fgohomljegm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckiajdgpeai {
    #[prost(uint32, tag = "7")]
    pub legjggfllkm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgeincnaijf {
    #[prost(uint32, tag = "14")]
    pub legjggfllkm: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdonaaefnia {
    #[prost(uint32, tag = "3")]
    pub nfcojigifbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkdgohbbalj {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub nfcojigifbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyActionResult {
    #[prost(uint32, tag = "10")]
    pub click_cell_id: u32,
    #[prost(uint32, tag = "4")]
    pub trigger_cell_id: u32,
    #[prost(message, optional, tag = "11")]
    pub detail: ::core::option::Option<Bakgcckjdlk>,
    #[prost(enumeration = "Ciaoikeanea", tag = "12")]
    pub source_type: i32,
    #[prost(uint32, tag = "9")]
    pub effect_type: u32,
    #[prost(uint32, tag = "5")]
    pub trigger_map_id: u32,
    #[prost(uint32, tag = "6")]
    pub click_map_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojifedpgpnj {
    #[prost(message, repeated, tag = "10")]
    pub fhjpmiigkin: ::prost::alloc::vec::Vec<MonopolyActionResult>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Niojaoakejp {
    #[prost(bool, tag = "14")]
    pub mekdpjkdapc: bool,
    #[prost(uint32, tag = "7")]
    pub dnhmlmodpnb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bakgcckjdlk {
    #[prost(message, optional, tag = "13")]
    pub hmfokfnpnfk: ::core::option::Option<Pponmcdlhkg>,
    #[prost(message, optional, tag = "3")]
    pub bbdbepekdie: ::core::option::Option<Pponmcdlhkg>,
    #[prost(message, optional, tag = "8")]
    pub odbjpecmcgc: ::core::option::Option<Lidhmbfbhao>,
    #[prost(message, optional, tag = "15")]
    pub kbhchoicmhc: ::core::option::Option<Lidhmbfbhao>,
    #[prost(message, optional, tag = "4")]
    pub hjcdfejpjcl: ::core::option::Option<Aihopmoclam>,
    #[prost(message, optional, tag = "14")]
    pub emghnkdicbf: ::core::option::Option<Aihopmoclam>,
    #[prost(message, optional, tag = "6")]
    pub kkiehkfelck: ::core::option::Option<Jpehgoiagfp>,
    #[prost(message, optional, tag = "12")]
    pub pblkdhccmdi: ::core::option::Option<Jpehgoiagfp>,
    #[prost(message, optional, tag = "2")]
    pub iohofdgmoka: ::core::option::Option<Niojaoakejp>,
    #[prost(message, optional, tag = "1")]
    pub gohgfgbcbfh: ::core::option::Option<Fedimadblfd>,
    #[prost(message, optional, tag = "5")]
    pub dlieaipfolf: ::core::option::Option<Aihopmoclam>,
    #[prost(message, optional, tag = "7")]
    pub nilkfplpaka: ::core::option::Option<Jpehgoiagfp>,
    #[prost(message, optional, tag = "9")]
    pub jjcbfhnhale: ::core::option::Option<Mhkhjomblhm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhkhjomblhm {
    #[prost(uint32, tag = "15")]
    pub anjbkgdpepn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pponmcdlhkg {
    #[prost(uint32, tag = "2")]
    pub dcedopcicik: u32,
    #[prost(uint32, tag = "15")]
    pub dhchppbnfeg: u32,
    #[prost(uint32, tag = "1")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpehgoiagfp {
    #[prost(uint32, tag = "1")]
    pub oicjkpkgila: u32,
    #[prost(uint32, tag = "3")]
    pub fbmbomknfjo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fedimadblfd {
    #[prost(uint32, tag = "5")]
    pub gjcnecgjfde: u32,
    #[prost(uint32, tag = "4")]
    pub cpjlmihbgcp: u32,
    #[prost(uint32, tag = "8")]
    pub kfclndkhilm: u32,
    #[prost(uint32, tag = "13")]
    pub kdckaamonab: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcfeibpmokl {
    #[prost(uint32, tag = "15")]
    pub jahpoofngeb: u32,
    #[prost(uint32, tag = "4")]
    pub nigmipgijon: u32,
    #[prost(uint32, tag = "9")]
    pub pfbnanpcdjh: u32,
    #[prost(message, optional, tag = "1")]
    pub mapdfgdaddp: ::core::option::Option<Gkklbmppoic>,
    #[prost(message, optional, tag = "5")]
    pub ipcpibkdmib: ::core::option::Option<Hgbafdfikfj>,
    #[prost(message, optional, tag = "2")]
    pub enagncneopb: ::core::option::Option<Kkcblmehbff>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jogiagpfdml {
    #[prost(message, repeated, tag = "8")]
    pub jhobbdnmfkb: ::prost::alloc::vec::Vec<Pcfeibpmokl>,
    #[prost(message, optional, tag = "2")]
    pub enaildglncl: ::core::option::Option<Pcfeibpmokl>,
    #[prost(message, optional, tag = "7")]
    pub dalmjhmldgm: ::core::option::Option<Niojaoakejp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlgkjbbjang {
    #[prost(message, optional, tag = "12")]
    pub pffecnompke: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1")]
    pub pdpfcfglgco: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "6")]
    pub hfcakgghnim: ::core::option::Option<Pcfeibpmokl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhbnabecblc {
    #[prost(message, optional, tag = "10")]
    pub dalmjhmldgm: ::core::option::Option<Niojaoakejp>,
    #[prost(message, optional, tag = "6")]
    pub hfcakgghnim: ::core::option::Option<Pcfeibpmokl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Poklnoillmi {
    #[prost(uint32, tag = "4")]
    pub jahpoofngeb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameRaiseRatioScRsp {
    #[prost(uint32, tag = "6")]
    pub ratio: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kojejdchlhh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cpaehmckljf {
    #[prost(int64, tag = "2")]
    pub ebajcfkinhn: i64,
    #[prost(bool, tag = "8")]
    pub bpbbnbklkdc: bool,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub igepfimgalc: u32,
    #[prost(message, optional, tag = "14")]
    pub pbjhjhdcafb: ::core::option::Option<Eonniefdoci>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgonikbbdak {
    #[prost(bool, tag = "5")]
    pub kbdmkfogkfj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhohbpmdnbh {
    #[prost(int64, tag = "15")]
    pub ebajcfkinhn: i64,
    #[prost(uint32, tag = "1")]
    pub ngpobeifhfc: u32,
    #[prost(uint32, tag = "12")]
    pub knhfnfblnlk: u32,
    #[prost(uint32, tag = "6")]
    pub lballjhgmib: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub ifiikolllkn: u32,
    #[prost(uint32, tag = "2")]
    pub likidkoepla: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkklbmppoic {
    #[prost(uint32, repeated, tag = "14")]
    pub fhbjogfkibm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub lbecppeobhb: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ihonjmelbij: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub bjcfdgchakl: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "10")]
    pub nnoncigblll: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imniaamofcn {
    #[prost(uint32, tag = "7")]
    pub hajiidccbmn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnckobgnihn {
    #[prost(uint32, tag = "3")]
    pub mahiocfcikf: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(bool, tag = "14")]
    pub nnoncigblll: bool,
    #[prost(uint32, repeated, tag = "1")]
    pub fhbjogfkibm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jliemnlahcd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MonopolyGameGachaScRsp {
    #[prost(uint32, repeated, tag = "14")]
    pub result_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pignanpdklj {
    #[prost(uint32, tag = "4")]
    pub gbohojajppb: u32,
    #[prost(uint32, tag = "13")]
    pub pfkglcgcmcj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgbafdfikfj {
    #[prost(uint32, tag = "12")]
    pub hpmckfbmmhp: u32,
    #[prost(uint32, tag = "6")]
    pub jahclmgmafe: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub agifahnpich: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub pgidogdgncj: u32,
    #[prost(uint32, tag = "10")]
    pub gcbdccnejli: u32,
    #[prost(message, repeated, tag = "15")]
    pub aiialahiamp: ::prost::alloc::vec::Vec<Pignanpdklj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhkfhhmkgdd {
    #[prost(message, repeated, tag = "6")]
    pub aiialahiamp: ::prost::alloc::vec::Vec<Pignanpdklj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpkdaacghcm {
    #[prost(message, optional, tag = "8")]
    pub ipcpibkdmib: ::core::option::Option<Hgbafdfikfj>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhklbllkbal {
    #[prost(uint32, tag = "5")]
    pub jahclmgmafe: u32,
    #[prost(uint32, tag = "8")]
    pub bhlfhhjhpja: u32,
    #[prost(uint32, tag = "2")]
    pub goolmcbeakp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfcbokjcjlk {
    #[prost(message, repeated, tag = "5")]
    pub lhcalbfcfjl: ::prost::alloc::vec::Vec<Dhklbllkbal>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkcblmehbff {
    #[prost(uint32, tag = "12")]
    pub onjlkkdkdbg: u32,
    #[prost(bool, tag = "4")]
    pub bghkmklgngf: bool,
    #[prost(uint32, tag = "2")]
    pub hkbeefmhlbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcejcpnpnbn {
    #[prost(uint32, tag = "1")]
    pub onjlkkdkdbg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hinkjiefgpj {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub onjlkkdkdbg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmhgmbmhkcb {
    #[prost(uint32, tag = "6")]
    pub pjfilkjbojg: u32,
    #[prost(uint32, tag = "3")]
    pub hkbeefmhlbb: u32,
    #[prost(message, optional, tag = "14")]
    pub pdpfcfglgco: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdmhmadmend {
    #[prost(message, repeated, tag = "2")]
    pub cgjhaghgclh: ::prost::alloc::vec::Vec<Fmhgmbmhkcb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iaejadjfpho {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pidiloglgnn {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lidhmbfbhao {
    #[prost(uint32, tag = "6")]
    pub nchpghpfkkb: u32,
    #[prost(uint32, tag = "13")]
    pub legjggfllkm: u32,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljmjpodbcae {
    #[prost(message, repeated, tag = "12")]
    pub khhhjkbcekl: ::prost::alloc::vec::Vec<Lidhmbfbhao>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eonniefdoci {
    #[prost(uint32, tag = "14")]
    pub npholaehbkh: u32,
    #[prost(uint32, tag = "9")]
    pub okpcgdecjgg: u32,
    #[prost(bool, tag = "4")]
    pub johpnmpfnia: bool,
    #[prost(uint32, tag = "1")]
    pub aekimehjnkj: u32,
    #[prost(uint32, tag = "11")]
    pub bamhmcfcibo: u32,
    #[prost(uint32, tag = "10")]
    pub ddjolnlfedi: u32,
    #[prost(uint32, tag = "5")]
    pub cikefdlgdhi: u32,
    #[prost(uint32, tag = "7")]
    pub ebmiflnkgel: u32,
    #[prost(uint32, tag = "15")]
    pub dkppejnhahh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjpjdlgmoen {
    #[prost(message, optional, tag = "9")]
    pub pbjhjhdcafb: ::core::option::Option<Eonniefdoci>,
    #[prost(uint32, tag = "2")]
    pub igepfimgalc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aihopmoclam {
    #[prost(uint32, tag = "14")]
    pub nghdgacfjep: u32,
    #[prost(uint32, tag = "9")]
    pub ppdbmfkjpel: u32,
    #[prost(uint32, tag = "1")]
    pub pkkfndimmio: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckffbacigpg {
    #[prost(message, repeated, tag = "15")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Aihopmoclam>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnlpaajffok {
    #[prost(uint32, tag = "7")]
    pub dkppejnhahh: u32,
    #[prost(uint32, tag = "1")]
    pub lbmgpjobhdp: u32,
    #[prost(uint32, tag = "15")]
    pub ddjolnlfedi: u32,
    #[prost(uint32, tag = "9")]
    pub hflkkoinaeo: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opbfdjbbhlf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eelooogfiep {
    #[prost(message, optional, tag = "13")]
    pub elcdinampjf: ::core::option::Option<Hnlpaajffok>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub nofclllibdd: ::prost::alloc::vec::Vec<Hnlpaajffok>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oppjogblncg {
    #[prost(uint32, tag = "3")]
    pub ejpljgbiaic: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kolcimmmjhb {
    #[prost(uint32, tag = "1")]
    pub ejpljgbiaic: u32,
    #[prost(message, optional, tag = "5")]
    pub dekonpmjeen: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfjiapghecn {
    #[prost(uint32, repeated, tag = "4")]
    pub nahadojjmfc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub lbmgpjobhdp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boaopmiiplm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khpljlniphc {
    #[prost(uint32, tag = "5")]
    pub mjihjbdnbkk: u32,
    #[prost(uint32, tag = "4")]
    pub aglkonkpmlo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kilboolgkpa {
    #[prost(message, repeated, tag = "7")]
    pub dkmdjiclemf: ::prost::alloc::vec::Vec<Khpljlniphc>,
    #[prost(bool, tag = "10")]
    pub mkideamcloh: bool,
    #[prost(bool, tag = "13")]
    pub dmfpklplbbi: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "3")]
    pub ckikjffkgfk: ::prost::alloc::vec::Vec<Fjckjdbjkfd>,
    #[prost(int32, tag = "12")]
    pub dpmofpdmpab: i32,
    #[prost(int32, tag = "15")]
    pub lkajhecfpji: i32,
    #[prost(uint32, tag = "11")]
    pub progress: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plpbgpgeenh {
    #[prost(uint32, tag = "12")]
    pub boijjckjecp: u32,
    #[prost(bool, tag = "9")]
    pub edeglgnkjdj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gglknfikmjo {
    #[prost(uint32, tag = "11")]
    pub ebdmffdjebm: u32,
    #[prost(uint32, tag = "13")]
    pub dhcakofmnjp: u32,
    #[prost(message, optional, tag = "7")]
    pub gedkbbfkdlm: ::core::option::Option<Bocmnkonppn>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SocialEventServerCache {
    #[prost(uint32, tag = "11")]
    pub src_uid: u32,
    #[prost(uint32, tag = "13")]
    pub sub_coin: u32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
    #[prost(uint32, tag = "7")]
    pub add_coin: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fdkgkflnomh {
    #[prost(message, repeated, tag = "3")]
    pub calpgdnbiaa: ::prost::alloc::vec::Vec<SocialEventServerCache>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afedkeknocc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npkeaphgcbp {
    #[prost(message, repeated, tag = "2")]
    pub calpgdnbiaa: ::prost::alloc::vec::Vec<SocialEventServerCache>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kocpagpjklg {
    #[prost(uint32, repeated, tag = "13")]
    pub bbphnlfjfia: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgmhhjpoech {
    #[prost(uint32, repeated, tag = "1")]
    pub lfbdpogonmk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofabhekkgji {
    #[prost(uint32, tag = "1")]
    pub bnhepammdhc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppnhdbldehi {
    #[prost(message, repeated, tag = "9")]
    pub lagojcpbhbb: ::prost::alloc::vec::Vec<Ajofeagbhof>,
    #[prost(uint32, tag = "5")]
    pub bnhepammdhc: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipbhdhlonkl {
    #[prost(uint64, tag = "14")]
    pub ahbalikpnil: u64,
    #[prost(uint32, tag = "11")]
    pub bnhepammdhc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onhionphhpe {
    #[prost(uint32, tag = "1")]
    pub bnhepammdhc: u32,
    #[prost(message, optional, tag = "2")]
    pub dekonpmjeen: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub ahbalikpnil: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emgndkeoddi {
    #[prost(uint64, tag = "8")]
    pub ahbalikpnil: u64,
    #[prost(uint32, tag = "12")]
    pub bnhepammdhc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjpbgihpnpk {
    #[prost(uint32, tag = "9")]
    pub bnhepammdhc: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint64, tag = "10")]
    pub ahbalikpnil: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maiibnepbkj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Deecamaadno {
    #[prost(uint32, tag = "8")]
    pub hflkkoinaeo: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub lkfmpcmabal: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ideeolipmcm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agfjdjchdcf {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub odldbbohhkb: ::core::option::Option<Gioddoihlcn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmiicmpcpce {
    #[prost(uint32, repeated, tag = "7")]
    pub lcimodmphno: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knefbegaapc {
    #[prost(message, optional, tag = "7")]
    pub dekonpmjeen: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "11")]
    pub lcimodmphno: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcgkeidjmea {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcclgmmfhbc {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub dekonpmjeen: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnkcoklflkk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfgbgjmmnfk {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub pbjhjhdcafb: ::core::option::Option<Eonniefdoci>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chdcojajjcb {
    #[prost(uint32, tag = "2")]
    pub lnjapmhfcck: u32,
    #[prost(uint32, tag = "8")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceghamagdkm {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub lnjapmhfcck: u32,
    #[prost(uint32, tag = "5")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlgocoobfoi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjnahfbkmob {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmliohboebj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbdgpkiddla {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
    #[prost(message, optional, tag = "6")]
    pub nchhhomjbdk: ::core::option::Option<Mfoaahgomic>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oibemlbhfei {
    #[prost(uint32, tag = "1")]
    pub hckegfdpdml: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Habpbddflme {
    #[prost(string, tag = "3")]
    pub jdmpkhbijmn: ::prost::alloc::string::String,
    #[prost(uint32, tag = "8")]
    pub cfanklgaeoi: u32,
    #[prost(uint64, tag = "1")]
    pub jgkindfbegl: u64,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(string, tag = "13")]
    pub jdjmjenhhhl: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnkgpngjhkp {
    #[prost(uint64, tag = "5")]
    pub jgkindfbegl: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkmgppjcaoa {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdfcmfifanj {
    #[prost(message, repeated, tag = "15")]
    pub pcmhnpbecpk: ::prost::alloc::vec::Vec<Egokacjfaen>,
    #[prost(message, optional, tag = "9")]
    pub nchhhomjbdk: ::core::option::Option<Mfoaahgomic>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnegdinkbpo {
    #[prost(message, optional, tag = "2")]
    pub nchhhomjbdk: ::core::option::Option<Mfoaahgomic>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phnoojigfhp {
    #[prost(enumeration = "Donhpbjnknp", tag = "12")]
    pub mgdnainpahe: i32,
    #[prost(message, optional, tag = "2")]
    pub bnageejckgi: ::core::option::Option<Obminlghola>,
    #[prost(uint32, tag = "5")]
    pub ebeabgeoean: u32,
    #[prost(uint32, tag = "1")]
    pub bkhhkejcomc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imjaneejcfp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cneaelnihbo {
    #[prost(uint32, tag = "2")]
    pub neaokpcagnl: u32,
    #[prost(uint32, tag = "4")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chokajgcamp {
    #[prost(message, repeated, tag = "15")]
    pub jphnpjmpmbm: ::prost::alloc::vec::Vec<Pplkceifckf>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub dbkfefjmndk: ::prost::alloc::vec::Vec<Cneaelnihbo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkaijciobno {
    #[prost(message, repeated, tag = "12")]
    pub dbkfefjmndk: ::prost::alloc::vec::Vec<Cneaelnihbo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kabippgdpah {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkknlapklmg {
    #[prost(uint32, tag = "3")]
    pub hihamdaadoi: u32,
    #[prost(uint32, tag = "15")]
    pub efbfdfnaiak: u32,
    #[prost(uint32, tag = "7")]
    pub ppkgjnfchbg: u32,
    #[prost(uint32, tag = "2")]
    pub fjlnncjahng: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pplkceifckf {
    #[prost(uint32, tag = "7")]
    pub okcfllaampl: u32,
    #[prost(uint32, tag = "13")]
    pub ekieijdbdhm: u32,
    #[prost(uint32, tag = "3")]
    pub clmeaokeoaf: u32,
    #[prost(uint32, tag = "4")]
    pub fjlnncjahng: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlmmnbaiaen {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub jphnpjmpmbm: ::prost::alloc::vec::Vec<Pplkceifckf>,
    #[prost(message, optional, tag = "8")]
    pub cfjfdcakbpd: ::core::option::Option<Hkknlapklmg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfjlillecgk {
    #[prost(message, repeated, tag = "15")]
    pub icbiaedlngb: ::prost::alloc::vec::Vec<Hkknlapklmg>,
    #[prost(message, repeated, tag = "13")]
    pub jphnpjmpmbm: ::prost::alloc::vec::Vec<Pplkceifckf>,
    #[prost(message, repeated, tag = "2")]
    pub dbkfefjmndk: ::prost::alloc::vec::Vec<Cneaelnihbo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agacmpmknah {
    #[prost(uint32, tag = "15")]
    pub ehbklolppkd: u32,
    #[prost(enumeration = "Ibmkpfblcop", tag = "1")]
    pub pos: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hekmjicgnok {
    #[prost(uint32, tag = "5")]
    pub hjggnmndjad: u32,
    #[prost(message, repeated, tag = "11")]
    pub ckacngonkjj: ::prost::alloc::vec::Vec<Agacmpmknah>,
    #[prost(uint32, tag = "13")]
    pub level: u32,
    #[prost(uint32, tag = "7")]
    pub lnbhmcphfdh: u32,
    #[prost(uint32, tag = "12")]
    pub fhmfhbjkfad: u32,
    #[prost(uint32, tag = "9")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fipbhpcfnnn {
    #[prost(bool, tag = "2")]
    pub hdnieedkagk: bool,
    #[prost(uint32, tag = "9")]
    pub jimincbjkpg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmjgeckckmm {
    #[prost(message, repeated, tag = "9")]
    pub hibkehghjkj: ::prost::alloc::vec::Vec<Fipbhpcfnnn>,
    #[prost(uint32, tag = "7")]
    pub polheomfihp: u32,
    #[prost(uint32, tag = "5")]
    pub llcmhphhafg: u32,
    #[prost(uint32, tag = "15")]
    pub doeadajcpcd: u32,
    #[prost(uint32, tag = "10")]
    pub djifmbakafg: u32,
    #[prost(uint32, tag = "13")]
    pub loacdlcljkl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kopbmgbkabe {
    #[prost(uint32, tag = "2")]
    pub amiejgmmbnn: u32,
    #[prost(uint32, tag = "3")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pabjleadhde {
    #[prost(uint32, tag = "1")]
    pub enponpnkhhd: u32,
    #[prost(uint32, tag = "14")]
    pub ilbidmacbhl: u32,
    #[prost(enumeration = "Khpkejjhene", tag = "12")]
    pub state: i32,
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
    #[prost(uint32, tag = "5")]
    pub ipcpammkkdf: u32,
    #[prost(uint32, tag = "9")]
    pub jmbbphkojmc: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub nhnbiglcmae: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpnaapgcinf {
    #[prost(uint32, tag = "4")]
    pub kahdopkmaaa: u32,
    #[prost(message, repeated, tag = "15")]
    pub llhoijjnhbc: ::prost::alloc::vec::Vec<Pabjleadhde>,
    #[prost(uint32, repeated, tag = "7")]
    pub fghkkkkbohf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iklgpokopno {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhenfenpfmp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub dplempnahkh: ::core::option::Option<Lpnaapgcinf>,
    #[prost(uint32, tag = "12")]
    pub njhmoljoand: u32,
    #[prost(message, repeated, tag = "8")]
    pub opbbglfipjf: ::prost::alloc::vec::Vec<Hekmjicgnok>,
    #[prost(uint32, tag = "9")]
    pub fddiajpmfki: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub akogjjegako: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "14")]
    pub lokhhakogkh: u32,
    #[prost(message, optional, tag = "10")]
    pub okejfjflidc: ::core::option::Option<Hmjgeckckmm>,
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "15")]
    pub ebggiceiaee: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub cdgdabeaeam: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1")]
    pub ckacngonkjj: ::prost::alloc::vec::Vec<Kopbmgbkabe>,
    #[prost(uint32, tag = "5")]
    pub pkjhlljjldp: u32,
    #[prost(uint32, tag = "6")]
    pub exp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dobbjmgakhk {
    #[prost(uint32, tag = "14")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlbjjifeahl {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgcgdbekgen {
    #[prost(uint32, tag = "7")]
    pub amiejgmmbnn: u32,
    #[prost(enumeration = "Ibmkpfblcop", tag = "3")]
    pub pos: i32,
    #[prost(uint32, tag = "6")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkpgdmangog {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub ehbklolppkd: u32,
    #[prost(uint32, tag = "15")]
    pub amiejgmmbnn: u32,
    #[prost(enumeration = "Ibmkpfblcop", tag = "12")]
    pub pos: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eaglpghjhep {
    #[prost(uint32, tag = "12")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfdiknclbgh {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lclkpncbbhg {
    #[prost(uint32, tag = "13")]
    pub ehbklolppkd: u32,
    #[prost(enumeration = "Gdophdklfdg", tag = "11")]
    pub cmnihjigino: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfacpieijfn {
    #[prost(uint32, tag = "3")]
    pub ldmpandhbcm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmonjimkcnb {
    #[prost(uint32, tag = "14")]
    pub plpnefmoile: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkbapmfchgp {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub negakoplbfk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ginopghobbg {
    #[prost(uint32, tag = "14")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "9")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpafaechgfl {
    #[prost(uint32, tag = "10")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njppmfpmemf {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(enumeration = "Fkieenabkbi", tag = "15")]
    pub apimbkdepgd: i32,
    #[prost(uint32, tag = "7")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkebghbnkee {
    #[prost(enumeration = "Fkieenabkbi", tag = "13")]
    pub apimbkdepgd: i32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, tag = "3")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plbkibglbnd {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(message, optional, tag = "6")]
    pub dplempnahkh: ::core::option::Option<Lpnaapgcinf>,
    #[prost(message, repeated, tag = "2")]
    pub opbbglfipjf: ::prost::alloc::vec::Vec<Hekmjicgnok>,
    #[prost(uint32, tag = "4")]
    pub lokhhakogkh: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub akogjjegako: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub njhmoljoand: u32,
    #[prost(uint32, tag = "9")]
    pub ebggiceiaee: u32,
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(uint32, tag = "11")]
    pub pkjhlljjldp: u32,
    #[prost(message, optional, tag = "12")]
    pub okejfjflidc: ::core::option::Option<Hmjgeckckmm>,
    #[prost(uint32, tag = "14")]
    pub fddiajpmfki: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub cdgdabeaeam: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "10")]
    pub ckacngonkjj: ::prost::alloc::vec::Vec<Kopbmgbkabe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbjjglacdne {
    #[prost(message, optional, tag = "15")]
    pub jpaolljmggn: ::core::option::Option<Pabjleadhde>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebdhkimflce {
    #[prost(int32, tag = "13")]
    pub kccleanfoef: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Occahnklaim {
    #[prost(message, optional, tag = "3")]
    pub jpaolljmggn: ::core::option::Option<Lpnaapgcinf>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kekkmfdigne {
    #[prost(uint32, tag = "10")]
    pub event_id: u32,
    #[prost(uint32, tag = "3")]
    pub jmbbphkojmc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afhajlkjocl {
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
    #[prost(uint32, tag = "14")]
    pub jmbbphkojmc: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adalbkfkjji {
    #[prost(uint32, tag = "10")]
    pub njhmoljoand: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbpnljhddip {
    #[prost(uint32, tag = "6")]
    pub oaedchilhgj: u32,
    #[prost(uint32, tag = "11")]
    pub fpjnhijobaj: u32,
    #[prost(uint32, tag = "10")]
    pub njhmoljoand: u32,
    #[prost(uint32, tag = "12")]
    pub ehbklolppkd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilfmakefhbm {
    #[prost(uint32, tag = "10")]
    pub djifmbakafg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djalilghapg {
    #[prost(uint32, repeated, tag = "4")]
    pub jimincbjkpg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub djifmbakafg: u32,
    #[prost(bool, tag = "14")]
    pub loemopmkinb: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcpphggjadn {
    #[prost(uint32, tag = "14")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "3")]
    pub djifmbakafg: u32,
    #[prost(uint32, tag = "8")]
    pub olfhccbiidg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Emegifcfcjn {
    #[prost(uint32, tag = "9")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egmpcjhcjbk {
    #[prost(uint32, tag = "6")]
    pub hgjolgkaofj: u32,
    #[prost(message, optional, tag = "4")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epmngcpcbkl {
    #[prost(uint32, tag = "13")]
    pub kheopnihaff: u32,
    #[prost(uint32, tag = "1")]
    pub cfbjmkdbhai: u32,
    #[prost(enumeration = "Cmebpgjmefe", tag = "12")]
    pub ippjhngkgjo: i32,
    #[prost(uint32, tag = "6")]
    pub gbclnihogem: u32,
    #[prost(uint32, tag = "7")]
    pub glnpnnmnand: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub gjjipefijck: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nckfngfopgm {
    #[prost(uint32, repeated, tag = "2")]
    pub mpoedocjenp: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ookkhpnopmj {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub fgdljmbkbam: ::prost::alloc::vec::Vec<Epmngcpcbkl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojlpkgeolmh {
    #[prost(uint32, tag = "3")]
    pub gbclnihogem: u32,
    #[prost(uint32, tag = "2")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifjbadlimjc {
    #[prost(message, optional, tag = "8")]
    pub fkamaeepnki: ::core::option::Option<Epmngcpcbkl>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lncjkacchpc {
    #[prost(uint32, repeated, tag = "6")]
    pub eoejiijmano: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub idcigdfjabi: u32,
    #[prost(uint32, tag = "2")]
    pub gbclnihogem: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeoiecpgdde {
    #[prost(message, optional, tag = "2")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "3")]
    pub fkamaeepnki: ::core::option::Option<Epmngcpcbkl>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlmjajcepgj {
    #[prost(message, optional, tag = "11")]
    pub fkamaeepnki: ::core::option::Option<Epmngcpcbkl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Maadcgflnec {
    #[prost(uint32, tag = "5")]
    pub idlneeekpjl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhgjajlgbfb {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub idlneeekpjl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flondkdobfn {
    #[prost(uint32, tag = "5")]
    pub idlneeekpjl: u32,
    #[prost(uint64, tag = "6")]
    pub fkglfpgdhic: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkaajneaocj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcgnnhbbenm {
    #[prost(uint32, repeated, tag = "10")]
    pub giipokombda: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub pdgeengkjke: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmbnjkmnjnh {
    #[prost(uint32, tag = "10")]
    pub dljbepbhekm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jbmeobcimpi {
    #[prost(uint32, tag = "6")]
    pub bmcoijcmnnc: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub pdgeengkjke: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgpllmnldic {
    #[prost(uint32, tag = "8")]
    pub dljbepbhekm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpealbnelpe {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub bmcoijcmnnc: u32,
    #[prost(uint32, tag = "13")]
    pub pdgeengkjke: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Magblgbbnha {
    #[prost(uint32, tag = "8")]
    pub pdgeengkjke: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aebnbkfhgof {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiapanmhjob {
    #[prost(uint32, tag = "3")]
    pub ilcffmcedan: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub dmplokpnddp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub lamdfhjndpe: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub gbljjpfnjdc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fiflmmabnkj {
    #[prost(uint32, tag = "8")]
    pub flefoflohfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhccgjallic {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub iilafoldjig: u32,
    #[prost(uint32, tag = "2")]
    pub ilcffmcedan: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihonfpmoaon {
    #[prost(uint32, tag = "1")]
    pub flefoflohfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncnfiancepd {
    #[prost(uint32, tag = "13")]
    pub lgofedpnbol: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egcilkjklpd {
    #[prost(uint32, tag = "5")]
    pub lamdfhjndpe: u32,
    #[prost(uint32, tag = "11")]
    pub adjfaimlabe: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obcjgodlghn {
    #[prost(uint32, tag = "5")]
    pub lgofedpnbol: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginCsReq {
    #[prost(uint32, tag = "13")]
    pub bajjablkfab: u32,
    #[prost(string, tag = "14")]
    pub bcijkmpjfni: ::prost::alloc::string::String,
    #[prost(string, tag = "9")]
    pub difcdhddfbp: ::prost::alloc::string::String,
    #[prost(uint32, tag = "1253")]
    pub lmjolnigkkc: u32,
    #[prost(uint32, tag = "540")]
    pub blclkkidljh: u32,
    #[prost(string, tag = "1012")]
    pub pkgmnimcpdh: ::prost::alloc::string::String,
    #[prost(enumeration = "LanguageType", tag = "10")]
    pub fhndmpcjhbh: i32,
    #[prost(enumeration = "PlatformType", tag = "5")]
    pub platform: i32,
    #[prost(message, optional, tag = "1657")]
    pub cpmikdbdcpg: ::core::option::Option<Lbofjhojgph>,
    #[prost(bool, tag = "1976")]
    pub kjfcoglhkfk: bool,
    #[prost(string, tag = "6")]
    pub pafnmmndegp: ::prost::alloc::string::String,
    #[prost(string, tag = "1866")]
    pub ochimkelcde: ::prost::alloc::string::String,
    #[prost(uint64, tag = "8")]
    pub login_random: u64,
    #[prost(string, tag = "1393")]
    pub dmdcpeiefkg: ::prost::alloc::string::String,
    #[prost(string, tag = "624")]
    pub bhoanekljhm: ::prost::alloc::string::String,
    #[prost(string, tag = "354")]
    pub meijfajkmmp: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub mkkdakgkkhe: ::prost::alloc::string::String,
    #[prost(string, tag = "7")]
    pub ogilamajgio: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub ghaifpffmog: ::prost::alloc::string::String,
    #[prost(string, tag = "15")]
    pub fecdamigijp: ::prost::alloc::string::String,
    #[prost(string, tag = "12")]
    pub mddiipbifek: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub cpkikinabfj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub hcgjomkbloh: u32,
    #[prost(string, tag = "1")]
    pub mhmockcmeje: ::prost::alloc::string::String,
    #[prost(bool, tag = "1358")]
    pub fgahpfhnncl: bool,
    #[prost(string, tag = "1183")]
    pub pjieaeapgnl: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerLoginScRsp {
    #[prost(uint64, tag = "13")]
    pub login_random: u64,
    #[prost(string, tag = "2")]
    pub meilhlkmgfn: ::prost::alloc::string::String,
    #[prost(string, tag = "14")]
    pub pnhfbdbkpci: ::prost::alloc::string::String,
    #[prost(bool, tag = "1")]
    pub kcicanjloba: bool,
    #[prost(bool, tag = "4")]
    pub dlicepdamib: bool,
    #[prost(message, optional, tag = "5")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub stamina: u32,
    #[prost(int32, tag = "3")]
    pub biinmckjhen: i32,
    #[prost(uint64, tag = "15")]
    pub server_timestamp_ms: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eipnikcenib {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenCsReq {
    #[prost(uint32, tag = "3")]
    pub platform: u32,
    #[prost(string, tag = "4")]
    pub oiegbkkceda: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub blclkkidljh: u32,
    #[prost(string, tag = "10")]
    pub cpdkcijkohd: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub lkgbcdgefjf: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub gmcheopahkc: u32,
    #[prost(uint32, tag = "14")]
    pub pcmajmegbld: u32,
    #[prost(uint32, tag = "6")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerGetTokenScRsp {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub uid: u32,
    #[prost(uint64, tag = "5")]
    pub secret_key_seed: u64,
    #[prost(message, optional, tag = "12")]
    pub black_info: ::core::option::Option<BlackInfo>,
    #[prost(string, tag = "3")]
    pub msg: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inhhlgadneo {
    #[prost(string, tag = "1")]
    pub msg: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahfgciojiji {
    #[prost(message, optional, tag = "4")]
    pub black_info: ::core::option::Option<BlackInfo>,
    #[prost(enumeration = "Ipdiefeccfp", tag = "9")]
    pub nfgdkiijjen: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opkkbgocfjc {
    #[prost(string, tag = "12")]
    pub msg: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcilblkabah {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(string, tag = "9")]
    pub pjbkfmnfijb: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icmibhcnkll {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klojonjinal {
    #[prost(bool, tag = "2")]
    pub jcnincccakl: bool,
    #[prost(bool, tag = "1")]
    pub nhknohpdocc: bool,
    #[prost(bool, tag = "3")]
    pub hhcgdeocomi: bool,
    #[prost(bool, tag = "15")]
    pub ookalmpeleg: bool,
    #[prost(bool, tag = "9")]
    pub defkcpiepnb: bool,
    #[prost(bool, tag = "11")]
    pub ggodaiohjif: bool,
    #[prost(bool, tag = "12")]
    pub kmjdmefgcck: bool,
    #[prost(bool, tag = "7")]
    pub dedidajjmcj: bool,
    #[prost(bool, tag = "14")]
    pub bkpaceckiia: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBasicInfoScRsp {
    #[prost(uint32, tag = "4")]
    pub gender: u32,
    #[prost(uint32, tag = "10")]
    pub cur_day: u32,
    #[prost(message, optional, tag = "1")]
    pub player_setting_info: ::core::option::Option<Klojonjinal>,
    #[prost(int64, tag = "8")]
    pub next_recover_time: i64,
    #[prost(bool, tag = "7")]
    pub is_gender_set: bool,
    #[prost(uint32, tag = "2")]
    pub gameplay_birthday: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "5")]
    pub week_cocoon_finished_count: u32,
    #[prost(uint32, tag = "14")]
    pub exchange_times: u32,
    #[prost(int64, tag = "13")]
    pub last_set_nickname_time: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjomedohabo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeStaminaScRsp {
    #[prost(uint32, tag = "10")]
    pub exchange_times: u32,
    #[prost(int64, tag = "3")]
    pub last_recover_time: i64,
    #[prost(uint32, tag = "9")]
    pub stamina_add: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "14")]
    pub item_cost_list: ::prost::alloc::vec::Vec<ItemCost>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilhiemhgmbm {
    #[prost(string, tag = "5")]
    pub mdipcjnjlpb: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub lindhpibjmj: u32,
    #[prost(uint32, tag = "9")]
    pub dhigcieoome: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkhllhkhkki {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(string, tag = "6")]
    pub lcdjcjmimmi: ::prost::alloc::string::String,
    #[prost(string, tag = "8")]
    pub mdipcjnjlpb: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub dhigcieoome: u32,
    #[prost(uint32, tag = "12")]
    pub lindhpibjmj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcibichlmaa {
    #[prost(int64, tag = "2")]
    pub mlcpkfihkko: i64,
    #[prost(int64, tag = "13")]
    pub hhpakondiob: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AntiAddictScNotify {
    #[prost(string, tag = "8")]
    pub level: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub msg: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub msg_type: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lldfgdokngn {
    #[prost(bool, tag = "13")]
    pub gojoccjaipc: bool,
    #[prost(string, tag = "2")]
    pub nickname: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahddpdcponn {
    #[prost(int64, tag = "1")]
    pub nlgoggmaeod: i64,
    #[prost(bool, tag = "8")]
    pub gojoccjaipc: bool,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cokpjdmbncp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kihflmnnojn {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub olnhoiiaocp: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkemblmibgd {
    #[prost(uint32, tag = "8")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjfenccabaa {
    #[prost(uint32, tag = "7")]
    pub level: u32,
    #[prost(message, optional, tag = "15")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdkfldgnelf {
    #[prost(enumeration = "LanguageType", tag = "13")]
    pub fhndmpcjhbh: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihcijilblji {
    #[prost(enumeration = "LanguageType", tag = "9")]
    pub fhndmpcjhbh: i32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efgokaehlcl {
    #[prost(string, tag = "5")]
    pub flnaoghpbna: ::prost::alloc::string::String,
    #[prost(uint32, tag = "3")]
    pub khihdnfapob: u32,
    #[prost(int64, tag = "7")]
    pub end_time: i64,
    #[prost(int64, tag = "11")]
    pub begin_time: i64,
    #[prost(string, tag = "2")]
    pub iliojodbdeb: ::prost::alloc::string::String,
    #[prost(bool, tag = "9")]
    pub ohbhkcgmfek: bool,
    #[prost(string, tag = "4")]
    pub bhmegdiiglh: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub manomfgafia: u32,
    #[prost(uint32, tag = "15")]
    pub pfbnanpcdjh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Innjajipelm {
    #[prost(message, repeated, tag = "8")]
    pub alefnglnfdd: ::prost::alloc::vec::Vec<Efgokaehlcl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gateserver {
    #[prost(bool, tag = "1566")]
    pub cmelkdaaapf: bool,
    #[prost(bool, tag = "1952")]
    pub ophmlpkgkij: bool,
    #[prost(string, tag = "563")]
    pub mmcjggcenpp: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub pllenlninnh: ::prost::alloc::string::String,
    #[prost(bool, tag = "1457")]
    pub lamjdogmfam: bool,
    #[prost(string, tag = "716")]
    pub bblkofdgpap: ::prost::alloc::string::String,
    #[prost(string, tag = "1220")]
    pub ephafkmpmif: ::prost::alloc::string::String,
    #[prost(string, tag = "1192")]
    pub gmdfmaapebc: ::prost::alloc::string::String,
    #[prost(int64, tag = "15")]
    pub mlcpkfihkko: i64,
    #[prost(bool, tag = "593")]
    pub bgpcckkddmb: bool,
    #[prost(string, tag = "14")]
    pub ex_resource_url: ::prost::alloc::string::String,
    #[prost(string, tag = "677")]
    pub nkfnaojjlph: ::prost::alloc::string::String,
    #[prost(string, tag = "405")]
    pub hkdmdpmahem: ::prost::alloc::string::String,
    #[prost(string, tag = "1113")]
    pub ifix_version: ::prost::alloc::string::String,
    #[prost(string, tag = "87")]
    pub fbobagpbbha: ::prost::alloc::string::String,
    #[prost(string, tag = "1808")]
    pub mjjbccmcplk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub port: u32,
    #[prost(string, tag = "1570")]
    pub anegjdlagll: ::prost::alloc::string::String,
    #[prost(bool, tag = "1915")]
    pub gepfimnioke: bool,
    #[prost(string, tag = "1629")]
    pub lpnoekiaocp: ::prost::alloc::string::String,
    #[prost(string, tag = "1583")]
    pub fgkgddonpkm: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub nejihdfafbe: u32,
    #[prost(bool, tag = "1")]
    pub hafcipegpin: bool,
    #[prost(string, tag = "8")]
    pub kghpigijmbp: ::prost::alloc::string::String,
    #[prost(string, tag = "11")]
    pub msg: ::prost::alloc::string::String,
    #[prost(string, tag = "915")]
    pub molbpmljolo: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub asset_bundle_url: ::prost::alloc::string::String,
    #[prost(bool, tag = "1028")]
    pub kjadmknddjl: bool,
    #[prost(string, repeated, tag = "663")]
    pub khclmhjlopk: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(string, tag = "661")]
    pub lua_version: ::prost::alloc::string::String,
    #[prost(string, tag = "1462")]
    pub okplkdhmohc: ::prost::alloc::string::String,
    #[prost(string, tag = "1236")]
    pub ooeapiaafnb: ::prost::alloc::string::String,
    #[prost(string, tag = "1773")]
    pub jelgnociekj: ::prost::alloc::string::String,
    #[prost(int64, tag = "9")]
    pub hhpakondiob: i64,
    #[prost(bool, tag = "297")]
    pub opgmnlinakc: bool,
    #[prost(bool, tag = "1754")]
    pub begfcjlkmob: bool,
    #[prost(string, tag = "1132")]
    pub nnhognglfbd: ::prost::alloc::string::String,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(string, tag = "148")]
    pub kgljfhdhdek: ::prost::alloc::string::String,
    #[prost(uint32, tag = "6")]
    pub cjnjnfglick: u32,
    #[prost(string, tag = "614")]
    pub ncdioakalen: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub ip: ::prost::alloc::string::String,
    #[prost(bool, tag = "1486")]
    pub gediongpdha: bool,
    #[prost(bool, tag = "414")]
    pub mbdacjejamf: bool,
    #[prost(string, tag = "10")]
    pub lua_url: ::prost::alloc::string::String,
    #[prost(string, tag = "1012")]
    pub dmdahpindno: ::prost::alloc::string::String,
    #[prost(bool, tag = "1176")]
    pub gjaeghbeaio: bool,
    #[prost(uint32, tag = "1710")]
    pub ddohlaegeah: u32,
    #[prost(string, tag = "1430")]
    pub bfoekehoejp: ::prost::alloc::string::String,
    #[prost(string, tag = "1370")]
    pub chnmpglhncm: ::prost::alloc::string::String,
    #[prost(string, tag = "873")]
    pub pggjoogfgfc: ::prost::alloc::string::String,
    #[prost(bool, tag = "1523")]
    pub dklchemciai: bool,
    #[prost(string, tag = "512")]
    pub migeegecjcb: ::prost::alloc::string::String,
    #[prost(string, tag = "312")]
    pub ciinblfopda: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub fkenkkhlhhd: bool,
    #[prost(string, tag = "1420")]
    pub hjbndbbicdo: ::prost::alloc::string::String,
    #[prost(string, tag = "571")]
    pub fggmipmoook: ::prost::alloc::string::String,
    #[prost(bool, tag = "825")]
    pub use_tcp: bool,
    #[prost(string, tag = "1750")]
    pub imffkkjpojc: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Feofohjeheo {
    #[prost(string, tag = "6")]
    pub mmlefkndolf: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MultiPathAvatarInfo {
    #[prost(message, repeated, tag = "4")]
    pub alfcdfljlef: ::prost::alloc::vec::Vec<AvatarSkillTree>,
    #[prost(uint32, tag = "7")]
    pub rank: u32,
    #[prost(uint32, tag = "10")]
    pub cfehgipoikg: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "2")]
    pub avatar_id: i32,
    #[prost(message, repeated, tag = "3")]
    pub lldiefjheih: ::prost::alloc::vec::Vec<EquipRelic>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jblpadknjeg {
    #[prost(enumeration = "MultiPathAvatarType", tag = "13")]
    pub avatar_id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetAvatarPathScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "14")]
    pub avatar_id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eeibaolcgme {
    #[prost(enumeration = "MultiPathAvatarType", repeated, tag = "7")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckfndpojijk {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjkpeabkggl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMultiPathAvatarInfoScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub multi_path_avatar_info_list: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(uint32, repeated, tag = "4")]
    pub dbkjfgdlemk: ::prost::alloc::vec::Vec<u32>,
    #[prost(map = "uint32, enumeration(MultiPathAvatarType)", tag = "13")]
    pub cur_multi_path_avatar_type_map: ::std::collections::HashMap<u32, i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnfhfddncdh {
    #[prost(enumeration = "MultiPathAvatarType", tag = "14")]
    pub avatar_id: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockAvatarPathScRsp {
    #[prost(enumeration = "MultiPathAvatarType", tag = "7")]
    pub avatar_id: i32,
    #[prost(message, optional, tag = "3")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub dbkjfgdlemk: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnommghhgik {
    #[prost(uint32, tag = "3")]
    pub base_avatar_id: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "8")]
    pub nbbomjghppd: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Peiohgepkil {
    #[prost(enumeration = "Gender", tag = "7")]
    pub ilpdljcncon: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oapapodfeaa {
    #[prost(message, repeated, tag = "7")]
    pub iekbaibeoib: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(enumeration = "MultiPathAvatarType", tag = "2")]
    pub cfncjocmmho: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Galkddajoge {
    #[prost(enumeration = "Gender", tag = "7")]
    pub ilpdljcncon: i32,
    #[prost(string, tag = "11")]
    pub nickname: ::prost::alloc::string::String,
    #[prost(bool, tag = "10")]
    pub gojoccjaipc: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aiibjgampbh {
    #[prost(enumeration = "MultiPathAvatarType", tag = "2")]
    pub cfncjocmmho: i32,
    #[prost(int64, tag = "14")]
    pub nlgoggmaeod: i64,
    #[prost(message, repeated, tag = "9")]
    pub iekbaibeoib: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(bool, tag = "10")]
    pub gojoccjaipc: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bknoejidmkn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcnobmpglpa {
    #[prost(uint32, tag = "2")]
    pub npmgknjajho: u32,
    #[prost(bool, tag = "8")]
    pub bojlpifgmag: bool,
    #[prost(string, tag = "15")]
    pub kicpdkalbmn: ::prost::alloc::string::String,
    #[prost(string, tag = "6")]
    pub pacmaejclee: ::prost::alloc::string::String,
    #[prost(enumeration = "ProductGiftType", tag = "14")]
    pub aahjlfbfjbd: i32,
    #[prost(uint32, tag = "10")]
    pub mfcdfkjanna: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hejbmlnejlj {
    #[prost(uint64, tag = "5")]
    pub afmgandnccg: u64,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub fkdbgepognd: u32,
    #[prost(uint32, tag = "8")]
    pub lhpldhjkdkp: u32,
    #[prost(message, repeated, tag = "14")]
    pub gmhjjigjffd: ::prost::alloc::vec::Vec<Kcnobmpglpa>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Doekpfaafpa {
    #[prost(message, optional, tag = "13")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlgifffnckb {
    #[prost(message, optional, tag = "11")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlmccoifdmj {
    #[prost(message, optional, tag = "3")]
    pub cpiogbbagop: ::core::option::Option<Imomemjfagh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateFeatureSwitchScNotify {
    #[prost(message, repeated, tag = "14")]
    pub switch_info_list: ::prost::alloc::vec::Vec<FeatureSwitchInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oiphpmdgaof {
    #[prost(uint32, tag = "7")]
    pub adiialnejmk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anhilnpolho {
    #[prost(uint32, tag = "13")]
    pub hejdlhijgna: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpmdbnalpfg {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub hejdlhijgna: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihifkjipeeh {
    #[prost(uint32, tag = "2")]
    pub eokoalkmebo: u32,
    #[prost(string, tag = "9")]
    pub ipnkbphbnco: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeokelkocae {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lidenhkbbkf {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub bofegpjagop: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatCsReq {
    #[prost(message, optional, tag = "8")]
    pub upload_data: ::core::option::Option<ClientUploadData>,
    #[prost(uint32, tag = "5")]
    pub fhbehdlecea: u32,
    #[prost(uint64, tag = "11")]
    pub client_time_ms: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PlayerHeartBeatScRsp {
    #[prost(uint64, tag = "12")]
    pub server_time_ms: u64,
    #[prost(uint64, tag = "11")]
    pub client_time_ms: u64,
    #[prost(message, optional, tag = "10")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikgcpjdmdna {
    #[prost(enumeration = "FeatureSwitchType", tag = "11")]
    pub kghcdbdmdki: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lajmnegeami {
    #[prost(enumeration = "SecretKeyType", tag = "8")]
    pub slot: i32,
    #[prost(string, tag = "4")]
    pub chlibbgdmco: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjffbpgnmjf {
    #[prost(bytes = "vec", tag = "4")]
    pub monicakdnei: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfagkddbaib {
    #[prost(message, repeated, tag = "14")]
    pub pefekdhjbce: ::prost::alloc::vec::Vec<Lajmnegeami>,
    #[prost(bytes = "vec", tag = "8")]
    pub iaeneafaogo: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icpodpepelm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cobbfmhbgkd {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifjegahkoic {
    #[prost(uint64, tag = "6")]
    pub ocoogaapion: u64,
    #[prost(uint32, tag = "10")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbgacfhandm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehnknlejadd {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub hilakbadccb: ::prost::alloc::vec::Vec<Ifjegahkoic>,
    #[prost(message, repeated, tag = "2")]
    pub nofmnpkaljn: ::prost::alloc::vec::Vec<Ifjegahkoic>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikiomheofcd {
    #[prost(uint32, tag = "4")]
    pub pdpjiakgpbf: u32,
    #[prost(uint32, tag = "6")]
    pub gdfbnkagmgi: u32,
    #[prost(uint32, tag = "7")]
    pub ogkdpgnkfmc: u32,
    #[prost(uint32, tag = "8")]
    pub nfcojigifbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojligkojemk {
    #[prost(uint32, tag = "10")]
    pub gdfbnkagmgi: u32,
    #[prost(uint32, tag = "9")]
    pub nfcojigifbb: u32,
    #[prost(uint32, tag = "1")]
    pub ogkdpgnkfmc: u32,
    #[prost(message, repeated, tag = "15")]
    pub ibfbefobfbd: ::prost::alloc::vec::Vec<Ikiomheofcd>,
    #[prost(uint32, tag = "7")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhhkmlboidi {
    #[prost(uint32, tag = "1")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReserveStaminaExchangeScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub num: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Liaainkncng {
    #[prost(int64, tag = "5")]
    pub ggndaapphak: i64,
    #[prost(uint32, tag = "13")]
    pub stamina: u32,
    #[prost(uint32, tag = "2")]
    pub dlpphgglpbo: u32,
    #[prost(int64, tag = "7")]
    pub gbdgbkkjfel: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlbjgfcddal {
    #[prost(bool, tag = "9")]
    pub ookalmpeleg: bool,
    #[prost(bool, tag = "7")]
    pub defkcpiepnb: bool,
    #[prost(bool, tag = "6")]
    pub dedidajjmcj: bool,
    #[prost(bool, tag = "11")]
    pub hhcgdeocomi: bool,
    #[prost(bool, tag = "14")]
    pub ggodaiohjif: bool,
    #[prost(bool, tag = "15")]
    pub jcnincccakl: bool,
    #[prost(bool, tag = "10")]
    pub bkpaceckiia: bool,
    #[prost(bool, tag = "13")]
    pub kmjdmefgcck: bool,
    #[prost(bool, tag = "1")]
    pub nhknohpdocc: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkddhpneldk {
    #[prost(message, optional, tag = "1")]
    pub mbnknhhaaik: ::core::option::Option<Jlbjgfcddal>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbjhmijpmgc {
    #[prost(message, optional, tag = "4")]
    pub mbnknhhaaik: ::core::option::Option<Jlbjgfcddal>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlabhnlhoad {
    #[prost(bytes = "vec", tag = "7")]
    pub eaiebeijmde: ::prost::alloc::vec::Vec<u8>,
    #[prost(uint32, tag = "6")]
    pub fhbehdlecea: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbjjciagnij {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub cpiogbbagop: ::core::option::Option<Imomemjfagh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mebodoaicgh {
    #[prost(string, repeated, tag = "4")]
    pub nlacdgkpceg: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnjenhgpijg {
    #[prost(bool, tag = "7")]
    pub gmjgmcecogm: bool,
    #[prost(message, optional, tag = "8")]
    pub idfijahanmn: ::core::option::Option<Mebodoaicgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofgpbmpjfkn {
    #[prost(bool, tag = "738")]
    pub gmjgmcecogm: bool,
    #[prost(message, optional, tag = "668")]
    pub mkjnmafpgji: ::core::option::Option<Mebodoaicgh>,
    #[prost(message, optional, tag = "293")]
    pub hfnmlhlcjbd: ::core::option::Option<Mebodoaicgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iakigocmcji {
    #[prost(message, optional, tag = "1986")]
    pub ipeeimmbfnh: ::core::option::Option<Cnjenhgpijg>,
    #[prost(message, optional, tag = "708")]
    pub bblbengbiof: ::core::option::Option<Ofgpbmpjfkn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhogbpfijkl {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilmpdolbflp {
    #[prost(uint32, tag = "15")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jioifojmhgg {
    #[prost(uint32, tag = "13")]
    pub pos: u32,
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acighdhodol {
    #[prost(bool, tag = "8")]
    pub ebiebipemmp: bool,
    #[prost(message, repeated, tag = "13")]
    pub hoannlkcmoj: ::prost::alloc::vec::Vec<Jioifojmhgg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pdbhegkejnn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejjbfalmlpl {
    #[prost(message, repeated, tag = "12")]
    pub djjdncbpmfk: ::prost::alloc::vec::Vec<Ilmpdolbflp>,
    #[prost(uint32, repeated, tag = "1")]
    pub fejkecfmdnc: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "13")]
    pub cpkikinabfj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "14")]
    pub mffdmonhkah: u32,
    #[prost(message, optional, tag = "4")]
    pub ecgmfoohejj: ::core::option::Option<Acighdhodol>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnhppeakeme {
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djpcljoklmh {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "9")]
    pub mffdmonhkah: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omdgafjddhp {
    #[prost(message, repeated, tag = "10")]
    pub hoannlkcmoj: ::prost::alloc::vec::Vec<Jioifojmhgg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlghliokhof {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "4")]
    pub hoannlkcmoj: ::prost::alloc::vec::Vec<Jioifojmhgg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfeefdlinbd {
    #[prost(bool, tag = "10")]
    pub ebiebipemmp: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fegfiolhldb {
    #[prost(bool, tag = "1")]
    pub ebiebipemmp: bool,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egioindghap {
    #[prost(string, tag = "13")]
    pub cpkikinabfj: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opcelbkmodd {
    #[prost(string, tag = "10")]
    pub cpkikinabfj: ::prost::alloc::string::String,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfjeegoifjh {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbmllcgdeaj {
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgednnjphao {
    #[prost(uint32, tag = "9")]
    pub chpmfbghopb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbabjjnejcj {
    #[prost(uint32, repeated, tag = "9")]
    pub ijifekbfnha: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub ebfcemokigl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofhpmpnmdgi {
    #[prost(uint32, repeated, tag = "5")]
    pub ijifekbfnha: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub mplohdemggi: ::prost::alloc::vec::Vec<ItemList>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub ebfcemokigl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bblkpnmpogi {
    #[prost(uint32, tag = "4")]
    pub opmjfaoockc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcpbfjjpbli {
    #[prost(uint32, tag = "1")]
    pub fdbihcbjfpk: u32,
    #[prost(uint32, tag = "6")]
    pub okbfdiconjo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Komjjhcpkcl {
    #[prost(uint32, tag = "5")]
    pub okbfdiconjo: u32,
    #[prost(uint32, tag = "8")]
    pub fdbihcbjfpk: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub lhkcfidldjf: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oejfjpbbhnd {
    #[prost(uint32, tag = "1")]
    pub kccleanfoef: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mehnpknnhfl {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmbiokjgagb {
    #[prost(uint32, tag = "15")]
    pub kccleanfoef: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkeojconope {
    #[prost(uint32, repeated, tag = "10")]
    pub ijifekbfnha: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub hecfjbignbo: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub jlpokcllpoi: ::prost::alloc::vec::Vec<u32>,
    #[prost(int64, tag = "4")]
    pub nfonlnipina: i64,
    #[prost(uint32, tag = "8")]
    pub opmjfaoockc: u32,
    #[prost(enumeration = "Nnbobagndpf", tag = "12")]
    pub status: i32,
    #[prost(bool, tag = "11")]
    pub mkideamcloh: bool,
    #[prost(int64, tag = "3")]
    pub efooffoifnf: i64,
    #[prost(uint32, tag = "9")]
    pub nokicjcmako: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgpajdafmnb {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub fjldoaefpfo: ::core::option::Option<Kkeojconope>,
    #[prost(uint32, tag = "3")]
    pub cbajboeeomd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eejjcahpekl {
    #[prost(message, optional, tag = "7")]
    pub fjldoaefpfo: ::core::option::Option<Kkeojconope>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcgpfgeaemh {
    #[prost(uint32, tag = "5")]
    pub bbdpimddalm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nnjkpmjkbhg {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub bbdpimddalm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Coalhafipng {
    #[prost(message, optional, tag = "7")]
    pub ddihfbmjacj: ::core::option::Option<Fgljkmekiom>,
    #[prost(enumeration = "PunkLordAttackerStatus", tag = "6")]
    pub licghlgbmla: i32,
    #[prost(uint32, tag = "8")]
    pub ipobnmhpfee: u32,
    #[prost(message, optional, tag = "11")]
    pub basic_info: ::core::option::Option<Aapoalmfpan>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmnmjombhjl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glnelhcpcpo {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub nnbfbfanojd: ::prost::alloc::vec::Vec<Coalhafipng>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icndgmffmhn {
    #[prost(bool, tag = "14")]
    pub hombibbpmjk: bool,
    #[prost(uint32, tag = "8")]
    pub monster_id: u32,
    #[prost(uint32, tag = "3")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlefcdfhiha {
    #[prost(int64, tag = "3")]
    pub kkkabkogeii: i64,
    #[prost(bool, tag = "8")]
    pub hombibbpmjk: bool,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub bfdolepkbod: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub scene: ::core::option::Option<Dnlbhaceial>,
    #[prost(message, optional, tag = "4")]
    pub gdlljbeglci: ::core::option::Option<Coalhafipng>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjakmiepdjo {
    #[prost(enumeration = "PunkLordShareType", tag = "10")]
    pub cpefaednmcc: i32,
    #[prost(uint32, tag = "5")]
    pub monster_id: u32,
    #[prost(uint32, tag = "13")]
    pub uid: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jopjgmdmfhh {
    #[prost(uint32, tag = "6")]
    pub uid: u32,
    #[prost(enumeration = "PunkLordShareType", tag = "10")]
    pub cpefaednmcc: i32,
    #[prost(uint32, tag = "4")]
    pub monster_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmlancnhncj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnhkpibagdn {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub gdlljbeglci: ::core::option::Option<Coalhafipng>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haliddbdjlp {
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(bool, tag = "9")]
    pub mhegpegfggg: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lohjjbdekdb {
    #[prost(bool, tag = "9")]
    pub mhegpegfggg: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(message, optional, tag = "8")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acegholnboi {
    #[prost(enumeration = "PunkLordMonsterInfoNotifyReason", tag = "13")]
    pub mgdnainpahe: i32,
    #[prost(message, optional, tag = "8")]
    pub ddihfbmjacj: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(uint32, repeated, tag = "11")]
    pub bfdolepkbod: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "9")]
    pub basic_info: ::core::option::Option<Aapoalmfpan>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgkolkmnkmn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dimdoakchag {
    #[prost(uint32, tag = "6")]
    pub figonclcnhj: u32,
    #[prost(uint32, tag = "3")]
    pub jcaainbemcb: u32,
    #[prost(uint32, tag = "12")]
    pub pmpdkbcelef: u32,
    #[prost(uint32, tag = "1")]
    pub pojkpinipio: u32,
    #[prost(uint32, tag = "10")]
    pub fijcinagcbc: u32,
    #[prost(int64, tag = "8")]
    pub ogelbpicnhe: i64,
    #[prost(uint32, repeated, tag = "11")]
    pub ihkmfjnfjlk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idfhehkpdhn {
    #[prost(message, optional, tag = "11")]
    pub gdlljbeglci: ::core::option::Option<Aapoalmfpan>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojdimogobok {
    #[prost(message, optional, tag = "3")]
    pub gdlljbeglci: ::core::option::Option<Aapoalmfpan>,
    #[prost(message, optional, tag = "12")]
    pub ddihfbmjacj: ::core::option::Option<PunkLordBattleRecord>,
    #[prost(uint32, tag = "10")]
    pub epjmalbjbfl: u32,
    #[prost(uint32, tag = "13")]
    pub dkjohfibjfb: u32,
    #[prost(uint32, tag = "4")]
    pub inncjmgfgip: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iffmlndfbim {
    #[prost(uint32, tag = "4")]
    pub jgghhdjnepo: u32,
    #[prost(uint32, tag = "12")]
    pub monster_id: u32,
    #[prost(int64, tag = "6")]
    pub fgilieldboi: i64,
    #[prost(uint32, tag = "2")]
    pub world_level: u32,
    #[prost(bool, tag = "5")]
    pub kjpdknocoeo: bool,
    #[prost(uint32, tag = "10")]
    pub pfbnanpcdjh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkfkcmjlfdl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfdfegkckae {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub ppbaggdodle: ::prost::alloc::vec::Vec<Hbbaohkdklj>,
    #[prost(message, repeated, tag = "2")]
    pub enlhpceoajj: ::prost::alloc::vec::Vec<Iffmlndfbim>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjnjdnhcdik {
    #[prost(message, optional, tag = "1")]
    pub fckknkkgaal: ::core::option::Option<Iffmlndfbim>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgbpdpgampb {
    #[prost(message, optional, tag = "15")]
    pub fjnpddmldld: ::core::option::Option<Hbbaohkdklj>,
    #[prost(bool, tag = "6")]
    pub ikcpmimknmj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgomokjlnia {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(bool, tag = "5")]
    pub ikcpmimknmj: bool,
    #[prost(uint32, tag = "15")]
    pub lpgaoolbbfm: u32,
    #[prost(message, repeated, tag = "3")]
    pub jmeheohdpek: ::prost::alloc::vec::Vec<Hbbaohkdklj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Miohefaegmd {
    #[prost(uint32, tag = "8")]
    pub jcaainbemcb: u32,
    #[prost(uint32, tag = "14")]
    pub pojkpinipio: u32,
    #[prost(uint32, tag = "1")]
    pub figonclcnhj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhdcjejdhoh {
    #[prost(message, optional, tag = "9")]
    pub fjnpddmldld: ::core::option::Option<Hbbaohkdklj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aimdhjaenjj {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub fodcominece: ::prost::alloc::vec::Vec<PunkLordBattleReplay>,
    #[prost(message, optional, tag = "10")]
    pub fjnpddmldld: ::core::option::Option<Hbbaohkdklj>,
    #[prost(message, repeated, tag = "2")]
    pub eolalkfgdal: ::prost::alloc::vec::Vec<PunkLordBattleRecord>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oblnmhfpkob {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eejpmepikga {
    #[prost(int64, tag = "13")]
    pub nfonlnipina: i64,
    #[prost(uint32, tag = "10")]
    pub id: u32,
    #[prost(enumeration = "QuestStatus", tag = "15")]
    pub status: i32,
    #[prost(uint32, tag = "6")]
    pub progress: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub pnkhfhpabgb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmnopfmjoco {
    #[prost(message, repeated, tag = "13")]
    pub pnlbagbglfd: ::prost::alloc::vec::Vec<Eejpmepikga>,
    #[prost(uint32, tag = "15")]
    pub igcimdmbdfa: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bboncngkkfh {
    #[prost(uint32, repeated, tag = "13")]
    pub chcdpcmpihk: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeQuestRewardScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub succ_quest_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub reward: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gimgmgjgkni {
    #[prost(uint32, tag = "13")]
    pub gjbdmneacbj: u32,
    #[prost(uint32, tag = "7")]
    pub apbdbeabddj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcekcfpcaap {
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub gjbdmneacbj: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmffdlklgng {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmgpadlinip {
    #[prost(uint32, tag = "5")]
    pub progress: u32,
    #[prost(uint32, tag = "10")]
    pub kkbjlhilfen: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfdblljhijn {
    #[prost(message, repeated, tag = "6")]
    pub jjichfkkmjl: ::prost::alloc::vec::Vec<Kmgpadlinip>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnhijbbmjhk {
    #[prost(message, optional, tag = "11")]
    pub kklhgagcopa: ::core::option::Option<Kmgpadlinip>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hckfdajnjec {
    #[prost(uint32, tag = "1")]
    pub prop_id: u32,
    #[prost(uint32, tag = "11")]
    pub gjbdmneacbj: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpcjcddpmeo {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdgdpmjnbnp {
    #[prost(uint32, repeated, tag = "15")]
    pub pnlbagbglfd: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lehcpjafdea {
    #[prost(message, repeated, tag = "9")]
    pub pnlbagbglfd: ::prost::alloc::vec::Vec<Eejpmepikga>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnlbhaceial {
    #[prost(message, optional, tag = "11")]
    pub akkgoefpgdl: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "15")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "4")]
    pub world_level: u32,
    #[prost(uint32, tag = "9")]
    pub ikpjplopmjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpfgmcipjmm {
    #[prost(uint32, tag = "15")]
    pub prop_entity_id: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub ikpjplopmjk: u32,
    #[prost(uint32, tag = "12")]
    pub chbdfdolhoc: u32,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndjiajphifk {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub scene: ::core::option::Option<Dnlbhaceial>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjhkfgdlibf {
    #[prost(bool, tag = "11")]
    pub chbdfdolhoc: bool,
    #[prost(uint32, tag = "15")]
    pub ikpjplopmjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djabebmofde {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhikhceehbb {
    #[prost(enumeration = "Lgbplphaacb", tag = "1")]
    pub koinobbmjaa: i32,
    #[prost(uint32, tag = "7")]
    pub glaokkggino: u32,
    #[prost(uint32, tag = "15")]
    pub dpepdejdlka: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knjianifiba {
    #[prost(message, optional, tag = "1")]
    pub pdpfcfglgco: ::core::option::Option<ItemList>,
    #[prost(enumeration = "RaidStatus", tag = "6")]
    pub status: i32,
    #[prost(uint64, tag = "4")]
    pub mpfnjpaeobp: u64,
    #[prost(uint32, tag = "10")]
    pub world_level: u32,
    #[prost(message, repeated, tag = "3")]
    pub hhnnjledapn: ::prost::alloc::vec::Vec<Hhikhceehbb>,
    #[prost(uint32, tag = "13")]
    pub ikpjplopmjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adffgpcjffg {
    #[prost(uint32, tag = "2")]
    pub gakmanenkmh: u32,
    #[prost(uint32, tag = "6")]
    pub ikpjplopmjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcifaehlamo {
    #[prost(uint32, repeated, tag = "12")]
    pub goccbdenfle: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub world_level: u32,
    #[prost(uint32, tag = "15")]
    pub ikpjplopmjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iikolamhenh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRaidInfoScRsp {
    #[prost(uint32, repeated, tag = "4")]
    pub challenge_taken_reward_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "14")]
    pub challenge_raid_list: ::prost::alloc::vec::Vec<Adffgpcjffg>,
    #[prost(message, repeated, tag = "13")]
    pub finished_raid_info_list: ::prost::alloc::vec::Vec<Jcifaehlamo>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Koocbfbkebc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kohffnboocd {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "5")]
    pub clbadgogepf: ::prost::alloc::vec::Vec<Adffgpcjffg>,
    #[prost(uint32, repeated, tag = "13")]
    pub ghchnanjdfb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haiedplfomf {
    #[prost(uint32, tag = "13")]
    pub bhcnfehdnfg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goobncpndib {
    #[prost(message, optional, tag = "4")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "7")]
    pub bhcnfehdnfg: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eliccgkomcl {
    #[prost(message, optional, tag = "9")]
    pub onhjiaijhop: ::core::option::Option<Adffgpcjffg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjiefeeohjh {
    #[prost(uint32, tag = "1")]
    pub progress: u32,
    #[prost(uint32, tag = "7")]
    pub kpibjmjbjod: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbmeonklkdc {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub kpibjmjbjod: u32,
    #[prost(uint32, tag = "10")]
    pub progress: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgmldddjpfl {
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(uint32, tag = "8")]
    pub ikpjplopmjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mldbcfbgieb {
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub ikpjplopmjk: u32,
    #[prost(bool, tag = "7")]
    pub chbdfdolhoc: bool,
    #[prost(message, repeated, tag = "15")]
    pub hhnnjledapn: ::prost::alloc::vec::Vec<Hhikhceehbb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmcbkcliekg {
    #[prost(message, repeated, tag = "13")]
    pub hhnnjledapn: ::prost::alloc::vec::Vec<Hhikhceehbb>,
    #[prost(uint32, tag = "15")]
    pub ikpjplopmjk: u32,
    #[prost(uint32, tag = "14")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dinmibgodol {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klidemocfdg {
    #[prost(message, repeated, tag = "8")]
    pub ejkajanlmkl: ::prost::alloc::vec::Vec<Hmcbkcliekg>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeajhnfofoc {
    #[prost(uint32, tag = "5")]
    pub ikpjplopmjk: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njcahpomndl {
    #[prost(enumeration = "Ehhjocaaaba", tag = "1")]
    pub mgdnainpahe: i32,
    #[prost(message, optional, tag = "5")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "12")]
    pub world_level: u32,
    #[prost(uint32, tag = "6")]
    pub ikpjplopmjk: u32,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkaomcmepci {
    #[prost(uint32, tag = "15")]
    pub infplhaigop: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppijcmkiogi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgkfloacjen {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub cjbdijhedpo: ::prost::alloc::vec::Vec<Bkaomcmepci>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjpgejdfpae {
    #[prost(message, optional, tag = "2")]
    pub hciobbpgkbe: ::core::option::Option<Bkaomcmepci>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bliiedplbfc {
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(uint32, tag = "2")]
    pub ikpjplopmjk: u32,
    #[prost(uint32, tag = "14")]
    pub chbdfdolhoc: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub avatar_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Efgangejahe {
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<Dnlbhaceial>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pljklolgala {
    #[prost(uint32, repeated, tag = "1")]
    pub odjegmnefag: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oefagcankoa {
    #[prost(uint32, tag = "3")]
    pub lejmmaeibga: u32,
    #[prost(uint32, tag = "4")]
    pub fjlnncjahng: u32,
    #[prost(map = "uint32, message", tag = "2")]
    pub jhoejhpfmme: ::std::collections::HashMap<u32, Pljklolgala>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cllhoejpnlc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdpfmlechij {
    #[prost(message, repeated, tag = "15")]
    pub ldganldgeln: ::prost::alloc::vec::Vec<Oefagcankoa>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnaimppnfcb {
    #[prost(uint32, tag = "8")]
    pub lejmmaeibga: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub jancobnhdgd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, tag = "12")]
    pub fjlnncjahng: u32,
    #[prost(enumeration = "Ljhkjfilggp", tag = "7")]
    pub kifpepeebco: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfloccjogdo {
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub lejmmaeibga: u32,
    #[prost(uint32, tag = "7")]
    pub fjlnncjahng: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jiddlbiohfe {
    #[prost(uint32, tag = "5")]
    pub fjlnncjahng: u32,
    #[prost(uint32, tag = "7")]
    pub lejmmaeibga: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hplgncaacpa {
    #[prost(uint32, tag = "13")]
    pub lejmmaeibga: u32,
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "1")]
    pub fjlnncjahng: u32,
    #[prost(message, optional, tag = "9")]
    pub lgghoaagahj: ::core::option::Option<Pljklolgala>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbiaodgpdie {
    #[prost(string, tag = "15")]
    pub dmlnkapjjni: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub stage_id: u32,
    #[prost(uint32, tag = "9")]
    pub oeoikijbcfg: u32,
    #[prost(enumeration = "ReplayType", tag = "6")]
    pub blnoeiceljf: i32,
    #[prost(string, tag = "10")]
    pub laneigjfepk: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub lfnjmcnfhha: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbnonoecgia {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(enumeration = "ReplayType", tag = "6")]
    pub blnoeiceljf: i32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(string, tag = "14")]
    pub oiegbkkceda: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub laneigjfepk: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amejgemekhj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgbehfompfh {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub negllhlgeni: ::prost::alloc::vec::Vec<Nlhgcplikkp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkpoiboahff {
    #[prost(uint32, tag = "2")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apghjcccmob {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub ljpbjpagadf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlckmkconlg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcjhfjbaedn {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfbmlneajki {
    #[prost(uint32, tag = "7")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lffandejddm {
    #[prost(message, repeated, tag = "6")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Jfbmlneajki>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifiajgbcpfe {
    #[prost(enumeration = "RogueRoomStatus", tag = "8")]
    pub niiplnimbdh: i32,
    #[prost(uint32, tag = "12")]
    pub ioijcfnndfi: u32,
    #[prost(uint32, tag = "7")]
    pub mfdelanaicp: u32,
    #[prost(enumeration = "RogueRoomStatus", tag = "11")]
    pub bnbhejbnipl: i32,
    #[prost(uint32, tag = "10")]
    pub dmlfebgjkkb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcoenpcpemg {
    #[prost(uint32, tag = "13")]
    pub lnjapmhfcck: u32,
    #[prost(uint32, tag = "15")]
    pub gflhplhjaeh: u32,
    #[prost(uint32, tag = "4")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "12")]
    pub dgigimbnnlb: u32,
    #[prost(message, repeated, tag = "10")]
    pub jmmfccfiepc: ::prost::alloc::vec::Vec<Ifiajgbcpfe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkhpicdajdl {
    #[prost(uint32, tag = "5")]
    pub lnjapmhfcck: u32,
    #[prost(uint32, tag = "3")]
    pub ggdaffjnmpa: u32,
    #[prost(enumeration = "Gjdmagoenld", tag = "9")]
    pub emcojpeknnm: i32,
    #[prost(bool, tag = "13")]
    pub ennhncalcjj: bool,
    #[prost(uint32, tag = "10")]
    pub ediopngagap: u32,
    #[prost(enumeration = "RogueStatus", tag = "2")]
    pub bejkhpkacji: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iacnppnpccc {
    #[prost(uint32, repeated, tag = "13")]
    pub jjnpbehjnjb: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub fliodcbfcfb: u32,
    #[prost(bool, tag = "8")]
    pub cggbcjdjmcm: bool,
    #[prost(uint32, tag = "6")]
    pub phnnlfhkehl: u32,
    #[prost(uint32, tag = "12")]
    pub njohallnnnf: u32,
    #[prost(enumeration = "Hbdomioniba", tag = "3")]
    pub cbjpfggchfh: i32,
    #[prost(uint32, tag = "7")]
    pub okgomocdmna: u32,
    #[prost(uint32, tag = "10")]
    pub pagddbhndgi: u32,
    #[prost(uint32, tag = "4")]
    pub leggojccbin: u32,
    #[prost(message, optional, tag = "11")]
    pub aionnejpeag: ::core::option::Option<Lanbmmohblp>,
    #[prost(message, repeated, tag = "5")]
    pub nehaljheool: ::prost::alloc::vec::Vec<Jfbmlneajki>,
    #[prost(uint32, tag = "2")]
    pub hdialjfomdi: u32,
    #[prost(uint32, tag = "9")]
    pub kfnmpcoanof: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihjjjmhfaan {
    #[prost(message, repeated, tag = "10")]
    pub bjijcdggdde: ::prost::alloc::vec::Vec<Jfbmlneajki>,
    #[prost(message, optional, tag = "11")]
    pub hjcdfejpjcl: ::core::option::Option<Jfbmlneajki>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omfcngipdgf {
    #[prost(message, repeated, tag = "9")]
    pub eikoihamlka: ::prost::alloc::vec::Vec<Jfbmlneajki>,
    #[prost(message, repeated, tag = "3")]
    pub ckmcdophoho: ::prost::alloc::vec::Vec<Jfbmlneajki>,
    #[prost(uint32, tag = "8")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgadagdbegl {
    #[prost(uint32, tag = "5")]
    pub pkkfndimmio: u32,
    #[prost(message, optional, tag = "7")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(float, tag = "8")]
    pub knaoedajjai: f32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeahdnkofon {
    #[prost(message, repeated, tag = "1")]
    pub lgbagcehkme: ::prost::alloc::vec::Vec<Jgadagdbegl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fohcbjkjedg {
    #[prost(uint32, tag = "9")]
    pub afefamkndoo: u32,
    #[prost(uint32, tag = "13")]
    pub ichkjnfaacl: u32,
    #[prost(map = "uint32, uint32", tag = "12")]
    pub edcaibmdknh: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "6")]
    pub ekieijdbdhm: u32,
    #[prost(uint32, tag = "4")]
    pub fomcmdmpdcg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oekndgfgeji {
    #[prost(uint32, tag = "2")]
    pub lpmiommhiek: u32,
    #[prost(message, repeated, tag = "12")]
    pub pcpkkbfpbeb: ::prost::alloc::vec::Vec<Fohcbjkjedg>,
    #[prost(uint32, tag = "8")]
    pub aoolkgbeieh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Liidngdpinl {
    #[prost(uint32, repeated, tag = "10")]
    pub ohmlalbookj: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "3")]
    pub pmoenkofnla: ::core::option::Option<Oekndgfgeji>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfaggjhfpdi {
    #[prost(uint32, repeated, tag = "6")]
    pub ccdkldffekl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enhkgahlnjm {
    #[prost(uint32, repeated, tag = "9")]
    pub ofaekfangcn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogekjemplng {
    #[prost(uint32, tag = "10")]
    pub amdnjffegfp: u32,
    #[prost(message, optional, tag = "3")]
    pub ekpahpdniff: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "4")]
    pub oddcohjamko: ::core::option::Option<Lffandejddm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhbicckbklh {
    #[prost(message, optional, tag = "1")]
    pub joipnmmehbm: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, repeated, tag = "15")]
    pub felfdbckgbe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub japlhpdhbci: u32,
    #[prost(uint32, tag = "11")]
    pub efiaofpjjan: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikpacpiajlh {
    #[prost(uint32, tag = "12")]
    pub foenmmipefp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keenhmggipf {
    #[prost(uint32, tag = "6")]
    pub gannhbnhjmp: u32,
    #[prost(uint32, tag = "1")]
    pub okgomocdmna: u32,
    #[prost(uint32, tag = "8")]
    pub ihlccndmjfi: u32,
    #[prost(uint32, tag = "5")]
    pub cfffhjomjao: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jklldafipmj {
    #[prost(message, optional, tag = "1019")]
    pub gngfcddjjbi: ::core::option::Option<Mnkgimgdlhm>,
    #[prost(message, optional, tag = "306")]
    pub fecdamigijp: ::core::option::Option<Mlieimmance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlieimmance {
    #[prost(message, optional, tag = "2")]
    pub deafkpjjgab: ::core::option::Option<Hfknoalpegg>,
    #[prost(message, optional, tag = "11")]
    pub dgohjiekiai: ::core::option::Option<Ilbadbbdfbm>,
    #[prost(message, optional, tag = "10")]
    pub kjicoehehhk: ::core::option::Option<Kfibbcigege>,
    #[prost(message, optional, tag = "3")]
    pub ejcijjnlahl: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(message, optional, tag = "14")]
    pub njokhdgdfcm: ::core::option::Option<Hdpejplkedj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnkgimgdlhm {
    #[prost(message, optional, tag = "4")]
    pub nnibggkcbdj: ::core::option::Option<Gdeajeoinom>,
    #[prost(message, optional, tag = "9")]
    pub pmoenkofnla: ::core::option::Option<Lbcnahcogfm>,
    #[prost(message, optional, tag = "8")]
    pub fchbbphcclc: ::core::option::Option<Ppachbcgdfe>,
    #[prost(message, optional, tag = "2")]
    pub lfleifodebe: ::core::option::Option<Blhhnmhcodp>,
    #[prost(message, optional, tag = "13")]
    pub imelchpnpgc: ::core::option::Option<Kcoenpcpemg>,
    #[prost(bool, tag = "5")]
    pub blgceifkfbp: bool,
    #[prost(message, optional, tag = "10")]
    pub kjicoehehhk: ::core::option::Option<Nhnblapbcjc>,
    #[prost(enumeration = "RogueStatus", tag = "7")]
    pub status: i32,
    #[prost(message, optional, tag = "6")]
    pub ocjhnoaacgc: ::core::option::Option<Glbffhmcbkd>,
    #[prost(message, optional, tag = "15")]
    pub pogejanpebj: ::core::option::Option<Fkmaamoekbp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdpejplkedj {
    #[prost(int64, tag = "6")]
    pub end_time: i64,
    #[prost(int64, tag = "7")]
    pub begin_time: i64,
    #[prost(uint32, tag = "5")]
    pub ookciddhnhn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfknoalpegg {
    #[prost(message, repeated, tag = "2")]
    pub aegcbbajcgf: ::prost::alloc::vec::Vec<Gkhpicdajdl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfibbcigege {
    #[prost(uint32, tag = "4")]
    pub efejfkooglh: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub hbjejpcphbf: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub aobifgleena: bool,
    #[prost(uint32, tag = "15")]
    pub gijofajjcak: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilbadbbdfbm {
    #[prost(uint32, tag = "10")]
    pub gahcmamleil: u32,
    #[prost(uint32, tag = "6")]
    pub cgbmpnplkfj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkmaamoekbp {
    #[prost(message, repeated, tag = "8")]
    pub nehaljheool: ::prost::alloc::vec::Vec<Jfbmlneajki>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbcnahcogfm {
    #[prost(message, optional, tag = "11")]
    pub pmoenkofnla: ::core::option::Option<Oekndgfgeji>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gdeajeoinom {
    #[prost(uint32, repeated, tag = "9")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub boijkbofiid: ::core::option::Option<Mhbicckbklh>,
    #[prost(uint32, repeated, tag = "4")]
    pub dfkpgckchah: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flaiejgpbla {
    #[prost(message, optional, tag = "1")]
    pub gcflbbikckf: ::core::option::Option<Enhkgahlnjm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhnblapbcjc {
    #[prost(uint32, tag = "3")]
    pub efejfkooglh: u32,
    #[prost(bool, tag = "10")]
    pub aobifgleena: bool,
    #[prost(uint32, tag = "15")]
    pub agndiegkeih: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppachbcgdfe {
    #[prost(uint32, repeated, tag = "2")]
    pub gcmeendacok: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glbeljclheb {
    #[prost(uint32, tag = "8")]
    pub efejfkooglh: u32,
    #[prost(bool, tag = "15")]
    pub aobifgleena: bool,
    #[prost(uint32, repeated, tag = "11")]
    pub hbjejpcphbf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub agndiegkeih: u32,
    #[prost(uint32, tag = "1")]
    pub gijofajjcak: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icajkkidheg {
    #[prost(uint32, tag = "6")]
    pub lbbcjjkledl: u32,
    #[prost(uint32, tag = "3")]
    pub jcjkjhddkcf: u32,
    #[prost(uint32, tag = "13")]
    pub lpgaoolbbfm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpklcgjckmo {
    #[prost(uint32, tag = "5")]
    pub mahiocfcikf: u32,
    #[prost(float, tag = "6")]
    pub lifplggephc: f32,
    #[prost(message, repeated, tag = "13")]
    pub hkpeeaonmgo: ::prost::alloc::vec::Vec<Icajkkidheg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhmgdpddade {
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub id: u32,
    #[prost(enumeration = "AvatarType", tag = "11")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "13")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmkjkmlkpmd {
    #[prost(message, repeated, tag = "7")]
    pub avatar_list: ::prost::alloc::vec::Vec<Mhmgdpddade>,
    #[prost(uint32, repeated, tag = "8")]
    pub pcpkkbfpbeb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "9")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Jfbmlneajki>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgolpjpbccp {
    #[prost(message, optional, tag = "15")]
    pub mhamoedchne: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(bool, tag = "5")]
    pub mmnebfbnoni: bool,
    #[prost(message, optional, tag = "9")]
    pub cfeaibpkhec: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(bool, tag = "12")]
    pub lbilkiobkao: bool,
    #[prost(message, optional, tag = "11")]
    pub nodnhhligdj: ::core::option::Option<Mmkjkmlkpmd>,
    #[prost(uint32, tag = "859")]
    pub ggdaffjnmpa: u32,
    #[prost(message, optional, tag = "8")]
    pub dlmhmmgphkm: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub jaedphkccgk: u32,
    #[prost(uint32, tag = "4")]
    pub lkeeonadhee: u32,
    #[prost(message, optional, tag = "3")]
    pub dhopbododmb: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "6")]
    pub bcjeehihkca: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "14")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "10")]
    pub cniiijodkjf: u32,
    #[prost(message, optional, tag = "13")]
    pub eebkfnjjooj: ::core::option::Option<Dpklcgjckmo>,
    #[prost(uint32, tag = "1")]
    pub gahcmamleil: u32,
    #[prost(uint32, tag = "508")]
    pub ehghgnheijn: u32,
    #[prost(message, optional, tag = "7")]
    pub ljfcnfpdmea: ::core::option::Option<Ffjpgmkmopp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgljkmgbdnk {
    #[prost(uint32, repeated, tag = "7")]
    pub ppfogiaojdp: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "14")]
    pub bfkeedlccfk: bool,
    #[prost(int64, tag = "15")]
    pub hlmejkcafbp: i64,
    #[prost(uint32, tag = "8")]
    pub bnhepammdhc: u32,
    #[prost(bool, tag = "10")]
    pub gehhogbhomj: bool,
    #[prost(uint32, tag = "6")]
    pub lnaconbgbdk: u32,
    #[prost(int64, tag = "4")]
    pub icplhhghkol: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Boilblgpbkn {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub nncdpbdokbj: u32,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "15")]
    pub bajeglndfpe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueDialogueEventParam {
    #[prost(bool, tag = "11")]
    pub is_valid: bool,
    #[prost(uint32, tag = "13")]
    pub dialogue_event_id: u32,
    #[prost(int32, tag = "15")]
    pub int_value: i32,
    #[prost(float, tag = "6")]
    pub ratio: f32,
    #[prost(uint32, tag = "5")]
    pub arg_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdhjljcibih {
    #[prost(uint32, repeated, tag = "4")]
    pub dppfaapfama: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1")]
    pub jpiojenbgdi: ::prost::alloc::vec::Vec<RogueDialogueEventParam>,
    #[prost(uint32, tag = "15")]
    pub ebffkdhgkgl: u32,
    #[prost(uint32, tag = "13")]
    pub jnboodjdmho: u32,
    #[prost(uint32, tag = "9")]
    pub jncgaingmmm: u32,
    #[prost(uint32, tag = "7")]
    pub hgfnojflbcl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gplahfgkjfi {
    #[prost(enumeration = "Npbmfealpda", tag = "5")]
    pub hkbihdlbllh: i32,
    #[prost(uint32, repeated, tag = "4")]
    pub fkkedckadhe: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "12")]
    pub ekpahpdniff: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edehjanelbl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elbfiobopib {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub kbneaoehnob: ::core::option::Option<Jklldafipmj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpimpachcfm {
    #[prost(uint32, tag = "14")]
    pub idcigdfjabi: u32,
    #[prost(uint32, tag = "11")]
    pub bajeglndfpe: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub eabjmdoajdk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eijoglklgmn {
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "9")]
    pub kbneaoehnob: ::core::option::Option<Jklldafipmj>,
    #[prost(message, optional, tag = "11")]
    pub pnbpdbgfffd: ::core::option::Option<Cioeahefpln>,
    #[prost(message, optional, tag = "1")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkbaifbfaic {
    #[prost(uint32, tag = "13")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "6")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lekhmhfkdjf {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "10")]
    pub pnbpdbgfffd: ::core::option::Option<Cioeahefpln>,
    #[prost(message, optional, tag = "2")]
    pub kbneaoehnob: ::core::option::Option<Jklldafipmj>,
    #[prost(message, optional, tag = "6")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idodjdfmdfo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckegndkdnno {
    #[prost(message, optional, tag = "2")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(message, optional, tag = "10")]
    pub pnbpdbgfffd: ::core::option::Option<Cioeahefpln>,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub kbneaoehnob: ::core::option::Option<Jklldafipmj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anlgfnikibd {
    #[prost(message, optional, tag = "2")]
    pub mjhepdejndc: ::core::option::Option<Dgolpjpbccp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Neffgondoan {
    #[prost(uint32, repeated, tag = "4")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "2")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Moeggpbedmb {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgbineghcnh {
    #[prost(uint32, repeated, tag = "14")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "15")]
    pub idcigdfjabi: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaiajmednek {
    #[prost(message, optional, tag = "14")]
    pub boijkbofiid: ::core::option::Option<Mhbicckbklh>,
    #[prost(uint32, tag = "11")]
    pub fkhdphhhdff: u32,
    #[prost(uint32, tag = "7")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofjdflhcbno {
    #[prost(message, optional, tag = "1")]
    pub boijkbofiid: ::core::option::Option<Mhbicckbklh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgfggbgbkma {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmnacahlhkf {
    #[prost(message, optional, tag = "8")]
    pub jkdkdpoblli: ::core::option::Option<Oeahdnkofon>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikmcocgkpfb {
    #[prost(uint32, tag = "5")]
    pub paofpgekpfe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmphcjllhlg {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(bool, tag = "1")]
    pub boeaanepgoc: bool,
    #[prost(message, optional, tag = "15")]
    pub amikofgncbo: ::core::option::Option<Jfbmlneajki>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egakdgnfohg {
    #[prost(uint32, tag = "4")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Penkmieihcg {
    #[prost(message, optional, tag = "7")]
    pub mjhepdejndc: ::core::option::Option<Dgolpjpbccp>,
    #[prost(message, optional, tag = "8")]
    pub kbneaoehnob: ::core::option::Option<Jklldafipmj>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcepafndlhi {
    #[prost(bool, tag = "5")]
    pub blgceifkfbp: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpebchgcinh {
    #[prost(message, optional, tag = "11")]
    pub ejcijjnlahl: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(message, optional, tag = "4")]
    pub mjhepdejndc: ::core::option::Option<Dgolpjpbccp>,
    #[prost(message, optional, tag = "9")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "12")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(bool, tag = "10")]
    pub amcmdlgpofj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llnijpmjopo {
    #[prost(uint32, tag = "1")]
    pub ioijcfnndfi: u32,
    #[prost(uint32, tag = "9")]
    pub mfdelanaicp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgcndbojpog {
    #[prost(message, optional, tag = "12")]
    pub pnbpdbgfffd: ::core::option::Option<Cioeahefpln>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub dgigimbnnlb: u32,
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "3")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glljcdfnpem {
    #[prost(uint32, tag = "1")]
    pub lnjapmhfcck: u32,
    #[prost(message, optional, tag = "7")]
    pub glbbhlbjecp: ::core::option::Option<Ifiajgbcpfe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gchjjpflnkb {
    #[prost(bool, tag = "9")]
    pub gehbffmbgmi: bool,
    #[prost(uint32, tag = "5")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hofgmeoijfj {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "5")]
    pub acpoidmpoae: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpmdjhmbdkl {
    #[prost(uint32, tag = "1")]
    pub clkbpijjaap: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExchangeRogueRewardKeyScRsp {
    #[prost(uint32, tag = "1")]
    pub count: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeioghldhlc {
    #[prost(uint32, tag = "4")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hodomdmcjol {
    #[prost(message, optional, tag = "10")]
    pub dihnhalhcih: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "2")]
    pub donbbmfeogl: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcbecaaneef {
    #[prost(uint32, tag = "14")]
    pub level: u32,
    #[prost(uint32, tag = "6")]
    pub bajeglndfpe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nofljpbanih {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub bajeglndfpe: u32,
    #[prost(uint32, tag = "10")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmplpcnnkec {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "1")]
    pub bajeglndfpe: u32,
    #[prost(message, optional, tag = "13")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhednfmeopa {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckblkmocjmf {
    #[prost(message, optional, tag = "1")]
    pub jpaolljmggn: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgajkhkkeio {
    #[prost(uint32, tag = "9")]
    pub bnhepammdhc: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub dcadeobidnh: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkofhppadca {
    #[prost(uint32, tag = "1")]
    pub bnhepammdhc: u32,
    #[prost(message, optional, tag = "3")]
    pub ejcijjnlahl: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkmaillmohj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lknpoemfdno {
    #[prost(message, optional, tag = "7")]
    pub ejcijjnlahl: ::core::option::Option<Kgljkmgbdnk>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pggpopocflm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elhiacmnajc {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub ihneplfgmdc: ::prost::alloc::vec::Vec<Boilblgpbkn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbfjgoicaol {
    #[prost(uint32, tag = "6")]
    pub bajeglndfpe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jigppbjhmnp {
    #[prost(message, optional, tag = "8")]
    pub kjicoehehhk: ::core::option::Option<Boilblgpbkn>,
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Moagaeodfnn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbfbelnigfh {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub bbanknacajb: ::core::option::Option<Lljpmigaffg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Baglomejene {
    #[prost(uint32, tag = "2")]
    pub hehehnicpjn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdgaocegfdf {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub bbanknacajb: ::core::option::Option<Lljpmigaffg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjijhabofak {
    #[prost(message, optional, tag = "8")]
    pub dgohjiekiai: ::core::option::Option<Keenhmggipf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnibnndccka {
    #[prost(bool, tag = "15")]
    pub ddknigaggof: bool,
    #[prost(enumeration = "RogueStatus", tag = "6")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amnocflooda {
    #[prost(message, optional, tag = "6")]
    pub ejcijjnlahl: ::core::option::Option<Kgljkmgbdnk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmhcdlibnek {
    #[prost(uint32, repeated, tag = "6")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oidpdohncaa {
    #[prost(message, optional, tag = "3")]
    pub ijmlpfaaino: ::core::option::Option<Glbeljclheb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddignhhjpae {
    #[prost(message, optional, tag = "15")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "6")]
    pub pnbpdbgfffd: ::core::option::Option<Cioeahefpln>,
    #[prost(message, optional, tag = "5")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhlefpomfno {
    #[prost(uint32, repeated, tag = "2")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub mfdelanaicp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkmphcoinno {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub mfdelanaicp: u32,
    #[prost(message, optional, tag = "6")]
    pub hiacklcdijn: ::core::option::Option<Ddignhhjpae>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkaelkhnclo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfncdjjoiln {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub hiacklcdijn: ::core::option::Option<Ddignhhjpae>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhkmgndniim {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keejcoilnoh {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub hiacklcdijn: ::core::option::Option<Ddignhhjpae>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kodhakndeeg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjfcgaliifa {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub mfdelanaicp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnicidbdjfi {
    #[prost(uint32, tag = "11")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "8")]
    pub kehnfboaaig: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eijagapkfad {
    #[prost(message, repeated, tag = "12")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueCommonBuffSelectInfo {
    #[prost(message, optional, tag = "5")]
    pub roll_buff_cost_data: ::core::option::Option<Lanbmmohblp>,
    #[prost(enumeration = "Hbdomioniba", tag = "8")]
    pub source_type: i32,
    #[prost(uint32, repeated, tag = "3")]
    pub handbook_unlock_buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub certain_select_buff_id: u32,
    #[prost(message, repeated, tag = "7")]
    pub select_buff_list: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
    #[prost(uint32, tag = "11")]
    pub source_hint_id: u32,
    #[prost(uint32, tag = "6")]
    pub roll_buff_max_count: u32,
    #[prost(uint32, tag = "9")]
    pub roll_buff_free_count: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub first_buff_type_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "1")]
    pub can_roll: bool,
    #[prost(uint32, tag = "12")]
    pub roll_buff_count: u32,
    #[prost(uint32, tag = "15")]
    pub source_total_count: u32,
    #[prost(uint32, tag = "4")]
    pub source_cur_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikhcpmbdbll {
    #[prost(uint32, tag = "4")]
    pub eojifjnkhij: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmnobkdmpbh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njccbnlfkcn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbnambacbfh {
    #[prost(message, optional, tag = "9")]
    pub alalgchdbdp: ::core::option::Option<RogueCommonBuffSelectInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbbeondnfcn {
    #[prost(uint32, tag = "15")]
    pub pkkfndimmio: u32,
    #[prost(message, optional, tag = "4")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddjfkekakdb {
    #[prost(message, repeated, tag = "8")]
    pub lgbagcehkme: ::prost::alloc::vec::Vec<Mbbeondnfcn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfjilkicklf {
    #[prost(uint32, tag = "10")]
    pub comnknfemfn: u32,
    #[prost(message, repeated, tag = "7")]
    pub ckmcdophoho: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
    #[prost(message, repeated, tag = "15")]
    pub eikoihamlka: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgloggkpeip {
    #[prost(message, repeated, tag = "3")]
    pub ckmcdophoho: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
    #[prost(uint32, tag = "4")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fijoihplgfi {
    #[prost(uint32, tag = "10")]
    pub hiddgkclnhg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiijcocijbc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmgfijkgejd {
    #[prost(uint32, tag = "7")]
    pub comnknfemfn: u32,
    #[prost(message, repeated, tag = "13")]
    pub ongocpjbeem: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhmgpkeoghe {
    #[prost(uint32, tag = "6")]
    pub eojifjnkhij: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flijafinaac {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhjijndbjll {
    #[prost(uint32, tag = "12")]
    pub comnknfemfn: u32,
    #[prost(message, repeated, tag = "10")]
    pub jcmhmpmbhko: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbjgogbhokm {
    #[prost(uint32, tag = "6")]
    pub eojifjnkhij: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agmibdajooi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oobhdlegikm {
    #[prost(message, optional, tag = "6")]
    pub fanjaobchcg: ::core::option::Option<Eijagapkfad>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djpaibjmmoe {
    #[prost(map = "uint32, uint32", tag = "3")]
    pub edcaibmdknh: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "11")]
    pub ichkjnfaacl: u32,
    #[prost(uint32, tag = "6")]
    pub fomcmdmpdcg: u32,
    #[prost(uint32, tag = "9")]
    pub ekieijdbdhm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oagmnkadfbi {
    #[prost(message, optional, tag = "7")]
    pub kfancbcgdmp: ::core::option::Option<Djpaibjmmoe>,
    #[prost(uint32, tag = "13")]
    pub jbjpjpilfam: u32,
    #[prost(bool, tag = "15")]
    pub dkmcfgheefh: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clobgmgklja {
    #[prost(message, optional, tag = "8")]
    pub jhjpgbkblag: ::core::option::Option<Djpaibjmmoe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nneegnafcfg {
    #[prost(uint32, tag = "3")]
    pub ichkjnfaacl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pefkaoobihi {
    #[prost(message, optional, tag = "4")]
    pub jhjpgbkblag: ::core::option::Option<Djpaibjmmoe>,
    #[prost(uint32, tag = "9")]
    pub aheiodcbaae: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bklejdedngm {
    #[prost(message, optional, tag = "11")]
    pub jhjpgbkblag: ::core::option::Option<Djpaibjmmoe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okdkilkjabn {
    #[prost(uint32, tag = "14")]
    pub jbjpjpilfam: u32,
    #[prost(message, optional, tag = "13")]
    pub kfancbcgdmp: ::core::option::Option<Djpaibjmmoe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ifnnhfbomnh {
    #[prost(message, optional, tag = "11")]
    pub jhjpgbkblag: ::core::option::Option<Djpaibjmmoe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpphifdfjjj {
    #[prost(message, repeated, tag = "15")]
    pub pcpkkbfpbeb: ::prost::alloc::vec::Vec<Djpaibjmmoe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldklmcljplk {
    #[prost(uint32, repeated, tag = "9")]
    pub bhpcnblomnh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub comnknfemfn: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub ohmlalbookj: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkoniegkimo {
    #[prost(uint32, tag = "11")]
    pub cobljdcahcb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plkliapjkcd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blplkibhiok {
    #[prost(uint32, repeated, tag = "4")]
    pub ccdkldffekl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbhdggdnlon {
    #[prost(uint32, repeated, tag = "1")]
    pub hfmibieahhl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "2")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enolgaiddgi {
    #[prost(uint32, tag = "2")]
    pub khhcaendfei: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndjjekapdgl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbdkccjfpbe {
    #[prost(uint32, repeated, tag = "2")]
    pub mkllbpebdjd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "7")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okaoepbdlkg {
    #[prost(uint32, tag = "15")]
    pub gieginhphpb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gplcnpbojpa {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgpnfkhlcpi {
    #[prost(uint32, repeated, tag = "7")]
    pub jpjjnfckpld: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdljnoiiooh {
    #[prost(uint32, tag = "6")]
    pub cdeedkpknfo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnmibbknggo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojnhhgmefgn {
    #[prost(uint32, repeated, tag = "11")]
    pub bogobbncjbf: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gndkaolnaic {
    #[prost(uint32, tag = "1")]
    pub cmhkhpemokh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eohkjanfhmp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddbdnlhnole {
    #[prost(uint32, repeated, tag = "13")]
    pub oeeeagkklng: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "9")]
    pub comnknfemfn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jogglahdihp {
    #[prost(uint32, tag = "4")]
    pub cobljdcahcb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dghcpkmijia {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlaoekngjoc {
    #[prost(uint32, tag = "7")]
    pub comnknfemfn: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub oeeeagkklng: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnhmjikaamk {
    #[prost(uint32, tag = "9")]
    pub cobljdcahcb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckedjfdfdkg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gplpibkcldk {
    #[prost(uint32, tag = "7")]
    pub gngdoajbfea: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hahidlnbdid {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgcbkhnbohm {
    #[prost(message, optional, tag = "15")]
    pub gkfjbgdelik: ::core::option::Option<Hpphifdfjjj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnedlmmamac {
    #[prost(uint32, repeated, tag = "12")]
    pub ofaekfangcn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glbffhmcbkd {
    #[prost(uint32, tag = "11")]
    pub ljfkbkphogc: u32,
    #[prost(uint32, tag = "2")]
    pub echifpahiec: u32,
    #[prost(uint32, tag = "1")]
    pub njfgdmkikpb: u32,
    #[prost(uint32, tag = "15")]
    pub ipoaoopkgla: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flhognnpcee {
    #[prost(uint32, tag = "6")]
    pub gapjajnhglk: u32,
    #[prost(uint32, tag = "2")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keijecmckle {
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "14")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueSyncContextBoardEvent {
    #[prost(uint32, tag = "9")]
    pub modifier_effect_type: u32,
    #[prost(uint32, tag = "7")]
    pub board_event_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfmifanddad {
    #[prost(message, optional, tag = "7")]
    pub pdpfcfglgco: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiadjegoijf {
    #[prost(message, optional, tag = "2")]
    pub bpiefglcbmf: ::core::option::Option<Cfmifanddad>,
    #[prost(message, optional, tag = "10")]
    pub gejnmghhlln: ::core::option::Option<RogueSyncContextBoardEvent>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhjehlnicfp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fkpilfbkdla {
    #[prost(int32, tag = "13")]
    pub clkbpijjaap: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lnkggapbplf {
    #[prost(uint32, tag = "1")]
    pub ichkjnfaacl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjobhoedlho {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueAdventureRoomGameplayWolfGunTarget {
    #[prost(message, optional, tag = "10")]
    pub target_none: ::core::option::Option<Mhjehlnicfp>,
    #[prost(message, optional, tag = "8")]
    pub target_coin: ::core::option::Option<Fkpilfbkdla>,
    #[prost(message, optional, tag = "4")]
    pub target_miracle: ::core::option::Option<Lnkggapbplf>,
    #[prost(message, optional, tag = "1")]
    pub target_ruanmei: ::core::option::Option<Jjobhoedlho>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kghbncadpbj {
    #[prost(uint32, tag = "4")]
    pub pcejljofmag: u32,
    #[prost(message, repeated, tag = "12")]
    pub nkpcaindgao: ::prost::alloc::vec::Vec<RogueAdventureRoomGameplayWolfGunTarget>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kpaflmlbaig {
    #[prost(message, optional, tag = "12")]
    pub ilcgmkpbmgm: ::core::option::Option<Kghbncadpbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnoilndnkbj {
    #[prost(uint32, tag = "2")]
    pub lpgaoolbbfm: u32,
    #[prost(message, optional, tag = "15")]
    pub mmppaiggmon: ::core::option::Option<Kpaflmlbaig>,
    #[prost(uint32, tag = "6")]
    pub status: u32,
    #[prost(uint32, tag = "8")]
    pub hgdjmjhnhhp: u32,
    #[prost(double, tag = "1")]
    pub gdkaebolcdi: f64,
    #[prost(uint32, tag = "9")]
    pub addadjcedkh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpohpkijbaj {
    #[prost(message, optional, tag = "12")]
    pub pdhjencainp: ::core::option::Option<Jnoilndnkbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfddjekmgge {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lledefmjmdh {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub pdhjencainp: ::core::option::Option<Jnoilndnkbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lihdfgpjagn {
    #[prost(uint32, tag = "13")]
    pub ifalllhbdod: u32,
    #[prost(uint32, repeated, tag = "8")]
    pub eonnofjkjfl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kldmdkabcho {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub pdhjencainp: ::core::option::Option<Jnoilndnkbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cejllbjkhih {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcnfdimlfmc {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub pdhjencainp: ::core::option::Option<Jnoilndnkbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgaflmnodli {
    #[prost(uint32, tag = "10")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "3")]
    pub foflcmnhakn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cggnemiplld {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub pdhjencainp: ::core::option::Option<Jnoilndnkbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knmignnohnj {
    #[prost(message, optional, tag = "10")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "8")]
    pub ichkjnfaacl: u32,
    #[prost(message, optional, tag = "12")]
    pub gcdniclhoga: ::core::option::Option<Lanbmmohblp>,
    #[prost(bool, tag = "3")]
    pub jdaejcpfkil: bool,
    #[prost(bool, tag = "1")]
    pub dcejfokjpod: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgghnkhkkog {
    #[prost(bool, tag = "5")]
    pub jdaejcpfkil: bool,
    #[prost(message, optional, tag = "11")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "8")]
    pub pkkfndimmio: u32,
    #[prost(message, optional, tag = "4")]
    pub gcdniclhoga: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "15")]
    pub odfbamohefb: u32,
    #[prost(bool, tag = "9")]
    pub dcejfokjpod: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Occpiocibei {
    #[prost(message, repeated, tag = "9")]
    pub pcpkkbfpbeb: ::prost::alloc::vec::Vec<Knmignnohnj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbmldhmcphn {
    #[prost(message, repeated, tag = "3")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Pgghnkhkkog>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnpcmgicfkk {
    #[prost(bool, tag = "3")]
    pub aieeiiggfmj: bool,
    #[prost(uint32, tag = "15")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkilmbbefoo {
    #[prost(message, optional, tag = "15")]
    pub bfkodbfknbl: ::core::option::Option<Lanbmmohblp>,
    #[prost(message, optional, tag = "6")]
    pub pogejanpebj: ::core::option::Option<Dbmldhmcphn>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(bool, tag = "1")]
    pub npbgklkbgdi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adckamembmd {
    #[prost(bool, tag = "4")]
    pub aieeiiggfmj: bool,
    #[prost(uint32, tag = "1")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbchjcnhemh {
    #[prost(message, optional, tag = "4")]
    pub pmoenkofnla: ::core::option::Option<Occpiocibei>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(bool, tag = "14")]
    pub npbgklkbgdi: bool,
    #[prost(message, optional, tag = "3")]
    pub bfkodbfknbl: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldiemhcahcb {
    #[prost(uint32, tag = "7")]
    pub idcigdfjabi: u32,
    #[prost(uint32, tag = "3")]
    pub ichkjnfaacl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdoiknkenbl {
    #[prost(uint32, repeated, tag = "9")]
    pub id: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhmoihmdiao {
    #[prost(message, optional, tag = "2")]
    pub pmoenkofnla: ::core::option::Option<Occpiocibei>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcaddfogkcm {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub pogejanpebj: ::core::option::Option<Dbmldhmcphn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgblclfikdl {
    #[prost(uint32, tag = "11")]
    pub ichkjnfaacl: u32,
    #[prost(uint32, tag = "4")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cenhmaccfkm {
    #[prost(message, optional, tag = "14")]
    pub bdmoacndcoa: ::core::option::Option<Mnicidbdjfi>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhinmgakigi {
    #[prost(uint32, tag = "11")]
    pub pndblfbllmj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mghjipocegb {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lkleecbabea {
    #[prost(uint32, tag = "14")]
    pub idcigdfjabi: u32,
    #[prost(uint32, tag = "3")]
    pub paofpgekpfe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmpglffeblp {
    #[prost(message, optional, tag = "5")]
    pub amikofgncbo: ::core::option::Option<Mnicidbdjfi>,
    #[prost(bool, tag = "3")]
    pub boeaanepgoc: bool,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjmbiclggjd {
    #[prost(uint32, tag = "8")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnhanceCommonRogueBuffInfoScRsp {
    #[prost(uint32, repeated, tag = "1")]
    pub enhanced_buff_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Empneaapcke {
    #[prost(enumeration = "Bnlkbheaggj", tag = "8")]
    pub gapjajnhglk: i32,
    #[prost(uint32, tag = "12")]
    pub fhpollcfknc: u32,
    #[prost(message, repeated, tag = "14")]
    pub jmfablhemno: ::prost::alloc::vec::Vec<Jfaepfgabpp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfaepfgabpp {
    #[prost(enumeration = "Npkhcnmhkdp", tag = "2")]
    pub gnfpnbgacdf: i32,
    #[prost(message, optional, tag = "7")]
    pub mkgoabedjeh: ::core::option::Option<Pkgfjolojec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlgejhomcin {
    #[prost(uint32, tag = "1")]
    pub pfmlckgckob: u32,
    #[prost(int32, tag = "6")]
    pub fdjjjhbladf: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iejadeeklgn {
    #[prost(message, repeated, tag = "13")]
    pub hhcboafecgp: ::prost::alloc::vec::Vec<Jlgejhomcin>,
    #[prost(bool, tag = "5")]
    pub jfacjfdkeio: bool,
    #[prost(uint32, tag = "9")]
    pub bgecmdbfigi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmdmaockcjp {
    #[prost(map = "uint32, int32", tag = "8")]
    pub amiiemieofe: ::std::collections::HashMap<u32, i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jimphabffnp {
    #[prost(message, optional, tag = "3")]
    pub mkoeknaflmj: ::core::option::Option<Iejadeeklgn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbdelaiadlb {
    #[prost(message, optional, tag = "13")]
    pub mkoeknaflmj: ::core::option::Option<Iejadeeklgn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcpcpcigmpg {
    #[prost(message, optional, tag = "11")]
    pub mkoeknaflmj: ::core::option::Option<Iejadeeklgn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lipcpilkehi {
    #[prost(message, optional, tag = "3")]
    pub mkoeknaflmj: ::core::option::Option<Iejadeeklgn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Joamhogigdi {
    #[prost(message, optional, tag = "3")]
    pub value: ::core::option::Option<Pmdmaockcjp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhddmdcflml {
    #[prost(message, repeated, tag = "1")]
    pub joogimckeph: ::prost::alloc::vec::Vec<Iejadeeklgn>,
    #[prost(message, optional, tag = "3")]
    pub haggkfjeckg: ::core::option::Option<Pmdmaockcjp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcipijmgbbp {
    #[prost(uint32, tag = "11")]
    pub fbiaimddiej: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcflakjicbi {
    #[prost(uint32, tag = "14")]
    pub fbiaimddiej: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbokaahegfk {
    #[prost(map = "uint32, bool", tag = "3")]
    pub diclgegabnh: ::std::collections::HashMap<u32, bool>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkgfjolojec {
    #[prost(message, optional, tag = "4")]
    pub dhcakofmnjp: ::core::option::Option<Flhognnpcee>,
    #[prost(message, optional, tag = "10")]
    pub pbnahdfdakb: ::core::option::Option<Flhognnpcee>,
    #[prost(message, optional, tag = "378")]
    pub hjcdfejpjcl: ::core::option::Option<Mnicidbdjfi>,
    #[prost(message, optional, tag = "1314")]
    pub emghnkdicbf: ::core::option::Option<Mnicidbdjfi>,
    #[prost(message, optional, tag = "1167")]
    pub ppnmgedbfel: ::core::option::Option<Clobgmgklja>,
    #[prost(message, optional, tag = "900")]
    pub okbkccnfdlb: ::core::option::Option<Nneegnafcfg>,
    #[prost(message, optional, tag = "1194")]
    pub bbjbennbhgi: ::core::option::Option<Pefkaoobihi>,
    #[prost(message, optional, tag = "361")]
    pub kmdciieifgn: ::core::option::Option<Bklejdedngm>,
    #[prost(message, optional, tag = "195")]
    pub jppfinpapdi: ::core::option::Option<Okdkilkjabn>,
    #[prost(message, optional, tag = "357")]
    pub llaenjaahgl: ::core::option::Option<Ifnnhfbomnh>,
    #[prost(message, optional, tag = "868")]
    pub cekcaaddhlm: ::core::option::Option<Keijecmckle>,
    #[prost(message, optional, tag = "332")]
    pub bjpgdnebdla: ::core::option::Option<Jimphabffnp>,
    #[prost(message, optional, tag = "735")]
    pub hhjdhhjpgkk: ::core::option::Option<Hbdelaiadlb>,
    #[prost(message, optional, tag = "1668")]
    pub nfbeklebbgc: ::core::option::Option<Hcpcpcigmpg>,
    #[prost(message, optional, tag = "608")]
    pub elaolkochpi: ::core::option::Option<Lipcpilkehi>,
    #[prost(message, optional, tag = "788")]
    pub gbdphogibae: ::core::option::Option<Joamhogigdi>,
    #[prost(message, optional, tag = "1557")]
    pub khifepcfdlc: ::core::option::Option<Jcipijmgbbp>,
    #[prost(message, optional, tag = "455")]
    pub lpjpaggolke: ::core::option::Option<Dcflakjicbi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueFormulaSelectInfo {
    #[prost(message, optional, tag = "5")]
    pub roll_formula_cost_data: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, repeated, tag = "12")]
    pub handbook_unlock_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub hint_id: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub select_formula_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub roll_formula_count: u32,
    #[prost(bool, tag = "1")]
    pub can_roll: bool,
    #[prost(uint32, tag = "13")]
    pub roll_formula_max_count: u32,
    #[prost(uint32, tag = "9")]
    pub roll_formula_free_count: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okkklfebmlg {
    #[prost(uint32, tag = "13")]
    pub cjapbkbgjde: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okdccjpmfkc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dooghjmkiea {
    #[prost(uint32, tag = "12")]
    pub comnknfemfn: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub nmjpafphfam: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdcjnnpgeid {
    #[prost(uint32, tag = "4")]
    pub cjapbkbgjde: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbajphmodno {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhdeaoonple {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjdgojacafe {
    #[prost(message, optional, tag = "6")]
    pub hfdfkfjfdbb: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgpcmncmpin {
    #[prost(message, optional, tag = "6")]
    pub hfdfkfjfdbb: ::core::option::Option<RogueFormulaSelectInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Keadkpndpml {
    #[prost(uint32, tag = "9")]
    pub cjapbkbgjde: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffkilkhoebh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdplmldakec {
    #[prost(uint32, tag = "1")]
    pub ghhnoefibke: u32,
    #[prost(bool, tag = "4")]
    pub mmnebfbnoni: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dimcddnhfgn {
    #[prost(message, optional, tag = "15")]
    pub cfjdmlpfdoc: ::core::option::Option<Blhhnmhcodp>,
    #[prost(uint32, tag = "12")]
    pub fhpollcfknc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blhhnmhcodp {
    #[prost(uint32, tag = "15")]
    pub ocnjbebhbgo: u32,
    #[prost(message, optional, tag = "9")]
    pub mkgoabedjeh: ::core::option::Option<Eecmgimpdba>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eecmgimpdba {
    #[prost(message, optional, tag = "1903")]
    pub alalgchdbdp: ::core::option::Option<RogueCommonBuffSelectInfo>,
    #[prost(message, optional, tag = "207")]
    pub khfkakikamk: ::core::option::Option<Jgloggkpeip>,
    #[prost(message, optional, tag = "1070")]
    pub oigahiohcch: ::core::option::Option<Mmgfijkgejd>,
    #[prost(message, optional, tag = "455")]
    pub okjbmkmmcej: ::core::option::Option<Lhjijndbjll>,
    #[prost(message, optional, tag = "338")]
    pub fndnbjlkdon: ::core::option::Option<Ldklmcljplk>,
    #[prost(message, optional, tag = "1035")]
    pub hnokaicpikf: ::core::option::Option<Blplkibhiok>,
    #[prost(message, optional, tag = "939")]
    pub hcjcjnogaia: ::core::option::Option<Gbhdggdnlon>,
    #[prost(message, optional, tag = "899")]
    pub lejeajjleoh: ::core::option::Option<Bbdkccjfpbe>,
    #[prost(message, optional, tag = "1548")]
    pub gkjfkoimngd: ::core::option::Option<Mgpnfkhlcpi>,
    #[prost(message, optional, tag = "147")]
    pub agdfeodfcid: ::core::option::Option<Ojnhhgmefgn>,
    #[prost(message, optional, tag = "513")]
    pub khjkncfhbgm: ::core::option::Option<Ddbdnlhnole>,
    #[prost(message, optional, tag = "353")]
    pub kckdiphlhfm: ::core::option::Option<Jlaoekngjoc>,
    #[prost(message, optional, tag = "1601")]
    pub gcflbbikckf: ::core::option::Option<Lnedlmmamac>,
    #[prost(message, optional, tag = "1335")]
    pub hfdfkfjfdbb: ::core::option::Option<RogueFormulaSelectInfo>,
    #[prost(message, optional, tag = "114")]
    pub jkgbadmlbcf: ::core::option::Option<Dooghjmkiea>,
    #[prost(message, optional, tag = "1752")]
    pub bmphbiefmbf: ::core::option::Option<Pgpcmncmpin>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bpcliochekj {
    #[prost(uint32, tag = "13")]
    pub efigohhfcpp: u32,
    #[prost(message, optional, tag = "737")]
    pub mmmkbhidohp: ::core::option::Option<Ikhcpmbdbll>,
    #[prost(message, optional, tag = "481")]
    pub pbdgajfecic: ::core::option::Option<Fijoihplgfi>,
    #[prost(message, optional, tag = "1202")]
    pub pgcjdnfdkni: ::core::option::Option<Lhmgpkeoghe>,
    #[prost(message, optional, tag = "1753")]
    pub lddnkidmhlh: ::core::option::Option<Njccbnlfkcn>,
    #[prost(message, optional, tag = "226")]
    pub mpomggfehlo: ::core::option::Option<Nbjgogbhokm>,
    #[prost(message, optional, tag = "1596")]
    pub anbajffabll: ::core::option::Option<Bkoniegkimo>,
    #[prost(message, optional, tag = "1019")]
    pub ddkfkjpgcaf: ::core::option::Option<Enolgaiddgi>,
    #[prost(message, optional, tag = "735")]
    pub kdeiabffjhe: ::core::option::Option<Okaoepbdlkg>,
    #[prost(message, optional, tag = "935")]
    pub oecoiehbkof: ::core::option::Option<Bdljnoiiooh>,
    #[prost(message, optional, tag = "252")]
    pub pgpeffkechj: ::core::option::Option<Gndkaolnaic>,
    #[prost(message, optional, tag = "2011")]
    pub mipdhlckcjd: ::core::option::Option<Jogglahdihp>,
    #[prost(message, optional, tag = "76")]
    pub giefnjkkopn: ::core::option::Option<Pnhmjikaamk>,
    #[prost(message, optional, tag = "1105")]
    pub ggoclminbog: ::core::option::Option<Gplpibkcldk>,
    #[prost(message, optional, tag = "908")]
    pub nfjgnhjkaoh: ::core::option::Option<Okkklfebmlg>,
    #[prost(message, optional, tag = "1349")]
    pub badchlhlile: ::core::option::Option<Jhdeaoonple>,
    #[prost(message, optional, tag = "564")]
    pub filbnenmkhl: ::core::option::Option<Hdcjnnpgeid>,
    #[prost(message, optional, tag = "1450")]
    pub ficafpbocad: ::core::option::Option<Keadkpndpml>,
    #[prost(message, optional, tag = "210810")]
    pub ldahfbiambi: ::core::option::Option<Jdplmldakec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afnbfhnonmi {
    #[prost(uint32, tag = "5")]
    pub ocnjbebhbgo: u32,
    #[prost(uint32, tag = "10")]
    pub efigohhfcpp: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1733")]
    pub mjfnbidjnkn: ::core::option::Option<Bmnobkdmpbh>,
    #[prost(message, optional, tag = "1604")]
    pub jklhkhholdi: ::core::option::Option<Hiijcocijbc>,
    #[prost(message, optional, tag = "90")]
    pub ademmhhnhml: ::core::option::Option<Flijafinaac>,
    #[prost(message, optional, tag = "461")]
    pub pbjjcmlfeaf: ::core::option::Option<Hbnambacbfh>,
    #[prost(message, optional, tag = "384")]
    pub ebbdfigldjb: ::core::option::Option<Agmibdajooi>,
    #[prost(message, optional, tag = "898")]
    pub kccfoefijmc: ::core::option::Option<Plkliapjkcd>,
    #[prost(message, optional, tag = "965")]
    pub kpcmhpobjdg: ::core::option::Option<Ndjjekapdgl>,
    #[prost(message, optional, tag = "1884")]
    pub pmhhkoghphd: ::core::option::Option<Gplcnpbojpa>,
    #[prost(message, optional, tag = "698")]
    pub eonpahabipm: ::core::option::Option<Bnmibbknggo>,
    #[prost(message, optional, tag = "1823")]
    pub blkkpofefoe: ::core::option::Option<Eohkjanfhmp>,
    #[prost(message, optional, tag = "541")]
    pub oclinajcnnk: ::core::option::Option<Dghcpkmijia>,
    #[prost(message, optional, tag = "1332")]
    pub didenehjgkl: ::core::option::Option<Ckedjfdfdkg>,
    #[prost(message, optional, tag = "1580")]
    pub dlfnhmhfhfn: ::core::option::Option<Hahidlnbdid>,
    #[prost(message, optional, tag = "1374")]
    pub baockdmjcof: ::core::option::Option<Okdccjpmfkc>,
    #[prost(message, optional, tag = "1530")]
    pub dgohlalpnij: ::core::option::Option<Jjdgojacafe>,
    #[prost(message, optional, tag = "1725")]
    pub dlpnooadeki: ::core::option::Option<Nbajphmodno>,
    #[prost(message, optional, tag = "1706")]
    pub nlfdmpbnhgh: ::core::option::Option<Ffkilkhoebh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flbopemokdm {
    #[prost(uint32, tag = "4")]
    pub paofpgekpfe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pfchkldhojh {
    #[prost(bool, tag = "12")]
    pub ennhncalcjj: bool,
    #[prost(uint32, tag = "11")]
    pub bpdfcfjdkbd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbilelfjaom {
    #[prost(bool, tag = "6")]
    pub ennhncalcjj: bool,
    #[prost(uint32, tag = "14")]
    pub ehobobppchc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgolnlcjphm {
    #[prost(uint32, repeated, tag = "11")]
    pub jkonpkkialg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub exp: u32,
    #[prost(uint32, tag = "2")]
    pub level: u32,
    #[prost(uint32, tag = "4")]
    pub bajeglndfpe: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub cpkmmhenjof: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub nncdpbdokbj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpfccobpjpo {
    #[prost(message, repeated, tag = "2")]
    pub pcpkkbfpbeb: ::prost::alloc::vec::Vec<Pfchkldhojh>,
    #[prost(message, repeated, tag = "5")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Flbopemokdm>,
    #[prost(message, repeated, tag = "10")]
    pub ihneplfgmdc: ::prost::alloc::vec::Vec<Cgolnlcjphm>,
    #[prost(message, repeated, tag = "14")]
    pub llhoijjnhbc: ::prost::alloc::vec::Vec<Cbilelfjaom>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebdjhabanno {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRogueHandbookDataScRsp {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub handbook_info: ::core::option::Option<Dpfccobpjpo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkkhlondele {
    #[prost(message, repeated, tag = "13")]
    pub gopjpjhhpdl: ::prost::alloc::vec::Vec<Flbopemokdm>,
    #[prost(message, repeated, tag = "12")]
    pub kcidphehmgh: ::prost::alloc::vec::Vec<Pfchkldhojh>,
    #[prost(message, repeated, tag = "15")]
    pub kjcjmogejck: ::prost::alloc::vec::Vec<Cbilelfjaom>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfifjffgkja {
    #[prost(uint32, repeated, tag = "4")]
    pub cfaellfidkf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lleckakggaa {
    #[prost(message, optional, tag = "12")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "6")]
    pub hkpdigncbac: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdnoklalckb {
    #[prost(uint32, repeated, tag = "5")]
    pub nnijgeiepnp: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khbgcebnmch {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "14")]
    pub nacknnppfog: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cllnjecndkl {
    #[prost(map = "uint32, uint32", tag = "8")]
    pub phfgnlopnbm: ::std::collections::HashMap<u32, u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpilmpnpiel {
    #[prost(uint32, tag = "1")]
    pub agndiegkeih: u32,
    #[prost(message, optional, tag = "6")]
    pub jjfopmclfgp: ::core::option::Option<Bakpidleifi>,
    #[prost(int32, tag = "13")]
    pub onlljjegjdc: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eamfankbgkd {
    #[prost(uint32, repeated, tag = "5")]
    pub ikddpmdgcaj: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmdkacfejli {
    #[prost(uint32, repeated, tag = "7")]
    pub avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub joipnmmehbm: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbgphimaond {
    #[prost(message, optional, tag = "12")]
    pub pogejanpebj: ::core::option::Option<Oobhdlegikm>,
    #[prost(message, optional, tag = "9")]
    pub pmoenkofnla: ::core::option::Option<Cgcbkhnbohm>,
    #[prost(message, optional, tag = "2")]
    pub oachfpajdbo: ::core::option::Option<Cllnjecndkl>,
    #[prost(message, optional, tag = "1")]
    pub kjicoehehhk: ::core::option::Option<Fpilmpnpiel>,
    #[prost(message, optional, tag = "14")]
    pub gjbcapfdgka: ::core::option::Option<Eamfankbgkd>,
    #[prost(message, optional, tag = "3")]
    pub kiomcdghhlo: ::core::option::Option<Hhddmdcflml>,
    #[prost(message, optional, tag = "7")]
    pub aggmbfmaepl: ::core::option::Option<Mbokaahegfk>,
    #[prost(message, optional, tag = "10")]
    pub nnibggkcbdj: ::core::option::Option<Dmdkacfejli>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aepjfkbjmpm {
    #[prost(uint32, tag = "8")]
    pub aeheogaoenf: u32,
    #[prost(message, repeated, tag = "14")]
    pub hifokbodgbe: ::prost::alloc::vec::Vec<Cbgphimaond>,
    #[prost(uint32, tag = "9")]
    pub dgfahpgkgmf: u32,
    #[prost(uint32, tag = "12")]
    pub fhpollcfknc: u32,
    #[prost(uint32, tag = "10")]
    pub ljlinldbbob: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RogueUnlockProgress {
    #[prost(uint32, tag = "4")]
    pub unlock_id: u32,
    #[prost(uint32, tag = "13")]
    pub progress: u32,
    #[prost(bool, tag = "5")]
    pub finish: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Johbdbffgje {
    #[prost(message, repeated, tag = "6")]
    pub happnefcgoc: ::prost::alloc::vec::Vec<RogueUnlockProgress>,
    #[prost(uint32, tag = "5")]
    pub hehehnicpjn: u32,
    #[prost(enumeration = "Oimmmlnoicd", tag = "15")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lljpmigaffg {
    #[prost(message, repeated, tag = "15")]
    pub kdfddhcicoa: ::prost::alloc::vec::Vec<Johbdbffgje>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ihcikgmbhlg {
    #[prost(uint32, tag = "3")]
    pub hmpniejbcbk: u32,
    #[prost(uint32, tag = "11")]
    pub lhlaejpmpjj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Papkfcpnkoe {
    #[prost(message, repeated, tag = "8")]
    pub iajfipnhdec: ::prost::alloc::vec::Vec<Ihcikgmbhlg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmlckpdeahn {
    #[prost(uint32, tag = "5")]
    pub ohilclmamkk: u32,
    #[prost(uint32, tag = "3")]
    pub einnfebcmlj: u32,
    #[prost(uint32, tag = "1")]
    pub cfejldhielm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmkjpfjceck {
    #[prost(enumeration = "Oodgnonfgkc", repeated, tag = "10")]
    pub ellpcknbemn: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgebaafiedj {
    #[prost(message, optional, tag = "13")]
    pub bdaldfbhcjl: ::core::option::Option<Mmkjpfjceck>,
    #[prost(message, optional, tag = "5")]
    pub deafkpjjgab: ::core::option::Option<Kmlckpdeahn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odcdpcpopbn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmdcaknnaad {
    #[prost(uint32, tag = "15")]
    pub cmddpkpeoli: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "8")]
    pub fecdamigijp: ::core::option::Option<Fgebaafiedj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhjmihldoeh {
    #[prost(message, optional, tag = "2")]
    pub deafkpjjgab: ::core::option::Option<Kmlckpdeahn>,
    #[prost(message, optional, tag = "15")]
    pub bdaldfbhcjl: ::core::option::Option<Mmkjpfjceck>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhoonanlchd {
    #[prost(uint32, tag = "7")]
    pub ebffkdhgkgl: u32,
    #[prost(uint32, tag = "5")]
    pub hgfnojflbcl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhfnbcaknap {
    #[prost(uint32, tag = "6")]
    pub hgpelgifadf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agicbcnpmbf {
    #[prost(uint32, tag = "9")]
    pub hgpelgifadf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmfccgildoh {
    #[prost(uint32, tag = "11")]
    pub bgecmdbfigi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbalhihkole {
    #[prost(message, optional, tag = "4")]
    pub kamplnhefpi: ::core::option::Option<Hhoonanlchd>,
    #[prost(message, optional, tag = "5")]
    pub knhahdliapf: ::core::option::Option<Jhfnbcaknap>,
    #[prost(message, optional, tag = "12")]
    pub aolafephjfe: ::core::option::Option<Agicbcnpmbf>,
    #[prost(message, optional, tag = "15")]
    pub cjfhhfcgdda: ::core::option::Option<Lmfccgildoh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdgbdhbjbaf {
    #[prost(float, tag = "7")]
    pub aeggdogmiea: f32,
    #[prost(int32, tag = "3")]
    pub dkaehkamkfi: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Chbifnppnke {
    #[prost(uint32, tag = "6")]
    pub ghhnoefibke: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ilnklkjeikf {
    #[prost(int32, tag = "11")]
    pub apmgjmappjl: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Embkjecncmm {
    #[prost(message, optional, tag = "14")]
    pub ikfkmimaeon: ::core::option::Option<Chbifnppnke>,
    #[prost(message, optional, tag = "2")]
    pub njfnjkjpnap: ::core::option::Option<Ilnklkjeikf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmppenfheel {
    #[prost(message, repeated, tag = "12")]
    pub ipfkcfhigmk: ::prost::alloc::vec::Vec<Embkjecncmm>,
    #[prost(message, optional, tag = "11")]
    pub iihookopmmk: ::core::option::Option<Cdgbdhbjbaf>,
    #[prost(uint32, tag = "1")]
    pub hfadhgefiea: u32,
    #[prost(uint32, tag = "6")]
    pub ojkjbeilgdc: u32,
    #[prost(bool, tag = "5")]
    pub jhojoicfldl: bool,
    #[prost(bool, tag = "7")]
    pub mecjmchknde: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdmoboniihl {
    #[prost(message, optional, tag = "1")]
    pub oeoffmaepgl: ::core::option::Option<Pbalhihkole>,
    #[prost(uint32, tag = "8")]
    pub jnboodjdmho: u32,
    #[prost(message, repeated, tag = "2")]
    pub ejjmffbhbgk: ::prost::alloc::vec::Vec<Kmppenfheel>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Begalnkfdgo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcmbmhjjdal {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub mjomgfdpmnj: ::prost::alloc::vec::Vec<Hdmoboniihl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgaeehgmbhd {
    #[prost(uint32, tag = "14")]
    pub jnboodjdmho: u32,
    #[prost(uint32, tag = "3")]
    pub ojkjbeilgdc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eakdfjkkkac {
    #[prost(bool, tag = "6")]
    pub ecohlncenkk: bool,
    #[prost(uint32, tag = "9")]
    pub jnboodjdmho: u32,
    #[prost(uint32, tag = "2")]
    pub ojkjbeilgdc: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub fbcfkkknldf: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub oplnemnkmhf: ::core::option::Option<Hdmoboniihl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmfiimlalfm {
    #[prost(uint32, tag = "3")]
    pub jnboodjdmho: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjhfohgjked {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub jnboodjdmho: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iglcopligcj {
    #[prost(message, repeated, tag = "11")]
    pub mjomgfdpmnj: ::prost::alloc::vec::Vec<Hdmoboniihl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hoadcaanbha {
    #[prost(message, optional, tag = "13")]
    pub oplnemnkmhf: ::core::option::Option<Hdmoboniihl>,
    #[prost(message, optional, tag = "12")]
    pub bjfgfbjlffg: ::core::option::Option<Kmppenfheel>,
    #[prost(uint32, tag = "9")]
    pub ojkjbeilgdc: u32,
    #[prost(uint32, tag = "15")]
    pub jnboodjdmho: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Domkmpnnebe {
    #[prost(message, optional, tag = "11")]
    pub mnhgojliepj: ::core::option::Option<Cbgphimaond>,
    #[prost(uint32, tag = "13")]
    pub ljlinldbbob: u32,
    #[prost(uint32, tag = "8")]
    pub dgfahpgkgmf: u32,
    #[prost(uint32, tag = "14")]
    pub fhpollcfknc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddpeohmlklk {
    #[prost(uint32, tag = "10")]
    pub dgfahpgkgmf: u32,
    #[prost(message, optional, tag = "6")]
    pub lfleifodebe: ::core::option::Option<Blhhnmhcodp>,
    #[prost(uint32, tag = "5")]
    pub fhpollcfknc: u32,
    #[prost(uint32, tag = "13")]
    pub ljlinldbbob: u32,
    #[prost(uint32, tag = "7")]
    pub aeheogaoenf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hodkonakgab {
    #[prost(uint32, tag = "4")]
    pub kigccmchfaa: u32,
    #[prost(uint32, tag = "13")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfchmojmkbp {
    #[prost(uint32, tag = "7")]
    pub kigccmchfaa: u32,
    #[prost(message, optional, tag = "15")]
    pub bajihciaend: ::core::option::Option<Mkmfeohmhdl>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Epjilmmpkom {
    #[prost(uint32, tag = "4")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcnojeijhmd {
    #[prost(map = "uint32, message", tag = "8")]
    pub lbnndcbnika: ::std::collections::HashMap<u32, Mkmfeohmhdl>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkmfeohmhdl {
    #[prost(message, optional, tag = "14")]
    pub ehfmcpnpcmp: ::core::option::Option<Onlamhijjda>,
    #[prost(message, optional, tag = "7")]
    pub mcobeibhgia: ::core::option::Option<Cnbcehippjg>,
    #[prost(message, optional, tag = "6")]
    pub apjgepbpong: ::core::option::Option<Fngfihkckfj>,
    #[prost(message, optional, tag = "11")]
    pub nbfmehkdagj: ::core::option::Option<Ffhkhemgonh>,
    #[prost(message, optional, tag = "9")]
    pub ckfggjhfhdb: ::core::option::Option<Bolhppnehna>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onlamhijjda {
    #[prost(int32, tag = "3")]
    pub jjbohkkebeg: i32,
    #[prost(bool, tag = "5")]
    pub akemgnajflc: bool,
    #[prost(uint32, tag = "12")]
    pub fmifpcfleij: u32,
    #[prost(uint32, tag = "9")]
    pub mhpkpajbnjm: u32,
    #[prost(message, optional, tag = "13")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnbcehippjg {
    #[prost(message, optional, tag = "1")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(bool, tag = "12")]
    pub akemgnajflc: bool,
    #[prost(uint32, tag = "9")]
    pub mhpkpajbnjm: u32,
    #[prost(uint32, tag = "2")]
    pub fmifpcfleij: u32,
    #[prost(int32, tag = "11")]
    pub jjbohkkebeg: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fngfihkckfj {
    #[prost(uint32, tag = "9")]
    pub eolhlhcahff: u32,
    #[prost(map = "uint32, uint32", tag = "13")]
    pub pplafiiclpl: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "4")]
    pub hkohlnhlgnb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffhkhemgonh {
    #[prost(message, optional, tag = "9")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(map = "uint32, bool", tag = "15")]
    pub gmblbaboegm: ::std::collections::HashMap<u32, bool>,
    #[prost(int32, tag = "3")]
    pub jjbohkkebeg: i32,
    #[prost(uint32, tag = "11")]
    pub mhpkpajbnjm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bolhppnehna {
    #[prost(message, optional, tag = "14")]
    pub lohpklihemj: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "8")]
    pub mhpkpajbnjm: u32,
    #[prost(int32, tag = "12")]
    pub jjbohkkebeg: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Naojdlokppg {
    #[prost(uint32, tag = "6")]
    pub kigccmchfaa: u32,
    #[prost(uint32, tag = "9")]
    pub prop_entity_id: u32,
    #[prost(message, optional, tag = "10")]
    pub kdnioegmffl: ::core::option::Option<Ejjgfpamkcg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adojimghpml {
    #[prost(message, optional, tag = "14")]
    pub bajihciaend: ::core::option::Option<Mkmfeohmhdl>,
    #[prost(uint32, tag = "7")]
    pub kigccmchfaa: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejjgfpamkcg {
    #[prost(message, optional, tag = "2")]
    pub ehfmcpnpcmp: ::core::option::Option<Mjhcocmpagc>,
    #[prost(message, optional, tag = "10")]
    pub mcobeibhgia: ::core::option::Option<Clcicidmhke>,
    #[prost(message, optional, tag = "15")]
    pub apjgepbpong: ::core::option::Option<Jfcmkbokfof>,
    #[prost(message, optional, tag = "12")]
    pub nbfmehkdagj: ::core::option::Option<Ffloeagfoia>,
    #[prost(message, optional, tag = "9")]
    pub ckfggjhfhdb: ::core::option::Option<Gpianncldcp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjhcocmpagc {
    #[prost(uint32, tag = "14")]
    pub mcikcapjmdh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clcicidmhke {
    #[prost(uint32, tag = "9")]
    pub bpghijegann: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfcmkbokfof {
    #[prost(uint32, tag = "6")]
    pub nmkjbofhjhb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffloeagfoia {
    #[prost(uint32, repeated, tag = "12")]
    pub aadjgaaabib: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpianncldcp {
    #[prost(uint32, tag = "14")]
    pub jjlcgdiofhh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aaacgamfppc {
    #[prost(enumeration = "Eeaceekbbik", tag = "12")]
    pub status: i32,
    #[prost(uint32, tag = "5")]
    pub nklnaippaoc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aojielnnmfc {
    #[prost(uint32, tag = "12")]
    pub nklnaippaoc: u32,
    #[prost(uint32, tag = "8")]
    pub nfhmflfhndi: u32,
    #[prost(enumeration = "Bpibjehipof", tag = "1")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgggbcomlkg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnccfafgcol {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub keadbmibeoa: ::prost::alloc::vec::Vec<Aaacgamfppc>,
    #[prost(message, repeated, tag = "2")]
    pub jkcaikhimpk: ::prost::alloc::vec::Vec<Aojielnnmfc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fgeaamlhlac {
    #[prost(enumeration = "Kogippjmdkb", repeated, tag = "3")]
    pub fepikjehgke: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, repeated, tag = "4")]
    pub ohhfpegpijl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub jgadebiegfg: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iinoobifcjo {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub jkcaikhimpk: ::prost::alloc::vec::Vec<Aojielnnmfc>,
    #[prost(message, repeated, tag = "3")]
    pub keadbmibeoa: ::prost::alloc::vec::Vec<Aaacgamfppc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pladdmnljcl {
    #[prost(uint32, tag = "15")]
    pub jhkfhacondf: u32,
    #[prost(enumeration = "Odijleidcnd", tag = "1")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lblameimomf {
    #[prost(uint32, tag = "9")]
    pub jhkfhacondf: u32,
    #[prost(uint32, tag = "5")]
    pub nfhmflfhndi: u32,
    #[prost(enumeration = "Bpibjehipof", tag = "13")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofkanljcacm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icdcbngicka {
    #[prost(message, repeated, tag = "7")]
    pub pkkaednpjma: ::prost::alloc::vec::Vec<Pladdmnljcl>,
    #[prost(message, repeated, tag = "15")]
    pub bogghhbkjbd: ::prost::alloc::vec::Vec<Lblameimomf>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ioibkofbebj {
    #[prost(uint32, repeated, tag = "12")]
    pub gbelbjgfeen: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub bhcemcfcjca: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Kogippjmdkb", repeated, tag = "3")]
    pub ioldfakjoep: ::prost::alloc::vec::Vec<i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hcgejlljkpj {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "11")]
    pub pkkaednpjma: ::prost::alloc::vec::Vec<Pladdmnljcl>,
    #[prost(message, repeated, tag = "2")]
    pub bogghhbkjbd: ::prost::alloc::vec::Vec<Lblameimomf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhbgigopabg {
    #[prost(uint32, tag = "5")]
    pub ichkjnfaacl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pgjpfemjihd {
    #[prost(uint32, tag = "15")]
    pub nmkibknpbeo: u32,
    #[prost(bool, tag = "10")]
    pub dcigbkdfmdl: bool,
    #[prost(message, optional, tag = "5")]
    pub ikliliccdnf: ::core::option::Option<Lhbgigopabg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jigjfaecdcc {
    #[prost(message, repeated, tag = "12")]
    pub jdhboponecj: ::prost::alloc::vec::Vec<Pgjpfemjihd>,
    #[prost(bool, tag = "7")]
    pub fkbfnoipncl: bool,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jhjloaofhnk {
    #[prost(message, repeated, tag = "7")]
    pub eaeoionfehm: ::prost::alloc::vec::Vec<Jigjfaecdcc>,
    #[prost(bool, tag = "5")]
    pub gehffpalkkn: bool,
    #[prost(uint32, tag = "2")]
    pub pbcojmehnbg: u32,
    #[prost(uint32, tag = "10")]
    pub ndghkoinlfe: u32,
    #[prost(uint32, tag = "4")]
    pub fomcmdmpdcg: u32,
    #[prost(uint32, tag = "13")]
    pub jnhkcpccoep: u32,
    #[prost(message, optional, tag = "9")]
    pub nggficbaiof: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Padjpmdajhc {
    #[prost(uint32, tag = "5")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odcpjphbfme {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub lkfmgoglgch: ::core::option::Option<Jhjloaofhnk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agjmneegkdb {
    #[prost(uint32, tag = "5")]
    pub prop_entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obolbkcklhc {
    #[prost(uint32, tag = "2")]
    pub bekhfcgelap: u32,
    #[prost(uint32, tag = "14")]
    pub gdpfmoegbki: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub lkfmgoglgch: ::core::option::Option<Jhjloaofhnk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lmmkpeajfka {
    #[prost(uint32, repeated, tag = "7")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "15")]
    pub gkfjbgdelik: ::core::option::Option<Hpphifdfjjj>,
    #[prost(uint32, tag = "4")]
    pub bgjihjmjbdk: u32,
    #[prost(uint32, tag = "12")]
    pub ediopngagap: u32,
    #[prost(message, optional, tag = "8")]
    pub fanjaobchcg: ::core::option::Option<Eijagapkfad>,
    #[prost(enumeration = "RogueStatus", tag = "1")]
    pub status: i32,
    #[prost(uint32, tag = "3")]
    pub daldfnlnnbo: u32,
    #[prost(uint32, tag = "5")]
    pub lnjapmhfcck: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cfeeacjgeec {
    #[prost(uint32, tag = "14")]
    pub moidpjnooeb: u32,
    #[prost(uint32, tag = "2")]
    pub battle_id: u32,
    #[prost(uint32, tag = "8")]
    pub mibmejkddhe: u32,
    #[prost(uint32, tag = "9")]
    pub fblfmeldjgl: u32,
    #[prost(uint32, tag = "5")]
    pub nkangcfcbfk: u32,
    #[prost(uint32, tag = "3")]
    pub djocbcjomac: u32,
    #[prost(bool, tag = "4")]
    pub chmbglidkmm: bool,
    #[prost(uint32, tag = "7")]
    pub phpkjaipcmg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nggfgepnifo {
    #[prost(message, optional, tag = "11")]
    pub appflheobmi: ::core::option::Option<Cfeeacjgeec>,
    #[prost(uint32, tag = "6")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, tag = "4")]
    pub fjlnncjahng: u32,
    #[prost(message, optional, tag = "9")]
    pub minogichkgm: ::core::option::Option<Lmmkpeajfka>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpbhhlhhedh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kcajjjlejgm {
    #[prost(uint32, repeated, tag = "11")]
    pub ihkmfjnfjlk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub pokaoienhda: u32,
    #[prost(message, repeated, tag = "5")]
    pub cpiogbbagop: ::prost::alloc::vec::Vec<Nggfgepnifo>,
    #[prost(uint32, tag = "1")]
    pub hehigejeimi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkbbigojajj {
    #[prost(uint32, tag = "9")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "8")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kgamnkklmcm {
    #[prost(uint32, tag = "1")]
    pub anllhlcoape: u32,
    #[prost(message, repeated, tag = "6")]
    pub avatar_list: ::prost::alloc::vec::Vec<Jkbbigojajj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eifpojnakgh {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "14")]
    pub appflheobmi: ::core::option::Option<Cfeeacjgeec>,
    #[prost(message, optional, tag = "3")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ddncjhjjabn {
    #[prost(message, optional, tag = "8")]
    pub appflheobmi: ::core::option::Option<Cfeeacjgeec>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffcaeknjnap {
    #[prost(bool, tag = "1")]
    pub mhegpegfggg: bool,
    #[prost(uint32, tag = "7")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhgioelfegm {
    #[prost(message, optional, tag = "3")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(bool, tag = "11")]
    pub mhegpegfggg: bool,
    #[prost(uint32, tag = "15")]
    pub hehigejeimi: u32,
    #[prost(uint32, tag = "1")]
    pub level: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub ihkmfjnfjlk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iddjfmpgfmd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofhcflkjmeh {
    #[prost(uint32, repeated, tag = "12")]
    pub ihkmfjnfjlk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "1")]
    pub hehigejeimi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njkmbnhkmij {
    #[prost(uint32, tag = "13")]
    pub adnplkibhog: u32,
    #[prost(bool, tag = "5")]
    pub mecjmchknde: bool,
    #[prost(uint32, tag = "14")]
    pub babfnhiakog: u32,
}
/// ? GetSceneMapInfoCsReq @
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Indhellplmc {
    #[prost(uint32, repeated, tag = "2")]
    pub jnkphngenhh: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "11")]
    pub mecjmchknde: bool,
    #[prost(uint32, tag = "13")]
    pub adnplkibhog: u32,
    #[prost(uint32, tag = "15")]
    pub babfnhiakog: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjechcdmobb {
    #[prost(uint32, tag = "13")]
    pub adnplkibhog: u32,
    #[prost(bool, tag = "15")]
    pub mecjmchknde: bool,
    #[prost(uint32, repeated, tag = "10")]
    pub jnkphngenhh: ::prost::alloc::vec::Vec<u32>,
}
/// ? GetSceneMapInfoCsReq @
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnklhfgnidh {
    #[prost(uint32, tag = "1")]
    pub adnplkibhog: u32,
    #[prost(bool, tag = "11")]
    pub mecjmchknde: bool,
    #[prost(uint32, tag = "12")]
    pub jlgjdbmhnan: u32,
    #[prost(uint32, repeated, tag = "15")]
    pub ciagcobkhbd: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gennbfeoeln {
    #[prost(uint32, tag = "3")]
    pub kccleanfoef: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbmijaimnlp {
    #[prost(uint32, tag = "2")]
    pub pkfeeankpmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acpeiiblfeb {
    #[prost(uint32, tag = "5")]
    pub nlefnkfdgkp: u32,
}
/// ? GetSceneMapInfoCsReq @
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbbegcjnbol {
    #[prost(bool, tag = "1")]
    pub mecjmchknde: bool,
    #[prost(uint32, tag = "11")]
    pub adnplkibhog: u32,
    #[prost(uint32, tag = "12")]
    pub pgnccoldebp: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub ciagcobkhbd: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cjakegljcgo {
    #[prost(uint32, tag = "3")]
    pub eefckhjjdaf: u32,
    #[prost(uint32, tag = "11")]
    pub pjkppmidpao: u32,
    #[prost(uint32, tag = "5")]
    pub glppfpcjnlp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkdamfkkpgf {
    #[prost(uint32, tag = "1")]
    pub paofpgekpfe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahfklgbbeno {
    #[prost(uint32, tag = "11")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "3")]
    pub olfhccbiidg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hbjfkganpni {
    #[prost(uint32, tag = "11")]
    pub kagnbjdmamf: u32,
    #[prost(uint32, tag = "7")]
    pub bomcmajnimh: u32,
    #[prost(uint32, tag = "6")]
    pub ekcigpdfkjo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjohphbaijk {
    #[prost(uint32, tag = "4")]
    pub mgnnkboblfg: u32,
    #[prost(uint32, tag = "12")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcpoejemiok {
    #[prost(uint32, tag = "7")]
    pub kccleanfoef: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkgaakknhee {
    #[prost(uint32, tag = "7")]
    pub babfnhiakog: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okeejldbgch {
    #[prost(uint32, tag = "9")]
    pub adnplkibhog: u32,
    #[prost(bool, tag = "5")]
    pub mecjmchknde: bool,
    #[prost(uint32, repeated, tag = "15")]
    pub jnkphngenhh: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfbchiimdie {
    #[prost(uint32, tag = "8")]
    pub paofpgekpfe: u32,
    #[prost(uint32, tag = "4")]
    pub odfipjnpjop: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mehpamalhjm {
    #[prost(uint32, tag = "13")]
    pub gmdlifibdfc: u32,
    #[prost(enumeration = "Oeafacbejbl", tag = "12")]
    pub gahohjkfkek: i32,
    #[prost(uint32, tag = "7")]
    pub pelegneejne: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbpkclgkmha {
    #[prost(bool, tag = "11")]
    pub mecjmchknde: bool,
    #[prost(uint32, repeated, tag = "12")]
    pub ppahjhccgea: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub adnplkibhog: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Linfpficlpo {
    #[prost(uint32, tag = "13")]
    pub kamoblkgpai: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afillcepkji {
    #[prost(uint32, tag = "4")]
    pub clkbpijjaap: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gflokgogjgh {
    #[prost(enumeration = "Idlkgpjlfhc", tag = "1")]
    pub cbjpfggchfh: i32,
    #[prost(message, optional, tag = "5")]
    pub golcnjkeoic: ::core::option::Option<Mehpamalhjm>,
    #[prost(uint64, tag = "7")]
    pub ddgkfgjdgeb: u64,
    #[prost(message, optional, tag = "913")]
    pub hhckdkhoecn: ::core::option::Option<Fbpkclgkmha>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bakpidleifi {
    #[prost(message, repeated, tag = "5")]
    pub depmnmgkeag: ::prost::alloc::vec::Vec<Gflokgogjgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kmdhgnfkcpi {
    #[prost(message, optional, tag = "1")]
    pub lmhocgknkpb: ::core::option::Option<Gflokgogjgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hejpimnmkkb {
    #[prost(uint32, tag = "1")]
    pub pbonhgdihdk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikakeaekcgp {
    #[prost(uint32, tag = "14")]
    pub pbonhgdihdk: u32,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub ekpahpdniff: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adbdeennljd {
    #[prost(message, optional, tag = "5")]
    pub lmhocgknkpb: ::core::option::Option<Gflokgogjgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkeajljehgg {
    #[prost(uint64, tag = "11")]
    pub ddgkfgjdgeb: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ogilaeigfdi {
    #[prost(enumeration = "Idlkgpjlfhc", tag = "7")]
    pub cbjpfggchfh: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fopiophbiph {
    #[prost(message, optional, tag = "10")]
    pub pnbpdbgfffd: ::core::option::Option<Cioeahefpln>,
    #[prost(message, optional, tag = "8")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "14")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hpeecfakjeg {
    #[prost(message, optional, tag = "13")]
    pub bemhlbcocdg: ::core::option::Option<Ddpeohmlklk>,
    #[prost(message, optional, tag = "998")]
    pub gblplbejghd: ::core::option::Option<Gaijmpghoii>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnpekjdgohi {
    #[prost(uint32, tag = "1")]
    pub fnecpidkhjb: u32,
    #[prost(bool, tag = "12")]
    pub njnkcjmkgkn: bool,
    #[prost(uint32, tag = "10")]
    pub ophdaipbocc: u32,
    #[prost(uint32, tag = "8")]
    pub dkaodoghgcb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpfmjggcnld {
    #[prost(bool, tag = "6")]
    pub njnkcjmkgkn: bool,
    #[prost(uint32, tag = "10")]
    pub kfpjcehiika: u32,
    #[prost(uint32, tag = "8")]
    pub mekbmaknkhf: u32,
    #[prost(uint32, tag = "9")]
    pub afokcapjpep: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jebbgppcabc {
    #[prost(bool, tag = "7")]
    pub njnkcjmkgkn: bool,
    #[prost(uint32, tag = "10")]
    pub gmfapmahfme: u32,
    #[prost(uint32, tag = "3")]
    pub hocpnpbbbeh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfdkodpihgf {
    #[prost(bool, tag = "11")]
    pub iiiohnncjgi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gaijmpghoii {
    #[prost(message, optional, tag = "10")]
    pub bgghceflbbi: ::core::option::Option<Ebeioekofed>,
    #[prost(message, optional, tag = "9")]
    pub level: ::core::option::Option<Cabnkomlnjd>,
    #[prost(message, optional, tag = "2")]
    pub lineup: ::core::option::Option<Dmdkacfejli>,
    #[prost(message, optional, tag = "11")]
    pub dbgaojmndmc: ::core::option::Option<Cllnjecndkl>,
    #[prost(message, optional, tag = "5")]
    pub hjgoaobfdgi: ::core::option::Option<Hhddmdcflml>,
    #[prost(message, optional, tag = "14")]
    pub bcgeihcnbig: ::core::option::Option<Gghlaggamjk>,
    #[prost(message, optional, tag = "7")]
    pub bdmoacndcoa: ::core::option::Option<Oobhdlegikm>,
    #[prost(message, optional, tag = "13")]
    pub memmgmibhdj: ::core::option::Option<Mbokaahegfk>,
    #[prost(message, optional, tag = "4")]
    pub jhjpgbkblag: ::core::option::Option<Cgcbkhnbohm>,
    #[prost(message, optional, tag = "12")]
    pub nhollbiknag: ::core::option::Option<Bfdkodpihgf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cabnkomlnjd {
    #[prost(enumeration = "Dmgmpocpddc", tag = "4")]
    pub status: i32,
    #[prost(message, repeated, tag = "10")]
    pub fogjohmngpc: ::prost::alloc::vec::Vec<Gadcmbokpdi>,
    #[prost(uint32, tag = "11")]
    pub chmmbcgmfho: u32,
    #[prost(enumeration = "Meahibhbfon", tag = "12")]
    pub mgdnainpahe: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebeioekofed {
    #[prost(uint32, tag = "2")]
    pub hdjffnlmlig: u32,
    #[prost(uint32, tag = "15")]
    pub dlookjklpff: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gghlaggamjk {
    #[prost(uint32, repeated, tag = "8")]
    pub ikddpmdgcaj: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gadcmbokpdi {
    #[prost(uint32, tag = "7")]
    pub kemnjbikaod: u32,
    #[prost(uint32, tag = "6")]
    pub dbjdnolegif: u32,
    #[prost(message, repeated, tag = "5")]
    pub bfbahjaloli: ::prost::alloc::vec::Vec<Manmbbkbglg>,
    #[prost(uint32, tag = "4")]
    pub kdkdheomlmo: u32,
    #[prost(enumeration = "Nioandilghd", tag = "1")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Manmbbkbglg {
    #[prost(uint32, tag = "10")]
    pub dbphcockkcj: u32,
    #[prost(enumeration = "Kgcifmhjoag", tag = "7")]
    pub status: i32,
    #[prost(uint32, tag = "12")]
    pub mfdelanaicp: u32,
    #[prost(uint32, tag = "3")]
    pub lkegecjeppg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhoeapoifhf {
    #[prost(uint32, tag = "3")]
    pub mnppbggndma: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub oocjacfoofn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jahlejaahnj {
    #[prost(message, optional, tag = "7")]
    pub niiingfcpol: ::core::option::Option<Hpeecfakjeg>,
    #[prost(uint32, tag = "12")]
    pub mnppbggndma: u32,
    #[prost(message, optional, tag = "6")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iakpmokoopf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piclnnfbhgg {
    #[prost(message, optional, tag = "10")]
    pub niiingfcpol: ::core::option::Option<Hpeecfakjeg>,
    #[prost(message, optional, tag = "7")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ppffnpdebnn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pajenkffpjd {
    #[prost(message, optional, tag = "3")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nagmgplccnn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bninelnejfi {
    #[prost(message, optional, tag = "1")]
    pub odcloijfnip: ::core::option::Option<Jebbgppcabc>,
    #[prost(message, optional, tag = "9")]
    pub ofjdnoboneb: ::core::option::Option<Fnpekjdgohi>,
    #[prost(message, optional, tag = "2")]
    pub nnibggkcbdj: ::core::option::Option<LineupInfo>,
    #[prost(message, optional, tag = "11")]
    pub niiingfcpol: ::core::option::Option<Hpeecfakjeg>,
    #[prost(message, optional, tag = "5")]
    pub dceibjclkbb: ::core::option::Option<Fpfmjggcnld>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmigimbighd {
    #[prost(message, optional, tag = "10")]
    pub pdbobmjedbc: ::core::option::Option<Bninelnejfi>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjjmdnhejkj {
    #[prost(uint32, tag = "2")]
    pub kemnjbikaod: u32,
    #[prost(uint32, tag = "13")]
    pub bookldicfae: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkgkoiljmod {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbfpjokigjo {
    #[prost(uint32, tag = "6")]
    pub bookldicfae: u32,
    #[prost(uint32, tag = "3")]
    pub chmmbcgmfho: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bnjigcnepgg {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebgegjpdclg {
    #[prost(uint32, tag = "13")]
    pub chmmbcgmfho: u32,
    #[prost(enumeration = "Dmgmpocpddc", tag = "9")]
    pub status: i32,
    #[prost(message, repeated, tag = "7")]
    pub fogjohmngpc: ::prost::alloc::vec::Vec<Gadcmbokpdi>,
    #[prost(enumeration = "Meahibhbfon", tag = "8")]
    pub mgdnainpahe: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfbgpdklehf {
    #[prost(uint32, repeated, tag = "14")]
    pub jjoibnmplan: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "12")]
    pub olpnhmcbmbg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkbaamlloid {
    #[prost(uint32, tag = "2")]
    pub exp: u32,
    #[prost(message, optional, tag = "12")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, repeated, tag = "6")]
    pub opjkekdmnif: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofeopdagmld {
    #[prost(uint32, tag = "4")]
    pub exp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnanfpfmfgi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkgcabadlgh {
    #[prost(uint32, tag = "8")]
    pub ggdaffjnmpa: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub pgonhkcjnme: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "7")]
    pub lijjmafkdnn: bool,
    #[prost(bool, tag = "14")]
    pub dnmhgkbcinm: bool,
    #[prost(bool, tag = "10")]
    pub mkideamcloh: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iehdlmeodcb {
    #[prost(int64, tag = "10")]
    pub end_time: i64,
    #[prost(bool, tag = "8")]
    pub deiejhjkjgb: bool,
    #[prost(uint32, tag = "3")]
    pub fibjjgfhakl: u32,
    #[prost(uint32, tag = "14")]
    pub mnppbggndma: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Alanojoldck {
    #[prost(uint32, tag = "15")]
    pub exp: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub opjkekdmnif: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gbnockoacmj {
    #[prost(message, optional, tag = "10")]
    pub bbanknacajb: ::core::option::Option<Lljpmigaffg>,
    #[prost(uint32, tag = "9")]
    pub bcdcpfglloa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imhjlecpgmf {
    #[prost(uint32, tag = "8")]
    pub ikfhibhbodi: u32,
    #[prost(bool, tag = "2")]
    pub dnmhgkbcinm: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibpjgdimgdh {
    #[prost(uint32, tag = "13")]
    pub olpnhmcbmbg: u32,
    #[prost(uint32, tag = "12")]
    pub benepmhmkki: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obekcikjcnd {
    #[prost(uint32, repeated, tag = "1")]
    pub nnijgeiepnp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub lfongcdalle: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub hmcpmadehgc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "7")]
    pub majcffpcdeg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub jgajllhobmi: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub pkcflbcbemf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Omaobpkepbk {
    #[prost(message, repeated, tag = "11")]
    pub mpjcpjidjno: ::prost::alloc::vec::Vec<Ibgjfmdlgfg>,
    #[prost(message, optional, tag = "13")]
    pub njokhdgdfcm: ::core::option::Option<Ibpjgdimgdh>,
    #[prost(message, optional, tag = "6")]
    pub cmmbjnhniak: ::core::option::Option<Gbnockoacmj>,
    #[prost(message, repeated, tag = "5")]
    pub mdnhpflhbbi: ::prost::alloc::vec::Vec<Bkgcabadlgh>,
    #[prost(message, repeated, tag = "7")]
    pub fbaabhmhhmf: ::prost::alloc::vec::Vec<Imhjlecpgmf>,
    #[prost(message, optional, tag = "2")]
    pub eoabdpajekd: ::core::option::Option<Alanojoldck>,
    #[prost(message, optional, tag = "15")]
    pub mgancbncadd: ::core::option::Option<Obekcikjcnd>,
    #[prost(message, optional, tag = "4")]
    pub eidlebddhfm: ::core::option::Option<Iehdlmeodcb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmcafkblcek {
    #[prost(message, optional, tag = "5")]
    pub fecdamigijp: ::core::option::Option<Omaobpkepbk>,
    #[prost(message, optional, tag = "8")]
    pub niiingfcpol: ::core::option::Option<Hpeecfakjeg>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ighcanmlfpk {
    #[prost(message, repeated, tag = "10")]
    pub mdnhpflhbbi: ::prost::alloc::vec::Vec<Bkgcabadlgh>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibgjfmdlgfg {
    #[prost(message, optional, tag = "5")]
    pub cpiogbbagop: ::core::option::Option<Ibbhfnhbhin>,
    #[prost(string, tag = "3")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "12")]
    pub njokhdgdfcm: ::core::option::Option<Ibpjgdimgdh>,
    #[prost(int64, tag = "15")]
    pub end_time: i64,
    #[prost(uint32, tag = "1")]
    pub afefamkndoo: u32,
    #[prost(int64, tag = "11")]
    pub hlnehicbpai: i64,
    #[prost(message, optional, tag = "14")]
    pub niiingfcpol: ::core::option::Option<Hpeecfakjeg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ibbhfnhbhin {
    #[prost(message, repeated, tag = "1")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Mnicidbdjfi>,
    #[prost(uint32, tag = "12")]
    pub dbgaojmndmc: u32,
    #[prost(message, repeated, tag = "3")]
    pub pcpkkbfpbeb: ::prost::alloc::vec::Vec<Djpaibjmmoe>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okpoedldcbc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hfddpfdnbob {
    #[prost(message, repeated, tag = "6")]
    pub jjfmndbpgkf: ::prost::alloc::vec::Vec<Ibgjfmdlgfg>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Falpomddcnm {
    #[prost(uint32, tag = "6")]
    pub afefamkndoo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ehlnpdcbmkg {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub afefamkndoo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Khgalbohlmd {
    #[prost(string, tag = "15")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub afefamkndoo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnejjjainkj {
    #[prost(string, tag = "6")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint32, tag = "13")]
    pub afefamkndoo: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opgfcfjckld {
    #[prost(uint32, tag = "4")]
    pub afefamkndoo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gjignnodbdm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aefpfcoeocm {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "4")]
    pub cmmbjnhniak: ::core::option::Option<Gbnockoacmj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hiobbkapppf {
    #[prost(uint32, tag = "11")]
    pub hehehnicpjn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apfmcbajpno {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub cmmbjnhniak: ::core::option::Option<Gbnockoacmj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcjichofhaj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mninjbbldcn {
    #[prost(message, optional, tag = "10")]
    pub cmmbjnhniak: ::core::option::Option<Gbnockoacmj>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pihijmjijgj {
    #[prost(message, repeated, tag = "8")]
    pub avatar_list: ::prost::alloc::vec::Vec<Flffdckajej>,
    #[prost(uint32, tag = "3")]
    pub kahhjlklcjl: u32,
    #[prost(uint32, tag = "15")]
    pub cnbholdlobc: u32,
    #[prost(bool, tag = "2")]
    pub gehbffmbgmi: bool,
    #[prost(uint32, tag = "11")]
    pub bnlgcohhahg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkcnlobbehh {
    #[prost(message, optional, tag = "14")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcbpbfgkocl {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmncjcdmnoc {
    #[prost(message, optional, tag = "10")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ipjbipgkkce {
    #[prost(bool, tag = "1")]
    pub gehbffmbgmi: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgdjnbdojjl {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(message, optional, tag = "7")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ckgapkhdnnd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjbegoofpdm {
    #[prost(uint32, tag = "5")]
    pub kahhjlklcjl: u32,
    #[prost(uint32, tag = "1")]
    pub cnbholdlobc: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub bnlgcohhahg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eombaehnefe {
    #[prost(uint32, repeated, tag = "5")]
    pub lebembolhgj: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkbpgokjfnj {
    #[prost(uint32, repeated, tag = "8")]
    pub lobeaeamlln: ::prost::alloc::vec::Vec<u32>,
    #[prost(enumeration = "Llecchannpc", tag = "1")]
    pub ojdlhnjpibk: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmlpmelombo {
    #[prost(uint32, tag = "11")]
    pub ggdaffjnmpa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Coenhaabago {
    #[prost(message, optional, tag = "13")]
    pub pdbobmjedbc: ::core::option::Option<Bninelnejfi>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dhdgbnfnfai {
    #[prost(uint32, tag = "12")]
    pub afefamkndoo: u32,
    #[prost(uint32, tag = "1")]
    pub ggdaffjnmpa: u32,
    #[prost(string, tag = "8")]
    pub name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mficaiiiekj {
    #[prost(message, optional, tag = "7")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
    #[prost(message, optional, tag = "12")]
    pub gomhdhcdflh: ::core::option::Option<Ibgjfmdlgfg>,
    #[prost(message, optional, tag = "14")]
    pub dcalkgibojm: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub akppfhlknnp: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gafkfelneml {
    #[prost(message, optional, tag = "8")]
    pub eidlebddhfm: ::core::option::Option<Iehdlmeodcb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcomcecfegd {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekjkgipimmb {
    #[prost(message, optional, tag = "12")]
    pub dceibjclkbb: ::core::option::Option<Fpfmjggcnld>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "10")]
    pub ofjdnoboneb: ::core::option::Option<Fnpekjdgohi>,
    #[prost(message, optional, tag = "5")]
    pub odcloijfnip: ::core::option::Option<Jebbgppcabc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iokabfcbejn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kminbeklojh {
    #[prost(uint32, repeated, tag = "7")]
    pub ddgcjndjeod: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub ilinhdeianh: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gklnflepfke {
    #[prost(message, optional, tag = "5")]
    pub joipnmmehbm: ::core::option::Option<Lanbmmohblp>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ffhalolphba {
    #[prost(uint32, repeated, tag = "7")]
    pub base_avatar_id_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lcglakkjjmb {
    #[prost(message, optional, tag = "12")]
    pub joipnmmehbm: ::core::option::Option<Lanbmmohblp>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pcfhlaallip {
    #[prost(message, optional, tag = "1")]
    pub pdbobmjedbc: ::core::option::Option<Bninelnejfi>,
    #[prost(message, optional, tag = "15")]
    pub hiacklcdijn: ::core::option::Option<Fopiophbiph>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hnjnkcakobk {
    #[prost(uint32, tag = "7")]
    pub lglonllbmkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldlepnnkbfd {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub ohmaodidhnl: u32,
    #[prost(uint32, repeated, tag = "11")]
    pub ellcjbcjncl: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub lglonllbmkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agblbeapjdj {
    #[prost(uint32, tag = "5")]
    pub ohmaodidhnl: u32,
    #[prost(uint32, tag = "11")]
    pub lglonllbmkc: u32,
    #[prost(uint32, tag = "12")]
    pub bpijdelaecg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gajmbmmlhmo {
    #[prost(uint32, tag = "14")]
    pub jplhmpiafoe: u32,
    #[prost(message, optional, tag = "11")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub lglonllbmkc: u32,
    #[prost(uint32, tag = "6")]
    pub ialfoddhdkp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gppcmgfgfhf {
    #[prost(uint32, tag = "8")]
    pub lglonllbmkc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeRollShopRewardScRsp {
    #[prost(uint32, tag = "6")]
    pub roll_shop_id: u32,
    #[prost(uint32, tag = "2")]
    pub group_type: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub reward: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneActorInfo {
    #[prost(uint32, tag = "11")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "15")]
    pub map_layer: u32,
    #[prost(uint32, tag = "2")]
    pub uid: u32,
    #[prost(enumeration = "AvatarType", tag = "6")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnofjfljede {
    #[prost(uint32, tag = "6")]
    pub dbimnobaloc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onmjbnnobfj {
    #[prost(message, optional, tag = "9")]
    pub bheimepjine: ::core::option::Option<Mnofjfljede>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneNpcMonsterInfo {
    #[prost(bool, tag = "11")]
    pub mcfppkobjog: bool,
    #[prost(uint32, tag = "12")]
    pub monster_id: u32,
    #[prost(uint32, tag = "1")]
    pub event_id: u32,
    #[prost(bool, tag = "3")]
    pub eanllcnpded: bool,
    #[prost(uint32, tag = "10")]
    pub world_level: u32,
    #[prost(message, optional, tag = "2")]
    pub extra_info: ::core::option::Option<Onmjbnnobfj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onmgodgfdgm {
    #[prost(uint32, tag = "3")]
    pub hfadhgefiea: u32,
    #[prost(uint32, tag = "12")]
    pub cckegompfdi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlegnknbkba {
    #[prost(bool, tag = "12")]
    pub modhkobfmbp: bool,
    #[prost(map = "uint32, uint32", tag = "14")]
    pub lpflcicnioa: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "5")]
    pub kiakkdiecme: u32,
    #[prost(uint32, tag = "10")]
    pub jnboodjdmho: u32,
    #[prost(bool, tag = "11")]
    pub idoffgnngem: bool,
    #[prost(bool, tag = "2")]
    pub phddanoooji: bool,
    #[prost(uint32, tag = "3")]
    pub hgfnojflbcl: u32,
    #[prost(uint32, tag = "9")]
    pub ebffkdhgkgl: u32,
    #[prost(message, repeated, tag = "15")]
    pub jpiojenbgdi: ::prost::alloc::vec::Vec<Onmgodgfdgm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnamhpiefmk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjgielghnom {
    #[prost(uint32, tag = "11")]
    pub aahebgiklma: u32,
    #[prost(bool, tag = "15")]
    pub fhhkhmdleno: bool,
    #[prost(uint32, tag = "13")]
    pub kjdlimfggmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NpcExtraInfo {
    #[prost(message, optional, tag = "6")]
    pub kbneaoehnob: ::core::option::Option<Nlegnknbkba>,
    #[prost(message, optional, tag = "11")]
    pub ocjkecmoefo: ::core::option::Option<Pjgielghnom>,
    #[prost(message, optional, tag = "10")]
    pub bmiommboiii: ::core::option::Option<Mnamhpiefmk>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneNpcInfo {
    #[prost(message, optional, tag = "6")]
    pub extra_info: ::core::option::Option<NpcExtraInfo>,
    #[prost(uint32, tag = "3")]
    pub npc_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pjinigkhjph {
    #[prost(uint32, tag = "6")]
    pub hdnlmbacmoa: u32,
    #[prost(uint32, tag = "2")]
    pub edjpollefac: u32,
    #[prost(uint32, tag = "4")]
    pub ioijcfnndfi: u32,
    #[prost(uint32, tag = "7")]
    pub mfdelanaicp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropAeonInfo {
    #[prost(uint32, tag = "14")]
    pub add_exp: u32,
    #[prost(uint32, tag = "10")]
    pub dialogue_group_id: u32,
    #[prost(uint32, tag = "3")]
    pub aeon_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Beegbgebbjo {
    #[prost(bool, tag = "14")]
    pub hkfihaoadih: bool,
    #[prost(bool, tag = "9")]
    pub dolgkgdnlaj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhfaniclgjb {
    #[prost(uint32, tag = "10")]
    pub dbkpbjfflcd: u32,
    #[prost(bool, tag = "5")]
    pub epdhlkapdfj: bool,
    #[prost(uint32, tag = "14")]
    pub lkegecjeppg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Heikogemang {
    #[prost(uint32, tag = "9")]
    pub kigccmchfaa: u32,
    #[prost(bool, tag = "1")]
    pub jhojoicfldl: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkjfnijdkgm {
    #[prost(uint32, tag = "13")]
    pub icfomghpdgm: u32,
    #[prost(message, repeated, tag = "1")]
    pub hcgkppdkglf: ::prost::alloc::vec::Vec<Heikogemang>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agohmeiodfe {
    #[prost(message, optional, tag = "6")]
    pub lkfmgoglgch: ::core::option::Option<Jhjloaofhnk>,
    #[prost(uint32, tag = "5")]
    pub fkcfoljohjg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnijbelpndn {
    #[prost(uint32, tag = "13")]
    pub jpaadimdaga: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PropExtraInfo {
    #[prost(message, optional, tag = "10")]
    pub rogue_info: ::core::option::Option<Pjinigkhjph>,
    #[prost(message, optional, tag = "7")]
    pub aeon_info: ::core::option::Option<PropAeonInfo>,
    #[prost(message, optional, tag = "8")]
    pub chess_rogue_info: ::core::option::Option<Beegbgebbjo>,
    #[prost(message, optional, tag = "12")]
    pub rogue_tourn_door_info: ::core::option::Option<Bhfaniclgjb>,
    #[prost(message, optional, tag = "2")]
    pub rogue_tourn_workbench_info: ::core::option::Option<Hkjfnijdkgm>,
    #[prost(message, optional, tag = "13")]
    pub rogue_gamble_machine_info: ::core::option::Option<Agohmeiodfe>,
    #[prost(message, optional, tag = "14")]
    pub rogue_curse_chest_info: ::core::option::Option<Mnijbelpndn>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScenePropInfo {
    #[prost(uint32, tag = "11")]
    pub life_time_ms: u32,
    #[prost(uint32, tag = "12")]
    pub prop_state: u32,
    #[prost(string, repeated, tag = "14")]
    pub hieidipfnmn: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "5")]
    pub extra_info: ::core::option::Option<PropExtraInfo>,
    #[prost(uint32, tag = "10")]
    pub prop_id: u32,
    #[prost(uint64, tag = "9")]
    pub create_time_ms: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneSummonUnitInfo {
    #[prost(uint32, tag = "7")]
    pub kggengibiaj: u32,
    #[prost(uint32, tag = "4")]
    pub dpapibilmkb: u32,
    #[prost(string, repeated, tag = "6")]
    pub gafflhlblde: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(int32, tag = "5")]
    pub life_time_ms: i32,
    #[prost(uint64, tag = "11")]
    pub create_time_ms: u64,
    #[prost(uint32, tag = "9")]
    pub ilngleemfcf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityInfo {
    #[prost(message, optional, tag = "1")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
    #[prost(uint32, tag = "9")]
    pub group_id: u32,
    #[prost(uint32, tag = "13")]
    pub inst_id: u32,
    #[prost(message, optional, tag = "10")]
    pub actor: ::core::option::Option<SceneActorInfo>,
    #[prost(message, optional, tag = "14")]
    pub npc_monster: ::core::option::Option<SceneNpcMonsterInfo>,
    #[prost(message, optional, tag = "11")]
    pub npc: ::core::option::Option<SceneNpcInfo>,
    #[prost(message, optional, tag = "8")]
    pub prop: ::core::option::Option<ScenePropInfo>,
    #[prost(message, optional, tag = "15")]
    pub summon_unit: ::core::option::Option<SceneSummonUnitInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuffInfo {
    #[prost(uint32, tag = "14")]
    pub jpbnobgjmin: u32,
    #[prost(uint64, tag = "11")]
    pub add_time_ms: u64,
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(map = "string, float", tag = "1")]
    pub dynamic_values: ::std::collections::HashMap<::prost::alloc::string::String, f32>,
    #[prost(uint32, tag = "13")]
    pub pkkfndimmio: u32,
    #[prost(float, tag = "15")]
    pub life_time: f32,
    #[prost(uint32, tag = "3")]
    pub base_avatar_id: u32,
    #[prost(uint32, tag = "5")]
    pub clkbpijjaap: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityBuffInfo {
    #[prost(message, repeated, tag = "14")]
    pub buff_list: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(uint32, tag = "13")]
    pub entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Popgipmfhje {
    #[prost(uint32, tag = "9")]
    pub ionhnkbbldj: u32,
    #[prost(uint32, tag = "4")]
    pub value: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nllcojppklj {
    #[prost(string, tag = "10")]
    pub jbdgkicnbfa: ::prost::alloc::string::String,
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggichccblmd {
    #[prost(uint32, tag = "9")]
    pub hohagdafjih: u32,
    #[prost(uint32, tag = "1")]
    pub lnpijkcjdbp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneGroupInfo {
    #[prost(message, repeated, tag = "8")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    #[prost(uint32, tag = "4")]
    pub state: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dpljiejbafm {
    #[prost(uint32, tag = "10")]
    pub group_id: u32,
    #[prost(uint32, tag = "2")]
    pub state: u32,
    #[prost(bool, tag = "5")]
    pub eagphippneg: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jipkadfnhnh {
    #[prost(message, repeated, tag = "10")]
    pub ddipnlkacip: ::prost::alloc::vec::Vec<Klciikcjohp>,
    #[prost(uint32, repeated, tag = "1")]
    pub ammgadcegag: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "5")]
    pub hiokihlcnfc: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "7")]
    pub dabclennonn: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "8")]
    pub dgoigglciko: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneInfo {
    #[prost(uint32, tag = "14")]
    pub jdefjhmigii: u32,
    #[prost(uint32, tag = "2")]
    pub plane_id: u32,
    #[prost(uint32, tag = "81")]
    pub mdkmdbibnae: u32,
    #[prost(uint32, tag = "5")]
    pub jncgaingmmm: u32,
    #[prost(message, repeated, tag = "6")]
    pub entity_list: ::prost::alloc::vec::Vec<SceneEntityInfo>,
    #[prost(uint32, tag = "13")]
    pub entry_id: u32,
    #[prost(uint32, tag = "599")]
    pub nfcojigifbb: u32,
    #[prost(uint32, tag = "15")]
    pub game_mode_type: u32,
    #[prost(uint32, tag = "7")]
    pub micgnniimak: u32,
    #[prost(message, repeated, tag = "1577")]
    pub jmcamdjolnj: ::prost::alloc::vec::Vec<Dpljiejbafm>,
    #[prost(uint32, repeated, tag = "1")]
    pub adbakkbjagb: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "12")]
    pub env_buff_list: ::prost::alloc::vec::Vec<BuffInfo>,
    #[prost(message, repeated, tag = "3")]
    pub ahehcckjamg: ::prost::alloc::vec::Vec<Nllcojppklj>,
    #[prost(uint32, repeated, tag = "8")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub floor_id: u32,
    #[prost(map = "string, int32", tag = "1458")]
    pub cbphphopofk: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, tag = "1226")]
    pub ijnpccndcgi: u32,
    #[prost(message, repeated, tag = "1909")]
    pub scene_group_list: ::prost::alloc::vec::Vec<SceneGroupInfo>,
    #[prost(message, optional, tag = "1816")]
    pub cnjcegmeaap: ::core::option::Option<Jipkadfnhnh>,
    #[prost(message, repeated, tag = "4")]
    pub entity_buff_list: ::prost::alloc::vec::Vec<EntityBuffInfo>,
    #[prost(map = "uint32, message", tag = "9")]
    pub kdkoogfccbb: ::std::collections::HashMap<u32, Ggichccblmd>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityMotion {
    #[prost(uint32, tag = "11")]
    pub map_layer: u32,
    #[prost(message, optional, tag = "1")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "15")]
    pub entity_id: u32,
    #[prost(bool, tag = "8")]
    pub aaidfkgpppb: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveCsReq {
    #[prost(uint64, tag = "10")]
    pub ihnakchicdm: u64,
    #[prost(message, repeated, tag = "15")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
    #[prost(uint32, tag = "3")]
    pub entry_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScRsp {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "13")]
    pub entity_motion_list: ::prost::alloc::vec::Vec<EntityMotion>,
    #[prost(message, optional, tag = "10")]
    pub download_data: ::core::option::Option<ClientDownloadData>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneEntityMoveScNotify {
    #[prost(uint32, tag = "10")]
    pub entity_id: u32,
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "7")]
    pub entry_id: u32,
    #[prost(uint32, tag = "9")]
    pub micgnniimak: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kclfefmgigh {
    #[prost(uint32, tag = "6")]
    pub ggodlmaaigd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfmoildjodb {
    #[prost(uint32, tag = "11")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "1")]
    pub hgneiojdpoa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgbelanblab {
    #[prost(uint32, tag = "6")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub prop_state: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kncjhglklbi {
    #[prost(uint32, tag = "11")]
    pub bifppcoboce: u32,
    #[prost(enumeration = "MonsterBattleType", tag = "13")]
    pub cgoahpoehno: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdffbhnheaf {
    #[prost(float, tag = "3")]
    pub value: f32,
    #[prost(string, tag = "6")]
    pub pfmlckgckob: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fnmhaajaaek {
    #[prost(uint32, repeated, tag = "4")]
    pub bcbhaghfmhl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bkpjapjejhp {
    #[prost(string, tag = "11")]
    pub ggogccbgofo: ::prost::alloc::string::String,
    #[prost(enumeration = "SceneCastSkillType", repeated, tag = "6")]
    pub jnpbpmkhoam: ::prost::alloc::vec::Vec<i32>,
    #[prost(uint32, tag = "14")]
    pub egofdbhnple: u32,
    #[prost(uint32, repeated, tag = "7")]
    pub gcnngeanccp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "10")]
    pub ohainjgiflk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub pomhfojgchn: ::prost::alloc::vec::Vec<Jdffbhnheaf>,
    #[prost(message, optional, tag = "5")]
    pub ihapfjkmcee: ::core::option::Option<MotionInfo>,
    #[prost(uint32, tag = "15")]
    pub gbhffcbgjoc: u32,
    #[prost(uint32, tag = "9")]
    pub mkfjacifjmc: u32,
    #[prost(uint32, tag = "4")]
    pub skill_index: u32,
    #[prost(message, repeated, tag = "12")]
    pub kapkegapokf: ::prost::alloc::vec::Vec<Fnmhaajaaek>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iliogcgpcbf {
    #[prost(message, repeated, tag = "4")]
    pub bjlbgfejgfa: ::prost::alloc::vec::Vec<Kncjhglklbi>,
    #[prost(uint32, tag = "10")]
    pub gbhffcbgjoc: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njbacjfllbk {
    #[prost(uint32, tag = "11")]
    pub egofdbhnple: u32,
    #[prost(uint32, tag = "5")]
    pub gbhffcbgjoc: u32,
    #[prost(uint32, tag = "10")]
    pub skill_index: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mlpgejdgmcl {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub gbhffcbgjoc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhpdiameemj {
    #[prost(uint32, tag = "10")]
    pub gbhffcbgjoc: u32,
    #[prost(uint32, tag = "14")]
    pub hgbhbgmmokg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmdppmebold {
    #[prost(bool, tag = "3")]
    pub anhhbjmpmnl: bool,
    #[prost(uint32, tag = "14")]
    pub event_id: u32,
    #[prost(enumeration = "Camlhbegnmo", tag = "2")]
    pub nnpfabenejo: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aiglghmpbfo {
    #[prost(message, optional, tag = "12")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bblpbdkekmk {
    #[prost(enumeration = "Camlhbegnmo", tag = "15")]
    pub nnpfabenejo: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmhfnlkmmnf {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpjkmmkpnge {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoScRsp {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bgkdcahdijj {
    #[prost(enumeration = "SceneEntityBuffChangeType", tag = "11")]
    pub mgdnainpahe: i32,
    #[prost(message, optional, tag = "8")]
    pub kacgpkifjie: ::core::option::Option<BuffInfo>,
    #[prost(uint32, tag = "9")]
    pub mklbafcpmpg: u32,
    #[prost(uint32, tag = "13")]
    pub entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhbjcbdmgij {
    #[prost(message, repeated, tag = "12")]
    pub jmkhgpcnlmh: ::prost::alloc::vec::Vec<Bgkdcahdijj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmkbjdonkbe {
    #[prost(uint32, tag = "6")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub floor_id: u32,
    #[prost(uint32, tag = "15")]
    pub plane_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cblpcneeikp {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eabcbfbinbf {
    #[prost(int64, tag = "14")]
    pub dabiabbbnhd: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gaplpnfndmi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ncnclpbndjl {
    #[prost(message, optional, tag = "6")]
    pub scene: ::core::option::Option<SceneInfo>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Abdkilpbdii {
    #[prost(uint32, tag = "6")]
    pub hgkmoddpamj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njkicjcjjof {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcfdeoiocka {
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcaihcenlad {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iealhphddim {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfnlhhlpmka {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SavePointsInfoNotify {
    #[prost(int64, tag = "12")]
    pub refresh_time: i64,
    #[prost(uint32, tag = "1")]
    pub valid_times: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartCocoonStageCsReq {
    #[prost(uint32, tag = "3")]
    pub wave: u32,
    #[prost(uint32, tag = "5")]
    pub world_level: u32,
    #[prost(uint32, tag = "2")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "10")]
    pub cocoon_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StartCocoonStageScRsp {
    #[prost(uint32, tag = "11")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "15")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "12")]
    pub wave: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub battle_info: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjdhemepacp {
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(bool, tag = "13")]
    pub jkoelhljkhd: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcijkhcpjji {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Claiggdhaao {
    #[prost(bool, tag = "2")]
    pub mkhhhhahgii: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Icaeiakdfcm {
    #[prost(bool, tag = "10")]
    pub mkhhhhahgii: bool,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecfnfimfjgh {
    #[prost(uint32, tag = "8")]
    pub entity_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeiibhdgkcm {
    #[prost(uint32, tag = "4")]
    pub entity_id: u32,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edhfokfjifm {
    #[prost(uint32, tag = "13")]
    pub entity_id: u32,
    #[prost(uint32, tag = "9")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbbjoklpdgf {
    #[prost(uint32, tag = "2")]
    pub entity_id: u32,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "8")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dglpnoikfee {
    #[prost(uint32, tag = "2")]
    pub nlfonahakgb: u32,
    #[prost(uint32, tag = "15")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmkmldlnmhm {
    #[prost(bool, tag = "1")]
    pub jebneocbboe: bool,
    #[prost(uint32, tag = "11")]
    pub jbaepeglfid: u32,
    #[prost(message, repeated, tag = "13")]
    pub bafopockgkh: ::prost::alloc::vec::Vec<Dglpnoikfee>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajkldpekjda {
    #[prost(int64, tag = "10")]
    pub cbclgknhnib: i64,
    #[prost(uint32, tag = "11")]
    pub nolemebkcmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Enogbmnbgoi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfjoaaggjeh {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub klcicncmefe: ::core::option::Option<Cmkmldlnmhm>,
    #[prost(message, optional, tag = "2")]
    pub dhpbnongbac: ::core::option::Option<Ajkldpekjda>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Noilflmcfid {
    #[prost(message, optional, tag = "4")]
    pub klcicncmefe: ::core::option::Option<Cmkmldlnmhm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opfpniadbbh {
    #[prost(message, optional, tag = "3")]
    pub klcicncmefe: ::core::option::Option<Cmkmldlnmhm>,
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbhlohkcbli {
    #[prost(uint32, tag = "10")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
    #[prost(uint32, tag = "3")]
    pub plane_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpringRecoverScRsp {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub heal_pool_info: ::core::option::Option<Ajkldpekjda>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nefmieonfmh {
    #[prost(message, optional, tag = "15")]
    pub dhpbnongbac: ::core::option::Option<Ajkldpekjda>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agpcckalmid {
    #[prost(uint32, tag = "4")]
    pub prop_entity_id: u32,
    #[prost(uint32, tag = "14")]
    pub floor_id: u32,
    #[prost(uint32, tag = "12")]
    pub plane_id: u32,
    #[prost(enumeration = "AvatarType", tag = "8")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "7")]
    pub id: u32,
    #[prost(bool, tag = "6")]
    pub bopcmcgkedd: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SpringRecoverSingleAvatarScRsp {
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "2")]
    pub hp: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmeoiomalgi {
    #[prost(uint32, tag = "12")]
    pub plane_id: u32,
    #[prost(message, optional, tag = "5")]
    pub fccnkckpbjn: ::core::option::Option<Popgipmfhje>,
    #[prost(uint32, tag = "15")]
    pub floor_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pejpeakhfhj {
    #[prost(uint32, tag = "6")]
    pub entry_id: u32,
    #[prost(string, tag = "1")]
    pub jbdgkicnbfa: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onadjaenglm {
    #[prost(uint32, tag = "12")]
    pub entry_id: u32,
    #[prost(uint32, tag = "7")]
    pub group_id: u32,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbkpbgbfinl {
    #[prost(uint32, tag = "1")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goeginnoefe {
    #[prost(message, optional, tag = "13")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okgogolibcg {
    #[prost(message, optional, tag = "11")]
    pub mdnkifallep: ::core::option::Option<EntityMotion>,
    #[prost(uint32, tag = "6")]
    pub entry_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Haikklmpfhp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(uint32, tag = "7")]
    pub micgnniimak: u32,
    #[prost(message, optional, tag = "13")]
    pub mdnkifallep: ::core::option::Option<EntityMotion>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kfkniojkagj {
    #[prost(uint32, tag = "15")]
    pub nfcojigifbb: u32,
    #[prost(uint32, tag = "7")]
    pub ijnpccndcgi: u32,
    #[prost(uint32, tag = "3")]
    pub entry_id: u32,
    #[prost(uint32, tag = "9")]
    pub klgdfdlhelh: u32,
    #[prost(bool, tag = "2")]
    pub eclblfpbjlf: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pggcmoobcpd {
    #[prost(bool, tag = "4")]
    pub dngkkklpnjc: bool,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(bool, tag = "11")]
    pub eclblfpbjlf: bool,
    #[prost(uint32, tag = "13")]
    pub nfcojigifbb: u32,
    #[prost(uint32, tag = "10")]
    pub ijnpccndcgi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSceneByServerScNotify {
    #[prost(message, optional, tag = "14")]
    pub lineup: ::core::option::Option<LineupInfo>,
    #[prost(enumeration = "EnterSceneReason", tag = "11")]
    pub mgdnainpahe: i32,
    #[prost(message, optional, tag = "7")]
    pub scene: ::core::option::Option<SceneInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdacikpcknf {
    #[prost(message, optional, tag = "10")]
    pub mknfcmflagf: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "9")]
    pub donbbmfeogl: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "6")]
    pub gffofnglfgm: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "3")]
    pub kkbnigjgnlg: ::core::option::Option<ItemList>,
}
/// ? GetSceneMapInfoCsReq @
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dngikkglnie {
    #[prost(uint32, tag = "14")]
    pub nfcojigifbb: u32,
    #[prost(uint32, tag = "12")]
    pub cjkoijlahho: u32,
    #[prost(bool, tag = "6")]
    pub edpaljjjgki: bool,
    #[prost(uint32, repeated, tag = "1")]
    pub ojcmolaapaf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egafcnjjgni {
    #[prost(uint32, tag = "4")]
    pub pfbnanpcdjh: u32,
    #[prost(uint32, tag = "3")]
    pub state: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kddobjmfahm {
    #[prost(bool, tag = "2")]
    pub hllognagalg: bool,
    #[prost(uint32, tag = "13")]
    pub group_id: u32,
    #[prost(int64, tag = "9")]
    pub llgcclalmmi: i64,
    #[prost(uint32, repeated, tag = "5")]
    pub didcplpbndg: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhofdkfidee {
    #[prost(enumeration = "MapInfoChestType", tag = "4")]
    pub dpdgioeelfc: i32,
    #[prost(uint32, tag = "9")]
    pub jlbogmgmpmj: u32,
    #[prost(uint32, tag = "12")]
    pub hmjcmhjjlaf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdpnliodapd {
    #[prost(uint32, tag = "7")]
    pub aalknkbcjkm: u32,
    #[prost(uint32, tag = "13")]
    pub ocfjgocmiem: u32,
    #[prost(uint32, tag = "14")]
    pub slot: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbpkfjbeilj {
    #[prost(map = "string, int32", tag = "8")]
    pub cbphphopofk: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
    #[prost(uint32, repeated, tag = "11")]
    pub unlock_teleport_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1")]
    pub eaeoionfehm: ::prost::alloc::vec::Vec<Kddobjmfahm>,
    #[prost(uint32, tag = "9")]
    pub entry_id: u32,
    #[prost(message, repeated, tag = "7")]
    pub ligbjpkffdg: ::prost::alloc::vec::Vec<Nhofdkfidee>,
    #[prost(uint32, repeated, tag = "10")]
    pub lighten_section_list: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub kpbfldbadan: u32,
    #[prost(uint32, tag = "3")]
    pub cjkoijlahho: u32,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "2")]
    pub bnmdbicanbn: ::prost::alloc::vec::Vec<Mdpnliodapd>,
    #[prost(uint32, tag = "12")]
    pub mdkmdbibnae: u32,
    #[prost(message, repeated, tag = "5")]
    pub hcllineafkm: ::prost::alloc::vec::Vec<Egafcnjjgni>,
    #[prost(uint32, tag = "13")]
    pub nfcojigifbb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anjofnkhlfp {
    #[prost(bool, tag = "10")]
    pub edpaljjjgki: bool,
    #[prost(message, repeated, tag = "5")]
    pub mdfplnoljnf: ::prost::alloc::vec::Vec<Kbpkfjbeilj>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gninhljadoj {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ialhacijhac {
    #[prost(uint32, tag = "7")]
    pub fomcmdmpdcg: u32,
    #[prost(uint32, tag = "13")]
    pub aopeodgodff: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmkebfhjljj {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdcmmopccai {
    #[prost(enumeration = "GameplayCounterUpdateReason", tag = "11")]
    pub mgdnainpahe: i32,
    #[prost(uint32, tag = "8")]
    pub aopeodgodff: u32,
    #[prost(uint32, tag = "15")]
    pub hohagdafjih: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lipmdimfnak {
    #[prost(uint32, tag = "12")]
    pub aopeodgodff: u32,
    #[prost(uint32, tag = "6")]
    pub paiihddnnjg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lneeenlhdnn {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfljhhpaccd {
    #[prost(map = "string, int32", tag = "5")]
    pub fgiifgkokak: ::std::collections::HashMap<::prost::alloc::string::String, i32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Odoaidcdjoj {
    #[prost(uint32, repeated, tag = "12")]
    pub ojcmolaapaf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Impbiacohfd {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub unlock_teleport_list: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcnpnnobhko {
    #[prost(message, optional, tag = "5")]
    pub mjpchdidahj: ::core::option::Option<SceneEntityInfo>,
    #[prost(uint32, tag = "3")]
    pub cffpbnfgmmj: u32,
    #[prost(uint32, tag = "14")]
    pub klmchlokeho: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceafkhfcdif {
    #[prost(message, repeated, tag = "7")]
    pub ogcjllmfnob: ::prost::alloc::vec::Vec<Gcnpnnobhko>,
    #[prost(enumeration = "SceneGroupRefreshType", tag = "14")]
    pub iehhofifjfo: i32,
    #[prost(uint32, tag = "9")]
    pub state: u32,
    #[prost(uint32, tag = "12")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iolnbeiolkh {
    #[prost(message, repeated, tag = "12")]
    pub hgocilongbl: ::prost::alloc::vec::Vec<Ceafkhfcdif>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iggijbjppoc {
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
    #[prost(uint32, tag = "4")]
    pub entry_id: u32,
    #[prost(uint32, tag = "6")]
    pub nfbjlfcfijo: u32,
    #[prost(uint32, tag = "3")]
    pub ihhhgodkjep: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngkpjjcampj {
    #[prost(message, optional, tag = "8")]
    pub podpafooomg: ::core::option::Option<Iggijbjppoc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nohhghgiajp {
    #[prost(message, optional, tag = "11")]
    pub podpafooomg: ::core::option::Option<Iggijbjppoc>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fefkpkpanml {
    #[prost(message, optional, tag = "9")]
    pub podpafooomg: ::core::option::Option<Iggijbjppoc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfjappjdmnb {
    #[prost(uint32, tag = "12")]
    pub plane_id: u32,
    #[prost(uint32, tag = "6")]
    pub floor_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Geomcaafdmf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ikdmhhahhno {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "9")]
    pub eljgieonbde: ::prost::alloc::vec::Vec<Gfjappjdmnb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lfacadlnjod {
    #[prost(message, repeated, tag = "11")]
    pub eljgieonbde: ::prost::alloc::vec::Vec<Gfjappjdmnb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebjolkoihmc {
    #[prost(string, tag = "5")]
    pub jjpkngpgmci: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub iapjdabceeh: u32,
    #[prost(message, optional, tag = "14")]
    pub cdgihicglml: ::core::option::Option<MotionInfo>,
    #[prost(uint32, repeated, tag = "15")]
    pub cblnijmlgch: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pkhccikoidf {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub iapjdabceeh: u32,
    #[prost(string, tag = "4")]
    pub jjpkngpgmci: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub gkobfcianlo: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gndplhdfmpj {
    #[prost(uint32, tag = "6")]
    pub iapjdabceeh: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub cblnijmlgch: ::prost::alloc::vec::Vec<u32>,
    #[prost(string, tag = "8")]
    pub jjpkngpgmci: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dbmebneafkh {
    #[prost(uint32, repeated, tag = "6")]
    pub bcbhaghfmhl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhphdmehbjk {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "14")]
    pub bcbhaghfmhl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aliilpfckfp {
    #[prost(uint32, repeated, tag = "13")]
    pub ojcmolaapaf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbfgfkjfgmk {
    #[prost(uint32, tag = "7")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "14")]
    pub wave: u32,
    #[prost(uint32, tag = "6")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcdijdennhg {
    #[prost(uint32, tag = "13")]
    pub wave: u32,
    #[prost(message, optional, tag = "10")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "9")]
    pub cocoon_id: u32,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cmipadfnpch {
    #[prost(uint32, tag = "14")]
    pub world_level: u32,
    #[prost(uint32, tag = "13")]
    pub hflfdkpgbaf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pinooogpjcp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "5")]
    pub hflfdkpgbaf: u32,
    #[prost(uint32, tag = "14")]
    pub world_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jnmofmlpiga {
    #[prost(uint32, tag = "12")]
    pub klgdfdlhelh: u32,
    #[prost(uint32, tag = "13")]
    pub entry_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgcbdioneib {
    #[prost(uint32, tag = "15")]
    pub aafghffligc: u32,
    #[prost(bytes = "vec", tag = "5")]
    pub cpiogbbagop: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olhefkbfbmo {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kiljclofdpc {
    #[prost(message, repeated, tag = "9")]
    pub cbonjopecdo: ::prost::alloc::vec::Vec<Jgcbdioneib>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmmodkjhodb {
    #[prost(uint32, tag = "3")]
    pub aafghffligc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Akakmafmdll {
    #[prost(message, optional, tag = "5")]
    pub onojjkcgnno: ::core::option::Option<Jgcbdioneib>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fcakjbgdhpj {
    #[prost(message, optional, tag = "8")]
    pub onojjkcgnno: ::core::option::Option<Jgcbdioneib>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cachhkldamk {
    #[prost(uint32, tag = "5")]
    pub aafghffligc: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Shop {
    #[prost(message, repeated, tag = "5")]
    pub goods_list: ::prost::alloc::vec::Vec<Goods>,
    #[prost(int64, tag = "8")]
    pub end_time: i64,
    #[prost(uint32, tag = "6")]
    pub city_exp: u32,
    #[prost(int64, tag = "3")]
    pub begin_time: i64,
    #[prost(uint64, tag = "14")]
    pub city_taken_level_reward: u64,
    #[prost(uint32, tag = "1")]
    pub shop_id: u32,
    #[prost(uint32, tag = "10")]
    pub city_level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Goods {
    #[prost(uint32, tag = "15")]
    pub item_id: u32,
    #[prost(uint32, tag = "13")]
    pub goods_id: u32,
    #[prost(int64, tag = "14")]
    pub begin_time: i64,
    #[prost(int64, tag = "3")]
    pub end_time: i64,
    #[prost(uint32, tag = "11")]
    pub buy_times: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eldffdimhfb {
    #[prost(uint32, tag = "13")]
    pub bkiegfkjheo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShopListScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "15")]
    pub shop_list: ::prost::alloc::vec::Vec<Shop>,
    #[prost(uint32, tag = "13")]
    pub shop_type: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hklehcgbkod {
    #[prost(uint32, tag = "8")]
    pub fgohomljegm: u32,
    #[prost(uint32, tag = "15")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "13")]
    pub bfbjhchbplg: u32,
    #[prost(uint32, tag = "3")]
    pub ififlmjnmdk: u32,
    #[prost(uint32, tag = "1")]
    pub idcigdfjabi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BuyGoodsScRsp {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub goods_id: u32,
    #[prost(uint32, tag = "10")]
    pub goods_buy_times: u32,
    #[prost(message, optional, tag = "6")]
    pub return_item_list: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "15")]
    pub shop_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdhdahieeeb {
    #[prost(uint32, tag = "4")]
    pub level: u32,
    #[prost(uint32, tag = "5")]
    pub fgohomljegm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeCityShopRewardScRsp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(uint32, tag = "10")]
    pub shop_id: u32,
    #[prost(message, optional, tag = "2")]
    pub reward: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "11")]
    pub level: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CityShopInfoScNotify {
    #[prost(uint32, tag = "9")]
    pub shop_id: u32,
    #[prost(uint32, tag = "10")]
    pub exp: u32,
    #[prost(uint32, tag = "3")]
    pub level: u32,
    #[prost(uint64, tag = "1")]
    pub taken_level_reward: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnlooddmfgf {
    #[prost(uint32, tag = "10")]
    pub onppolklhlo: u32,
    #[prost(uint32, repeated, tag = "12")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub djjmhikpmjl: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub noeblakanjk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub unique_id: u32,
    #[prost(bool, tag = "3")]
    pub mljedmgclmd: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dddldidlfaf {
    #[prost(uint32, tag = "13")]
    pub denpgbgmcaa: u32,
    #[prost(uint32, tag = "9")]
    pub onppolklhlo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bheiifaflda {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cegbkojghag {
    #[prost(uint32, repeated, tag = "7")]
    pub kajmafehicc: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "3")]
    pub nbijkgoknob: ::prost::alloc::vec::Vec<Dddldidlfaf>,
    #[prost(message, repeated, tag = "11")]
    pub cnjokhoofkk: ::prost::alloc::vec::Vec<Cnlooddmfgf>,
    #[prost(uint32, repeated, tag = "1")]
    pub nmmofimpcko: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub cmbjdeolkmj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "6")]
    pub mhceoilgmca: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub ofofbdcmmgd: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub gmddehifoaf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohhockpilao {
    #[prost(uint32, repeated, tag = "15")]
    pub kmehfinblhe: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "4")]
    pub goppphjombl: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdpnjbnanji {
    #[prost(bool, tag = "14")]
    pub pinmacpefgd: bool,
    #[prost(message, repeated, tag = "13")]
    pub lcjfgcdbgim: ::prost::alloc::vec::Vec<Dddldidlfaf>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub mhndbenogid: ::core::option::Option<Cnlooddmfgf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccpnhkllkfl {
    #[prost(uint32, tag = "9")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "15")]
    pub unique_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhheidaoold {
    #[prost(message, optional, tag = "10")]
    pub odklnlidcfj: ::core::option::Option<Cnlooddmfgf>,
    #[prost(message, repeated, tag = "5")]
    pub lcjfgcdbgim: ::prost::alloc::vec::Vec<Dddldidlfaf>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(bool, tag = "2")]
    pub pinmacpefgd: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lihfhopeipf {
    #[prost(uint32, tag = "2")]
    pub kcefcohkanf: u32,
    #[prost(uint32, tag = "6")]
    pub bbdcjpocecg: u32,
    #[prost(uint32, tag = "15")]
    pub op_type: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Naodjnndgkp {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub gmddehifoaf: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hjkhdlnkajb {
    #[prost(uint32, repeated, tag = "14")]
    pub bjgpgojakoo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gcpdecnpflh {
    #[prost(uint32, repeated, tag = "10")]
    pub npfgpoiinha: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Llleahfmcmh {
    #[prost(bool, tag = "2")]
    pub hfioieaclph: bool,
    #[prost(bool, tag = "7")]
    pub pinmacpefgd: bool,
    #[prost(message, repeated, tag = "14")]
    pub namngacmioe: ::prost::alloc::vec::Vec<Cnlooddmfgf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fenjjehochb {
    #[prost(uint32, tag = "7")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Opjmmjidgjh {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "13")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ghkhmcebggb {
    #[prost(uint32, tag = "3")]
    pub obdgbookelm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekbiohgpkbg {
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "9")]
    pub obdgbookelm: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aneollgbcci {
    #[prost(uint32, tag = "15")]
    pub hnhnaaliflo: u32,
    #[prost(uint32, tag = "4")]
    pub iidfjhpdkmn: u32,
    #[prost(uint32, tag = "6")]
    pub cdigdpfegic: u32,
    #[prost(uint32, tag = "2")]
    pub group_id: u32,
    #[prost(bool, tag = "12")]
    pub mkbhpjnpekj: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkhfkjhddnk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oeaacljemca {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "10")]
    pub emfamjcdggh: ::prost::alloc::vec::Vec<Aneollgbcci>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oodgaoipjjn {
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Njdbokodjbe {
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Oodgaoipjjn>,
    #[prost(uint32, tag = "6")]
    pub odgoeojelah: u32,
    #[prost(uint32, tag = "8")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpjdldlikmj {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(uint32, tag = "4")]
    pub odgoeojelah: u32,
    #[prost(uint32, tag = "3")]
    pub group_id: u32,
    #[prost(message, optional, tag = "8")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adjidagpfff {
    #[prost(message, optional, tag = "1")]
    pub jhkemkimlgi: ::core::option::Option<Aneollgbcci>,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jloogcmomgm {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpbmbeajjck {
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "6")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "15")]
    pub iiabgecpafd: u32,
    #[prost(uint32, repeated, tag = "3")]
    pub flchlighbkm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gnjjdhmcdib {
    #[prost(uint32, tag = "12")]
    pub iiabgecpafd: u32,
    #[prost(uint32, repeated, tag = "2")]
    pub flchlighbkm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "13")]
    pub okhflbihfhm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ggglmgmblmb {
    #[prost(uint32, tag = "1")]
    pub iiabgecpafd: u32,
    #[prost(uint32, tag = "5")]
    pub kkdinpdmodn: u32,
    #[prost(enumeration = "Kndiidhnfel", tag = "6")]
    pub cfjdmlpfdoc: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Impfkfgcigd {
    #[prost(uint32, repeated, tag = "9")]
    pub ljbibineljp: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "11")]
    pub ccnkclcogmc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StrongChallengeAvatar {
    #[prost(enumeration = "AvatarType", tag = "3")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "8")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iephmhedddd {
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
    #[prost(uint32, repeated, tag = "5")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgmbccdmfio {
    #[prost(uint32, tag = "4")]
    pub gakmanenkmh: u32,
    #[prost(uint32, tag = "7")]
    pub dcjapmiemfg: u32,
    #[prost(message, optional, tag = "1")]
    pub eijcednnlih: ::core::option::Option<Iephmhedddd>,
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(uint32, tag = "5")]
    pub fjlnncjahng: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hokldgknmmd {
    #[prost(map = "uint32, message", tag = "7")]
    pub beafdhnmifn: ::std::collections::HashMap<u32, Dgmbccdmfio>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldfgdgpoceb {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oggoadohmfl {
    #[prost(message, optional, tag = "7")]
    pub pbjndhogpeh: ::core::option::Option<Hokldgknmmd>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oealnplnfjf {
    #[prost(uint32, tag = "6")]
    pub stage_id: u32,
    #[prost(message, repeated, tag = "9")]
    pub avatar_list: ::prost::alloc::vec::Vec<StrongChallengeAvatar>,
    #[prost(uint32, repeated, tag = "8")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ecidbkaabdp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gaaiadienkl {
    #[prost(uint32, tag = "2")]
    pub kaijilgbjlc: u32,
    #[prost(uint32, tag = "4")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "3")]
    pub gakmanenkmh: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
    #[prost(uint32, tag = "9")]
    pub iklhngoamga: u32,
    #[prost(uint32, tag = "14")]
    pub fcadgcfhlce: u32,
    #[prost(uint32, tag = "10")]
    pub inncjmgfgip: u32,
    #[prost(enumeration = "BattleEndStatus", tag = "1")]
    pub end_status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mnbmoppbcoo {
    #[prost(uint32, tag = "8")]
    pub pamafmppefi: u32,
    #[prost(uint32, tag = "1")]
    pub odgoeojelah: u32,
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jfbafnlfkfc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ahghhhilcgm {
    #[prost(message, repeated, tag = "12")]
    pub jgdennmdfko: ::prost::alloc::vec::Vec<Mnbmoppbcoo>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldpldodnfph {
    #[prost(enumeration = "AvatarType", tag = "9")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "10")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hgbifppeoia {
    #[prost(uint32, tag = "11")]
    pub group_id: u32,
    #[prost(message, repeated, tag = "1")]
    pub avatar_list: ::prost::alloc::vec::Vec<Ldpldodnfph>,
    #[prost(message, optional, tag = "5")]
    pub nknmlnkcpil: ::core::option::Option<Ldpldodnfph>,
    #[prost(uint32, tag = "9")]
    pub odgoeojelah: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdpdhkbeikg {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
    #[prost(message, optional, tag = "2")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "11")]
    pub odgoeojelah: u32,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nmcdhgllhnb {
    #[prost(uint32, tag = "13")]
    pub pamafmppefi: u32,
    #[prost(uint32, tag = "2")]
    pub odgoeojelah: u32,
    #[prost(uint32, tag = "6")]
    pub foflcmnhakn: u32,
    #[prost(uint32, tag = "4")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lekclmamabb {
    #[prost(message, optional, tag = "11")]
    pub lfleifodebe: ::core::option::Option<Blbpcmemjnc>,
    #[prost(message, optional, tag = "7")]
    pub likjgjnclen: ::core::option::Option<Ofkendbkcbl>,
    #[prost(message, optional, tag = "1")]
    pub jfbodfkjcdl: ::core::option::Option<Fhmhhefpgin>,
    #[prost(message, optional, tag = "10")]
    pub pbgelhmjcoa: ::core::option::Option<Cnifagkeclj>,
    #[prost(uint32, repeated, tag = "14")]
    pub mjldomhofmk: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub hbnoljogigk: u32,
    #[prost(message, optional, tag = "4")]
    pub kphnlieefmi: ::core::option::Option<Gkjmkhadbhm>,
    #[prost(message, optional, tag = "2")]
    pub hhapkchnbea: ::core::option::Option<Anmohklghla>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anmohklghla {
    #[prost(uint32, tag = "14")]
    pub plpebgdmkbo: u32,
    #[prost(uint32, tag = "1")]
    pub hjmjbiijegj: u32,
    #[prost(uint32, repeated, tag = "5")]
    pub jcodcgklojn: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ofkendbkcbl {
    #[prost(uint32, repeated, tag = "6")]
    pub megpbceegbg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "10")]
    pub ijnpccndcgi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmmbihcfkoj {
    #[prost(uint32, tag = "3")]
    pub value: u32,
    #[prost(enumeration = "Ehamhholmlo", tag = "11")]
    pub cpnkdpcablk: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cnifagkeclj {
    #[prost(uint32, tag = "10")]
    pub fjeencfpjph: u32,
    #[prost(uint32, tag = "1")]
    pub gmoccampfnk: u32,
    #[prost(message, repeated, tag = "7")]
    pub bndfcikelgn: ::prost::alloc::vec::Vec<Gmmbihcfkoj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ienjhcggjig {
    #[prost(uint32, tag = "9")]
    pub level: u32,
    #[prost(uint32, tag = "10")]
    pub ocnjbebhbgo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhmhhefpgin {
    #[prost(message, repeated, tag = "5")]
    pub nhpllohnnpa: ::prost::alloc::vec::Vec<Ienjhcggjig>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gkjmkhadbhm {
    #[prost(uint32, tag = "1325")]
    pub mamcoaebgbi: u32,
    #[prost(message, optional, tag = "9")]
    pub mldigofchdf: ::core::option::Option<Dfnhmidnfih>,
    #[prost(message, optional, tag = "7")]
    pub hoihjilfgna: ::core::option::Option<Gfkifjlgbji>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cggmebdeebe {
    #[prost(uint32, tag = "4")]
    pub begkgjcmjkh: u32,
    #[prost(uint32, tag = "14")]
    pub hccjhiilppi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfnhmidnfih {
    #[prost(enumeration = "Kkigfnbambb", tag = "7")]
    pub jijilpikghc: i32,
    #[prost(message, repeated, tag = "13")]
    pub kekabacindh: ::prost::alloc::vec::Vec<Cggmebdeebe>,
    #[prost(uint32, repeated, tag = "4")]
    pub mibpnbjglgc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfkifjlgbji {
    #[prost(uint32, tag = "14")]
    pub bddndfifhog: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blbpcmemjnc {
    #[prost(message, optional, tag = "5")]
    pub blmeadkkape: ::core::option::Option<Pnkhecjaaoi>,
    #[prost(message, optional, tag = "10")]
    pub iemgakcdajk: ::core::option::Option<Ephhcckomlk>,
    #[prost(message, optional, tag = "4")]
    pub hckfijnmehb: ::core::option::Option<Nfekediapge>,
    #[prost(message, optional, tag = "3")]
    pub idogbgmibhn: ::core::option::Option<Infppjcemha>,
    #[prost(message, optional, tag = "14")]
    pub ahfnfkkihaj: ::core::option::Option<Mihpphicnih>,
    #[prost(message, optional, tag = "13")]
    pub jjhgennbaig: ::core::option::Option<Onjhnhikeoc>,
    #[prost(message, optional, tag = "6")]
    pub ldfmdjoicah: ::core::option::Option<Dnokdemkpli>,
    #[prost(message, optional, tag = "1")]
    pub npmjgigdmag: ::core::option::Option<Cbgnjfgbgee>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pnkhecjaaoi {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ephhcckomlk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfekediapge {
    #[prost(uint32, tag = "12")]
    pub joeicfcdnem: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Infppjcemha {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mihpphicnih {
    #[prost(uint32, tag = "15")]
    pub hgpelgifadf: u32,
    #[prost(bool, tag = "11")]
    pub cmjoambdell: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onjhnhikeoc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dnokdemkpli {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbgnjfgbgee {
    #[prost(uint32, tag = "7")]
    pub hgpelgifadf: u32,
    #[prost(bool, tag = "15")]
    pub pabpdlekjcp: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgkolnobmke {
    #[prost(message, optional, tag = "5")]
    pub mkgoabedjeh: ::core::option::Option<Piknebbjogb>,
    #[prost(enumeration = "Nmabognbiph", tag = "4")]
    pub gnfpnbgacdf: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piknebbjogb {
    #[prost(message, optional, tag = "1")]
    pub geplglcbnpd: ::core::option::Option<Aeamblofmpi>,
    #[prost(message, optional, tag = "13")]
    pub bkkmplogidp: ::core::option::Option<Iogbidfkhpm>,
    #[prost(message, optional, tag = "5")]
    pub nljpopadalj: ::core::option::Option<Iogbidfkhpm>,
    #[prost(message, optional, tag = "7")]
    pub cfjdpnoebmc: ::core::option::Option<Bbcapkmgaea>,
    #[prost(message, optional, tag = "11")]
    pub doipafkjfhh: ::core::option::Option<Caiajmhebpe>,
    #[prost(message, optional, tag = "12")]
    pub agmonjkadfn: ::core::option::Option<Mihpphicnih>,
    #[prost(message, optional, tag = "14")]
    pub kfgeokefamb: ::core::option::Option<Lpdohkmgbfm>,
    #[prost(uint32, tag = "10")]
    pub adbgcdehnln: u32,
    #[prost(uint32, tag = "1519")]
    pub fjeencfpjph: u32,
    #[prost(message, optional, tag = "871")]
    pub aimpielkcep: ::core::option::Option<Cbgnjfgbgee>,
    #[prost(message, optional, tag = "1686")]
    pub leimjcdlpkb: ::core::option::Option<Onjhnhikeoc>,
    #[prost(uint32, tag = "1038")]
    pub kdbkiggpfjk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lpdohkmgbfm {
    #[prost(uint32, tag = "4")]
    pub joeicfcdnem: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aeamblofmpi {
    #[prost(enumeration = "Ehamhholmlo", tag = "6")]
    pub cpnkdpcablk: i32,
    #[prost(uint32, tag = "13")]
    pub dhchppbnfeg: u32,
    #[prost(uint32, tag = "7")]
    pub dcedopcicik: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Iogbidfkhpm {
    #[prost(uint32, tag = "2")]
    pub dhchppbnfeg: u32,
    #[prost(uint32, tag = "13")]
    pub dcedopcicik: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbcapkmgaea {
    #[prost(uint32, tag = "15")]
    pub level: u32,
    #[prost(uint32, tag = "2")]
    pub ocnjbebhbgo: u32,
    #[prost(uint32, tag = "3")]
    pub fmpkgkkeelb: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caiajmhebpe {
    #[prost(uint32, tag = "10")]
    pub hbnoljogigk: u32,
    #[prost(message, optional, tag = "2")]
    pub ppgoielepbp: ::core::option::Option<Gkjmkhadbhm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bficmhohfpf {
    #[prost(uint32, tag = "1")]
    pub hgpelgifadf: u32,
    #[prost(bool, tag = "2")]
    pub cmjoambdell: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cghamdopejg {
    #[prost(message, repeated, tag = "13")]
    pub lhcalbfcfjl: ::prost::alloc::vec::Vec<Lgkolnobmke>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dgipcmolhdc {
    #[prost(uint32, tag = "4")]
    pub progress: u32,
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pncgfdodfbj {
    #[prost(message, repeated, tag = "5")]
    pub pmlhjpikfne: ::prost::alloc::vec::Vec<Dgipcmolhdc>,
    #[prost(uint32, repeated, tag = "4")]
    pub hhegkljjdol: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdinmlkbghf {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oepndhlaocj {
    #[prost(uint32, repeated, tag = "4")]
    pub megpbceegbg: ::prost::alloc::vec::Vec<u32>,
    #[prost(bool, tag = "14")]
    pub hfgdfjlfhll: bool,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub iffefihhaod: u32,
    #[prost(message, optional, tag = "11")]
    pub hfcakgghnim: ::core::option::Option<Lekclmamabb>,
    #[prost(uint32, repeated, tag = "9")]
    pub dbjocgbpkem: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub nacefnlkjek: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "10")]
    pub bdaldfbhcjl: ::core::option::Option<Pncgfdodfbj>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmpaedocmhb {
    #[prost(uint32, repeated, tag = "11")]
    pub pmcffigbbca: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "5")]
    pub gkhjdaocipm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hhmcknhhjkd {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "4")]
    pub pmcffigbbca: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Memoccbcknp {
    #[prost(enumeration = "Kkigfnbambb", tag = "2")]
    pub dfopbnjpmab: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Biccoplpgcb {
    #[prost(bool, tag = "5")]
    pub oiolgbomcbb: bool,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ohfjifnacak {
    #[prost(uint32, tag = "6")]
    pub ojkjbeilgdc: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mbkalfaemic {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceneghbolla {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gibceehbdhp {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aidiofhcdpc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Igpghakolin {
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fjmhhaahmfk {
    #[prost(uint32, tag = "10")]
    pub hgnfloilneg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plmjgmfnamh {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub hgnfloilneg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agmlhcjehnp {
    #[prost(uint32, tag = "9")]
    pub ijnpccndcgi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nomomdajgjp {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub hfcakgghnim: ::core::option::Option<Lekclmamabb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gchmilhlfik {
    #[prost(uint32, tag = "1")]
    pub hgpelgifadf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mhplggpbphh {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub hgpelgifadf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmbfnmhknfe {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eeeiakoijdp {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mfldbdcofoa {
    #[prost(message, optional, tag = "8")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(enumeration = "Depohhphajh", tag = "11")]
    pub mgdnainpahe: i32,
    #[prost(uint32, tag = "5")]
    pub bfhblojhfbn: u32,
    #[prost(uint32, tag = "2")]
    pub kmlmaidhiid: u32,
    #[prost(uint32, tag = "12")]
    pub ijnpccndcgi: u32,
    #[prost(uint32, tag = "13")]
    pub ppgoielepbp: u32,
    #[prost(uint32, repeated, tag = "9")]
    pub gapieppjlaa: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "15")]
    pub bdnbfapkglb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmhlacoghih {
    #[prost(message, repeated, tag = "13")]
    pub pmlhjpikfne: ::prost::alloc::vec::Vec<Dgipcmolhdc>,
    #[prost(uint32, repeated, tag = "10")]
    pub hhegkljjdol: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jmdpmflhhji {
    #[prost(uint32, tag = "6")]
    pub pflbmbdfmoa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caljhhoopfm {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(uint32, tag = "12")]
    pub pflbmbdfmoa: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcjhagmagmg {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bdiokbdhahk {
    #[prost(message, optional, tag = "7")]
    pub hfcakgghnim: ::core::option::Option<Lekclmamabb>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cgionkcjglk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkfdpmdlmhf {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "2")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fplmkenpnjj {
    #[prost(message, repeated, tag = "10")]
    pub egjnanlfing: ::prost::alloc::vec::Vec<Gmmbihcfkoj>,
    #[prost(uint32, tag = "13")]
    pub feolddnidjp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjkiikoohdi {
    #[prost(uint32, tag = "8")]
    pub ijnpccndcgi: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkbnigandmh {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub hfcakgghnim: ::core::option::Option<Lekclmamabb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbeomioccmo {
    #[prost(uint32, tag = "11")]
    pub hgnfloilneg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gikfodcelhm {
    #[prost(uint32, tag = "15")]
    pub hgnfloilneg: u32,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kkohobkjepb {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hmkelhaiieo {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dfilomffafd {
    #[prost(uint32, tag = "13")]
    pub pnoolmohieh: u32,
    #[prost(uint32, tag = "6")]
    pub stamina: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Amdcchadhnj {
    #[prost(message, repeated, tag = "14")]
    pub djjdncbpmfk: ::prost::alloc::vec::Vec<Ilmpdolbflp>,
    #[prost(string, tag = "13")]
    pub cpkikinabfj: ::prost::alloc::string::String,
    #[prost(bool, tag = "7")]
    pub kdpdlgbfimd: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgigkpibcid {
    #[prost(message, repeated, tag = "10")]
    pub avatar_list: ::prost::alloc::vec::Vec<Avatar>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oiofbfhdfci {
    #[prost(message, repeated, tag = "7")]
    pub goojfjoomdc: ::prost::alloc::vec::Vec<Dlompnobmja>,
    #[prost(uint32, repeated, tag = "10")]
    pub ipodiiadolh: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "6")]
    pub ommnpnbabhn: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "12")]
    pub hjnfpofkanm: ::prost::alloc::vec::Vec<Mission>,
    #[prost(message, repeated, tag = "5")]
    pub mapjkehplbn: ::prost::alloc::vec::Vec<Ihgeeangifc>,
    #[prost(uint32, repeated, tag = "9")]
    pub dgoigglciko: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1")]
    pub limpnlbchpl: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Anfldllfjhp {
    #[prost(uint32, repeated, tag = "13")]
    pub nloponhbgod: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "8")]
    pub mkbbddpdmoi: ::prost::alloc::vec::Vec<Mission>,
    #[prost(uint32, repeated, tag = "7")]
    pub gogjmmkhilb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbpblopaocm {
    #[prost(uint32, repeated, tag = "4")]
    pub kmfpienacdg: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "12")]
    pub bcedhodkdna: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fflpjlakgim {
    #[prost(message, optional, tag = "4")]
    pub basic_info: ::core::option::Option<PlayerBasicInfo>,
    #[prost(message, repeated, tag = "7")]
    pub relic_list: ::prost::alloc::vec::Vec<Relic>,
    #[prost(message, repeated, tag = "5")]
    pub equipment_list: ::prost::alloc::vec::Vec<Equipment>,
    #[prost(message, repeated, tag = "2")]
    pub deadfemndnk: ::prost::alloc::vec::Vec<Ipcffjhaijg>,
    #[prost(message, optional, tag = "9")]
    pub melkjffjnkb: ::core::option::Option<Oiofbfhdfci>,
    #[prost(message, repeated, tag = "345")]
    pub flnjichokac: ::prost::alloc::vec::Vec<Material>,
    #[prost(message, repeated, tag = "1")]
    pub pnlbagbglfd: ::prost::alloc::vec::Vec<Eejpmepikga>,
    #[prost(uint32, repeated, tag = "8")]
    pub emfekeedafc: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, repeated, tag = "1546")]
    pub mjbalomkgdg: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, optional, tag = "13")]
    pub dbnddbjfikl: ::core::option::Option<Anfldllfjhp>,
    #[prost(message, repeated, tag = "1325")]
    pub cbhiiikinol: ::prost::alloc::vec::Vec<Nfccnkngbke>,
    #[prost(message, optional, tag = "10")]
    pub egbapniokip: ::core::option::Option<Mgigkpibcid>,
    #[prost(message, repeated, tag = "1592")]
    pub mongepojhkd: ::prost::alloc::vec::Vec<Jnicjgmnafm>,
    #[prost(message, optional, tag = "1273")]
    pub mkijkaoaokm: ::core::option::Option<Amdcchadhnj>,
    #[prost(uint32, tag = "1522")]
    pub igcimdmbdfa: u32,
    #[prost(message, optional, tag = "3")]
    pub pbppjohlbad: ::core::option::Option<Dfilomffafd>,
    #[prost(message, repeated, tag = "1100")]
    pub pdljebofmep: ::prost::alloc::vec::Vec<Dejjkifldfb>,
    #[prost(message, repeated, tag = "14")]
    pub egmlhakbkmc: ::prost::alloc::vec::Vec<Material>,
    #[prost(uint32, repeated, tag = "12")]
    pub diocdcpkolk: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "1834")]
    pub epdnicajoli: ::prost::alloc::vec::Vec<MultiPathAvatarInfo>,
    #[prost(message, optional, tag = "969")]
    pub ilcelhlkamj: ::core::option::Option<ItemList>,
    #[prost(message, optional, tag = "1221")]
    pub gigmmbhcdij: ::core::option::Option<Cbpblopaocm>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apmclbiejpn {
    #[prost(uint32, tag = "8")]
    pub pnigjhppmln: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hncebojkknh {
    #[prost(uint32, repeated, tag = "4")]
    pub ombidcbhbod: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "14")]
    pub pnigjhppmln: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjbhlbkodjk {
    #[prost(uint32, tag = "6")]
    pub hcjlnnfiogc: u32,
    #[prost(message, optional, tag = "2")]
    pub hhakfcdngok: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jdmnghmikgh {
    #[prost(uint32, tag = "1")]
    pub hcjlnnfiogc: u32,
    #[prost(message, optional, tag = "7")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gpjfibhdkhh {
    #[prost(uint32, repeated, tag = "14")]
    pub knncoohambc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caelfpofmmj {
    #[prost(bool, tag = "1")]
    pub fhhkhmdleno: bool,
    #[prost(uint32, tag = "10")]
    pub elalbdgiapo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lgpphodkglk {
    #[prost(message, repeated, tag = "3")]
    pub lljmpejacne: ::prost::alloc::vec::Vec<Caelfpofmmj>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejfomkhdopf {
    #[prost(uint32, tag = "12")]
    pub elalbdgiapo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Clbhecajmon {
    #[prost(uint32, tag = "10")]
    pub elalbdgiapo: u32,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjkdobellnm {
    #[prost(uint32, tag = "3")]
    pub daeehalilod: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbfjcpghojm {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub daeehalilod: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Afkjnogkidl {
    #[prost(uint32, tag = "13")]
    pub fbekcndnmfe: u32,
    #[prost(bool, tag = "9")]
    pub fhhkhmdleno: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbcoigienpa {
    #[prost(uint32, repeated, tag = "4")]
    pub klbckeejghh: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jgmliannaif {
    #[prost(message, repeated, tag = "9")]
    pub lljmpejacne: ::prost::alloc::vec::Vec<Afkjnogkidl>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ldkphhejnmm {
    #[prost(uint32, tag = "8")]
    pub fbekcndnmfe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbdmebkcoem {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(uint32, tag = "6")]
    pub fbekcndnmfe: u32,
    #[prost(message, optional, tag = "15")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Glilglpgodo {
    #[prost(uint32, tag = "9")]
    pub ppoegdhjlke: u32,
    #[prost(uint32, tag = "2")]
    pub gakmanenkmh: u32,
    #[prost(uint32, tag = "15")]
    pub lbggbhfhdeg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbilebkmmfk {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bjjcffhmopd {
    #[prost(message, repeated, tag = "12")]
    pub kcgjglleflg: ::prost::alloc::vec::Vec<Glilglpgodo>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mpbdgeailof {
    #[prost(message, repeated, tag = "4")]
    pub kcgjglleflg: ::prost::alloc::vec::Vec<Glilglpgodo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eojghonebdd {
    #[prost(uint32, tag = "12")]
    pub anjcemifefc: u32,
    #[prost(uint32, tag = "2")]
    pub hpegmhpcfem: u32,
    #[prost(message, optional, tag = "1")]
    pub mokbbafhbjn: ::core::option::Option<Glilglpgodo>,
    #[prost(uint32, tag = "8")]
    pub mahiocfcikf: u32,
    #[prost(uint32, tag = "14")]
    pub mphcmmfkpog: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Poklpkkcaad {
    #[prost(enumeration = "AvatarType", tag = "5")]
    pub avatar_type: i32,
    #[prost(uint32, tag = "4")]
    pub avatar_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fbjjlepeflm {
    #[prost(uint32, tag = "13")]
    pub ppoegdhjlke: u32,
    #[prost(uint32, repeated, tag = "1")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<u32>,
    #[prost(message, repeated, tag = "15")]
    pub avatar_list: ::prost::alloc::vec::Vec<Poklpkkcaad>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egaindjnekn {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "8")]
    pub ppoegdhjlke: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Okgmgbpllhg {
    #[prost(string, tag = "15")]
    pub hfhomlnogbc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "4")]
    pub aiecnaafflj: u32,
    #[prost(string, tag = "7")]
    pub emamkmopfci: ::prost::alloc::string::String,
    #[prost(uint32, tag = "11")]
    pub akjcolodghe: u32,
    #[prost(uint32, tag = "13")]
    pub doblbefaofp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dmlpggkagbh {
    #[prost(string, tag = "12")]
    pub hfhomlnogbc: ::prost::alloc::string::String,
    #[prost(uint32, tag = "10")]
    pub aiecnaafflj: u32,
    #[prost(uint32, tag = "2")]
    pub akjcolodghe: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajcbkjegiin {
    #[prost(uint32, tag = "12")]
    pub akjcolodghe: u32,
    #[prost(uint32, tag = "13")]
    pub aiecnaafflj: u32,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(string, tag = "8")]
    pub hfhomlnogbc: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cifieflilcg {
    #[prost(uint32, repeated, tag = "11")]
    pub hpoppknopda: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Aacbnhhcjcf {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "1")]
    pub komlgafbhol: ::prost::alloc::vec::Vec<Okgmgbpllhg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mcmibjbpcpc {
    #[prost(message, repeated, tag = "13")]
    pub komlgafbhol: ::prost::alloc::vec::Vec<Okgmgbpllhg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Onfphghabkn {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "7")]
    pub komlgafbhol: ::prost::alloc::vec::Vec<Okgmgbpllhg>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dkmgobmngna {
    #[prost(uint32, tag = "5")]
    pub gakmanenkmh: u32,
    #[prost(uint32, tag = "8")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jlmpepajfgn {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Caihfoekdkg {
    #[prost(message, repeated, tag = "6")]
    pub loiacnoghal: ::prost::alloc::vec::Vec<Dkmgobmngna>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhbmdjfabkp {
    #[prost(uint32, tag = "5")]
    pub entity_id: u32,
    #[prost(bool, tag = "6")]
    pub cikiifgkobo: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Blhbkgmhioi {
    #[prost(message, repeated, tag = "3")]
    pub llicomkidom: ::prost::alloc::vec::Vec<Bhbmdjfabkp>,
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
    #[prost(uint32, tag = "6")]
    pub cost_time: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kbmejebjblb {
    #[prost(message, repeated, tag = "14")]
    pub llicomkidom: ::prost::alloc::vec::Vec<Bhbmdjfabkp>,
    #[prost(uint32, tag = "5")]
    pub lpgaoolbbfm: u32,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "3")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oejfojfeook {
    #[prost(uint32, tag = "14")]
    pub stage_id: u32,
    #[prost(bool, tag = "4")]
    pub nipjabamela: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hlhbilfmihg {
    #[prost(uint32, tag = "11")]
    pub fnpojgdggpm: u32,
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pifnkahjacn {
    #[prost(uint32, tag = "11")]
    pub stage_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ekacihfcebb {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Imehehjilbf {
    #[prost(bool, tag = "14")]
    pub fhhkhmdleno: bool,
    #[prost(uint32, tag = "10")]
    pub kjdlimfggmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jcoigmjglmi {
    #[prost(uint32, tag = "15")]
    pub kjdlimfggmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pbhnlblmpaa {
    #[prost(message, optional, tag = "1")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
    #[prost(uint32, tag = "10")]
    pub kjdlimfggmd: u32,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fpkkikjjnjo {
    #[prost(uint32, repeated, tag = "7")]
    pub gppailmfnpc: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flkndlkfapo {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, repeated, tag = "6")]
    pub aaiiofpbclc: ::prost::alloc::vec::Vec<Imehehjilbf>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klnondaeimi {
    #[prost(uint64, tag = "1")]
    pub cjgpnhfjgem: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfdkjpbgndm {
    #[prost(enumeration = "Indhbbjiean", tag = "6")]
    pub slot: i32,
    #[prost(uint32, tag = "14")]
    pub kjdlimfggmd: u32,
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gmmckeldapa {
    #[prost(uint32, repeated, tag = "11")]
    pub mbggfmadnhj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "8")]
    pub kjdlimfggmd: u32,
    #[prost(bool, tag = "6")]
    pub kkmajbpemnh: bool,
    #[prost(uint32, tag = "3")]
    pub lmdjgffdebk: u32,
    #[prost(enumeration = "Ffppaobdjgo", tag = "10")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ccoihlmpiac {
    #[prost(enumeration = "Heppgbeaopd", tag = "15")]
    pub slot: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhjfoefkhmg {
    #[prost(message, repeated, tag = "11")]
    pub hiinpcllmlh: ::prost::alloc::vec::Vec<Gmmckeldapa>,
    #[prost(uint32, repeated, tag = "9")]
    pub mfdbddconkm: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ajonbhidggp {
    #[prost(uint32, tag = "5")]
    pub kjdlimfggmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Pmhjadjahah {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(uint32, repeated, tag = "10")]
    pub mbggfmadnhj: ::prost::alloc::vec::Vec<u32>,
    #[prost(uint32, tag = "1")]
    pub kjdlimfggmd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Npkoljalcid {
    #[prost(uint32, repeated, tag = "15")]
    pub mfdbddconkm: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hdgbdehfdal {
    #[prost(uint32, tag = "8")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Edpcmbkldpp {
    #[prost(uint32, tag = "15")]
    pub ppikfajecgn: u32,
    #[prost(int32, tag = "12")]
    pub jhaokflajhi: i32,
    #[prost(uint64, tag = "13")]
    pub unique_id: u64,
    #[prost(uint32, tag = "1")]
    pub lefamlnchdb: u32,
    #[prost(int32, tag = "4")]
    pub oppiofgaapm: i32,
    #[prost(uint32, tag = "2")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Plhfolkmaji {
    #[prost(uint32, tag = "5")]
    pub ejglndccacp: u32,
    #[prost(enumeration = "Nbdeaohmgpd", tag = "6")]
    pub bmojbiafcan: i32,
    #[prost(enumeration = "Nepgcakaimg", tag = "12")]
    pub mmdkdomadkc: i32,
    #[prost(message, repeated, tag = "14")]
    pub nanmhcnadkg: ::prost::alloc::vec::Vec<Edpcmbkldpp>,
    #[prost(uint32, tag = "15")]
    pub elhpffpejcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eecdaglagim {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ebhhobohldg {
    #[prost(map = "uint32, message", tag = "3")]
    pub iklpaikjkha: ::std::collections::HashMap<u32, Plhfolkmaji>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(map = "uint32, uint32", tag = "2")]
    pub dmoappoigef: ::std::collections::HashMap<u32, u32>,
    #[prost(uint32, tag = "9")]
    pub ogcfmckhlja: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kehccelcakp {
    #[prost(uint32, tag = "4")]
    pub elhpffpejcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlnlcelilmh {
    #[prost(uint32, tag = "3")]
    pub elhpffpejcd: u32,
    #[prost(uint32, tag = "15")]
    pub ejglndccacp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jkkodmojmcp {
    #[prost(message, optional, tag = "14")]
    pub fibbcankfpi: ::core::option::Option<Plhfolkmaji>,
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub lbjkkmicgbi: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Moejhbphboe {
    #[prost(uint32, tag = "8")]
    pub elhpffpejcd: u32,
    #[prost(int32, tag = "6")]
    pub oppiofgaapm: i32,
    #[prost(int32, tag = "5")]
    pub jhaokflajhi: i32,
    #[prost(uint32, tag = "9")]
    pub lefamlnchdb: u32,
    #[prost(uint32, tag = "4")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "7")]
    pub ppikfajecgn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lhogneaekbm {
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub fibbcankfpi: ::core::option::Option<Plhfolkmaji>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phnejeildid {
    #[prost(uint32, tag = "1")]
    pub hgjolgkaofj: u32,
    #[prost(uint64, tag = "14")]
    pub unique_id: u64,
    #[prost(uint32, tag = "7")]
    pub elhpffpejcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djoaplnhnnm {
    #[prost(message, optional, tag = "8")]
    pub fibbcankfpi: ::core::option::Option<Plhfolkmaji>,
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kjjnbcjpofd {
    #[prost(uint32, tag = "5")]
    pub ppikfajecgn: u32,
    #[prost(uint32, tag = "4")]
    pub lefamlnchdb: u32,
    #[prost(int32, tag = "9")]
    pub jhaokflajhi: i32,
    #[prost(int32, tag = "15")]
    pub oppiofgaapm: i32,
    #[prost(uint32, tag = "11")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "1")]
    pub elhpffpejcd: u32,
    #[prost(uint64, tag = "7")]
    pub unique_id: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lbeilmencmg {
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
    #[prost(message, optional, tag = "11")]
    pub fibbcankfpi: ::core::option::Option<Plhfolkmaji>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eildnlloolg {
    #[prost(uint32, tag = "5")]
    pub cokophbhocf: u32,
    #[prost(uint32, tag = "11")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nfccnkngbke {
    #[prost(uint32, tag = "6")]
    pub cokophbhocf: u32,
    #[prost(uint32, tag = "15")]
    pub kagnbjdmamf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dldkemoempi {
    #[prost(uint32, tag = "3")]
    pub value: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Acemjognmli {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bogbdeohiom {
    #[prost(enumeration = "Nepgcakaimg", tag = "10")]
    pub clehhaedpae: i32,
    #[prost(uint32, tag = "6")]
    pub elhpffpejcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oedabbebong {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mdjglknfbcl {
    #[prost(uint32, tag = "15")]
    pub elhpffpejcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ngdapheckdd {
    #[prost(message, optional, tag = "8")]
    pub fibbcankfpi: ::core::option::Option<Plhfolkmaji>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Daonkhoicpl {
    #[prost(int32, tag = "11")]
    pub oppiofgaapm: i32,
    #[prost(uint32, tag = "15")]
    pub hgjolgkaofj: u32,
    #[prost(int32, tag = "10")]
    pub jhaokflajhi: i32,
    #[prost(uint32, tag = "5")]
    pub lefamlnchdb: u32,
    #[prost(uint32, tag = "13")]
    pub ppikfajecgn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Agfommpgbeh {
    #[prost(message, repeated, tag = "14")]
    pub ejkllkececl: ::prost::alloc::vec::Vec<Daonkhoicpl>,
    #[prost(uint32, tag = "11")]
    pub elhpffpejcd: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Idechpiaipb {
    #[prost(message, optional, tag = "1")]
    pub fibbcankfpi: ::core::option::Option<Plhfolkmaji>,
    #[prost(uint32, tag = "2")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TreasureDungeonRecordData {
    #[prost(enumeration = "Domnbbdobkg", tag = "12")]
    pub r#type: i32,
    #[prost(uint32, tag = "13")]
    pub param_2: u32,
    #[prost(uint32, tag = "10")]
    pub target_grid_id: u32,
    #[prost(uint32, tag = "8")]
    pub param_1: u32,
    #[prost(uint32, tag = "5")]
    pub source_grid_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkjmbndffmp {
    #[prost(message, optional, tag = "15")]
    pub fimenpabjlk: ::core::option::Option<Gfkhhobedjc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cdaklgjjdag {
    #[prost(uint32, tag = "4")]
    pub ihojbibbmjk: u32,
    #[prost(uint32, tag = "5")]
    pub dckcbphknmm: u32,
    #[prost(uint32, tag = "2")]
    pub dfggjlmnblk: u32,
    #[prost(uint32, tag = "7")]
    pub llbhkchlhfl: u32,
    #[prost(bool, tag = "14")]
    pub mmnebfbnoni: bool,
    #[prost(map = "uint32, uint32", tag = "15")]
    pub apconhladef: ::std::collections::HashMap<u32, u32>,
    #[prost(map = "uint32, uint32", tag = "11")]
    pub iacdjpcmgem: ::std::collections::HashMap<u32, u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Gfkhhobedjc {
    #[prost(uint32, tag = "13")]
    pub fdhmddjckbm: u32,
    #[prost(uint32, tag = "12")]
    pub ccgokknidmp: u32,
    #[prost(uint32, tag = "3")]
    pub ihojbibbmjk: u32,
    #[prost(message, repeated, tag = "1281")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Adihimnhjmc>,
    #[prost(message, repeated, tag = "10")]
    pub acnhklfedmn: ::prost::alloc::vec::Vec<TreasureDungeonRecordData>,
    #[prost(uint32, tag = "5")]
    pub lnjapmhfcck: u32,
    #[prost(message, repeated, tag = "702")]
    pub avatar_list: ::prost::alloc::vec::Vec<Nhomjjpmlml>,
    #[prost(bool, tag = "607")]
    pub dodenbklklh: bool,
    #[prost(uint32, tag = "7")]
    pub gepegecgkgd: u32,
    #[prost(message, repeated, tag = "530")]
    pub bdajebnoflc: ::prost::alloc::vec::Vec<Fmkkknpkhka>,
    #[prost(uint32, tag = "6")]
    pub dckcbphknmm: u32,
    #[prost(message, repeated, tag = "1046")]
    pub kcinaojggca: ::prost::alloc::vec::Vec<Nhomjjpmlml>,
    #[prost(uint32, tag = "859")]
    pub gabmdafmbia: u32,
    #[prost(bool, tag = "1856")]
    pub koonaacohgh: bool,
    #[prost(bool, tag = "317")]
    pub olpededenmb: bool,
    #[prost(message, repeated, tag = "1380")]
    pub pdpfcfglgco: ::prost::alloc::vec::Vec<Olekkhgdbno>,
    #[prost(uint32, tag = "11")]
    pub ibbomefncba: u32,
    #[prost(message, repeated, tag = "8")]
    pub nnfelodhecl: ::prost::alloc::vec::Vec<Eihmdnhfbhi>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Olekkhgdbno {
    #[prost(uint32, tag = "4")]
    pub olfhccbiidg: u32,
    #[prost(uint32, tag = "6")]
    pub hgjolgkaofj: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nhomjjpmlml {
    #[prost(uint32, tag = "3")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "10")]
    pub avatar_type: u32,
    #[prost(uint32, tag = "8")]
    pub hp: u32,
    #[prost(uint32, tag = "2")]
    pub elolchjhcpa: u32,
    #[prost(message, optional, tag = "12")]
    pub sp: ::core::option::Option<SpProgress>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmkkknpkhka {
    #[prost(uint32, tag = "6")]
    pub avatar_id: u32,
    #[prost(uint32, tag = "1")]
    pub avatar_type: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Adihimnhjmc {
    #[prost(uint32, tag = "4")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "9")]
    pub kkjoplahmam: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eihmdnhfbhi {
    #[prost(uint32, tag = "11")]
    pub mdplfmdjfji: u32,
    #[prost(bool, tag = "8")]
    pub jllomgfnoad: bool,
    #[prost(bool, tag = "6")]
    pub kjhdclobejc: bool,
    #[prost(bool, tag = "14")]
    pub kjbihcphcco: bool,
    #[prost(message, repeated, tag = "1338")]
    pub gaekhpnnppo: ::prost::alloc::vec::Vec<Kckckdlbgah>,
    #[prost(uint32, tag = "2")]
    pub pghfklcblcf: u32,
    #[prost(bool, tag = "5")]
    pub eeilehahchh: bool,
    #[prost(uint32, tag = "13")]
    pub emdckdplfno: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kckckdlbgah {
    #[prost(uint32, tag = "3")]
    pub mgokheahgno: u32,
    #[prost(uint32, tag = "10")]
    pub pkkfndimmio: u32,
    #[prost(uint32, tag = "2")]
    pub odfbamohefb: u32,
    #[prost(uint32, tag = "13")]
    pub hfofggdjldk: u32,
    #[prost(uint32, tag = "11")]
    pub mdplfmdjfji: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bcgidhjgbeh {
    #[prost(uint32, tag = "8")]
    pub ihojbibbmjk: u32,
    #[prost(uint32, tag = "15")]
    pub dckcbphknmm: u32,
    #[prost(uint32, tag = "7")]
    pub fdhmddjckbm: u32,
    #[prost(bool, tag = "1")]
    pub jfbghenfbmh: bool,
    #[prost(uint32, tag = "4")]
    pub ccgokknidmp: u32,
    #[prost(bool, tag = "2")]
    pub nhbjkfibgbk: bool,
    #[prost(uint32, tag = "9")]
    pub fknlibdaomf: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Phklcpjjdkc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ceaeicabldl {
    #[prost(message, repeated, tag = "9")]
    pub lflniekplaj: ::prost::alloc::vec::Vec<Bcgidhjgbeh>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Egfcfmidplk {
    #[prost(uint32, tag = "9")]
    pub dckcbphknmm: u32,
    #[prost(message, repeated, tag = "5")]
    pub avatar_list: ::prost::alloc::vec::Vec<Bohmllfkgdb>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oaiphfkhfhf {
    #[prost(message, optional, tag = "8")]
    pub fimenpabjlk: ::core::option::Option<Gfkhhobedjc>,
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Kdffhgdidnj {
    #[prost(uint32, tag = "13")]
    pub dckcbphknmm: u32,
    #[prost(uint32, tag = "5")]
    pub mdplfmdjfji: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jjaapmnnpkb {
    #[prost(uint32, tag = "9")]
    pub retcode: u32,
    #[prost(message, optional, tag = "6")]
    pub fimenpabjlk: ::core::option::Option<Gfkhhobedjc>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nbdnjolnelg {
    #[prost(uint32, tag = "10")]
    pub dckcbphknmm: u32,
    #[prost(uint32, tag = "11")]
    pub mdplfmdjfji: u32,
    #[prost(uint32, tag = "3")]
    pub iihookopmmk: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ndimhdecnpi {
    #[prost(message, optional, tag = "15")]
    pub fimenpabjlk: ::core::option::Option<Gfkhhobedjc>,
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Licdjbkkfal {
    #[prost(uint32, tag = "8")]
    pub hgjolgkaofj: u32,
    #[prost(uint32, tag = "4")]
    pub mdplfmdjfji: u32,
    #[prost(uint32, tag = "11")]
    pub dckcbphknmm: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Piogcpmnabf {
    #[prost(message, optional, tag = "3")]
    pub fimenpabjlk: ::core::option::Option<Gfkhhobedjc>,
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bohmllfkgdb {
    #[prost(uint32, tag = "1")]
    pub avatar_id: u32,
    #[prost(enumeration = "AvatarType", tag = "12")]
    pub avatar_type: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nkadmflinkc {
    #[prost(message, repeated, tag = "11")]
    pub avatar_list: ::prost::alloc::vec::Vec<Bohmllfkgdb>,
    #[prost(uint32, tag = "15")]
    pub dckcbphknmm: u32,
    #[prost(uint32, tag = "2")]
    pub mdplfmdjfji: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Elleinlllod {
    #[prost(message, optional, tag = "5")]
    pub ibllilenejp: ::core::option::Option<SceneBattleInfo>,
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mmgpeoifnbp {
    #[prost(uint32, tag = "3")]
    pub dckcbphknmm: u32,
    #[prost(bool, tag = "1")]
    pub piofaglkghg: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Lacfgpmpdpj {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Tutorial {
    #[prost(uint32, tag = "13")]
    pub id: u32,
    #[prost(enumeration = "TutorialStatus", tag = "4")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TutorialGuide {
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(enumeration = "TutorialStatus", tag = "8")]
    pub status: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Apikgighdgc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialScRsp {
    #[prost(message, repeated, tag = "9")]
    pub tutorial_list: ::prost::alloc::vec::Vec<Tutorial>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ojofgmhapgh {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideScRsp {
    #[prost(message, repeated, tag = "5")]
    pub tutorial_guide_list: ::prost::alloc::vec::Vec<TutorialGuide>,
    #[prost(uint32, tag = "15")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Oplbnbefnjj {
    #[prost(uint32, tag = "7")]
    pub bjmhgbbfpmn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockTutorialScRsp {
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub tutorial: ::core::option::Option<Tutorial>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgnmibjadbe {
    #[prost(uint32, tag = "6")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideScRsp {
    #[prost(message, optional, tag = "8")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obkljeiahea {
    #[prost(uint32, tag = "14")]
    pub bjmhgbbfpmn: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTutorialScRsp {
    #[prost(message, optional, tag = "7")]
    pub tutorial: ::core::option::Option<Tutorial>,
    #[prost(uint32, tag = "14")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlgambkaaie {
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinishTutorialGuideScRsp {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "1")]
    pub tutorial_guide: ::core::option::Option<TutorialGuide>,
    #[prost(message, optional, tag = "15")]
    pub reward: ::core::option::Option<ItemList>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nlbpclnhcjn {
    #[prost(uint32, tag = "5")]
    pub id: u32,
    #[prost(bool, tag = "3")]
    pub kollpgccdil: bool,
    #[prost(uint32, tag = "11")]
    pub kojolodooni: u32,
}
/// ? GetSceneMapInfoCsReq
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Jpkjdnbmhnl {
    #[prost(bool, tag = "8")]
    pub kollpgccdil: bool,
    #[prost(uint32, tag = "10")]
    pub efoafoabnon: u32,
    #[prost(uint32, tag = "14")]
    pub id: u32,
    #[prost(uint32, repeated, tag = "13")]
    pub ghchnanjdfb: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eehicbnnfej {
    #[prost(message, repeated, tag = "13")]
    pub eiiaaffjcda: ::prost::alloc::vec::Vec<Nlbpclnhcjn>,
    #[prost(message, optional, tag = "8")]
    pub eeghmjloiap: ::core::option::Option<Jpkjdnbmhnl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Eogickanbpl {
    #[prost(uint32, tag = "14")]
    pub mhhndeiccmp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cbjjhcohoko {
    #[prost(message, optional, tag = "10")]
    pub mcdcffpnpal: ::core::option::Option<Eehicbnnfej>,
    #[prost(uint32, tag = "6")]
    pub retcode: u32,
    #[prost(uint32, tag = "2")]
    pub impkmnjoncg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Infclppcfii {
    #[prost(uint32, tag = "3")]
    pub cielfhbbkif: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocfjiflmdmf {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub impkmnjoncg: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Djjgocfdboc {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cookpofdkal {
    #[prost(uint32, tag = "3")]
    pub impkmnjoncg: u32,
    #[prost(message, repeated, tag = "2")]
    pub eadjabjkdmd: ::prost::alloc::vec::Vec<Jpkjdnbmhnl>,
    #[prost(uint32, tag = "12")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Inkhgacfojg {
    #[prost(uint32, tag = "15")]
    pub cielfhbbkif: u32,
    #[prost(uint32, tag = "7")]
    pub mhhndeiccmp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ljffpoepbog {
    #[prost(uint32, tag = "12")]
    pub mhhndeiccmp: u32,
    #[prost(uint32, tag = "6")]
    pub llonjcmgcfh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bfbaccbmiem {
    #[prost(uint32, tag = "13")]
    pub retcode: u32,
    #[prost(uint32, tag = "1")]
    pub mhhndeiccmp: u32,
    #[prost(uint32, tag = "4")]
    pub llonjcmgcfh: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bldfddbpnba {
    #[prost(message, repeated, tag = "4")]
    pub bhjdpndboha: ::prost::alloc::vec::Vec<Vector>,
    #[prost(message, optional, tag = "12")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(bool, tag = "5")]
    pub bojongdmfck: bool,
    #[prost(uint32, tag = "14")]
    pub flamaakibdo: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Megkociblgl {
    #[prost(uint32, tag = "14")]
    pub flamaakibdo: u32,
    #[prost(uint32, tag = "8")]
    pub id: u32,
    #[prost(bool, tag = "13")]
    pub bojongdmfck: bool,
    #[prost(message, repeated, tag = "6")]
    pub bhjdpndboha: ::prost::alloc::vec::Vec<Vector>,
    #[prost(string, tag = "5")]
    pub mbmegghhkjl: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub icebhafphej: ::core::option::Option<Bldfddbpnba>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Cffmmlmbakg {
    #[prost(message, optional, tag = "10")]
    pub podpafooomg: ::core::option::Option<Iggijbjppoc>,
    #[prost(message, optional, tag = "4")]
    pub motion: ::core::option::Option<MotionInfo>,
    #[prost(bool, tag = "3")]
    pub nipjabamela: bool,
    #[prost(uint32, tag = "1")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ocabdlfgddo {
    #[prost(uint32, tag = "3")]
    pub retcode: u32,
    #[prost(message, optional, tag = "9")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bbejpgcgoeg {
    #[prost(uint32, tag = "3")]
    pub id: u32,
    #[prost(message, optional, tag = "15")]
    pub motion: ::core::option::Option<MotionInfo>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Knnddnnphdo {
    #[prost(message, optional, tag = "2")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dlemcdhgehe {
    #[prost(uint32, tag = "7")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fhodkhmblge {
    #[prost(uint32, tag = "4")]
    pub retcode: u32,
    #[prost(message, optional, tag = "3")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Hkfphajhobo {
    #[prost(uint32, tag = "12")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Obmalglckij {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "15")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bhhgnciilln {
    #[prost(uint32, tag = "6")]
    pub id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nccafebhggn {
    #[prost(uint32, tag = "11")]
    pub retcode: u32,
    #[prost(message, optional, tag = "5")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Nphghnpilgh {
    #[prost(message, optional, tag = "1")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bmnpakcohnb {
    #[prost(message, optional, tag = "10")]
    pub fdlfjmagnod: ::core::option::Option<Vector>,
    #[prost(uint32, repeated, tag = "5")]
    pub ohainjgiflk: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Klekfnbkhle {
    #[prost(uint32, tag = "7")]
    pub retcode: u32,
    #[prost(message, optional, tag = "13")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mkoahlhfigf {
    #[prost(message, optional, tag = "7")]
    pub fdlfjmagnod: ::core::option::Option<Vector>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fghhgocefoj {
    #[prost(uint32, tag = "1")]
    pub retcode: u32,
    #[prost(message, optional, tag = "12")]
    pub dkefdkdleip: ::core::option::Option<Megkociblgl>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Fmckljimojc {
    #[prost(uint32, tag = "6")]
    pub pfbnanpcdjh: u32,
    #[prost(uint32, tag = "1")]
    pub group_id: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Dcpbeknpeij {
    #[prost(uint32, tag = "5")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mgeahpkhpao {
    #[prost(uint32, repeated, tag = "13")]
    pub ohainjgiflk: ::prost::alloc::vec::Vec<u32>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mjchmfgimgb {
    #[prost(uint32, tag = "10")]
    pub retcode: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Ejbflfbnlfe {
    #[prost(uint32, tag = "1")]
    pub adjcdlobkik: u32,
    #[prost(uint32, tag = "2")]
    pub lindhpibjmj: u32,
    #[prost(uint32, tag = "3")]
    pub hhaelciomkn: u32,
    #[prost(uint32, tag = "4")]
    pub epjpcaimpla: u32,
    #[prost(uint32, tag = "5")]
    pub mnoeijlikle: u32,
    #[prost(uint32, tag = "6")]
    pub cfnifonecmk: u32,
    #[prost(uint32, tag = "7")]
    pub nldjipachnp: u32,
    #[prost(uint32, tag = "8")]
    pub ldilbhddjjb: u32,
    #[prost(uint32, tag = "9")]
    pub fmoedfkejoo: u32,
    #[prost(uint32, tag = "10")]
    pub limkkjhkfoo: u32,
    #[prost(uint32, tag = "11")]
    pub id: u32,
    #[prost(uint32, tag = "12")]
    pub bcmdmbgbbfg: u32,
    #[prost(uint32, tag = "13")]
    pub lpjglchpljp: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetArchiveDataCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DressRelicAvatarCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DressAvatarCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOffRelicCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TakeOffEquipmentCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPrivateChatHistoryCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetFriendListInfoCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBagCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllLineupDataCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinLineupCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QuitLineupCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurLineupDataCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetHeroBasicTypeInfoCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetBasicInfoCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCurSceneInfoCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SceneCastSkillCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetSceneMapInfoCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EnterSceneCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialGuideCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetMailCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetShopListCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTutorialCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnlockTutorialGuideCsReq {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct JoinLineupScRsp {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetEnteredSceneCsReq {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarSlotType {
    AvatarSlot1 = 0,
    AvatarSlot2 = 1,
    AvatarSlot3 = 2,
}
impl AvatarSlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AvatarSlotType::AvatarSlot1 => "AVATAR_SLOT_1",
            AvatarSlotType::AvatarSlot2 => "AVATAR_SLOT_2",
            AvatarSlotType::AvatarSlot3 => "AVATAR_SLOT_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_SLOT_1" => Some(Self::AvatarSlot1),
            "AVATAR_SLOT_2" => Some(Self::AvatarSlot2),
            "AVATAR_SLOT_3" => Some(Self::AvatarSlot3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ItemType {
    None = 0,
    ItemAvatarCard = 1,
    ItemEquipment = 2,
    ItemMaterial = 3,
    ItemAvatarExp = 4,
    ItemRelic = 5,
}
impl ItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ItemType::None => "ITEM_TYPE_NONE",
            ItemType::ItemAvatarCard => "ITEM_AVATAR_CARD",
            ItemType::ItemEquipment => "ITEM_EQUIPMENT",
            ItemType::ItemMaterial => "ITEM_MATERIAL",
            ItemType::ItemAvatarExp => "ITEM_AVATAR_EXP",
            ItemType::ItemRelic => "ITEM_RELIC",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ITEM_TYPE_NONE" => Some(Self::None),
            "ITEM_AVATAR_CARD" => Some(Self::ItemAvatarCard),
            "ITEM_EQUIPMENT" => Some(Self::ItemEquipment),
            "ITEM_MATERIAL" => Some(Self::ItemMaterial),
            "ITEM_AVATAR_EXP" => Some(Self::ItemAvatarExp),
            "ITEM_RELIC" => Some(Self::ItemRelic),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VirtualItemType {
    VirtualItemNone = 0,
    VirtualItemHcoin = 1,
    VirtualItemScoin = 2,
    VirtualItemMcoin = 3,
    VirtualItemStamina = 11,
    VirtualItemReserveStamina = 12,
    VirtualItemAvatarExp = 21,
    VirtualItemExp = 22,
    VirtualItemDailyActivePoint = 23,
    VirtualItemMpMax = 24,
    VirtualItemPlayerReturnPoint = 25,
    VirtualItemBattleCollegePoint = 26,
    VirtualItemRogueCoin = 31,
    VirtualItemRogueTalentCoin = 32,
    VirtualItemRogueRewardKey = 33,
    VirtualItemAchievementExp = 41,
    VirtualItemBpExp = 51,
    VirtualItemBpRealExp = 52,
    VirtualItemMuseumFunds = 53,
    VirtualItemWarriorExp = 190,
    VirtualItemRogueExp = 191,
    VirtualItemMageExp = 192,
    VirtualItemShamanExp = 193,
    VirtualItemWarlockExp = 194,
    VirtualItemKnightExp = 195,
    VirtualItemPriestExp = 196,
    VirtualItemPunkLordPoint = 100000,
    VirtualItemGameplayCounterMonsterSneakVision = 280001,
    VirtualItemGameplayCounterWolfBroBullet = 280002,
    VirtualItemAlleyFunds = 281001,
    VirtualItemRoguePumanCoupon = 281012,
    VirtualItemMonthCard = 300101,
    VirtualItemBpNormal = 300102,
    VirtualItemBpDeluxe = 300103,
    VirtualItemBpUpgrade = 300104,
    VirtualItemHeliobusFans = 281002,
    VirtualItemSpaceZooHybridItem = 281003,
    VirtualItemSpaceZooExpPoint = 281004,
    VirtualItemRogueNousTalentCoin = 281013,
    VirtualItemEvolveBuildCoin = 281019,
    VirtualItemDrinkMakerTip = 281005,
    VirtualItemMonopolyDice = 281014,
    VirtualItemMonopolyCoin = 281015,
    VirtualItemMonopolyCheatdice = 281016,
    VirtualItemMonopolyReroll = 281017,
    VirtualItemRogueTournPermanentTalentCoin = 281018,
    VirtualItemRogueTournExp = 281022,
    VirtualItemMatchthreeCoin = 281024,
    VirtualItemSwordTrainingSkillPoint = 281023,
    VirtualItemFightFestCoin = 281025,
}
impl VirtualItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            VirtualItemType::VirtualItemNone => "VIRTUAL_ITEM_NONE",
            VirtualItemType::VirtualItemHcoin => "VIRTUAL_ITEM_HCOIN",
            VirtualItemType::VirtualItemScoin => "VIRTUAL_ITEM_SCOIN",
            VirtualItemType::VirtualItemMcoin => "VIRTUAL_ITEM_MCOIN",
            VirtualItemType::VirtualItemStamina => "VIRTUAL_ITEM_STAMINA",
            VirtualItemType::VirtualItemReserveStamina => "VIRTUAL_ITEM_RESERVE_STAMINA",
            VirtualItemType::VirtualItemAvatarExp => "VIRTUAL_ITEM_AVATAR_EXP",
            VirtualItemType::VirtualItemExp => "VIRTUAL_ITEM_EXP",
            VirtualItemType::VirtualItemDailyActivePoint => {
                "VIRTUAL_ITEM_DAILY_ACTIVE_POINT"
            }
            VirtualItemType::VirtualItemMpMax => "VIRTUAL_ITEM_MP_MAX",
            VirtualItemType::VirtualItemPlayerReturnPoint => {
                "VIRTUAL_ITEM_PLAYER_RETURN_POINT"
            }
            VirtualItemType::VirtualItemBattleCollegePoint => {
                "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT"
            }
            VirtualItemType::VirtualItemRogueCoin => "VIRTUAL_ITEM_ROGUE_COIN",
            VirtualItemType::VirtualItemRogueTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_TALENT_COIN"
            }
            VirtualItemType::VirtualItemRogueRewardKey => "VIRTUAL_ITEM_ROGUE_REWARD_KEY",
            VirtualItemType::VirtualItemAchievementExp => "VIRTUAL_ITEM_ACHIEVEMENT_EXP",
            VirtualItemType::VirtualItemBpExp => "VIRTUAL_ITEM_BP_EXP",
            VirtualItemType::VirtualItemBpRealExp => "VIRTUAL_ITEM_BP_REAL_EXP",
            VirtualItemType::VirtualItemMuseumFunds => "VIRTUAL_ITEM_MUSEUM_FUNDS",
            VirtualItemType::VirtualItemWarriorExp => "VIRTUAL_ITEM_WARRIOR_EXP",
            VirtualItemType::VirtualItemRogueExp => "VIRTUAL_ITEM_ROGUE_EXP",
            VirtualItemType::VirtualItemMageExp => "VIRTUAL_ITEM_MAGE_EXP",
            VirtualItemType::VirtualItemShamanExp => "VIRTUAL_ITEM_SHAMAN_EXP",
            VirtualItemType::VirtualItemWarlockExp => "VIRTUAL_ITEM_WARLOCK_EXP",
            VirtualItemType::VirtualItemKnightExp => "VIRTUAL_ITEM_KNIGHT_EXP",
            VirtualItemType::VirtualItemPriestExp => "VIRTUAL_ITEM_PRIEST_EXP",
            VirtualItemType::VirtualItemPunkLordPoint => "VIRTUAL_ITEM_PUNK_LORD_POINT",
            VirtualItemType::VirtualItemGameplayCounterMonsterSneakVision => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
            VirtualItemType::VirtualItemGameplayCounterWolfBroBullet => {
                "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET"
            }
            VirtualItemType::VirtualItemAlleyFunds => "VIRTUAL_ITEM_ALLEY_FUNDS",
            VirtualItemType::VirtualItemRoguePumanCoupon => {
                "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON"
            }
            VirtualItemType::VirtualItemMonthCard => "VIRTUAL_ITEM_MONTH_CARD",
            VirtualItemType::VirtualItemBpNormal => "VIRTUAL_ITEM_BP_NORMAL",
            VirtualItemType::VirtualItemBpDeluxe => "VIRTUAL_ITEM_BP_DELUXE",
            VirtualItemType::VirtualItemBpUpgrade => "VIRTUAL_ITEM_BP_UPGRADE",
            VirtualItemType::VirtualItemHeliobusFans => "VIRTUAL_ITEM_HELIOBUS_FANS",
            VirtualItemType::VirtualItemSpaceZooHybridItem => {
                "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM"
            }
            VirtualItemType::VirtualItemSpaceZooExpPoint => {
                "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT"
            }
            VirtualItemType::VirtualItemRogueNousTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN"
            }
            VirtualItemType::VirtualItemEvolveBuildCoin => {
                "VIRTUAL_ITEM_EVOLVE_BUILD_COIN"
            }
            VirtualItemType::VirtualItemDrinkMakerTip => "VIRTUAL_ITEM_DRINK_MAKER_TIP",
            VirtualItemType::VirtualItemMonopolyDice => "VIRTUAL_ITEM_MONOPOLY_DICE",
            VirtualItemType::VirtualItemMonopolyCoin => "VIRTUAL_ITEM_MONOPOLY_COIN",
            VirtualItemType::VirtualItemMonopolyCheatdice => {
                "VIRTUAL_ITEM_MONOPOLY_CHEATDICE"
            }
            VirtualItemType::VirtualItemMonopolyReroll => "VIRTUAL_ITEM_MONOPOLY_REROLL",
            VirtualItemType::VirtualItemRogueTournPermanentTalentCoin => {
                "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN"
            }
            VirtualItemType::VirtualItemRogueTournExp => "VIRTUAL_ITEM_ROGUE_TOURN_EXP",
            VirtualItemType::VirtualItemMatchthreeCoin => "VIRTUAL_ITEM_MATCHTHREE_COIN",
            VirtualItemType::VirtualItemSwordTrainingSkillPoint => {
                "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT"
            }
            VirtualItemType::VirtualItemFightFestCoin => "VIRTUAL_ITEM_FIGHT_FEST_COIN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VIRTUAL_ITEM_NONE" => Some(Self::VirtualItemNone),
            "VIRTUAL_ITEM_HCOIN" => Some(Self::VirtualItemHcoin),
            "VIRTUAL_ITEM_SCOIN" => Some(Self::VirtualItemScoin),
            "VIRTUAL_ITEM_MCOIN" => Some(Self::VirtualItemMcoin),
            "VIRTUAL_ITEM_STAMINA" => Some(Self::VirtualItemStamina),
            "VIRTUAL_ITEM_RESERVE_STAMINA" => Some(Self::VirtualItemReserveStamina),
            "VIRTUAL_ITEM_AVATAR_EXP" => Some(Self::VirtualItemAvatarExp),
            "VIRTUAL_ITEM_EXP" => Some(Self::VirtualItemExp),
            "VIRTUAL_ITEM_DAILY_ACTIVE_POINT" => Some(Self::VirtualItemDailyActivePoint),
            "VIRTUAL_ITEM_MP_MAX" => Some(Self::VirtualItemMpMax),
            "VIRTUAL_ITEM_PLAYER_RETURN_POINT" => {
                Some(Self::VirtualItemPlayerReturnPoint)
            }
            "VIRTUAL_ITEM_BATTLE_COLLEGE_POINT" => {
                Some(Self::VirtualItemBattleCollegePoint)
            }
            "VIRTUAL_ITEM_ROGUE_COIN" => Some(Self::VirtualItemRogueCoin),
            "VIRTUAL_ITEM_ROGUE_TALENT_COIN" => Some(Self::VirtualItemRogueTalentCoin),
            "VIRTUAL_ITEM_ROGUE_REWARD_KEY" => Some(Self::VirtualItemRogueRewardKey),
            "VIRTUAL_ITEM_ACHIEVEMENT_EXP" => Some(Self::VirtualItemAchievementExp),
            "VIRTUAL_ITEM_BP_EXP" => Some(Self::VirtualItemBpExp),
            "VIRTUAL_ITEM_BP_REAL_EXP" => Some(Self::VirtualItemBpRealExp),
            "VIRTUAL_ITEM_MUSEUM_FUNDS" => Some(Self::VirtualItemMuseumFunds),
            "VIRTUAL_ITEM_WARRIOR_EXP" => Some(Self::VirtualItemWarriorExp),
            "VIRTUAL_ITEM_ROGUE_EXP" => Some(Self::VirtualItemRogueExp),
            "VIRTUAL_ITEM_MAGE_EXP" => Some(Self::VirtualItemMageExp),
            "VIRTUAL_ITEM_SHAMAN_EXP" => Some(Self::VirtualItemShamanExp),
            "VIRTUAL_ITEM_WARLOCK_EXP" => Some(Self::VirtualItemWarlockExp),
            "VIRTUAL_ITEM_KNIGHT_EXP" => Some(Self::VirtualItemKnightExp),
            "VIRTUAL_ITEM_PRIEST_EXP" => Some(Self::VirtualItemPriestExp),
            "VIRTUAL_ITEM_PUNK_LORD_POINT" => Some(Self::VirtualItemPunkLordPoint),
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::VirtualItemGameplayCounterMonsterSneakVision)
            }
            "VIRTUAL_ITEM_GAMEPLAY_COUNTER_WOLF_BRO_BULLET" => {
                Some(Self::VirtualItemGameplayCounterWolfBroBullet)
            }
            "VIRTUAL_ITEM_ALLEY_FUNDS" => Some(Self::VirtualItemAlleyFunds),
            "VIRTUAL_ITEM_ROGUE_PUMAN_COUPON" => Some(Self::VirtualItemRoguePumanCoupon),
            "VIRTUAL_ITEM_MONTH_CARD" => Some(Self::VirtualItemMonthCard),
            "VIRTUAL_ITEM_BP_NORMAL" => Some(Self::VirtualItemBpNormal),
            "VIRTUAL_ITEM_BP_DELUXE" => Some(Self::VirtualItemBpDeluxe),
            "VIRTUAL_ITEM_BP_UPGRADE" => Some(Self::VirtualItemBpUpgrade),
            "VIRTUAL_ITEM_HELIOBUS_FANS" => Some(Self::VirtualItemHeliobusFans),
            "VIRTUAL_ITEM_SPACE_ZOO_HYBRID_ITEM" => {
                Some(Self::VirtualItemSpaceZooHybridItem)
            }
            "VIRTUAL_ITEM_SPACE_ZOO_EXP_POINT" => Some(Self::VirtualItemSpaceZooExpPoint),
            "VIRTUAL_ITEM_ROGUE_NOUS_TALENT_COIN" => {
                Some(Self::VirtualItemRogueNousTalentCoin)
            }
            "VIRTUAL_ITEM_EVOLVE_BUILD_COIN" => Some(Self::VirtualItemEvolveBuildCoin),
            "VIRTUAL_ITEM_DRINK_MAKER_TIP" => Some(Self::VirtualItemDrinkMakerTip),
            "VIRTUAL_ITEM_MONOPOLY_DICE" => Some(Self::VirtualItemMonopolyDice),
            "VIRTUAL_ITEM_MONOPOLY_COIN" => Some(Self::VirtualItemMonopolyCoin),
            "VIRTUAL_ITEM_MONOPOLY_CHEATDICE" => Some(Self::VirtualItemMonopolyCheatdice),
            "VIRTUAL_ITEM_MONOPOLY_REROLL" => Some(Self::VirtualItemMonopolyReroll),
            "VIRTUAL_ITEM_ROGUE_TOURN_PERMANENT_TALENT_COIN" => {
                Some(Self::VirtualItemRogueTournPermanentTalentCoin)
            }
            "VIRTUAL_ITEM_ROGUE_TOURN_EXP" => Some(Self::VirtualItemRogueTournExp),
            "VIRTUAL_ITEM_MATCHTHREE_COIN" => Some(Self::VirtualItemMatchthreeCoin),
            "VIRTUAL_ITEM_SWORD_TRAINING_SKILL_POINT" => {
                Some(Self::VirtualItemSwordTrainingSkillPoint)
            }
            "VIRTUAL_ITEM_FIGHT_FEST_COIN" => Some(Self::VirtualItemFightFestCoin),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GameplayCounterType {
    GameplayCounterNone = 0,
    GameplayCounterMonsterSneakVision = 280001,
}
impl GameplayCounterType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GameplayCounterType::GameplayCounterNone => "GAMEPLAY_COUNTER_NONE",
            GameplayCounterType::GameplayCounterMonsterSneakVision => {
                "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_NONE" => Some(Self::GameplayCounterNone),
            "GAMEPLAY_COUNTER_MONSTER_SNEAK_VISION" => {
                Some(Self::GameplayCounterMonsterSneakVision)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ddehidbnffn {
    BlackLimitLevelAll = 0,
}
impl Ddehidbnffn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ddehidbnffn::BlackLimitLevelAll => "BLACK_LIMIT_LEVEL_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BLACK_LIMIT_LEVEL_ALL" => Some(Self::BlackLimitLevelAll),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AreaType {
    AreaNone = 0,
    AreaCn = 1,
    AreaJp = 2,
    AreaAsia = 3,
    AreaWest = 4,
    AreaKr = 5,
    AreaOverseas = 6,
}
impl AreaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AreaType::AreaNone => "AREA_NONE",
            AreaType::AreaCn => "AREA_CN",
            AreaType::AreaJp => "AREA_JP",
            AreaType::AreaAsia => "AREA_ASIA",
            AreaType::AreaWest => "AREA_WEST",
            AreaType::AreaKr => "AREA_KR",
            AreaType::AreaOverseas => "AREA_OVERSEAS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AREA_NONE" => Some(Self::AreaNone),
            "AREA_CN" => Some(Self::AreaCn),
            "AREA_JP" => Some(Self::AreaJp),
            "AREA_ASIA" => Some(Self::AreaAsia),
            "AREA_WEST" => Some(Self::AreaWest),
            "AREA_KR" => Some(Self::AreaKr),
            "AREA_OVERSEAS" => Some(Self::AreaOverseas),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntityType {
    EntityNone = 0,
    EntityAvatar = 1,
    EntityMonster = 2,
    EntityNpc = 3,
    EntityProp = 4,
    EntityTrigger = 5,
    EntityEnv = 6,
    EntitySummonUnit = 7,
}
impl EntityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EntityType::EntityNone => "ENTITY_NONE",
            EntityType::EntityAvatar => "ENTITY_AVATAR",
            EntityType::EntityMonster => "ENTITY_MONSTER",
            EntityType::EntityNpc => "ENTITY_NPC",
            EntityType::EntityProp => "ENTITY_PROP",
            EntityType::EntityTrigger => "ENTITY_TRIGGER",
            EntityType::EntityEnv => "ENTITY_ENV",
            EntityType::EntitySummonUnit => "ENTITY_SUMMON_UNIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTITY_NONE" => Some(Self::EntityNone),
            "ENTITY_AVATAR" => Some(Self::EntityAvatar),
            "ENTITY_MONSTER" => Some(Self::EntityMonster),
            "ENTITY_NPC" => Some(Self::EntityNpc),
            "ENTITY_PROP" => Some(Self::EntityProp),
            "ENTITY_TRIGGER" => Some(Self::EntityTrigger),
            "ENTITY_ENV" => Some(Self::EntityEnv),
            "ENTITY_SUMMON_UNIT" => Some(Self::EntitySummonUnit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum LanguageType {
    LanguageNone = 0,
    LanguageSc = 1,
    LanguageTc = 2,
    LanguageEn = 3,
    LanguageKr = 4,
    LanguageJp = 5,
    LanguageFr = 6,
    LanguageDe = 7,
    LanguageEs = 8,
    LanguagePt = 9,
    LanguageRu = 10,
    LanguageTh = 11,
    LanguageVi = 12,
    LanguageId = 13,
}
impl LanguageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            LanguageType::LanguageNone => "LANGUAGE_NONE",
            LanguageType::LanguageSc => "LANGUAGE_SC",
            LanguageType::LanguageTc => "LANGUAGE_TC",
            LanguageType::LanguageEn => "LANGUAGE_EN",
            LanguageType::LanguageKr => "LANGUAGE_KR",
            LanguageType::LanguageJp => "LANGUAGE_JP",
            LanguageType::LanguageFr => "LANGUAGE_FR",
            LanguageType::LanguageDe => "LANGUAGE_DE",
            LanguageType::LanguageEs => "LANGUAGE_ES",
            LanguageType::LanguagePt => "LANGUAGE_PT",
            LanguageType::LanguageRu => "LANGUAGE_RU",
            LanguageType::LanguageTh => "LANGUAGE_TH",
            LanguageType::LanguageVi => "LANGUAGE_VI",
            LanguageType::LanguageId => "LANGUAGE_ID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LANGUAGE_NONE" => Some(Self::LanguageNone),
            "LANGUAGE_SC" => Some(Self::LanguageSc),
            "LANGUAGE_TC" => Some(Self::LanguageTc),
            "LANGUAGE_EN" => Some(Self::LanguageEn),
            "LANGUAGE_KR" => Some(Self::LanguageKr),
            "LANGUAGE_JP" => Some(Self::LanguageJp),
            "LANGUAGE_FR" => Some(Self::LanguageFr),
            "LANGUAGE_DE" => Some(Self::LanguageDe),
            "LANGUAGE_ES" => Some(Self::LanguageEs),
            "LANGUAGE_PT" => Some(Self::LanguagePt),
            "LANGUAGE_RU" => Some(Self::LanguageRu),
            "LANGUAGE_TH" => Some(Self::LanguageTh),
            "LANGUAGE_VI" => Some(Self::LanguageVi),
            "LANGUAGE_ID" => Some(Self::LanguageId),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlatformType {
    Editor = 0,
    Ios = 1,
    Android = 2,
    Pc = 3,
    Web = 4,
    Wap = 5,
    Ps4 = 6,
    Nintendo = 7,
    CloudAndroid = 8,
    CloudPc = 9,
    CloudIos = 10,
    Ps5 = 11,
    Mac = 12,
    CloudMac = 13,
    CloudWebAndroid = 20,
    CloudWebIos = 21,
    CloudWebPc = 22,
    CloudWebMac = 23,
    CloudWebTouch = 24,
    CloudWebKeyboard = 25,
}
impl PlatformType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PlatformType::Editor => "EDITOR",
            PlatformType::Ios => "IOS",
            PlatformType::Android => "ANDROID",
            PlatformType::Pc => "PC",
            PlatformType::Web => "WEB",
            PlatformType::Wap => "WAP",
            PlatformType::Ps4 => "PS4",
            PlatformType::Nintendo => "NINTENDO",
            PlatformType::CloudAndroid => "CLOUD_ANDROID",
            PlatformType::CloudPc => "CLOUD_PC",
            PlatformType::CloudIos => "CLOUD_IOS",
            PlatformType::Ps5 => "PS5",
            PlatformType::Mac => "MAC",
            PlatformType::CloudMac => "CLOUD_MAC",
            PlatformType::CloudWebAndroid => "CLOUD_WEB_ANDROID",
            PlatformType::CloudWebIos => "CLOUD_WEB_IOS",
            PlatformType::CloudWebPc => "CLOUD_WEB_PC",
            PlatformType::CloudWebMac => "CLOUD_WEB_MAC",
            PlatformType::CloudWebTouch => "CLOUD_WEB_TOUCH",
            PlatformType::CloudWebKeyboard => "CLOUD_WEB_KEYBOARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EDITOR" => Some(Self::Editor),
            "IOS" => Some(Self::Ios),
            "ANDROID" => Some(Self::Android),
            "PC" => Some(Self::Pc),
            "WEB" => Some(Self::Web),
            "WAP" => Some(Self::Wap),
            "PS4" => Some(Self::Ps4),
            "NINTENDO" => Some(Self::Nintendo),
            "CLOUD_ANDROID" => Some(Self::CloudAndroid),
            "CLOUD_PC" => Some(Self::CloudPc),
            "CLOUD_IOS" => Some(Self::CloudIos),
            "PS5" => Some(Self::Ps5),
            "MAC" => Some(Self::Mac),
            "CLOUD_MAC" => Some(Self::CloudMac),
            "CLOUD_WEB_ANDROID" => Some(Self::CloudWebAndroid),
            "CLOUD_WEB_IOS" => Some(Self::CloudWebIos),
            "CLOUD_WEB_PC" => Some(Self::CloudWebPc),
            "CLOUD_WEB_MAC" => Some(Self::CloudWebMac),
            "CLOUD_WEB_TOUCH" => Some(Self::CloudWebTouch),
            "CLOUD_WEB_KEYBOARD" => Some(Self::CloudWebKeyboard),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReloginType {
    NoKick = 0,
    ForceKick = 1,
    IdleKick = 2,
    Silence = 3,
}
impl ReloginType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ReloginType::NoKick => "NO_KICK",
            ReloginType::ForceKick => "FORCE_KICK",
            ReloginType::IdleKick => "IDLE_KICK",
            ReloginType::Silence => "SILENCE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NO_KICK" => Some(Self::NoKick),
            "FORCE_KICK" => Some(Self::ForceKick),
            "IDLE_KICK" => Some(Self::IdleKick),
            "SILENCE" => Some(Self::Silence),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AvatarType {
    None = 0,
    AvatarTrialType = 1,
    AvatarLimitType = 2,
    AvatarFormalType = 3,
    AvatarAssistType = 4,
    AvatarAetherDivideType = 5,
    AvatarUpgradeAvailableType = 6,
}
impl AvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AvatarType::None => "AVATAR_TYPE_NONE",
            AvatarType::AvatarTrialType => "AVATAR_TRIAL_TYPE",
            AvatarType::AvatarLimitType => "AVATAR_LIMIT_TYPE",
            AvatarType::AvatarFormalType => "AVATAR_FORMAL_TYPE",
            AvatarType::AvatarAssistType => "AVATAR_ASSIST_TYPE",
            AvatarType::AvatarAetherDivideType => "AVATAR_AETHER_DIVIDE_TYPE",
            AvatarType::AvatarUpgradeAvailableType => "AVATAR_UPGRADE_AVAILABLE_TYPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AVATAR_TYPE_NONE" => Some(Self::None),
            "AVATAR_TRIAL_TYPE" => Some(Self::AvatarTrialType),
            "AVATAR_LIMIT_TYPE" => Some(Self::AvatarLimitType),
            "AVATAR_FORMAL_TYPE" => Some(Self::AvatarFormalType),
            "AVATAR_ASSIST_TYPE" => Some(Self::AvatarAssistType),
            "AVATAR_AETHER_DIVIDE_TYPE" => Some(Self::AvatarAetherDivideType),
            "AVATAR_UPGRADE_AVAILABLE_TYPE" => Some(Self::AvatarUpgradeAvailableType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MultiPathAvatarType {
    None = 0,
    Mar7thKnightType = 1001,
    Mar7thRogueType = 1224,
    BoyWarriorType = 8001,
    GirlWarriorType = 8002,
    BoyKnightType = 8003,
    GirlKnightType = 8004,
    BoyShamanType = 8005,
    GirlShamanType = 8006,
}
impl MultiPathAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MultiPathAvatarType::None => "MultiPathAvatarTypeNone",
            MultiPathAvatarType::Mar7thKnightType => "Mar_7thKnightType",
            MultiPathAvatarType::Mar7thRogueType => "Mar_7thRogueType",
            MultiPathAvatarType::BoyWarriorType => "BoyWarriorType",
            MultiPathAvatarType::GirlWarriorType => "GirlWarriorType",
            MultiPathAvatarType::BoyKnightType => "BoyKnightType",
            MultiPathAvatarType::GirlKnightType => "GirlKnightType",
            MultiPathAvatarType::BoyShamanType => "BoyShamanType",
            MultiPathAvatarType::GirlShamanType => "GirlShamanType",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MultiPathAvatarTypeNone" => Some(Self::None),
            "Mar_7thKnightType" => Some(Self::Mar7thKnightType),
            "Mar_7thRogueType" => Some(Self::Mar7thRogueType),
            "BoyWarriorType" => Some(Self::BoyWarriorType),
            "GirlWarriorType" => Some(Self::GirlWarriorType),
            "BoyKnightType" => Some(Self::BoyKnightType),
            "GirlKnightType" => Some(Self::GirlKnightType),
            "BoyShamanType" => Some(Self::BoyShamanType),
            "GirlShamanType" => Some(Self::GirlShamanType),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gender {
    None = 0,
    Man = 1,
    Woman = 2,
}
impl Gender {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gender::None => "GenderNone",
            Gender::Man => "GenderMan",
            Gender::Woman => "GenderWoman",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GenderNone" => Some(Self::None),
            "GenderMan" => Some(Self::Man),
            "GenderWoman" => Some(Self::Woman),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductType {
    ProductNone = 0,
    ProductNormal = 1,
    ProductLimit = 2,
    ProductLimitNoPay = 3,
    ProductNoProcessOrder = 4,
}
impl ProductType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProductType::ProductNone => "PRODUCT_NONE",
            ProductType::ProductNormal => "PRODUCT_NORMAL",
            ProductType::ProductLimit => "PRODUCT_LIMIT",
            ProductType::ProductLimitNoPay => "PRODUCT_LIMIT_NO_PAY",
            ProductType::ProductNoProcessOrder => "PRODUCT_NO_PROCESS_ORDER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_NONE" => Some(Self::ProductNone),
            "PRODUCT_NORMAL" => Some(Self::ProductNormal),
            "PRODUCT_LIMIT" => Some(Self::ProductLimit),
            "PRODUCT_LIMIT_NO_PAY" => Some(Self::ProductLimitNoPay),
            "PRODUCT_NO_PROCESS_ORDER" => Some(Self::ProductNoProcessOrder),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProductGiftType {
    ProductGiftNone = 0,
    ProductGiftCoin = 1,
    ProductGiftMonthCard = 2,
    ProductGiftBp68 = 3,
    ProductGiftBp128 = 4,
    ProductGiftBp68Upgrade128 = 5,
    ProductGiftPointCard = 6,
    ProductGiftPsPreOrder1 = 7,
    ProductGiftPsPreOrder2 = 8,
    ProductGiftGooglePoints100 = 9,
    ProductGiftGooglePoints150 = 10,
    ProductGiftPsPointCard030 = 11,
    ProductGiftPsPointCard050 = 12,
    ProductGiftPsPointCard100 = 13,
}
impl ProductGiftType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ProductGiftType::ProductGiftNone => "PRODUCT_GIFT_NONE",
            ProductGiftType::ProductGiftCoin => "PRODUCT_GIFT_COIN",
            ProductGiftType::ProductGiftMonthCard => "PRODUCT_GIFT_MONTH_CARD",
            ProductGiftType::ProductGiftBp68 => "PRODUCT_GIFT_BP_68",
            ProductGiftType::ProductGiftBp128 => "PRODUCT_GIFT_BP_128",
            ProductGiftType::ProductGiftBp68Upgrade128 => "PRODUCT_GIFT_BP68_UPGRADE_128",
            ProductGiftType::ProductGiftPointCard => "PRODUCT_GIFT_POINT_CARD",
            ProductGiftType::ProductGiftPsPreOrder1 => "PRODUCT_GIFT_PS_PRE_ORDER_1",
            ProductGiftType::ProductGiftPsPreOrder2 => "PRODUCT_GIFT_PS_PRE_ORDER_2",
            ProductGiftType::ProductGiftGooglePoints100 => {
                "PRODUCT_GIFT_GOOGLE_POINTS_100"
            }
            ProductGiftType::ProductGiftGooglePoints150 => {
                "PRODUCT_GIFT_GOOGLE_POINTS_150"
            }
            ProductGiftType::ProductGiftPsPointCard030 => {
                "PRODUCT_GIFT_PS_POINT_CARD_030"
            }
            ProductGiftType::ProductGiftPsPointCard050 => {
                "PRODUCT_GIFT_PS_POINT_CARD_050"
            }
            ProductGiftType::ProductGiftPsPointCard100 => {
                "PRODUCT_GIFT_PS_POINT_CARD_100"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PRODUCT_GIFT_NONE" => Some(Self::ProductGiftNone),
            "PRODUCT_GIFT_COIN" => Some(Self::ProductGiftCoin),
            "PRODUCT_GIFT_MONTH_CARD" => Some(Self::ProductGiftMonthCard),
            "PRODUCT_GIFT_BP_68" => Some(Self::ProductGiftBp68),
            "PRODUCT_GIFT_BP_128" => Some(Self::ProductGiftBp128),
            "PRODUCT_GIFT_BP68_UPGRADE_128" => Some(Self::ProductGiftBp68Upgrade128),
            "PRODUCT_GIFT_POINT_CARD" => Some(Self::ProductGiftPointCard),
            "PRODUCT_GIFT_PS_PRE_ORDER_1" => Some(Self::ProductGiftPsPreOrder1),
            "PRODUCT_GIFT_PS_PRE_ORDER_2" => Some(Self::ProductGiftPsPreOrder2),
            "PRODUCT_GIFT_GOOGLE_POINTS_100" => Some(Self::ProductGiftGooglePoints100),
            "PRODUCT_GIFT_GOOGLE_POINTS_150" => Some(Self::ProductGiftGooglePoints150),
            "PRODUCT_GIFT_PS_POINT_CARD_030" => Some(Self::ProductGiftPsPointCard030),
            "PRODUCT_GIFT_PS_POINT_CARD_050" => Some(Self::ProductGiftPsPointCard050),
            "PRODUCT_GIFT_PS_POINT_CARD_100" => Some(Self::ProductGiftPsPointCard100),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FeatureSwitchType {
    FeatureSwitchNone = 0,
    FeatureSwitchShop = 1,
    FeatureSwitchLineupName = 2,
    FeatureSwitchRechargeShop = 3,
    FeatureSwitchNickname = 4,
    FeatureSwitchSignature = 5,
    FeatureSwitchBattlepass = 6,
    FeatureSwitchPunkLord = 7,
    FeatureSwitchMonthcardDaily = 8,
    FeatureSwitchPictureShare = 9,
    FeatureSwitchRogue = 10,
    FeatureSwitchChallenge = 11,
    FeatureSwitchCocoon = 12,
    FeatureSwitchRaid = 13,
    FeatureSwitchMazePlaneEvent = 14,
    FeatureSwitchActivityPanel = 15,
    FeatureSwitchMailbox = 16,
    FeatureSwitchQuest = 17,
    FeatureSwitchGacha = 18,
    FeatureSwitchChat = 19,
    FeatureSwitchModifyFriendAlias = 20,
    FeatureSwitchUseItem = 21,
    FeatureSwitchActivitySchedule = 22,
    FeatureSwitchFarmElement = 23,
    FeatureSwitchAchievementLevel = 24,
    FeatureSwitchDailyActiveLevel = 25,
    FeatureSwitchPlayerReturn = 26,
    FeatureSwitchFirstSetNickname = 27,
    FeatureSwitchMainMissionReward = 28,
    FeatureSwitchSubMissionReward = 29,
    FeatureSwitchPamMission = 30,
    FeatureSwitchDailyMission = 31,
    FeatureSwitchDestroyItem = 32,
    FeatureSwitchConsumeItemTurn = 33,
    FeatureSwitchRogueModifier = 34,
    FeatureSwitchChessRogue = 35,
    FeatureSwitchChessRogueBoard = 36,
    FeatureSwitchRollShop = 37,
    FeatureSwitchH5Return = 38,
    FeatureSwitchOffering = 39,
    FeatureSwitchServerRedPoint = 40,
    FeatureSwitchMonopolyOptionRatio = 41,
    FeatureSwitchMonopolyGetRaffleTicket = 42,
    FeatureSwitchMonopolyTakeRaffleReward = 43,
    FeatureSwitchChallengeRecommendLineup = 44,
    FeatureSwitchPsnMemberShipCheck = 45,
    FeatureSwitchPlayerBoardDevelopment = 46,
    FeatureSwitchPvp = 47,
    FeatureSwitchRogueMode = 48,
    FeatureSwitchRogueTournUgc = 49,
    FeatureSwitchRelicFilterPlanName = 50,
    FeatureSwitchMazeItemUseBuffDrop = 51,
    FeatureSwitchRedDot = 52,
}
impl FeatureSwitchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FeatureSwitchType::FeatureSwitchNone => "FEATURE_SWITCH_NONE",
            FeatureSwitchType::FeatureSwitchShop => "FEATURE_SWITCH_SHOP",
            FeatureSwitchType::FeatureSwitchLineupName => "FEATURE_SWITCH_LINEUP_NAME",
            FeatureSwitchType::FeatureSwitchRechargeShop => {
                "FEATURE_SWITCH_RECHARGE_SHOP"
            }
            FeatureSwitchType::FeatureSwitchNickname => "FEATURE_SWITCH_NICKNAME",
            FeatureSwitchType::FeatureSwitchSignature => "FEATURE_SWITCH_SIGNATURE",
            FeatureSwitchType::FeatureSwitchBattlepass => "FEATURE_SWITCH_BATTLEPASS",
            FeatureSwitchType::FeatureSwitchPunkLord => "FEATURE_SWITCH_PUNK_LORD",
            FeatureSwitchType::FeatureSwitchMonthcardDaily => {
                "FEATURE_SWITCH_MONTHCARD_DAILY"
            }
            FeatureSwitchType::FeatureSwitchPictureShare => {
                "FEATURE_SWITCH_PICTURE_SHARE"
            }
            FeatureSwitchType::FeatureSwitchRogue => "FEATURE_SWITCH_ROGUE",
            FeatureSwitchType::FeatureSwitchChallenge => "FEATURE_SWITCH_CHALLENGE",
            FeatureSwitchType::FeatureSwitchCocoon => "FEATURE_SWITCH_COCOON",
            FeatureSwitchType::FeatureSwitchRaid => "FEATURE_SWITCH_RAID",
            FeatureSwitchType::FeatureSwitchMazePlaneEvent => {
                "FEATURE_SWITCH_MAZE_PLANE_EVENT"
            }
            FeatureSwitchType::FeatureSwitchActivityPanel => {
                "FEATURE_SWITCH_ACTIVITY_PANEL"
            }
            FeatureSwitchType::FeatureSwitchMailbox => "FEATURE_SWITCH_MAILBOX",
            FeatureSwitchType::FeatureSwitchQuest => "FEATURE_SWITCH_QUEST",
            FeatureSwitchType::FeatureSwitchGacha => "FEATURE_SWITCH_GACHA",
            FeatureSwitchType::FeatureSwitchChat => "FEATURE_SWITCH_CHAT",
            FeatureSwitchType::FeatureSwitchModifyFriendAlias => {
                "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS"
            }
            FeatureSwitchType::FeatureSwitchUseItem => "FEATURE_SWITCH_USE_ITEM",
            FeatureSwitchType::FeatureSwitchActivitySchedule => {
                "FEATURE_SWITCH_ACTIVITY_SCHEDULE"
            }
            FeatureSwitchType::FeatureSwitchFarmElement => "FEATURE_SWITCH_FARM_ELEMENT",
            FeatureSwitchType::FeatureSwitchAchievementLevel => {
                "FEATURE_SWITCH_ACHIEVEMENT_LEVEL"
            }
            FeatureSwitchType::FeatureSwitchDailyActiveLevel => {
                "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL"
            }
            FeatureSwitchType::FeatureSwitchPlayerReturn => {
                "FEATURE_SWITCH_PLAYER_RETURN"
            }
            FeatureSwitchType::FeatureSwitchFirstSetNickname => {
                "FEATURE_SWITCH_FIRST_SET_NICKNAME"
            }
            FeatureSwitchType::FeatureSwitchMainMissionReward => {
                "FEATURE_SWITCH_MAIN_MISSION_REWARD"
            }
            FeatureSwitchType::FeatureSwitchSubMissionReward => {
                "FEATURE_SWITCH_SUB_MISSION_REWARD"
            }
            FeatureSwitchType::FeatureSwitchPamMission => "FEATURE_SWITCH_PAM_MISSION",
            FeatureSwitchType::FeatureSwitchDailyMission => {
                "FEATURE_SWITCH_DAILY_MISSION"
            }
            FeatureSwitchType::FeatureSwitchDestroyItem => "FEATURE_SWITCH_DESTROY_ITEM",
            FeatureSwitchType::FeatureSwitchConsumeItemTurn => {
                "FEATURE_SWITCH_CONSUME_ITEM_TURN"
            }
            FeatureSwitchType::FeatureSwitchRogueModifier => {
                "FEATURE_SWITCH_ROGUE_MODIFIER"
            }
            FeatureSwitchType::FeatureSwitchChessRogue => "FEATURE_SWITCH_CHESS_ROGUE",
            FeatureSwitchType::FeatureSwitchChessRogueBoard => {
                "FEATURE_SWITCH_CHESS_ROGUE_BOARD"
            }
            FeatureSwitchType::FeatureSwitchRollShop => "FEATURE_SWITCH_ROLL_SHOP",
            FeatureSwitchType::FeatureSwitchH5Return => "FEATURE_SWITCH_H5_RETURN",
            FeatureSwitchType::FeatureSwitchOffering => "FEATURE_SWITCH_OFFERING",
            FeatureSwitchType::FeatureSwitchServerRedPoint => {
                "FEATURE_SWITCH_SERVER_RED_POINT"
            }
            FeatureSwitchType::FeatureSwitchMonopolyOptionRatio => {
                "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO"
            }
            FeatureSwitchType::FeatureSwitchMonopolyGetRaffleTicket => {
                "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET"
            }
            FeatureSwitchType::FeatureSwitchMonopolyTakeRaffleReward => {
                "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD"
            }
            FeatureSwitchType::FeatureSwitchChallengeRecommendLineup => {
                "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP"
            }
            FeatureSwitchType::FeatureSwitchPsnMemberShipCheck => {
                "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK"
            }
            FeatureSwitchType::FeatureSwitchPlayerBoardDevelopment => {
                "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT"
            }
            FeatureSwitchType::FeatureSwitchPvp => "FEATURE_SWITCH_PVP",
            FeatureSwitchType::FeatureSwitchRogueMode => "FEATURE_SWITCH_ROGUE_MODE",
            FeatureSwitchType::FeatureSwitchRogueTournUgc => {
                "FEATURE_SWITCH_ROGUE_TOURN_UGC"
            }
            FeatureSwitchType::FeatureSwitchRelicFilterPlanName => {
                "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME"
            }
            FeatureSwitchType::FeatureSwitchMazeItemUseBuffDrop => {
                "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP"
            }
            FeatureSwitchType::FeatureSwitchRedDot => "FEATURE_SWITCH_RED_DOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEATURE_SWITCH_NONE" => Some(Self::FeatureSwitchNone),
            "FEATURE_SWITCH_SHOP" => Some(Self::FeatureSwitchShop),
            "FEATURE_SWITCH_LINEUP_NAME" => Some(Self::FeatureSwitchLineupName),
            "FEATURE_SWITCH_RECHARGE_SHOP" => Some(Self::FeatureSwitchRechargeShop),
            "FEATURE_SWITCH_NICKNAME" => Some(Self::FeatureSwitchNickname),
            "FEATURE_SWITCH_SIGNATURE" => Some(Self::FeatureSwitchSignature),
            "FEATURE_SWITCH_BATTLEPASS" => Some(Self::FeatureSwitchBattlepass),
            "FEATURE_SWITCH_PUNK_LORD" => Some(Self::FeatureSwitchPunkLord),
            "FEATURE_SWITCH_MONTHCARD_DAILY" => Some(Self::FeatureSwitchMonthcardDaily),
            "FEATURE_SWITCH_PICTURE_SHARE" => Some(Self::FeatureSwitchPictureShare),
            "FEATURE_SWITCH_ROGUE" => Some(Self::FeatureSwitchRogue),
            "FEATURE_SWITCH_CHALLENGE" => Some(Self::FeatureSwitchChallenge),
            "FEATURE_SWITCH_COCOON" => Some(Self::FeatureSwitchCocoon),
            "FEATURE_SWITCH_RAID" => Some(Self::FeatureSwitchRaid),
            "FEATURE_SWITCH_MAZE_PLANE_EVENT" => Some(Self::FeatureSwitchMazePlaneEvent),
            "FEATURE_SWITCH_ACTIVITY_PANEL" => Some(Self::FeatureSwitchActivityPanel),
            "FEATURE_SWITCH_MAILBOX" => Some(Self::FeatureSwitchMailbox),
            "FEATURE_SWITCH_QUEST" => Some(Self::FeatureSwitchQuest),
            "FEATURE_SWITCH_GACHA" => Some(Self::FeatureSwitchGacha),
            "FEATURE_SWITCH_CHAT" => Some(Self::FeatureSwitchChat),
            "FEATURE_SWITCH_MODIFY_FRIEND_ALIAS" => {
                Some(Self::FeatureSwitchModifyFriendAlias)
            }
            "FEATURE_SWITCH_USE_ITEM" => Some(Self::FeatureSwitchUseItem),
            "FEATURE_SWITCH_ACTIVITY_SCHEDULE" => {
                Some(Self::FeatureSwitchActivitySchedule)
            }
            "FEATURE_SWITCH_FARM_ELEMENT" => Some(Self::FeatureSwitchFarmElement),
            "FEATURE_SWITCH_ACHIEVEMENT_LEVEL" => {
                Some(Self::FeatureSwitchAchievementLevel)
            }
            "FEATURE_SWITCH_DAILY_ACTIVE_LEVEL" => {
                Some(Self::FeatureSwitchDailyActiveLevel)
            }
            "FEATURE_SWITCH_PLAYER_RETURN" => Some(Self::FeatureSwitchPlayerReturn),
            "FEATURE_SWITCH_FIRST_SET_NICKNAME" => {
                Some(Self::FeatureSwitchFirstSetNickname)
            }
            "FEATURE_SWITCH_MAIN_MISSION_REWARD" => {
                Some(Self::FeatureSwitchMainMissionReward)
            }
            "FEATURE_SWITCH_SUB_MISSION_REWARD" => {
                Some(Self::FeatureSwitchSubMissionReward)
            }
            "FEATURE_SWITCH_PAM_MISSION" => Some(Self::FeatureSwitchPamMission),
            "FEATURE_SWITCH_DAILY_MISSION" => Some(Self::FeatureSwitchDailyMission),
            "FEATURE_SWITCH_DESTROY_ITEM" => Some(Self::FeatureSwitchDestroyItem),
            "FEATURE_SWITCH_CONSUME_ITEM_TURN" => {
                Some(Self::FeatureSwitchConsumeItemTurn)
            }
            "FEATURE_SWITCH_ROGUE_MODIFIER" => Some(Self::FeatureSwitchRogueModifier),
            "FEATURE_SWITCH_CHESS_ROGUE" => Some(Self::FeatureSwitchChessRogue),
            "FEATURE_SWITCH_CHESS_ROGUE_BOARD" => {
                Some(Self::FeatureSwitchChessRogueBoard)
            }
            "FEATURE_SWITCH_ROLL_SHOP" => Some(Self::FeatureSwitchRollShop),
            "FEATURE_SWITCH_H5_RETURN" => Some(Self::FeatureSwitchH5Return),
            "FEATURE_SWITCH_OFFERING" => Some(Self::FeatureSwitchOffering),
            "FEATURE_SWITCH_SERVER_RED_POINT" => Some(Self::FeatureSwitchServerRedPoint),
            "FEATURE_SWITCH_MONOPOLY_OPTION_RATIO" => {
                Some(Self::FeatureSwitchMonopolyOptionRatio)
            }
            "FEATURE_SWITCH_MONOPOLY_GET_RAFFLE_TICKET" => {
                Some(Self::FeatureSwitchMonopolyGetRaffleTicket)
            }
            "FEATURE_SWITCH_MONOPOLY_TAKE_RAFFLE_REWARD" => {
                Some(Self::FeatureSwitchMonopolyTakeRaffleReward)
            }
            "FEATURE_SWITCH_CHALLENGE_RECOMMEND_LINEUP" => {
                Some(Self::FeatureSwitchChallengeRecommendLineup)
            }
            "FEATURE_SWITCH_PSN_MEMBER_SHIP_CHECK" => {
                Some(Self::FeatureSwitchPsnMemberShipCheck)
            }
            "FEATURE_SWITCH_PLAYER_BOARD_DEVELOPMENT" => {
                Some(Self::FeatureSwitchPlayerBoardDevelopment)
            }
            "FEATURE_SWITCH_PVP" => Some(Self::FeatureSwitchPvp),
            "FEATURE_SWITCH_ROGUE_MODE" => Some(Self::FeatureSwitchRogueMode),
            "FEATURE_SWITCH_ROGUE_TOURN_UGC" => Some(Self::FeatureSwitchRogueTournUgc),
            "FEATURE_SWITCH_RELIC_FILTER_PLAN_NAME" => {
                Some(Self::FeatureSwitchRelicFilterPlanName)
            }
            "FEATURE_SWITCH_MAZE_ITEM_USE_BUFF_DROP" => {
                Some(Self::FeatureSwitchMazeItemUseBuffDrop)
            }
            "FEATURE_SWITCH_RED_DOT" => Some(Self::FeatureSwitchRedDot),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SecretKeyType {
    SecretKeyNone = 0,
    SecretKeyServerCheck = 1,
    SecretKeyVideo = 2,
    SecretKeyBattleTime = 3,
}
impl SecretKeyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SecretKeyType::SecretKeyNone => "SECRET_KEY_NONE",
            SecretKeyType::SecretKeyServerCheck => "SECRET_KEY_SERVER_CHECK",
            SecretKeyType::SecretKeyVideo => "SECRET_KEY_VIDEO",
            SecretKeyType::SecretKeyBattleTime => "SECRET_KEY_BATTLE_TIME",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SECRET_KEY_NONE" => Some(Self::SecretKeyNone),
            "SECRET_KEY_SERVER_CHECK" => Some(Self::SecretKeyServerCheck),
            "SECRET_KEY_VIDEO" => Some(Self::SecretKeyVideo),
            "SECRET_KEY_BATTLE_TIME" => Some(Self::SecretKeyBattleTime),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ReplayType {
    None = 0,
    PunkLord = 1,
}
impl ReplayType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ReplayType::None => "REPLAY_TYPE_NONE",
            ReplayType::PunkLord => "REPLAY_TYPE_PUNK_LORD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REPLAY_TYPE_NONE" => Some(Self::None),
            "REPLAY_TYPE_PUNK_LORD" => Some(Self::PunkLord),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordShareType {
    None = 0,
    Friend = 1,
    All = 2,
}
impl PunkLordShareType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PunkLordShareType::None => "PUNK_LORD_SHARE_TYPE_NONE",
            PunkLordShareType::Friend => "PUNK_LORD_SHARE_TYPE_FRIEND",
            PunkLordShareType::All => "PUNK_LORD_SHARE_TYPE_ALL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_SHARE_TYPE_NONE" => Some(Self::None),
            "PUNK_LORD_SHARE_TYPE_FRIEND" => Some(Self::Friend),
            "PUNK_LORD_SHARE_TYPE_ALL" => Some(Self::All),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordAttackerStatus {
    None = 0,
    Attacked = 1,
    Attacking = 2,
    AttackedAndAttacking = 3,
}
impl PunkLordAttackerStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PunkLordAttackerStatus::None => "PUNK_LORD_ATTACKER_STATUS_NONE",
            PunkLordAttackerStatus::Attacked => "PUNK_LORD_ATTACKER_STATUS_ATTACKED",
            PunkLordAttackerStatus::Attacking => "PUNK_LORD_ATTACKER_STATUS_ATTACKING",
            PunkLordAttackerStatus::AttackedAndAttacking => {
                "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_ATTACKER_STATUS_NONE" => Some(Self::None),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED" => Some(Self::Attacked),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKING" => Some(Self::Attacking),
            "PUNK_LORD_ATTACKER_STATUS_ATTACKED_AND_ATTACKING" => {
                Some(Self::AttackedAndAttacking)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PunkLordMonsterInfoNotifyReason {
    None = 0,
    EnterRaid = 1,
    BattleEnd = 2,
    LeaveRaid = 3,
}
impl PunkLordMonsterInfoNotifyReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PunkLordMonsterInfoNotifyReason::None => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE"
            }
            PunkLordMonsterInfoNotifyReason::EnterRaid => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID"
            }
            PunkLordMonsterInfoNotifyReason::BattleEnd => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END"
            }
            PunkLordMonsterInfoNotifyReason::LeaveRaid => {
                "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_NONE" => Some(Self::None),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_ENTER_RAID" => Some(Self::EnterRaid),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_BATTLE_END" => Some(Self::BattleEnd),
            "PUNK_LORD_MONSTER_INFO_NOTIFY_REASON_LEAVE_RAID" => Some(Self::LeaveRaid),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChatType {
    None = 0,
    Private = 1,
    Group = 2,
}
impl ChatType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChatType::None => "CHAT_TYPE_NONE",
            ChatType::Private => "CHAT_TYPE_PRIVATE",
            ChatType::Group => "CHAT_TYPE_GROUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHAT_TYPE_NONE" => Some(Self::None),
            "CHAT_TYPE_PRIVATE" => Some(Self::Private),
            "CHAT_TYPE_GROUP" => Some(Self::Group),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MsgType {
    None = 0,
    CustomText = 1,
    Emoji = 2,
    Invite = 3,
}
impl MsgType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MsgType::None => "MSG_TYPE_NONE",
            MsgType::CustomText => "MSG_TYPE_CUSTOM_TEXT",
            MsgType::Emoji => "MSG_TYPE_EMOJI",
            MsgType::Invite => "MSG_TYPE_INVITE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MSG_TYPE_NONE" => Some(Self::None),
            "MSG_TYPE_CUSTOM_TEXT" => Some(Self::CustomText),
            "MSG_TYPE_EMOJI" => Some(Self::Emoji),
            "MSG_TYPE_INVITE" => Some(Self::Invite),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ShieldType {
    None = 0,
    Replace = 1,
    Shied = 2,
}
impl ShieldType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ShieldType::None => "SHIELD_TYPE_NONE",
            ShieldType::Replace => "SHIELD_TYPE_REPLACE",
            ShieldType::Shied => "SHIELD_TYPE_SHIED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SHIELD_TYPE_NONE" => Some(Self::None),
            "SHIELD_TYPE_REPLACE" => Some(Self::Replace),
            "SHIELD_TYPE_SHIED" => Some(Self::Shied),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FuncUnlockId {
    None = 0,
    Relic = 403,
    RelicNum = 404,
    Equipment = 401,
    Skilltree = 402,
    Gacha = 2300,
    Expedition = 3100,
    Compose = 4100,
    Fightactivity = 3700,
}
impl FuncUnlockId {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FuncUnlockId::None => "FUNC_UNLOCK_ID_NONE",
            FuncUnlockId::Relic => "FUNC_UNLOCK_ID_RELIC",
            FuncUnlockId::RelicNum => "FUNC_UNLOCK_ID_RELIC_NUM",
            FuncUnlockId::Equipment => "FUNC_UNLOCK_ID_EQUIPMENT",
            FuncUnlockId::Skilltree => "FUNC_UNLOCK_ID_SKILLTREE",
            FuncUnlockId::Gacha => "FUNC_UNLOCK_ID_GACHA",
            FuncUnlockId::Expedition => "FUNC_UNLOCK_ID_EXPEDITION",
            FuncUnlockId::Compose => "FUNC_UNLOCK_ID_COMPOSE",
            FuncUnlockId::Fightactivity => "FUNC_UNLOCK_ID_FIGHTACTIVITY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FUNC_UNLOCK_ID_NONE" => Some(Self::None),
            "FUNC_UNLOCK_ID_RELIC" => Some(Self::Relic),
            "FUNC_UNLOCK_ID_RELIC_NUM" => Some(Self::RelicNum),
            "FUNC_UNLOCK_ID_EQUIPMENT" => Some(Self::Equipment),
            "FUNC_UNLOCK_ID_SKILLTREE" => Some(Self::Skilltree),
            "FUNC_UNLOCK_ID_GACHA" => Some(Self::Gacha),
            "FUNC_UNLOCK_ID_EXPEDITION" => Some(Self::Expedition),
            "FUNC_UNLOCK_ID_COMPOSE" => Some(Self::Compose),
            "FUNC_UNLOCK_ID_FIGHTACTIVITY" => Some(Self::Fightactivity),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AssistAvatarType {
    AssistAvatarUnknow = 0,
    AssistAvatarLevel = 1,
    AssistAvatarRank = 2,
}
impl AssistAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AssistAvatarType::AssistAvatarUnknow => "ASSIST_AVATAR_UNKNOW",
            AssistAvatarType::AssistAvatarLevel => "ASSIST_AVATAR_LEVEL",
            AssistAvatarType::AssistAvatarRank => "ASSIST_AVATAR_RANK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ASSIST_AVATAR_UNKNOW" => Some(Self::AssistAvatarUnknow),
            "ASSIST_AVATAR_LEVEL" => Some(Self::AssistAvatarLevel),
            "ASSIST_AVATAR_RANK" => Some(Self::AssistAvatarRank),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DevelopmentType {
    DevelopmentNone = 0,
    DevelopmentRogueCosmos = 1,
    DevelopmentRogueChess = 2,
    DevelopmentRogueChessNous = 3,
    DevelopmentMemoryChallenge = 4,
    DevelopmentStoryChallenge = 5,
    DevelopmentUnlockAvatar = 6,
    DevelopmentUnlockEquipment = 7,
    DevelopmentActivityStart = 8,
    DevelopmentActivityEnd = 9,
    DevelopmentBossChallenge = 10,
    DevelopmentRogueTourn = 11,
    DevelopmentRogueTournWeek = 12,
}
impl DevelopmentType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DevelopmentType::DevelopmentNone => "DEVELOPMENT_NONE",
            DevelopmentType::DevelopmentRogueCosmos => "DEVELOPMENT_ROGUE_COSMOS",
            DevelopmentType::DevelopmentRogueChess => "DEVELOPMENT_ROGUE_CHESS",
            DevelopmentType::DevelopmentRogueChessNous => "DEVELOPMENT_ROGUE_CHESS_NOUS",
            DevelopmentType::DevelopmentMemoryChallenge => "DEVELOPMENT_MEMORY_CHALLENGE",
            DevelopmentType::DevelopmentStoryChallenge => "DEVELOPMENT_STORY_CHALLENGE",
            DevelopmentType::DevelopmentUnlockAvatar => "DEVELOPMENT_UNLOCK_AVATAR",
            DevelopmentType::DevelopmentUnlockEquipment => "DEVELOPMENT_UNLOCK_EQUIPMENT",
            DevelopmentType::DevelopmentActivityStart => "DEVELOPMENT_ACTIVITY_START",
            DevelopmentType::DevelopmentActivityEnd => "DEVELOPMENT_ACTIVITY_END",
            DevelopmentType::DevelopmentBossChallenge => "DEVELOPMENT_BOSS_CHALLENGE",
            DevelopmentType::DevelopmentRogueTourn => "DEVELOPMENT_ROGUE_TOURN",
            DevelopmentType::DevelopmentRogueTournWeek => "DEVELOPMENT_ROGUE_TOURN_WEEK",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DEVELOPMENT_NONE" => Some(Self::DevelopmentNone),
            "DEVELOPMENT_ROGUE_COSMOS" => Some(Self::DevelopmentRogueCosmos),
            "DEVELOPMENT_ROGUE_CHESS" => Some(Self::DevelopmentRogueChess),
            "DEVELOPMENT_ROGUE_CHESS_NOUS" => Some(Self::DevelopmentRogueChessNous),
            "DEVELOPMENT_MEMORY_CHALLENGE" => Some(Self::DevelopmentMemoryChallenge),
            "DEVELOPMENT_STORY_CHALLENGE" => Some(Self::DevelopmentStoryChallenge),
            "DEVELOPMENT_UNLOCK_AVATAR" => Some(Self::DevelopmentUnlockAvatar),
            "DEVELOPMENT_UNLOCK_EQUIPMENT" => Some(Self::DevelopmentUnlockEquipment),
            "DEVELOPMENT_ACTIVITY_START" => Some(Self::DevelopmentActivityStart),
            "DEVELOPMENT_ACTIVITY_END" => Some(Self::DevelopmentActivityEnd),
            "DEVELOPMENT_BOSS_CHALLENGE" => Some(Self::DevelopmentBossChallenge),
            "DEVELOPMENT_ROGUE_TOURN" => Some(Self::DevelopmentRogueTourn),
            "DEVELOPMENT_ROGUE_TOURN_WEEK" => Some(Self::DevelopmentRogueTournWeek),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PlayingState {
    None = 0,
    PlayingRogueCosmos = 1,
    PlayingRogueChess = 2,
    PlayingRogueChessNous = 3,
    PlayingChallengeMemory = 4,
    PlayingChallengeStory = 5,
    PlayingChallengeBoss = 6,
    PlayingRogueTourn = 7,
}
impl PlayingState {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            PlayingState::None => "PLAYING_STATE_NONE",
            PlayingState::PlayingRogueCosmos => "PLAYING_ROGUE_COSMOS",
            PlayingState::PlayingRogueChess => "PLAYING_ROGUE_CHESS",
            PlayingState::PlayingRogueChessNous => "PLAYING_ROGUE_CHESS_NOUS",
            PlayingState::PlayingChallengeMemory => "PLAYING_CHALLENGE_MEMORY",
            PlayingState::PlayingChallengeStory => "PLAYING_CHALLENGE_STORY",
            PlayingState::PlayingChallengeBoss => "PLAYING_CHALLENGE_BOSS",
            PlayingState::PlayingRogueTourn => "PLAYING_ROGUE_TOURN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYING_STATE_NONE" => Some(Self::None),
            "PLAYING_ROGUE_COSMOS" => Some(Self::PlayingRogueCosmos),
            "PLAYING_ROGUE_CHESS" => Some(Self::PlayingRogueChess),
            "PLAYING_ROGUE_CHESS_NOUS" => Some(Self::PlayingRogueChessNous),
            "PLAYING_CHALLENGE_MEMORY" => Some(Self::PlayingChallengeMemory),
            "PLAYING_CHALLENGE_STORY" => Some(Self::PlayingChallengeStory),
            "PLAYING_CHALLENGE_BOSS" => Some(Self::PlayingChallengeBoss),
            "PLAYING_ROGUE_TOURN" => Some(Self::PlayingRogueTourn),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchRoomCharacter {
    None = 0,
    Leader = 1,
    Member = 2,
    Watcher = 3,
}
impl MatchRoomCharacter {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MatchRoomCharacter::None => "MatchRoomCharacter_None",
            MatchRoomCharacter::Leader => "MatchRoomCharacter_Leader",
            MatchRoomCharacter::Member => "MatchRoomCharacter_Member",
            MatchRoomCharacter::Watcher => "MatchRoomCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacter_None" => Some(Self::None),
            "MatchRoomCharacter_Leader" => Some(Self::Leader),
            "MatchRoomCharacter_Member" => Some(Self::Member),
            "MatchRoomCharacter_Watcher" => Some(Self::Watcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MatchRoomCharacterStatus {
    None = 0,
    Idle = 1,
    Operating = 2,
    Ready = 3,
    Fighting = 4,
    Watching = 5,
}
impl MatchRoomCharacterStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MatchRoomCharacterStatus::None => "MatchRoomCharacterStatus_None",
            MatchRoomCharacterStatus::Idle => "MatchRoomCharacterStatus_Idle",
            MatchRoomCharacterStatus::Operating => "MatchRoomCharacterStatus_Operating",
            MatchRoomCharacterStatus::Ready => "MatchRoomCharacterStatus_Ready",
            MatchRoomCharacterStatus::Fighting => "MatchRoomCharacterStatus_Fighting",
            MatchRoomCharacterStatus::Watching => "MatchRoomCharacterStatus_Watching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchRoomCharacterStatus_None" => Some(Self::None),
            "MatchRoomCharacterStatus_Idle" => Some(Self::Idle),
            "MatchRoomCharacterStatus_Operating" => Some(Self::Operating),
            "MatchRoomCharacterStatus_Ready" => Some(Self::Ready),
            "MatchRoomCharacterStatus_Fighting" => Some(Self::Fighting),
            "MatchRoomCharacterStatus_Watching" => Some(Self::Watching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleCheckStrategyType {
    BattleCheckStrategyIdentical = 0,
    BattleCheckStrategyServer = 1,
    BattleCheckStrategyClient = 2,
}
impl BattleCheckStrategyType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BattleCheckStrategyType::BattleCheckStrategyIdentical => {
                "BATTLE_CHECK_STRATEGY_IDENTICAL"
            }
            BattleCheckStrategyType::BattleCheckStrategyServer => {
                "BATTLE_CHECK_STRATEGY_SERVER"
            }
            BattleCheckStrategyType::BattleCheckStrategyClient => {
                "BATTLE_CHECK_STRATEGY_CLIENT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_STRATEGY_IDENTICAL" => Some(Self::BattleCheckStrategyIdentical),
            "BATTLE_CHECK_STRATEGY_SERVER" => Some(Self::BattleCheckStrategyServer),
            "BATTLE_CHECK_STRATEGY_CLIENT" => Some(Self::BattleCheckStrategyClient),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleCheckResultType {
    BattleCheckResultSucc = 0,
    BattleCheckResultFail = 1,
    BattleCheckResultPass = 2,
}
impl BattleCheckResultType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BattleCheckResultType::BattleCheckResultSucc => "BATTLE_CHECK_RESULT_SUCC",
            BattleCheckResultType::BattleCheckResultFail => "BATTLE_CHECK_RESULT_FAIL",
            BattleCheckResultType::BattleCheckResultPass => "BATTLE_CHECK_RESULT_PASS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_CHECK_RESULT_SUCC" => Some(Self::BattleCheckResultSucc),
            "BATTLE_CHECK_RESULT_FAIL" => Some(Self::BattleCheckResultFail),
            "BATTLE_CHECK_RESULT_PASS" => Some(Self::BattleCheckResultPass),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleModuleType {
    BattleModuleMaze = 0,
    BattleModuleChallenge = 1,
    BattleModuleCocoon = 2,
    BattleModuleRogue = 3,
    BattleModuleChallengeActivity = 4,
    BattleModuleTrialLevel = 5,
    BattleModuleAetherDivide = 6,
}
impl BattleModuleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BattleModuleType::BattleModuleMaze => "BATTLE_MODULE_MAZE",
            BattleModuleType::BattleModuleChallenge => "BATTLE_MODULE_CHALLENGE",
            BattleModuleType::BattleModuleCocoon => "BATTLE_MODULE_COCOON",
            BattleModuleType::BattleModuleRogue => "BATTLE_MODULE_ROGUE",
            BattleModuleType::BattleModuleChallengeActivity => {
                "BATTLE_MODULE_CHALLENGE_ACTIVITY"
            }
            BattleModuleType::BattleModuleTrialLevel => "BATTLE_MODULE_TRIAL_LEVEL",
            BattleModuleType::BattleModuleAetherDivide => "BATTLE_MODULE_AETHER_DIVIDE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_MODULE_MAZE" => Some(Self::BattleModuleMaze),
            "BATTLE_MODULE_CHALLENGE" => Some(Self::BattleModuleChallenge),
            "BATTLE_MODULE_COCOON" => Some(Self::BattleModuleCocoon),
            "BATTLE_MODULE_ROGUE" => Some(Self::BattleModuleRogue),
            "BATTLE_MODULE_CHALLENGE_ACTIVITY" => {
                Some(Self::BattleModuleChallengeActivity)
            }
            "BATTLE_MODULE_TRIAL_LEVEL" => Some(Self::BattleModuleTrialLevel),
            "BATTLE_MODULE_AETHER_DIVIDE" => Some(Self::BattleModuleAetherDivide),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gkaagdjgcjj {
    AetherdivideSpiritLineupNone = 0,
    AetherdivideSpiritLineupNormal = 1,
    AetherdivideSpiritLineupTrial = 2,
}
impl Gkaagdjgcjj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gkaagdjgcjj::AetherdivideSpiritLineupNone => {
                "AETHERDIVIDE_SPIRIT_LINEUP_NONE"
            }
            Gkaagdjgcjj::AetherdivideSpiritLineupNormal => {
                "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL"
            }
            Gkaagdjgcjj::AetherdivideSpiritLineupTrial => {
                "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AETHERDIVIDE_SPIRIT_LINEUP_NONE" => Some(Self::AetherdivideSpiritLineupNone),
            "AETHERDIVIDE_SPIRIT_LINEUP_NORMAL" => {
                Some(Self::AetherdivideSpiritLineupNormal)
            }
            "AETHERDIVIDE_SPIRIT_LINEUP_TRIAL" => {
                Some(Self::AetherdivideSpiritLineupTrial)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hlclpfefepb {
    BattleTargetTypeNone = 0,
    BattleTargetTypeScore = 1,
    BattleTargetTypeAchievement = 2,
    BattleTargetTypeRaid = 3,
    BattleTargetTypeChallengeScore = 4,
    BattleTargetTypeCommon = 5,
    BattleTargetTypeClientAchievement = 6,
}
impl Hlclpfefepb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hlclpfefepb::BattleTargetTypeNone => "BATTLE_TARGET_TYPE_NONE",
            Hlclpfefepb::BattleTargetTypeScore => "BATTLE_TARGET_TYPE_SCORE",
            Hlclpfefepb::BattleTargetTypeAchievement => "BATTLE_TARGET_TYPE_ACHIEVEMENT",
            Hlclpfefepb::BattleTargetTypeRaid => "BATTLE_TARGET_TYPE_RAID",
            Hlclpfefepb::BattleTargetTypeChallengeScore => {
                "BATTLE_TARGET_TYPE_CHALLENGE_SCORE"
            }
            Hlclpfefepb::BattleTargetTypeCommon => "BATTLE_TARGET_TYPE_COMMON",
            Hlclpfefepb::BattleTargetTypeClientAchievement => {
                "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_TARGET_TYPE_NONE" => Some(Self::BattleTargetTypeNone),
            "BATTLE_TARGET_TYPE_SCORE" => Some(Self::BattleTargetTypeScore),
            "BATTLE_TARGET_TYPE_ACHIEVEMENT" => Some(Self::BattleTargetTypeAchievement),
            "BATTLE_TARGET_TYPE_RAID" => Some(Self::BattleTargetTypeRaid),
            "BATTLE_TARGET_TYPE_CHALLENGE_SCORE" => {
                Some(Self::BattleTargetTypeChallengeScore)
            }
            "BATTLE_TARGET_TYPE_COMMON" => Some(Self::BattleTargetTypeCommon),
            "BATTLE_TARGET_TYPE_CLIENT_ACHIEVEMENT" => {
                Some(Self::BattleTargetTypeClientAchievement)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DeathSource {
    Unknown = 0,
    KilledByOthers = 1,
    KilledBySelf = 2,
    Escape = 3,
}
impl DeathSource {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DeathSource::Unknown => "UNKNOWN",
            DeathSource::KilledByOthers => "KILLED_BY_OTHERS",
            DeathSource::KilledBySelf => "KILLED_BY_SELF",
            DeathSource::Escape => "ESCAPE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "KILLED_BY_OTHERS" => Some(Self::KilledByOthers),
            "KILLED_BY_SELF" => Some(Self::KilledBySelf),
            "ESCAPE" => Some(Self::Escape),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleTag {
    TagNone = 0,
    TagHideNpcMonster = 1,
}
impl BattleTag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BattleTag::TagNone => "TAG_NONE",
            BattleTag::TagHideNpcMonster => "TAG_HIDE_NPC_MONSTER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TAG_NONE" => Some(Self::TagNone),
            "TAG_HIDE_NPC_MONSTER" => Some(Self::TagHideNpcMonster),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cmhfgepjlfl {
    NormalCreate = 0,
    FormChange = 1,
}
impl Cmhfgepjlfl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Cmhfgepjlfl::NormalCreate => "NORMAL_CREATE",
            Cmhfgepjlfl::FormChange => "FORM_CHANGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NORMAL_CREATE" => Some(Self::NormalCreate),
            "FORM_CHANGE" => Some(Self::FormChange),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndReason {
    None = 0,
    AllDie = 1,
    TurnLimit = 2,
}
impl BattleEndReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BattleEndReason::None => "BATTLE_END_REASON_NONE",
            BattleEndReason::AllDie => "BATTLE_END_REASON_ALL_DIE",
            BattleEndReason::TurnLimit => "BATTLE_END_REASON_TURN_LIMIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_REASON_NONE" => Some(Self::None),
            "BATTLE_END_REASON_ALL_DIE" => Some(Self::AllDie),
            "BATTLE_END_REASON_TURN_LIMIT" => Some(Self::TurnLimit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lbbkaebelpp {
    BattleStaticticEventNone = 0,
    BattleStaticticEventTreasureDungeonAddExplore = 1,
    BattleStaticticEventTreasureDungeonOpenGrid = 2,
    BattleStaticticEventTreasureDungeonPickupItem = 3,
    BattleStaticticEventTreasureDungeonUseBuff = 4,
    BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer = 5,
}
impl Lbbkaebelpp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lbbkaebelpp::BattleStaticticEventNone => "BATTLE_STATICTIC_EVENT_NONE",
            Lbbkaebelpp::BattleStaticticEventTreasureDungeonAddExplore => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE"
            }
            Lbbkaebelpp::BattleStaticticEventTreasureDungeonOpenGrid => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID"
            }
            Lbbkaebelpp::BattleStaticticEventTreasureDungeonPickupItem => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM"
            }
            Lbbkaebelpp::BattleStaticticEventTreasureDungeonUseBuff => {
                "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF"
            }
            Lbbkaebelpp::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer => {
                "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_STATICTIC_EVENT_NONE" => Some(Self::BattleStaticticEventNone),
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_ADD_EXPLORE" => {
                Some(Self::BattleStaticticEventTreasureDungeonAddExplore)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_OPEN_GRID" => {
                Some(Self::BattleStaticticEventTreasureDungeonOpenGrid)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_PICKUP_ITEM" => {
                Some(Self::BattleStaticticEventTreasureDungeonPickupItem)
            }
            "BATTLE_STATICTIC_EVENT_TREASURE_DUNGEON_USE_BUFF" => {
                Some(Self::BattleStaticticEventTreasureDungeonUseBuff)
            }
            "BATTLE_STATICTIC_EVENT_TELEVISION_ACTIVITY_UPDATE_MAZE_BUFF_LAYER" => {
                Some(Self::BattleStaticticEventTelevisionActivityUpdateMazeBuffLayer)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BattleEndStatus {
    BattleEndNone = 0,
    BattleEndWin = 1,
    BattleEndLose = 2,
    BattleEndQuit = 3,
}
impl BattleEndStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BattleEndStatus::BattleEndNone => "BATTLE_END_NONE",
            BattleEndStatus::BattleEndWin => "BATTLE_END_WIN",
            BattleEndStatus::BattleEndLose => "BATTLE_END_LOSE",
            BattleEndStatus::BattleEndQuit => "BATTLE_END_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_END_NONE" => Some(Self::BattleEndNone),
            "BATTLE_END_WIN" => Some(Self::BattleEndWin),
            "BATTLE_END_LOSE" => Some(Self::BattleEndLose),
            "BATTLE_END_QUIT" => Some(Self::BattleEndQuit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gkkpbgmoodd {
    FightGameModeNone = 0,
    FightGameModeMatch3 = 1,
}
impl Gkkpbgmoodd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gkkpbgmoodd::FightGameModeNone => "FIGHT_GAME_MODE_NONE",
            Gkkpbgmoodd::FightGameModeMatch3 => "FIGHT_GAME_MODE_MATCH3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_GAME_MODE_NONE" => Some(Self::FightGameModeNone),
            "FIGHT_GAME_MODE_MATCH3" => Some(Self::FightGameModeMatch3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Iafdbbcgofo {
    FightKickoutUnknown = 0,
    FightKickoutBlack = 1,
    FightKickoutByGm = 2,
    FightKickoutTimeout = 3,
    FightKickoutSessionReset = 4,
}
impl Iafdbbcgofo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Iafdbbcgofo::FightKickoutUnknown => "FIGHT_KICKOUT_UNKNOWN",
            Iafdbbcgofo::FightKickoutBlack => "FIGHT_KICKOUT_BLACK",
            Iafdbbcgofo::FightKickoutByGm => "FIGHT_KICKOUT_BY_GM",
            Iafdbbcgofo::FightKickoutTimeout => "FIGHT_KICKOUT_TIMEOUT",
            Iafdbbcgofo::FightKickoutSessionReset => "FIGHT_KICKOUT_SESSION_RESET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_KICKOUT_UNKNOWN" => Some(Self::FightKickoutUnknown),
            "FIGHT_KICKOUT_BLACK" => Some(Self::FightKickoutBlack),
            "FIGHT_KICKOUT_BY_GM" => Some(Self::FightKickoutByGm),
            "FIGHT_KICKOUT_TIMEOUT" => Some(Self::FightKickoutTimeout),
            "FIGHT_KICKOUT_SESSION_RESET" => Some(Self::FightKickoutSessionReset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eaejedljpgh {
    LobbyCharacterNone = 0,
    LobbyCharacterLeader = 1,
    LobbyCharacterMember = 2,
    LobbyCharacterWatcher = 3,
}
impl Eaejedljpgh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Eaejedljpgh::LobbyCharacterNone => "LobbyCharacter_None",
            Eaejedljpgh::LobbyCharacterLeader => "LobbyCharacter_Leader",
            Eaejedljpgh::LobbyCharacterMember => "LobbyCharacter_Member",
            Eaejedljpgh::LobbyCharacterWatcher => "LobbyCharacter_Watcher",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacter_None" => Some(Self::LobbyCharacterNone),
            "LobbyCharacter_Leader" => Some(Self::LobbyCharacterLeader),
            "LobbyCharacter_Member" => Some(Self::LobbyCharacterMember),
            "LobbyCharacter_Watcher" => Some(Self::LobbyCharacterWatcher),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gienaojphnb {
    LobbyCharacterStatusNone = 0,
    LobbyCharacterStatusIdle = 1,
    LobbyCharacterStatusOperating = 2,
    LobbyCharacterStatusReady = 3,
    LobbyCharacterStatusFighting = 4,
    LobbyCharacterStatusWatching = 5,
    LobbyCharacterStatusMatching = 6,
}
impl Gienaojphnb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gienaojphnb::LobbyCharacterStatusNone => "LobbyCharacterStatus_None",
            Gienaojphnb::LobbyCharacterStatusIdle => "LobbyCharacterStatus_Idle",
            Gienaojphnb::LobbyCharacterStatusOperating => {
                "LobbyCharacterStatus_Operating"
            }
            Gienaojphnb::LobbyCharacterStatusReady => "LobbyCharacterStatus_Ready",
            Gienaojphnb::LobbyCharacterStatusFighting => "LobbyCharacterStatus_Fighting",
            Gienaojphnb::LobbyCharacterStatusWatching => "LobbyCharacterStatus_Watching",
            Gienaojphnb::LobbyCharacterStatusMatching => "LobbyCharacterStatus_Matching",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyCharacterStatus_None" => Some(Self::LobbyCharacterStatusNone),
            "LobbyCharacterStatus_Idle" => Some(Self::LobbyCharacterStatusIdle),
            "LobbyCharacterStatus_Operating" => Some(Self::LobbyCharacterStatusOperating),
            "LobbyCharacterStatus_Ready" => Some(Self::LobbyCharacterStatusReady),
            "LobbyCharacterStatus_Fighting" => Some(Self::LobbyCharacterStatusFighting),
            "LobbyCharacterStatus_Watching" => Some(Self::LobbyCharacterStatusWatching),
            "LobbyCharacterStatus_Matching" => Some(Self::LobbyCharacterStatusMatching),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ejnhbdlcndj {
    LobbyModifyTypeNone = 0,
    LobbyModifyTypeIdle = 1,
    LobbyModifyTypeReady = 2,
    LobbyModifyTypeOperating = 3,
    LobbyModifyTypeCancelMatch = 4,
    LobbyModifyTypeMatch = 5,
    LobbyModifyTypeQuitLobby = 6,
    LobbyModifyTypeKickOut = 7,
    LobbyModifyTypeTimeOut = 8,
    LobbyModifyTypeJoinLobby = 9,
    LobbyModifyTypeLobbyDismiss = 10,
    LobbyModifyTypeMatchTimeOut = 11,
    LobbyModifyTypeFightStart = 12,
    LobbyModifyTypeLogout = 13,
    LobbyModifyTypeFightEnd = 14,
    LobbyModifyTypeFightRoomDestroyInInit = 15,
}
impl Ejnhbdlcndj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ejnhbdlcndj::LobbyModifyTypeNone => "LobbyModifyType_None",
            Ejnhbdlcndj::LobbyModifyTypeIdle => "LobbyModifyType_Idle",
            Ejnhbdlcndj::LobbyModifyTypeReady => "LobbyModifyType_Ready",
            Ejnhbdlcndj::LobbyModifyTypeOperating => "LobbyModifyType_Operating",
            Ejnhbdlcndj::LobbyModifyTypeCancelMatch => "LobbyModifyType_CancelMatch",
            Ejnhbdlcndj::LobbyModifyTypeMatch => "LobbyModifyType_Match",
            Ejnhbdlcndj::LobbyModifyTypeQuitLobby => "LobbyModifyType_QuitLobby",
            Ejnhbdlcndj::LobbyModifyTypeKickOut => "LobbyModifyType_KickOut",
            Ejnhbdlcndj::LobbyModifyTypeTimeOut => "LobbyModifyType_TimeOut",
            Ejnhbdlcndj::LobbyModifyTypeJoinLobby => "LobbyModifyType_JoinLobby",
            Ejnhbdlcndj::LobbyModifyTypeLobbyDismiss => "LobbyModifyType_LobbyDismiss",
            Ejnhbdlcndj::LobbyModifyTypeMatchTimeOut => "LobbyModifyType_MatchTimeOut",
            Ejnhbdlcndj::LobbyModifyTypeFightStart => "LobbyModifyType_FightStart",
            Ejnhbdlcndj::LobbyModifyTypeLogout => "LobbyModifyType_Logout",
            Ejnhbdlcndj::LobbyModifyTypeFightEnd => "LobbyModifyType_FightEnd",
            Ejnhbdlcndj::LobbyModifyTypeFightRoomDestroyInInit => {
                "LobbyModifyType_FightRoomDestroyInInit"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LobbyModifyType_None" => Some(Self::LobbyModifyTypeNone),
            "LobbyModifyType_Idle" => Some(Self::LobbyModifyTypeIdle),
            "LobbyModifyType_Ready" => Some(Self::LobbyModifyTypeReady),
            "LobbyModifyType_Operating" => Some(Self::LobbyModifyTypeOperating),
            "LobbyModifyType_CancelMatch" => Some(Self::LobbyModifyTypeCancelMatch),
            "LobbyModifyType_Match" => Some(Self::LobbyModifyTypeMatch),
            "LobbyModifyType_QuitLobby" => Some(Self::LobbyModifyTypeQuitLobby),
            "LobbyModifyType_KickOut" => Some(Self::LobbyModifyTypeKickOut),
            "LobbyModifyType_TimeOut" => Some(Self::LobbyModifyTypeTimeOut),
            "LobbyModifyType_JoinLobby" => Some(Self::LobbyModifyTypeJoinLobby),
            "LobbyModifyType_LobbyDismiss" => Some(Self::LobbyModifyTypeLobbyDismiss),
            "LobbyModifyType_MatchTimeOut" => Some(Self::LobbyModifyTypeMatchTimeOut),
            "LobbyModifyType_FightStart" => Some(Self::LobbyModifyTypeFightStart),
            "LobbyModifyType_Logout" => Some(Self::LobbyModifyTypeLogout),
            "LobbyModifyType_FightEnd" => Some(Self::LobbyModifyTypeFightEnd),
            "LobbyModifyType_FightRoomDestroyInInit" => {
                Some(Self::LobbyModifyTypeFightRoomDestroyInInit)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gfopbkkefeo {
    FightRoomDestroyReasonNone = 0,
    FightRoomDestroyReasonSvrStop = 1,
    FightRoomDestroyReasonGameEnd = 2,
}
impl Gfopbkkefeo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gfopbkkefeo::FightRoomDestroyReasonNone => "FIGHT_ROOM_DESTROY_REASON_NONE",
            Gfopbkkefeo::FightRoomDestroyReasonSvrStop => {
                "FIGHT_ROOM_DESTROY_REASON_SVR_STOP"
            }
            Gfopbkkefeo::FightRoomDestroyReasonGameEnd => {
                "FIGHT_ROOM_DESTROY_REASON_GAME_END"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_ROOM_DESTROY_REASON_NONE" => Some(Self::FightRoomDestroyReasonNone),
            "FIGHT_ROOM_DESTROY_REASON_SVR_STOP" => {
                Some(Self::FightRoomDestroyReasonSvrStop)
            }
            "FIGHT_ROOM_DESTROY_REASON_GAME_END" => {
                Some(Self::FightRoomDestroyReasonGameEnd)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Donhpbjnknp {
    Match3FinishReasonDefault = 0,
    Match3FinishReasonLeave = 1,
    Match3FinishReasonDie = 2,
    Match3FinishReasonGameend = 3,
    Match3FinishReasonKickout = 4,
}
impl Donhpbjnknp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Donhpbjnknp::Match3FinishReasonDefault => "MATCH3_FINISH_REASON_DEFAULT",
            Donhpbjnknp::Match3FinishReasonLeave => "MATCH3_FINISH_REASON_LEAVE",
            Donhpbjnknp::Match3FinishReasonDie => "MATCH3_FINISH_REASON_DIE",
            Donhpbjnknp::Match3FinishReasonGameend => "MATCH3_FINISH_REASON_GAMEEND",
            Donhpbjnknp::Match3FinishReasonKickout => "MATCH3_FINISH_REASON_KICKOUT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_FINISH_REASON_DEFAULT" => Some(Self::Match3FinishReasonDefault),
            "MATCH3_FINISH_REASON_LEAVE" => Some(Self::Match3FinishReasonLeave),
            "MATCH3_FINISH_REASON_DIE" => Some(Self::Match3FinishReasonDie),
            "MATCH3_FINISH_REASON_GAMEEND" => Some(Self::Match3FinishReasonGameend),
            "MATCH3_FINISH_REASON_KICKOUT" => Some(Self::Match3FinishReasonKickout),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nkbjfdkkbid {
    MatchUnitTypeNone = 0,
    MatchUnitTypeNormal = 1,
    MatchUnitTypeRobot = 2,
    MatchUnitTypeGm = 3,
}
impl Nkbjfdkkbid {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nkbjfdkkbid::MatchUnitTypeNone => "MATCH_UNIT_TYPE_NONE",
            Nkbjfdkkbid::MatchUnitTypeNormal => "MATCH_UNIT_TYPE_NORMAL",
            Nkbjfdkkbid::MatchUnitTypeRobot => "MATCH_UNIT_TYPE_ROBOT",
            Nkbjfdkkbid::MatchUnitTypeGm => "MATCH_UNIT_TYPE_GM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH_UNIT_TYPE_NONE" => Some(Self::MatchUnitTypeNone),
            "MATCH_UNIT_TYPE_NORMAL" => Some(Self::MatchUnitTypeNormal),
            "MATCH_UNIT_TYPE_ROBOT" => Some(Self::MatchUnitTypeRobot),
            "MATCH_UNIT_TYPE_GM" => Some(Self::MatchUnitTypeGm),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Retcode {
    RetSucc = 0,
    RetFail = 1,
    RetServerInternalError = 2,
    RetTimeout = 3,
    RetRepeatedReq = 4,
    RetReqParaInvalid = 5,
    RetPlayerDataError = 6,
    RetPlayerClientPaused = 7,
    RetFuncCheckFailed = 8,
    RetFeatureSwitchClosed = 9,
    RetFreqOverLimit = 10,
    RetSystemBusy = 11,
    RetPlayerNotOnline = 12,
    RetRepeateLogin = 1000,
    RetRetryLogin = 1001,
    RetWaitLogin = 1002,
    RetNotInWhiteList = 1003,
    RetInBlackList = 1004,
    RetAccountVerifyError = 1005,
    RetAccountParaError = 1006,
    RetAntiAddictLogin = 1007,
    RetCheckSumError = 1008,
    RetReachMaxPlayerNum = 1009,
    RetAlreadyRegistered = 1010,
    RetGenderError = 1011,
    SetNicknameRetCallbackProcessing = 1012,
    RetInGmBindAccess = 1013,
    RetQuestRewardAlreadyTaken = 1100,
    RetQuestNotAccept = 1101,
    RetQuestNotFinish = 1102,
    RetQuestStatusError = 1103,
    RetAchievementLevelNotReach = 1104,
    RetAchievementLevelAlreadyTaken = 1105,
    RetAvatarNotExist = 1200,
    RetAvatarResExpNotEnough = 1201,
    RetAvatarExpReachPromotionLimit = 1202,
    RetAvatarReachMaxPromotion = 1203,
    RetSkilltreeConfigNotExist = 1204,
    RetSkilltreeAlreadyUnlock = 1205,
    RetSkilltreePreLocked = 1206,
    RetSkilltreeLevelNotMeet = 1207,
    RetSkilltreeRankNotMeet = 1208,
    RetAvatarDressNoEquipment = 1209,
    RetAvatarExpItemNotExist = 1210,
    RetSkilltreePointLocked = 1211,
    RetSkilltreePointLevelUpgradeNotMatch = 1212,
    RetSkilltreePointLevelReachMax = 1213,
    RetWorldLevelNotMeet = 1214,
    RetPlayerLevelNotMeet = 1215,
    RetAvatarRankNotMatch = 1216,
    RetAvatarRankReachMax = 1217,
    RetHeroBasicTypeNotMatch = 1218,
    RetAvatarPromotionNotMeet = 1219,
    RetPromotionRewardConfigNotExist = 1220,
    RetPromotionRewardAlreadyTaken = 1221,
    RetAvatarSkinItemNotExist = 1222,
    RetAvatarSkinAlreadyDressed = 1223,
    RetAvatarNotDressSkin = 1224,
    RetAvatarSkinNotMatchAvatar = 1225,
    RetItemNotExist = 1300,
    RetItemCostNotEnough = 1301,
    RetItemCostTooMuch = 1302,
    RetItemNoCost = 1303,
    RetItemNotEnough = 1304,
    RetItemInvalid = 1305,
    RetItemConfigNotExist = 1306,
    RetScoinNotEnough = 1307,
    RetItemRewardExceedLimit = 1308,
    RetItemInvalidUse = 1309,
    RetItemUseConfigNotExist = 1310,
    RetRewardConfigNotExist = 1311,
    RetItemExceedLimit = 1312,
    RetItemCountInvalid = 1313,
    RetItemUseTargetTypeInvalid = 1314,
    RetItemUseSatietyFull = 1315,
    RetItemComposeNotExist = 1316,
    RetRelicComposeNotExist = 1317,
    RetItemCanNotSell = 1318,
    RetItemSellExceddLimit = 1319,
    RetItemNotInCostList = 1320,
    RetItemSpecialCostNotEnough = 1321,
    RetItemSpecialCostTooMuch = 1322,
    RetItemFormulaNotExist = 1323,
    RetItemAutoGiftOptionalNotExist = 1324,
    RetRelicComposeRelicInvalid = 1325,
    RetRelicComposeMainAffixIdInvalid = 1326,
    RetRelicComposeWrongFormulaType = 1327,
    RetRelicComposeRelicNotExist = 1328,
    RetRelicComposeBlackGoldCountInvalid = 1329,
    RetRelicComposeBlackGoldNotNeed = 1330,
    RetMonthCardCannotUse = 1331,
    RetItemRewardExceedDisappear = 1332,
    RetItemNeedRecycle = 1333,
    RetItemComposeExceedLimit = 1334,
    RetItemCanNotDestroy = 1335,
    RetItemAlreadyMark = 1336,
    RetItemMarkExceedLimit = 1337,
    RetItemNotMark = 1338,
    RetItenTurnFoodNotSet = 1339,
    RetItemTurnFoodAlreadySet = 1340,
    RetItemTurnFoodConsumeTypeError = 1341,
    RetItemTurnFoodSwitchAlreadyOpen = 1342,
    RetItemTurnFoodSwitchAlreadyClose = 1343,
    RetHcoinExchangeTooMuch = 1344,
    RetItemTurnFoodSceneTypeError = 1345,
    RetEquipmentAlreadyDressed = 1350,
    RetEquipmentNotExist = 1351,
    RetEquipmentReachLevelLimit = 1352,
    RetEquipmentConsumeSelf = 1353,
    RetEquipmentAlreadyLocked = 1354,
    RetEquipmentAlreadyUnlocked = 1355,
    RetEquipmentLocked = 1356,
    RetEquipmentSelectNumOverLimit = 1357,
    RetEquipmentRankUpMustConsumeSameTid = 1358,
    RetEquipmentPromotionReachMax = 1359,
    RetEquipmentRankUpReachMax = 1360,
    RetEquipmentLevelReachMax = 1361,
    RetEquipmentExceedLimit = 1362,
    RetRelicNotExist = 1363,
    RetRelicReachLevelLimit = 1364,
    RetRelicConsumeSelf = 1365,
    RetRelicAlreadyDressed = 1366,
    RetRelicLocked = 1367,
    RetRelicAlreadyLocked = 1368,
    RetRelicAlreadyUnlocked = 1369,
    RetRelicLevelIsNotZero = 1370,
    RetUniqueIdRepeated = 1371,
    RetEquipmentLevelNotMeet = 1372,
    RetEquipmentItemNotInCostList = 1373,
    RetEquipmentLevelGreaterThanOne = 1374,
    RetEquipmentAlreadyRanked = 1375,
    RetRelicExceedLimit = 1376,
    RetRelicAlreadyDiscarded = 1377,
    RetRelicAlreadyUndiscarded = 1378,
    RetEquipmentBatchLockTooFast = 1379,
    RetRelicFilterPlanSlotEmpty = 1380,
    RetRelicFilterPlanNumExceedLimit = 1381,
    RetRelicFilterPlanNameUtf8Error = 1382,
    RetRelicFilterPlanNameFormatError = 1383,
    RetRelicFilterPlanNoChange = 1384,
    RetLineupInvalidIndex = 1400,
    RetLineupInvalidMemberPos = 1401,
    RetLineupSwapNotExist = 1402,
    RetLineupAvatarAlreadyIn = 1403,
    RetLineupCreateAvatarError = 1404,
    RetLineupAvatarInitError = 1405,
    RetLineupNotExist = 1406,
    RetLineupOnlyOneMember = 1407,
    RetLineupSameLeaderSlot = 1408,
    RetLineupNoLeaderSelect = 1409,
    RetLineupSwapSameSlot = 1410,
    RetLineupAvatarNotExist = 1411,
    RetLineupTrialAvatarCanNotQuit = 1412,
    RetLineupVirtualLineupPlaneNotMatch = 1413,
    RetLineupNotValidLeader = 1414,
    RetLineupSameIndex = 1415,
    RetLineupIsEmpty = 1416,
    RetLineupNameFormatError = 1417,
    RetLineupTypeNotMatch = 1418,
    RetLineupReplaceAllFailed = 1419,
    RetLineupNotAllowEdit = 1420,
    RetLineupAvatarIsAlive = 1421,
    RetLineupAssistHasOnlyMember = 1422,
    RetLineupAssistCannotSwitch = 1423,
    RetLineupAvatarTypeInvalid = 1424,
    RetLineupNameUtf8Error = 1425,
    RetLineupLeaderLock = 1426,
    RetLineupStoryLineNotMatch = 1427,
    RetLineupAvatarLock = 1428,
    RetLineupAvatarInvalid = 1429,
    RetLineupAvatarAlreadyInit = 1430,
    RetLineupLimited = 1431,
    RetMailNotExist = 1700,
    RetMailRangeInvalid = 1701,
    RetMailMailIdInvalid = 1702,
    RetMailNoMailTakeAttachment = 1703,
    RetMailNoMailToDel = 1704,
    RetMailTypeInvalid = 1705,
    RetMailParaInvalid = 1706,
    RetMailAttachementInvalid = 1707,
    RetMailTicketInvalid = 1708,
    RetMailTicketRepeated = 1709,
    RetStageSettleError = 1800,
    RetStageConfigNotExist = 1801,
    RetStageNotFound = 1802,
    RetStageCocoonPropNotValid = 1804,
    RetStageCocoonWaveNotValid = 1805,
    RetStagePropIdNotEqual = 1806,
    RetStageCocoonWaveOver = 1807,
    RetStageWeekCocoonOverCnt = 1808,
    RetStageCocoonNotOpen = 1809,
    RetStageTrialNotOpen = 1810,
    RetStageFarmNotOpen = 1811,
    RetStageFarmTypeError = 1812,
    RetChapterLock = 1900,
    RetChapterChallengeNumNotEnough = 1901,
    RetChapterRewardIdNotExist = 1902,
    RetChapterRewardAlreadyTaken = 1903,
    RetBattleStageNotMatch = 2000,
    RetInBattleNow = 2001,
    RetBattleCheat = 2002,
    RetBattleFail = 2003,
    RetBattleNoLineup = 2004,
    RetBattleLineupEmpty = 2005,
    RetBattleVersionNotMatch = 2006,
    RetBattleQuitByServer = 2007,
    RetInBattleCheck = 2008,
    RetBattleCheckNeedRetry = 2009,
    RetBattleCostTimeCheckFail = 2010,
    RetLackExchangeStaminaTimes = 2100,
    RetLackStamina = 2101,
    RetStaminaFull = 2102,
    RetAuthkeySignTypeError = 2103,
    RetAuthkeySignVerError = 2104,
    RetNicknameFormatError = 2105,
    RetSensitiveWords = 2106,
    RetLevelRewardHasTaken = 2107,
    RetLevelRewardLevelError = 2108,
    RetLanguageInvalid = 2109,
    RetNicknameInCd = 2110,
    RetGameplayBirthdayInvalid = 2111,
    RetGameplayBirthdayAlreadySet = 2112,
    RetNicknameUtf8Error = 2113,
    RetNicknameDigitLimitError = 2114,
    RetSensitiveWordsPlatformError = 2115,
    RetPlayerSettingTypeInvalid = 2116,
    RetMazeLackTicket = 2201,
    RetMazeNotUnlock = 2202,
    RetMazeNoAbility = 2204,
    RetMazeNoPlane = 2205,
    RetMazeMapNotExist = 2207,
    RetMazeMpNotEnough = 2213,
    RetSpringNotEnable = 2214,
    RetSpringTooFar = 2216,
    RetNotInMaze = 2218,
    RetMazeTimeOfDayTypeError = 2223,
    RetSceneTransferLockedByTask = 2224,
    RetPlotNotUnlock = 2300,
    RetMissionNotExist = 2400,
    RetMissionAlreadyDone = 2401,
    RetDailyTaskNotFinish = 2402,
    RetDailyTaskRewardHasTaken = 2403,
    RetMissionNotFinish = 2404,
    RetMissionNotDoing = 2405,
    RetMissionFinishWayNotMatch = 2406,
    RetMissionSceneNotMatch = 2407,
    RetMissionCustomValueNotValid = 2408,
    RetMissionSubMissionNotMatch = 2409,
    RetAdventureMapNotExist = 2500,
    RetSceneEntityNotExist = 2600,
    RetNotInScene = 2601,
    RetSceneMonsterNotExist = 2602,
    RetInteractConfigNotExist = 2603,
    RetUnsupportedPropState = 2604,
    RetSceneEntryIdNotMatch = 2605,
    RetSceneEntityMoveCheckFailed = 2606,
    RetAssistMonsterCountLimit = 2607,
    RetSceneUseSkillFail = 2608,
    RetPropIsHidden = 2609,
    RetLoadingSuccAlready = 2610,
    RetSceneEntityTypeInvalid = 2611,
    RetInteractTypeInvalid = 2612,
    RetInteractNotInRegion = 2613,
    RetInteractSubTypeInvalid = 2614,
    RetNotLeaderEntity = 2615,
    RetMonsterIsNotFarmElement = 2616,
    RetMonsterConfigNotExist = 2617,
    RetAvatarHpAlreadyFull = 2618,
    RetCurInteractEntityNotMatch = 2619,
    RetPlaneTypeNotAllow = 2620,
    RetGroupNotExist = 2621,
    RetGroupSaveDataInCd = 2622,
    RetGroupSaveLenghReachMax = 2623,
    RetRecentElementNotExist = 2624,
    RetRecentElementStageNotMatch = 2625,
    RetScenePositionVersionNotMatch = 2626,
    RetGameplayCounterNotExist = 2627,
    RetGameplayCounterNotEnough = 2628,
    RetGroupStateNotMatch = 2629,
    RetSceneEntityPosNotMatch = 2630,
    RetGroupStateCustomSaveDataOff = 2631,
    RetSceneNotMatch = 2632,
    RetBuyTimesLimit = 2700,
    RetBuyLimitType = 2701,
    RetShopNotOpen = 2702,
    RetGoodsNotOpen = 2703,
    RetCityLevelRewardTaken = 2704,
    RetCityLevelNotMeet = 2705,
    RetSingleBuyLimit = 2706,
    RetTutorialNotUnlock = 2751,
    RetTutorialUnlockAlready = 2752,
    RetTutorialFinishAlready = 2753,
    RetTutorialPreNotUnlock = 2754,
    RetTutorialPlayerLevelNotMatch = 2755,
    RetTutorialTutorialNotFound = 2756,
    RetChallengeNotExist = 2801,
    RetChallengeNotUnlock = 2802,
    RetChallengeAlready = 2803,
    RetChallengeLineupEditForbidden = 2804,
    RetChallengeLineupEmpty = 2805,
    RetChallengeNotDoing = 2806,
    RetChallengeNotFinish = 2807,
    RetChallengeTargetNotFinish = 2808,
    RetChallengeTargetRewardTaken = 2809,
    RetChallengeTimeNotValid = 2810,
    RetChallengeStarsCountNotMeet = 2811,
    RetChallengeStarsRewardTaken = 2812,
    RetChallengeStarsNotExist = 2813,
    RetChallengeCurSceneNotEntryFloor = 2814,
    RetChallengeNoTeamArchive = 2815,
    RetChallengeLineupAvatarTypeInvalid = 2816,
    RetChallengeLineupRecommendInCd = 2817,
    RetBasicTypeAlready = 2850,
    RetNoBasicType = 2851,
    RetNotChooseBasicType = 2852,
    RetNotFuncClose = 2853,
    RetNotChooseGender = 2854,
    RetNotReqUnlockBasicType = 2855,
    RetAvatarPathLocked = 2856,
    RetRogueStatusNotMatch = 2901,
    RetRogueSelectBuffNotExist = 2902,
    RetRogueCoinNotEnough = 2903,
    RetRogueStaminaNotEnough = 2904,
    RetRogueAppraisalCountNotEnough = 2905,
    RetRoguePropAlreadyUsed = 2906,
    RetRogueRecordAlreadySaved = 2907,
    RetRogueRollBuffMaxCount = 2908,
    RetRoguePickAvatarInvalid = 2909,
    RetRogueQuestExpire = 2910,
    RetRogueQuestRewardAlready = 2911,
    RetRogueReviveCountNotEnough = 2912,
    RetRogueAreaInvalid = 2913,
    RetRogueScoreRewardPoolInvalid = 2914,
    RetRogueScoreRewardRowInvalid = 2915,
    RetRogueAeonLevelNotMeet = 2916,
    RetRogueAeonLevelRewardAlreadyTaken = 2917,
    RetRogueAeonConfigNotExist = 2918,
    RetRogueTrialAvatarInvalid = 2919,
    RetRogueHandbookRewardAlreadyTaken = 2920,
    RetRogueRoomTypeNotMatch = 2921,
    RetRogueShopGoodNotFound = 2922,
    RetRogueShopGoodAlreadyBought = 2923,
    RetRogueShopGoodAlreadyOwn = 2924,
    RetRogueShopMiracleNotExist = 2925,
    RetRogueShopNotExist = 2926,
    RetRogueShopCannotRefresh = 2927,
    RetRogueSelectBuffCertainMismatch = 2928,
    RetMissionEventConfigNotExist = 2951,
    RetMissionEventNotClient = 2952,
    RetMissionEventFinished = 2953,
    RetMissionEventDoing = 2954,
    RetHasChallengeMissionEvent = 2955,
    RetNotChallengeMissionEvent = 2956,
    RetGachaIdNotExist = 3001,
    RetGachaNumInvalid = 3002,
    RetGachaFirstGachaMustOne = 3003,
    RetGachaReqDuplicated = 3004,
    RetGachaNotInSchedule = 3005,
    RetGachaNewbieClose = 3006,
    RetGachaTodayLimited = 3007,
    RetGachaNotSupport = 3008,
    RetGachaCeilingNotEnough = 3009,
    RetGachaCeilingClose = 3010,
    RetNotInRaid = 3101,
    RetRaidDoing = 3102,
    RetNotProp = 3103,
    RetRaidIdNotMatch = 3104,
    RetRaidRestartNotMatch = 3105,
    RetRaidLimit = 3106,
    RetRaidAvatarListEmpty = 3107,
    RetRaidAvatarNotExist = 3108,
    RetChallengeRaidRewardAlready = 3109,
    RetChallengeRaidScoreNotReach = 3110,
    RetChallengeRaidNotOpen = 3111,
    RetRaidFinished = 3112,
    RetRaidWorldLevelNotLock = 3113,
    RetRaidCannotUseAssist = 3114,
    RetRaidAvatarNotMatch = 3115,
    RetRaidCanNotSave = 3116,
    RetRaidNoSave = 3117,
    RetActivityRaidNotOpen = 3118,
    RetRaidAvatarCaptainNotExist = 3119,
    RetRaidStoryLineNotMatch = 3120,
    RetTalkEventAlreadyTaken = 3151,
    RetNpcAlreadyMeet = 3152,
    RetNpcNotInConfig = 3153,
    RetDialogueGroupDismatch = 3154,
    RetDialogueEventInvalid = 3155,
    RetTalkEventTakeProtoNotMatch = 3156,
    RetTalkEventNotValid = 3157,
    RetExpeditionConfigNotExist = 3201,
    RetExpeditionRewardConfigNotExist = 3202,
    RetExpeditionNotUnlocked = 3203,
    RetExpeditionAlreadyAccepted = 3204,
    RetExpeditionRepeatedAvatar = 3205,
    RetAvatarAlreadyDispatched = 3206,
    RetExpeditionNotAccepted = 3207,
    RetExpeditionNotFinish = 3208,
    RetExpeditionAlreadyFinish = 3209,
    RetExpeditionTeamCountLimit = 3210,
    RetExpeditionAvatarNumNotMatch = 3211,
    RetExpeditionNotOpen = 3212,
    RetExpeditionFriendAvatarNotValid = 3213,
    RetExpeditionNotPublished = 3214,
    RetLoginActivityHasTaken = 3301,
    RetLoginActivityDaysLack = 3302,
    RetTrialActivityRewardAlreadyTake = 3303,
    RetTrialActivityStageNotFinish = 3304,
    RetMonsterResearchActivityHasTaken = 3305,
    RetMonsterResearchActivityMaterialNotSubmitted = 3306,
    RetMonsterResearchActivityMaterialAlreadySubmitted = 3307,
    RetFantasticStoryActivityStoryError = 3308,
    RetFantasticStoryActivityStoryNotOpen = 3309,
    RetFantasticStoryActivityBattleError = 3310,
    RetFantasticStoryActivityBattleNotOpen = 3311,
    RetFantasticStoryActivityBattleAvatarError = 3312,
    RetFantasticStoryActivityBattleBuffError = 3313,
    RetFantasticStoryActivityPreBattleScoreNotEnough = 3314,
    RetTrialActivityAlreadyInTrialActivity = 3315,
    RetCommonActivityNotOpen = 3316,
    RetMessageConfigNotExist = 3501,
    RetMessageSectionNotTake = 3502,
    RetMessageGroupNotTake = 3503,
    RetMessageSectionIdNotMatch = 3504,
    RetMessageSectionCanNotFinish = 3505,
    RetMessageItemCanNotFinish = 3506,
    RetMessageItemRaidCanNotFinish = 3507,
    RetFriendAlreadyIsFriend = 3601,
    RetFriendIsNotFriend = 3602,
    RetFriendApplyExpire = 3603,
    RetFriendInBlacklist = 3604,
    RetFriendNotInBlacklist = 3605,
    RetFriendNumberLimit = 3606,
    RetFriendBlacklistNumberLimit = 3607,
    RetFriendDailyApplyLimit = 3608,
    RetFriendInHandleLimit = 3609,
    RetFriendApplyInCd = 3610,
    RetFriendRemarkNameFormatError = 3611,
    RetFriendPlayerNotFound = 3612,
    RetFriendInTargetBlacklist = 3613,
    RetFriendTargetNumberLimit = 3614,
    RetAssistQueryTooFast = 3615,
    RetAssistNotExist = 3616,
    RetAssistUsedAlready = 3617,
    RetFriendReportReasonFormatError = 3618,
    RetFriendReportSensitiveWords = 3619,
    RetAssistUsedTimesOver = 3620,
    RetAssistQuitAlready = 3621,
    RetAssistAvatarInLineup = 3622,
    RetAssistNoReward = 3623,
    RetFriendSearchNumLimit = 3624,
    RetFriendSearchInCd = 3625,
    RetFriendRemarkNameUtf8Error = 3626,
    RetFriendReportReasonUtf8Error = 3627,
    RetAssistSetAlready = 3628,
    RetFriendTargetForbidOtherApply = 3629,
    RetFriendMarkedCntMax = 3630,
    RetFriendMarkedAlready = 3631,
    RetFriendNotMarked = 3632,
    RetFriendChallengeLineupRecommendInCd = 3633,
    RetViewPlayerCardInCd = 3634,
    RetViewPlayerBattleRecordInCd = 3635,
    RetPlayerBoardHeadIconNotExist = 3701,
    RetPlayerBoardHeadIconLocked = 3702,
    RetPlayerBoardHeadIconAlreadyUnlocked = 3703,
    RetPlayerBoardDisplayAvatarNotExist = 3704,
    RetPlayerBoardDisplayAvatarExceedLimit = 3705,
    RetPlayerBoardDisplayRepeatedAvatar = 3706,
    RetPlayerBoardDisplayAvatarSamePos = 3707,
    RetPlayerBoardDisplayAvatarLocked = 3708,
    RetSignatureLengthExceedLimit = 3709,
    RetSignatureSensitiveWords = 3710,
    RetPlayerBoardAssistAvatarNotExist = 3712,
    RetPlayerBoardAssistAvatarLocked = 3713,
    RetSignatureUtf8Error = 3714,
    RetPlayerBoardAssistAvatarCntError = 3715,
    RetBattlePassTierNotValid = 3801,
    RetBattlePassLevelNotMeet = 3802,
    RetBattlePassRewardTakeAlready = 3803,
    RetBattlePassNotPremium = 3804,
    RetBattlePassNotDoing = 3805,
    RetBattlePassLevelInvalid = 3806,
    RetBattlePassNotUnlock = 3807,
    RetBattlePassNoReward = 3808,
    RetBattlePassQuestNotValid = 3809,
    RetBattlePassNotChooseOptional = 3810,
    RetBattlePassNotTakeReward = 3811,
    RetBattlePassOptionalNotValid = 3812,
    RetBattlePassBuyAlready = 3813,
    RetBattlePassNearEnd = 3814,
    RetMusicLocked = 3901,
    RetMusicNotExist = 3902,
    RetMusicUnlockFailed = 3903,
    RetPunkLordLackSummonTimes = 4001,
    RetPunkLordAttackingMonsterLimit = 4002,
    RetPunkLordMonsterNotExist = 4003,
    RetPunkLordMonsterAlreadyShared = 4004,
    RetPunkLordMonsterExpired = 4005,
    RetPunkLordSelfMonsterAttackLimit = 4006,
    RetPunkLordLackSupportTimes = 4007,
    RetPunkLordMonsterAlreadyKilled = 4008,
    RetPunkLordMonsterAttackerLimit = 4009,
    RetPunkLordWorldLevleNotValid = 4010,
    RetPunkLordRewardLevleNotExist = 4011,
    RetPunkLordPointNotMeet = 4012,
    RetPunkLordInAttacking = 4013,
    RetPunkLordOperationInCd = 4014,
    RetPunkLordRewardAlreadyTaken = 4015,
    RetPunkLordOverBonusRewardLimit = 4016,
    RetPunkLordNotInSchedule = 4017,
    RetPunkLordMonsterNotAttacked = 4018,
    RetPunkLordMonsterNotKilled = 4019,
    RetPunkLordMonsterKilledScoreAlreadyTake = 4020,
    RetPunkLordRewardLevleAlreadyTake = 4021,
    RetDailyActiveLevelInvalid = 4101,
    RetDailyActiveLevelRewardAlreadyTaken = 4102,
    RetDailyActiveLevelApNotEnough = 4103,
    RetDailyMeetPam = 4201,
    RetReplayIdNotMatch = 4251,
    RetReplayReqNotValid = 4252,
    RetFightActivityDifficultyLevelNotPassed = 4301,
    RetFightActivityDifficultyLevelRewardAlreadyTake = 4302,
    RetFightActivityStageNotOpen = 4303,
    RetFightActivityLevelNotUnlock = 4304,
    RetTrainVisitorVisitorNotExist = 4351,
    RetTrainVisitorBehaviorNotExist = 4352,
    RetTrainVisitorBehaviorFinished = 4353,
    RetTrainVisitorAllBehaviorRewardTaken = 4354,
    RetTrainVisitorGetOnMissionNotFinish = 4355,
    RetTrainVisitorNotGetOff = 4356,
    RetTextJoinUnknowIsOverride = 4401,
    RetTextJoinIdNotExist = 4402,
    RetTextJoinCanNotOverride = 4403,
    RetTextJoinItemIdError = 4404,
    RetTextJoinSensitiveCheckError = 4405,
    RetTextJoinMustOverride = 4406,
    RetTextJoinTextEmpty = 4407,
    RetTextJoinTextFormatError = 4408,
    RetTextJoinTextUtf8Error = 4409,
    RetTextJoinBatchReqIdRepeat = 4410,
    RetTextJoinTypeNotSupportBatchReq = 4411,
    RetTextJoinAvatarIdNotExist = 4412,
    RetTextJoinUnknowType = 4413,
    RetPamMissionMissionIdError = 4451,
    RetPamMissionMissionExpire = 4452,
    RetChatTypeNotExist = 4501,
    RetMsgTypeNotExist = 4502,
    RetChatNoTargetUid = 4503,
    RetChatMsgEmpty = 4504,
    RetChatMsgExceedLimit = 4505,
    RetChatMsgSensitiveCheckError = 4506,
    RetChatMsgUtf8Error = 4507,
    RetChatForbidSwitchOpen = 4508,
    RetChatForbid = 4509,
    RetChatMsgIncludeSpecialStr = 4510,
    RetChatMsgEmojiNotExist = 4511,
    RetChatMsgEmojiGenderNotMatch = 4512,
    RetChatMsgEmojiNotMarked = 4513,
    RetChatMsgEmojiAlreadyMarked = 4514,
    RetChatMsgEmojiMarkedMaxLimit = 4515,
    RetBoxingClubChallengeNotOpen = 4601,
    RetMuseumNotOpen = 4651,
    RetMuseumTurnCntNotMatch = 4652,
    RetMuseumPhaseNotReach = 4653,
    RetMuseumUnknowStuff = 4654,
    RetMuseumUnknowArea = 4655,
    RetMuseumUnknowPos = 4656,
    RetMuseumStuffAlreadyInArea = 4657,
    RetMuseumStuffNotInArea = 4658,
    RetMuseumGetNpcRepeat = 4659,
    RetMuseumGetNpcUnlock = 4660,
    RetMuseumGetNpcNotEnough = 4661,
    RetMuseumChangeStuffAreaError = 4662,
    RetMuseumNotInit = 4663,
    RetMuseumEventError = 4664,
    RetMuseumUnknowChooseEventId = 4665,
    RetMuseumEventOrderNotMatch = 4666,
    RetMuseumEventPhaseNotUnlock = 4667,
    RetMuseumEventMissionNotFound = 4668,
    RetMuseumAreaLevelUpAlready = 4669,
    RetMuseumStuffAlreadyUsed = 4670,
    RetMuseumEventRoundNotUnlock = 4671,
    RetMuseumStuffInArea = 4672,
    RetMuseumStuffDispatch = 4673,
    RetMuseumIsEnd = 4674,
    RetMuseumStuffLeaving = 4675,
    RetMuseumEventMissionNotFinish = 4678,
    RetMuseumCollectRewardNotExist = 4679,
    RetMuseumCollectRewardAlreadyTaken = 4680,
    RetMuseumAcceptMissionMaxLimit = 4681,
    RetRogueChallengeNotOpen = 4701,
    RetRogueChallengeAssisRefreshLimit = 4702,
    RetAlleyNotInit = 4721,
    RetAlleyNotOpen = 4722,
    RetAlleyMapNotExist = 4724,
    RetAlleyEmptyPosList = 4725,
    RetAlleyLinePosInvalid = 4726,
    RetAlleyShopNotUnlock = 4727,
    RetAlleyDepotFull = 4728,
    RetAlleyShopNotInclude = 4729,
    RetAlleyEventNotUnlock = 4730,
    RetAlleyEventNotRefresh = 4731,
    RetAlleyEventStateDoing = 4732,
    RetAlleyEventStateFinish = 4733,
    RetAlleyEventError = 4734,
    RetAlleyRewardLevelError = 4735,
    RetAlleyRewardPrestigeNotEnough = 4736,
    RetAlleyShipEmpty = 4737,
    RetAlleyShipIdDismatch = 4738,
    RetAlleyShipNotExist = 4739,
    RetAlleyShipNotUnlock = 4740,
    RetAlleyGoodsNotExist = 4741,
    RetAlleyGoodsNotUnlock = 4742,
    RetAlleyProfitNotPositive = 4743,
    RetAlleySpecialOrderDismatch = 4744,
    RetAlleyOrderGoodsOverLimit = 4745,
    RetAlleySpecialOrderConditionNotMeet = 4746,
    RetAlleyDepotSizeOverLimit = 4747,
    RetAlleyGoodsNotEnough = 4748,
    RetAlleyOrderIndexInvalid = 4749,
    RetAlleyRewardAlreadyTake = 4750,
    RetAlleyRewardNotExist = 4751,
    RetAlleyMainMissionNotDoing = 4752,
    RetAlleyCriticalEventNotFinish = 4753,
    RetAlleyShopGoodsNotValid = 4754,
    RetAlleySlashNotOpen = 4755,
    RetAlleyPlacingAnchorInvalid = 4756,
    RetAlleyPlacingGoodsIndexInvalid = 4757,
    RetAlleySaveMapTooQuick = 4758,
    RetAlleyMapNotLink = 4759,
    RetAlleyFundsNotLowerBase = 4760,
    RetAlleyEventNotFinish = 4761,
    RetAlleyNormalOrderNotMeet = 4762,
    RetPlayerReturnNotOpen = 4801,
    RetPlayerReturnIsSigned = 4802,
    RetPlayerReturnPointNotEnough = 4803,
    RetPlayerReturnConditionInvalid = 4804,
    RetPlayerReturnHasSigned = 4805,
    RetPlayerReturnRewardTaken = 4806,
    RetAetherDivideNoLineup = 4851,
    RetAetherDivideLineupInvalid = 4852,
    RetChatBubbleIdError = 4901,
    RetChatBubbleIdNotUnlock = 4902,
    RetPhoneThemeIdError = 4903,
    RetPhoneThemeIdNotUnlock = 4904,
    RetChatBubbleSelectIsCurrent = 4905,
    RetPhoneThemeSelectIsCurrent = 4906,
    RetChessRogueConfigNotFound = 4951,
    RetChessRogueConfigInvalid = 4952,
    RetChessRogueNoValidRoom = 4963,
    RetChessRogueNoCellInfo = 4964,
    RetChessRogueCellNotFinish = 4965,
    RetChessRogueCellIsLocked = 4966,
    RetChessRogueScheduleNotMatch = 4967,
    RetChessRogueStatusFail = 4968,
    RetChessRogueAreaNotExist = 4969,
    RetChessRogueLineupFail = 4970,
    RetChessRogueAeonFail = 4980,
    RetChessRogueEnterCellFail = 4981,
    RetChessRogueRollDiceFail = 4982,
    RetChessRogueDiceStatusFail = 4983,
    RetChessRogueDiceCntNotFull = 4984,
    RetChessRogueUnlock = 4985,
    RetChessRoguePickAvatarFail = 4986,
    RetChessRogueAvatarInvalid = 4987,
    RetChessRogueCellCanNotSelect = 4988,
    RetChessRogueDiceConfirmed = 4989,
    RetChessRogueNousDiceNotMatch = 4990,
    RetChessRogueNousDiceRarityFail = 4991,
    RetChessRogueNousDiceSurfaceDuplicate = 4992,
    RetChessRogueNotInRogue = 4993,
    RetChessRogueNousDiceBranchLimit = 4994,
    RetHeliobusNotOpen = 5101,
    RetHeliobusSnsPostNotUnlock = 5102,
    RetHeliobusSnsAlreadyRead = 5103,
    RetHeliobusSnsAlreadyLiked = 5104,
    RetHeliobusSnsAlreadyCommented = 5105,
    RetHeliobusSnsInMission = 5106,
    RetHeliobusSnsAlreadyPosted = 5107,
    RetHeliobusSnsNotDoingMission = 5108,
    RetHeliobusRewardLevelMax = 5109,
    RetHeliobusIncomeNotEnough = 5110,
    RetHeliobusSnsCommentNotUnlock = 5111,
    RetHeliobusChallengeNotUnlock = 5112,
    RetHeliobusChallengeIdError = 5113,
    RetHeliobusSkillNotUnlock = 5114,
    RetHeliobusAcceptPostMissionFail = 5115,
    RetHeliobusSkillNotSelected = 5116,
    RetHeliobusPlaneTypeInvalid = 5117,
    RetReddotParamInvalid = 5151,
    RetReddotActivityNotOpen = 5152,
    RetRogueEndlessActivityConfigError = 5201,
    RetRogueEndlessActivityNotOpen = 5202,
    RetRogueEndlessActivityOverBonusRewardLimit = 5203,
    RetRogueEndlessActivityScoreNotMeet = 5204,
    RetRogueEndlessActivityRewardLevleAlreadyTake = 5205,
    RetHeartDialScriptNotFound = 5251,
    RetHeartDialScriptEmotionTheSame = 5252,
    RetHeartDialScriptStepNotNormal = 5253,
    RetHeartDialScriptConditionNotMatch = 5254,
    RetHeartDialScriptSubmitItemNumNotMatch = 5255,
    RetHeartDialScriptSubmitItemIdNotMatch = 5256,
    RetHeartDialDialogueNotFound = 5257,
    RetHeartDialDialogueAlreadyPerformed = 5258,
    RetHeartDialNpcNotFound = 5259,
    RetHeartDialTraceConfigNotFound = 5260,
    RetHeartDialFloorTraceExist = 5261,
    RetHeartDialTraceFloorNotMatch = 5262,
    RetTravelBrochureConfigError = 5301,
    RetTravelBrochureParamInvalid = 5302,
    RetTravelBrochureLocked = 5303,
    RetTravelBrochureCannotOperate = 5304,
    RetTravelBrochureWorldIdNotMatch = 5305,
    RetTravelBrochureHasNoWorldBook = 5306,
    RetTravelBrochurePageFull = 5307,
    RetMapRotationNotInRegion = 5351,
    RetMapRotationRotaterAlreadyDeployed = 5352,
    RetMapRotationEnergyNotEnough = 5353,
    RetMapRotationEntityNotOnCurPose = 5354,
    RetMapRotationRotaterNotDeployed = 5355,
    RetMapRotationPoseRotaterMismatch = 5356,
    RetMapRotationRotaterNotRemovable = 5357,
    RetMapRotationRotaterDisposable = 5358,
    RetSpaceZooActivityCatNotFound = 5401,
    RetSpaceZooActivityCatParamInvalid = 5402,
    RetSpaceZooActivityCatItemNotEnough = 5403,
    RetSpaceZooActivityCatBagFull = 5404,
    RetSpaceZooActivityCatNotToMutate = 5405,
    RetSpaceZooActivityCatStateError = 5406,
    RetSpaceZooActivityCatCatteryLocked = 5407,
    RetSpaceZooActivityCatOutNow = 5408,
    RetSpaceZooActivityCatConfigNotFound = 5409,
    RetSpaceZooActivityCatFeatureNotFound = 5410,
    RetSpaceZooActivityCatAddCatError = 5411,
    RetSpaceZooActivityCatMoneyNotEnough = 5412,
    RetSpaceZooActivityCatCondNotMatch = 5413,
    RetStrongChallengeActivityStageCfgMiss = 5501,
    RetStrongChallengeActivityStageNotOpen = 5502,
    RetStrongChallengeActivityBuffError = 5503,
    RetRollShopNotFound = 5551,
    RetRollShopGroupEmpty = 5552,
    RetRollShopEmpty = 5553,
    RetRollShopGachaReqDuplicated = 5554,
    RetRollShopRandomError = 5555,
    RetRollShopGroupTypeNotFound = 5556,
    RetRollShopHasStoredRewardAlready = 5557,
    RetRollShopNoStoredReward = 5558,
    RetRollShopNotInValidScene = 5559,
    RetRollShopInvalidRollShopType = 5560,
    RetActivityRaidCollectionPrevNotFinish = 5601,
    RetActivityRaidCollectionGroupEnterNextUnavailable = 5602,
    RetActivityRaidCollectionIsLast = 5603,
    RetActivityRaidCollectionIsNotNext = 5604,
    RetOfferingNotUnlock = 5651,
    RetOfferingLevelNotUnlock = 5652,
    RetOfferingReachMaxLevel = 5653,
    RetOfferingItemNotEnough = 5654,
    RetOfferingLongtailNotOpen = 5655,
    RetOfferingRewardCondition = 5656,
    RetDrinkMakerChatInvalid = 5701,
    RetDrinkMakerParamInvalid = 5702,
    RetDrinkMakerParamNotUnlock = 5703,
    RetDrinkMakerConfigNotFound = 5704,
    RetDrinkMakerNotLastChat = 5705,
    RetDrinkMakerDayAndFreePhaseNotOpen = 5706,
    RetMonopolyNotOpen = 5751,
    RetMonopolyConfigError = 5752,
    RetMonopolyDiceNotEnough = 5753,
    RetMonopolyCurCellNotFinish = 5754,
    RetMonopolyCoinNotEnough = 5755,
    RetMonopolyCellWaitPending = 5756,
    RetMonopolyCellStateError = 5757,
    RetMonopolyCellContentError = 5758,
    RetMonopolyItemNotEnough = 5759,
    RetMonopolyCellContentCannotGiveup = 5760,
    RetMonopolyAssetLevelInvalid = 5761,
    RetMonopolyTurnNotFinish = 5762,
    RetMonopolyGuideNotFinish = 5763,
    RetMonopolyRaffleRewardReissued = 5764,
    RetMonopolyNoGameActive = 5771,
    RetMonopolyGameRatioNotIncreasable = 5772,
    RetMonopolyGameRatioMax = 5773,
    RetMonopolyGameTargetRatioInvalid = 5774,
    RetMonopolyGameBingoFlipPosInvalid = 5775,
    RetMonopolyGameGuessAlreadyChoose = 5776,
    RetMonopolyGameGuessChooseInvalid = 5777,
    RetMonopolyGameGuessInformationAlreadyBought = 5778,
    RetMonopolyGameRaiseRatioNotUnlock = 5779,
    RetMonopolyFriendNotSynced = 5785,
    RetMonopolyGetFriendRankingListInCd = 5786,
    RetMonopolyLikeTargetNotFriend = 5787,
    RetMonopolyDailyAlreadyLiked = 5788,
    RetMonopolySocialEventStatusNotMatch = 5789,
    RetMonopolySocialEventServerCacheNotExist = 5790,
    RetMonopolyActivityIdNotMatch = 5791,
    RetMonopolyRafflePoolNotExist = 5792,
    RetMonopolyRafflePoolTimeNotMatch = 5793,
    RetMonopolyRafflePoolPhaseNotMeet = 5794,
    RetMonopolyRafflePoolShowTimeNotMeet = 5795,
    RetMonopolyRaffleTicketNotFound = 5796,
    RetMonopolyRaffleTicketTimeNotMeet = 5797,
    RetMonopolyRaffleTicketRewardAlreadyTaken = 5798,
    RetMonopolyRafflePoolNotInRaffleTime = 5799,
    RetMonopolyMbtiReportRewardAlreadyTaken = 5800,
    RetEvolveBuildLevelGaming = 5801,
    RetEveolveBuildLevelBanRandom = 5802,
    RetEvolveBuildFirstRewardAlreadyTaken = 5803,
    RetEvolveBuildLevelUnfinish = 5804,
    RetEvolveBuildShopAbilityMaxLevel = 5805,
    RetEvolveBuildShopAbilityMinLevel = 5806,
    RetEvolveBuildShopAbilityNotGet = 5807,
    RetEvolveBuildLevelLock = 5808,
    RetEvolveBuildExpNotEnough = 5809,
    RetEvolveBuildShopAbilityLevelError = 5810,
    RetEvolveBuildActivityNotOpen = 5811,
    RetEvolveBuildShopAbilityEmpty = 5812,
    RetEvolveBuildLevelNotStart = 5813,
    RetEvolveBuildShopLock = 5814,
    RetEvolveBuildRewardLock = 5815,
    RetEvolveBuildRewardLevelMax = 5816,
    RetEvolveBuildRewardAlreadyAllTaken = 5717,
    RetClockParkConfigError = 5851,
    RetClockParkEffectError = 5852,
    RetClockParkScriptAlreadyUnlock = 5853,
    RetClockParkScriptUnlockConditionNotMeet = 5854,
    RetClockParkTalentAlreadyUnlock = 5855,
    RetClockParkScriptLocked = 5856,
    RetClockParkHasOngoingScript = 5857,
    RetClockParkNoOngoingScript = 5858,
    RetClockParkDicePlacementError = 5859,
    RetClockParkMismatchStatus = 5860,
    RetClockParkNoBuff = 5861,
    RetClockParkSlotMachineGachaReqDuplicated = 5862,
    RetClockParkSlotMachineCostNotEnough = 5863,
    RetClockParkSlotMachineGachaCntExceedLimit = 5864,
    RetClockParkNotOpen = 5865,
    RetTournRogueStatusMismatch = 5901,
    RetMatchAlreadyInMatch = 6201,
    RetMatchNotInMatch = 6202,
    RetMatchPlayNotOpen = 6203,
    RetCrossStateError = 6204,
    RetMatchVersionNotEqual = 6205,
    RetMatchPlayerNotInLobbyRoom = 6206,
    RetLobbyStateNotMatch = 6207,
    RetLobbyRoomNotExist = 6208,
    RetLobbyRoomPalyerFull = 6209,
    RetLobbyRoomPalyerNotReady = 6210,
    RetLobbyRoomPalyerFighting = 6211,
    RetFightRoomNotExist = 6250,
    RetFightMatch3PlayerStateErr = 6251,
    RetFightMatch3RoomStateErr = 6252,
    RetSwordTrainingNoActiveGame = 6301,
    RetSwordTrainingNoPendingActionMatch = 6302,
    RetSwordTrainingPartnerAbilityInvalid = 6303,
    RetSwordTrainingSkillAlreadyLearned = 6304,
    RetSwordTrainingConditionNotMeet = 6305,
    RetSwordTrainingParentSkillNotLearned = 6306,
    RetSwordTrainingSkillTypeNotUnlock = 6307,
    RetSwordTrainingGameAlreadyExist = 6308,
    RetSwordTrainingEndingHintNotMatch = 6309,
    RetSwordTrainingStorylineConfigNotFound = 6310,
    RetSwordTrainingStoryConfigNotFound = 6311,
    RetSwordTrainingUnlockNotFinish = 6312,
    RetSwordTrainingOptionMismatch = 6313,
    RetSwordTrainingRestoreWithoutExamFailed = 6314,
    RetSwordTrainingNoRestoreGameAvailable = 6315,
    RetSwordTrainingEndingStoryNotMatch = 6316,
    RetSwordTrainingEndingNotFinish = 6317,
    RetSwordTrainingEndingRewardTaken = 6318,
    RetSwordTrainingCombatRankNotChange = 6319,
    RetSwordTrainingDirectBattleDisable = 6320,
    RetFightFestPhaseNotMatch = 6351,
    RetFightFestScoreRaceAlreadyFinish = 6352,
    RetFightFestChallengeLocked = 6353,
    RetFightFestCoachSkillLocked = 6354,
    RetFightFestCoachSkillEquipTypeExisted = 6355,
    RetFightFestScoreRaceMissionDoind = 6356,
    RetFightFestCoachSkillNoEquip = 6357,
    RetPetNotExist = 6401,
    RetPetAlreadySummoned = 6402,
    RetPetNotSummoned = 6403,
}
impl Retcode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Retcode::RetSucc => "RET_SUCC",
            Retcode::RetFail => "RET_FAIL",
            Retcode::RetServerInternalError => "RET_SERVER_INTERNAL_ERROR",
            Retcode::RetTimeout => "RET_TIMEOUT",
            Retcode::RetRepeatedReq => "RET_REPEATED_REQ",
            Retcode::RetReqParaInvalid => "RET_REQ_PARA_INVALID",
            Retcode::RetPlayerDataError => "RET_PLAYER_DATA_ERROR",
            Retcode::RetPlayerClientPaused => "RET_PLAYER_CLIENT_PAUSED",
            Retcode::RetFuncCheckFailed => "RET_FUNC_CHECK_FAILED",
            Retcode::RetFeatureSwitchClosed => "RET_FEATURE_SWITCH_CLOSED",
            Retcode::RetFreqOverLimit => "RET_FREQ_OVER_LIMIT",
            Retcode::RetSystemBusy => "RET_SYSTEM_BUSY",
            Retcode::RetPlayerNotOnline => "RET_PLAYER_NOT_ONLINE",
            Retcode::RetRepeateLogin => "RET_REPEATE_LOGIN",
            Retcode::RetRetryLogin => "RET_RETRY_LOGIN",
            Retcode::RetWaitLogin => "RET_WAIT_LOGIN",
            Retcode::RetNotInWhiteList => "RET_NOT_IN_WHITE_LIST",
            Retcode::RetInBlackList => "RET_IN_BLACK_LIST",
            Retcode::RetAccountVerifyError => "RET_ACCOUNT_VERIFY_ERROR",
            Retcode::RetAccountParaError => "RET_ACCOUNT_PARA_ERROR",
            Retcode::RetAntiAddictLogin => "RET_ANTI_ADDICT_LOGIN",
            Retcode::RetCheckSumError => "RET_CHECK_SUM_ERROR",
            Retcode::RetReachMaxPlayerNum => "RET_REACH_MAX_PLAYER_NUM",
            Retcode::RetAlreadyRegistered => "RET_ALREADY_REGISTERED",
            Retcode::RetGenderError => "RET_GENDER_ERROR",
            Retcode::SetNicknameRetCallbackProcessing => {
                "SET_NICKNAME_RET_CALLBACK_PROCESSING"
            }
            Retcode::RetInGmBindAccess => "RET_IN_GM_BIND_ACCESS",
            Retcode::RetQuestRewardAlreadyTaken => "RET_QUEST_REWARD_ALREADY_TAKEN",
            Retcode::RetQuestNotAccept => "RET_QUEST_NOT_ACCEPT",
            Retcode::RetQuestNotFinish => "RET_QUEST_NOT_FINISH",
            Retcode::RetQuestStatusError => "RET_QUEST_STATUS_ERROR",
            Retcode::RetAchievementLevelNotReach => "RET_ACHIEVEMENT_LEVEL_NOT_REACH",
            Retcode::RetAchievementLevelAlreadyTaken => {
                "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN"
            }
            Retcode::RetAvatarNotExist => "RET_AVATAR_NOT_EXIST",
            Retcode::RetAvatarResExpNotEnough => "RET_AVATAR_RES_EXP_NOT_ENOUGH",
            Retcode::RetAvatarExpReachPromotionLimit => {
                "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT"
            }
            Retcode::RetAvatarReachMaxPromotion => "RET_AVATAR_REACH_MAX_PROMOTION",
            Retcode::RetSkilltreeConfigNotExist => "RET_SKILLTREE_CONFIG_NOT_EXIST",
            Retcode::RetSkilltreeAlreadyUnlock => "RET_SKILLTREE_ALREADY_UNLOCK",
            Retcode::RetSkilltreePreLocked => "RET_SKILLTREE_PRE_LOCKED",
            Retcode::RetSkilltreeLevelNotMeet => "RET_SKILLTREE_LEVEL_NOT_MEET",
            Retcode::RetSkilltreeRankNotMeet => "RET_SKILLTREE_RANK_NOT_MEET",
            Retcode::RetAvatarDressNoEquipment => "RET_AVATAR_DRESS_NO_EQUIPMENT",
            Retcode::RetAvatarExpItemNotExist => "RET_AVATAR_EXP_ITEM_NOT_EXIST",
            Retcode::RetSkilltreePointLocked => "RET_SKILLTREE_POINT_LOCKED",
            Retcode::RetSkilltreePointLevelUpgradeNotMatch => {
                "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH"
            }
            Retcode::RetSkilltreePointLevelReachMax => {
                "RET_SKILLTREE_POINT_LEVEL_REACH_MAX"
            }
            Retcode::RetWorldLevelNotMeet => "RET_WORLD_LEVEL_NOT_MEET",
            Retcode::RetPlayerLevelNotMeet => "RET_PLAYER_LEVEL_NOT_MEET",
            Retcode::RetAvatarRankNotMatch => "RET_AVATAR_RANK_NOT_MATCH",
            Retcode::RetAvatarRankReachMax => "RET_AVATAR_RANK_REACH_MAX",
            Retcode::RetHeroBasicTypeNotMatch => "RET_HERO_BASIC_TYPE_NOT_MATCH",
            Retcode::RetAvatarPromotionNotMeet => "RET_AVATAR_PROMOTION_NOT_MEET",
            Retcode::RetPromotionRewardConfigNotExist => {
                "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST"
            }
            Retcode::RetPromotionRewardAlreadyTaken => {
                "RET_PROMOTION_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetAvatarSkinItemNotExist => "RET_AVATAR_SKIN_ITEM_NOT_EXIST",
            Retcode::RetAvatarSkinAlreadyDressed => "RET_AVATAR_SKIN_ALREADY_DRESSED",
            Retcode::RetAvatarNotDressSkin => "RET_AVATAR_NOT_DRESS_SKIN",
            Retcode::RetAvatarSkinNotMatchAvatar => "RET_AVATAR_SKIN_NOT_MATCH_AVATAR",
            Retcode::RetItemNotExist => "RET_ITEM_NOT_EXIST",
            Retcode::RetItemCostNotEnough => "RET_ITEM_COST_NOT_ENOUGH",
            Retcode::RetItemCostTooMuch => "RET_ITEM_COST_TOO_MUCH",
            Retcode::RetItemNoCost => "RET_ITEM_NO_COST",
            Retcode::RetItemNotEnough => "RET_ITEM_NOT_ENOUGH",
            Retcode::RetItemInvalid => "RET_ITEM_INVALID",
            Retcode::RetItemConfigNotExist => "RET_ITEM_CONFIG_NOT_EXIST",
            Retcode::RetScoinNotEnough => "RET_SCOIN_NOT_ENOUGH",
            Retcode::RetItemRewardExceedLimit => "RET_ITEM_REWARD_EXCEED_LIMIT",
            Retcode::RetItemInvalidUse => "RET_ITEM_INVALID_USE",
            Retcode::RetItemUseConfigNotExist => "RET_ITEM_USE_CONFIG_NOT_EXIST",
            Retcode::RetRewardConfigNotExist => "RET_REWARD_CONFIG_NOT_EXIST",
            Retcode::RetItemExceedLimit => "RET_ITEM_EXCEED_LIMIT",
            Retcode::RetItemCountInvalid => "RET_ITEM_COUNT_INVALID",
            Retcode::RetItemUseTargetTypeInvalid => "RET_ITEM_USE_TARGET_TYPE_INVALID",
            Retcode::RetItemUseSatietyFull => "RET_ITEM_USE_SATIETY_FULL",
            Retcode::RetItemComposeNotExist => "RET_ITEM_COMPOSE_NOT_EXIST",
            Retcode::RetRelicComposeNotExist => "RET_RELIC_COMPOSE_NOT_EXIST",
            Retcode::RetItemCanNotSell => "RET_ITEM_CAN_NOT_SELL",
            Retcode::RetItemSellExceddLimit => "RET_ITEM_SELL_EXCEDD_LIMIT",
            Retcode::RetItemNotInCostList => "RET_ITEM_NOT_IN_COST_LIST",
            Retcode::RetItemSpecialCostNotEnough => "RET_ITEM_SPECIAL_COST_NOT_ENOUGH",
            Retcode::RetItemSpecialCostTooMuch => "RET_ITEM_SPECIAL_COST_TOO_MUCH",
            Retcode::RetItemFormulaNotExist => "RET_ITEM_FORMULA_NOT_EXIST",
            Retcode::RetItemAutoGiftOptionalNotExist => {
                "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST"
            }
            Retcode::RetRelicComposeRelicInvalid => "RET_RELIC_COMPOSE_RELIC_INVALID",
            Retcode::RetRelicComposeMainAffixIdInvalid => {
                "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID"
            }
            Retcode::RetRelicComposeWrongFormulaType => {
                "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE"
            }
            Retcode::RetRelicComposeRelicNotExist => "RET_RELIC_COMPOSE_RELIC_NOT_EXIST",
            Retcode::RetRelicComposeBlackGoldCountInvalid => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID"
            }
            Retcode::RetRelicComposeBlackGoldNotNeed => {
                "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED"
            }
            Retcode::RetMonthCardCannotUse => "RET_MONTH_CARD_CANNOT_USE",
            Retcode::RetItemRewardExceedDisappear => "RET_ITEM_REWARD_EXCEED_DISAPPEAR",
            Retcode::RetItemNeedRecycle => "RET_ITEM_NEED_RECYCLE",
            Retcode::RetItemComposeExceedLimit => "RET_ITEM_COMPOSE_EXCEED_LIMIT",
            Retcode::RetItemCanNotDestroy => "RET_ITEM_CAN_NOT_DESTROY",
            Retcode::RetItemAlreadyMark => "RET_ITEM_ALREADY_MARK",
            Retcode::RetItemMarkExceedLimit => "RET_ITEM_MARK_EXCEED_LIMIT",
            Retcode::RetItemNotMark => "RET_ITEM_NOT_MARK",
            Retcode::RetItenTurnFoodNotSet => "RET_ITEN_TURN_FOOD_NOT_SET",
            Retcode::RetItemTurnFoodAlreadySet => "RET_ITEM_TURN_FOOD_ALREADY_SET",
            Retcode::RetItemTurnFoodConsumeTypeError => {
                "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR"
            }
            Retcode::RetItemTurnFoodSwitchAlreadyOpen => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN"
            }
            Retcode::RetItemTurnFoodSwitchAlreadyClose => {
                "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE"
            }
            Retcode::RetHcoinExchangeTooMuch => "RET_HCOIN_EXCHANGE_TOO_MUCH",
            Retcode::RetItemTurnFoodSceneTypeError => {
                "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR"
            }
            Retcode::RetEquipmentAlreadyDressed => "RET_EQUIPMENT_ALREADY_DRESSED",
            Retcode::RetEquipmentNotExist => "RET_EQUIPMENT_NOT_EXIST",
            Retcode::RetEquipmentReachLevelLimit => "RET_EQUIPMENT_REACH_LEVEL_LIMIT",
            Retcode::RetEquipmentConsumeSelf => "RET_EQUIPMENT_CONSUME_SELF",
            Retcode::RetEquipmentAlreadyLocked => "RET_EQUIPMENT_ALREADY_LOCKED",
            Retcode::RetEquipmentAlreadyUnlocked => "RET_EQUIPMENT_ALREADY_UNLOCKED",
            Retcode::RetEquipmentLocked => "RET_EQUIPMENT_LOCKED",
            Retcode::RetEquipmentSelectNumOverLimit => {
                "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT"
            }
            Retcode::RetEquipmentRankUpMustConsumeSameTid => {
                "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID"
            }
            Retcode::RetEquipmentPromotionReachMax => "RET_EQUIPMENT_PROMOTION_REACH_MAX",
            Retcode::RetEquipmentRankUpReachMax => "RET_EQUIPMENT_RANK_UP_REACH_MAX",
            Retcode::RetEquipmentLevelReachMax => "RET_EQUIPMENT_LEVEL_REACH_MAX",
            Retcode::RetEquipmentExceedLimit => "RET_EQUIPMENT_EXCEED_LIMIT",
            Retcode::RetRelicNotExist => "RET_RELIC_NOT_EXIST",
            Retcode::RetRelicReachLevelLimit => "RET_RELIC_REACH_LEVEL_LIMIT",
            Retcode::RetRelicConsumeSelf => "RET_RELIC_CONSUME_SELF",
            Retcode::RetRelicAlreadyDressed => "RET_RELIC_ALREADY_DRESSED",
            Retcode::RetRelicLocked => "RET_RELIC_LOCKED",
            Retcode::RetRelicAlreadyLocked => "RET_RELIC_ALREADY_LOCKED",
            Retcode::RetRelicAlreadyUnlocked => "RET_RELIC_ALREADY_UNLOCKED",
            Retcode::RetRelicLevelIsNotZero => "RET_RELIC_LEVEL_IS_NOT_ZERO",
            Retcode::RetUniqueIdRepeated => "RET_UNIQUE_ID_REPEATED",
            Retcode::RetEquipmentLevelNotMeet => "RET_EQUIPMENT_LEVEL_NOT_MEET",
            Retcode::RetEquipmentItemNotInCostList => {
                "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST"
            }
            Retcode::RetEquipmentLevelGreaterThanOne => {
                "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE"
            }
            Retcode::RetEquipmentAlreadyRanked => "RET_EQUIPMENT_ALREADY_RANKED",
            Retcode::RetRelicExceedLimit => "RET_RELIC_EXCEED_LIMIT",
            Retcode::RetRelicAlreadyDiscarded => "RET_RELIC_ALREADY_DISCARDED",
            Retcode::RetRelicAlreadyUndiscarded => "RET_RELIC_ALREADY_UNDISCARDED",
            Retcode::RetEquipmentBatchLockTooFast => "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST",
            Retcode::RetRelicFilterPlanSlotEmpty => "RET_RELIC_FILTER_PLAN_SLOT_EMPTY",
            Retcode::RetRelicFilterPlanNumExceedLimit => {
                "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT"
            }
            Retcode::RetRelicFilterPlanNameUtf8Error => {
                "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR"
            }
            Retcode::RetRelicFilterPlanNameFormatError => {
                "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR"
            }
            Retcode::RetRelicFilterPlanNoChange => "RET_RELIC_FILTER_PLAN_NO_CHANGE",
            Retcode::RetLineupInvalidIndex => "RET_LINEUP_INVALID_INDEX",
            Retcode::RetLineupInvalidMemberPos => "RET_LINEUP_INVALID_MEMBER_POS",
            Retcode::RetLineupSwapNotExist => "RET_LINEUP_SWAP_NOT_EXIST",
            Retcode::RetLineupAvatarAlreadyIn => "RET_LINEUP_AVATAR_ALREADY_IN",
            Retcode::RetLineupCreateAvatarError => "RET_LINEUP_CREATE_AVATAR_ERROR",
            Retcode::RetLineupAvatarInitError => "RET_LINEUP_AVATAR_INIT_ERROR",
            Retcode::RetLineupNotExist => "RET_LINEUP_NOT_EXIST",
            Retcode::RetLineupOnlyOneMember => "RET_LINEUP_ONLY_ONE_MEMBER",
            Retcode::RetLineupSameLeaderSlot => "RET_LINEUP_SAME_LEADER_SLOT",
            Retcode::RetLineupNoLeaderSelect => "RET_LINEUP_NO_LEADER_SELECT",
            Retcode::RetLineupSwapSameSlot => "RET_LINEUP_SWAP_SAME_SLOT",
            Retcode::RetLineupAvatarNotExist => "RET_LINEUP_AVATAR_NOT_EXIST",
            Retcode::RetLineupTrialAvatarCanNotQuit => {
                "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT"
            }
            Retcode::RetLineupVirtualLineupPlaneNotMatch => {
                "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH"
            }
            Retcode::RetLineupNotValidLeader => "RET_LINEUP_NOT_VALID_LEADER",
            Retcode::RetLineupSameIndex => "RET_LINEUP_SAME_INDEX",
            Retcode::RetLineupIsEmpty => "RET_LINEUP_IS_EMPTY",
            Retcode::RetLineupNameFormatError => "RET_LINEUP_NAME_FORMAT_ERROR",
            Retcode::RetLineupTypeNotMatch => "RET_LINEUP_TYPE_NOT_MATCH",
            Retcode::RetLineupReplaceAllFailed => "RET_LINEUP_REPLACE_ALL_FAILED",
            Retcode::RetLineupNotAllowEdit => "RET_LINEUP_NOT_ALLOW_EDIT",
            Retcode::RetLineupAvatarIsAlive => "RET_LINEUP_AVATAR_IS_ALIVE",
            Retcode::RetLineupAssistHasOnlyMember => "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER",
            Retcode::RetLineupAssistCannotSwitch => "RET_LINEUP_ASSIST_CANNOT_SWITCH",
            Retcode::RetLineupAvatarTypeInvalid => "RET_LINEUP_AVATAR_TYPE_INVALID",
            Retcode::RetLineupNameUtf8Error => "RET_LINEUP_NAME_UTF8_ERROR",
            Retcode::RetLineupLeaderLock => "RET_LINEUP_LEADER_LOCK",
            Retcode::RetLineupStoryLineNotMatch => "RET_LINEUP_STORY_LINE_NOT_MATCH",
            Retcode::RetLineupAvatarLock => "RET_LINEUP_AVATAR_LOCK",
            Retcode::RetLineupAvatarInvalid => "RET_LINEUP_AVATAR_INVALID",
            Retcode::RetLineupAvatarAlreadyInit => "RET_LINEUP_AVATAR_ALREADY_INIT",
            Retcode::RetLineupLimited => "RET_LINEUP_LIMITED",
            Retcode::RetMailNotExist => "RET_MAIL_NOT_EXIST",
            Retcode::RetMailRangeInvalid => "RET_MAIL_RANGE_INVALID",
            Retcode::RetMailMailIdInvalid => "RET_MAIL_MAIL_ID_INVALID",
            Retcode::RetMailNoMailTakeAttachment => "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT",
            Retcode::RetMailNoMailToDel => "RET_MAIL_NO_MAIL_TO_DEL",
            Retcode::RetMailTypeInvalid => "RET_MAIL_TYPE_INVALID",
            Retcode::RetMailParaInvalid => "RET_MAIL_PARA_INVALID",
            Retcode::RetMailAttachementInvalid => "RET_MAIL_ATTACHEMENT_INVALID",
            Retcode::RetMailTicketInvalid => "RET_MAIL_TICKET_INVALID",
            Retcode::RetMailTicketRepeated => "RET_MAIL_TICKET_REPEATED",
            Retcode::RetStageSettleError => "RET_STAGE_SETTLE_ERROR",
            Retcode::RetStageConfigNotExist => "RET_STAGE_CONFIG_NOT_EXIST",
            Retcode::RetStageNotFound => "RET_STAGE_NOT_FOUND",
            Retcode::RetStageCocoonPropNotValid => "RET_STAGE_COCOON_PROP_NOT_VALID",
            Retcode::RetStageCocoonWaveNotValid => "RET_STAGE_COCOON_WAVE_NOT_VALID",
            Retcode::RetStagePropIdNotEqual => "RET_STAGE_PROP_ID_NOT_EQUAL",
            Retcode::RetStageCocoonWaveOver => "RET_STAGE_COCOON_WAVE_OVER",
            Retcode::RetStageWeekCocoonOverCnt => "RET_STAGE_WEEK_COCOON_OVER_CNT",
            Retcode::RetStageCocoonNotOpen => "RET_STAGE_COCOON_NOT_OPEN",
            Retcode::RetStageTrialNotOpen => "RET_STAGE_TRIAL_NOT_OPEN",
            Retcode::RetStageFarmNotOpen => "RET_STAGE_FARM_NOT_OPEN",
            Retcode::RetStageFarmTypeError => "RET_STAGE_FARM_TYPE_ERROR",
            Retcode::RetChapterLock => "RET_CHAPTER_LOCK",
            Retcode::RetChapterChallengeNumNotEnough => {
                "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH"
            }
            Retcode::RetChapterRewardIdNotExist => "RET_CHAPTER_REWARD_ID_NOT_EXIST",
            Retcode::RetChapterRewardAlreadyTaken => "RET_CHAPTER_REWARD_ALREADY_TAKEN",
            Retcode::RetBattleStageNotMatch => "RET_BATTLE_STAGE_NOT_MATCH",
            Retcode::RetInBattleNow => "RET_IN_BATTLE_NOW",
            Retcode::RetBattleCheat => "RET_BATTLE_CHEAT",
            Retcode::RetBattleFail => "RET_BATTLE_FAIL",
            Retcode::RetBattleNoLineup => "RET_BATTLE_NO_LINEUP",
            Retcode::RetBattleLineupEmpty => "RET_BATTLE_LINEUP_EMPTY",
            Retcode::RetBattleVersionNotMatch => "RET_BATTLE_VERSION_NOT_MATCH",
            Retcode::RetBattleQuitByServer => "RET_BATTLE_QUIT_BY_SERVER",
            Retcode::RetInBattleCheck => "RET_IN_BATTLE_CHECK",
            Retcode::RetBattleCheckNeedRetry => "RET_BATTLE_CHECK_NEED_RETRY",
            Retcode::RetBattleCostTimeCheckFail => "RET_BATTLE_COST_TIME_CHECK_FAIL",
            Retcode::RetLackExchangeStaminaTimes => "RET_LACK_EXCHANGE_STAMINA_TIMES",
            Retcode::RetLackStamina => "RET_LACK_STAMINA",
            Retcode::RetStaminaFull => "RET_STAMINA_FULL",
            Retcode::RetAuthkeySignTypeError => "RET_AUTHKEY_SIGN_TYPE_ERROR",
            Retcode::RetAuthkeySignVerError => "RET_AUTHKEY_SIGN_VER_ERROR",
            Retcode::RetNicknameFormatError => "RET_NICKNAME_FORMAT_ERROR",
            Retcode::RetSensitiveWords => "RET_SENSITIVE_WORDS",
            Retcode::RetLevelRewardHasTaken => "RET_LEVEL_REWARD_HAS_TAKEN",
            Retcode::RetLevelRewardLevelError => "RET_LEVEL_REWARD_LEVEL_ERROR",
            Retcode::RetLanguageInvalid => "RET_LANGUAGE_INVALID",
            Retcode::RetNicknameInCd => "RET_NICKNAME_IN_CD",
            Retcode::RetGameplayBirthdayInvalid => "RET_GAMEPLAY_BIRTHDAY_INVALID",
            Retcode::RetGameplayBirthdayAlreadySet => "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET",
            Retcode::RetNicknameUtf8Error => "RET_NICKNAME_UTF8_ERROR",
            Retcode::RetNicknameDigitLimitError => "RET_NICKNAME_DIGIT_LIMIT_ERROR",
            Retcode::RetSensitiveWordsPlatformError => {
                "RET_SENSITIVE_WORDS_PLATFORM_ERROR"
            }
            Retcode::RetPlayerSettingTypeInvalid => "RET_PLAYER_SETTING_TYPE_INVALID",
            Retcode::RetMazeLackTicket => "RET_MAZE_LACK_TICKET",
            Retcode::RetMazeNotUnlock => "RET_MAZE_NOT_UNLOCK",
            Retcode::RetMazeNoAbility => "RET_MAZE_NO_ABILITY",
            Retcode::RetMazeNoPlane => "RET_MAZE_NO_PLANE",
            Retcode::RetMazeMapNotExist => "RET_MAZE_MAP_NOT_EXIST",
            Retcode::RetMazeMpNotEnough => "RET_MAZE_MP_NOT_ENOUGH",
            Retcode::RetSpringNotEnable => "RET_SPRING_NOT_ENABLE",
            Retcode::RetSpringTooFar => "RET_SPRING_TOO_FAR",
            Retcode::RetNotInMaze => "RET_NOT_IN_MAZE",
            Retcode::RetMazeTimeOfDayTypeError => "RET_MAZE_TIME_OF_DAY_TYPE_ERROR",
            Retcode::RetSceneTransferLockedByTask => "RET_SCENE_TRANSFER_LOCKED_BY_TASK",
            Retcode::RetPlotNotUnlock => "RET_PLOT_NOT_UNLOCK",
            Retcode::RetMissionNotExist => "RET_MISSION_NOT_EXIST",
            Retcode::RetMissionAlreadyDone => "RET_MISSION_ALREADY_DONE",
            Retcode::RetDailyTaskNotFinish => "RET_DAILY_TASK_NOT_FINISH",
            Retcode::RetDailyTaskRewardHasTaken => "RET_DAILY_TASK_REWARD_HAS_TAKEN",
            Retcode::RetMissionNotFinish => "RET_MISSION_NOT_FINISH",
            Retcode::RetMissionNotDoing => "RET_MISSION_NOT_DOING",
            Retcode::RetMissionFinishWayNotMatch => "RET_MISSION_FINISH_WAY_NOT_MATCH",
            Retcode::RetMissionSceneNotMatch => "RET_MISSION_SCENE_NOT_MATCH",
            Retcode::RetMissionCustomValueNotValid => {
                "RET_MISSION_CUSTOM_VALUE_NOT_VALID"
            }
            Retcode::RetMissionSubMissionNotMatch => "RET_MISSION_SUB_MISSION_NOT_MATCH",
            Retcode::RetAdventureMapNotExist => "RET_ADVENTURE_MAP_NOT_EXIST",
            Retcode::RetSceneEntityNotExist => "RET_SCENE_ENTITY_NOT_EXIST",
            Retcode::RetNotInScene => "RET_NOT_IN_SCENE",
            Retcode::RetSceneMonsterNotExist => "RET_SCENE_MONSTER_NOT_EXIST",
            Retcode::RetInteractConfigNotExist => "RET_INTERACT_CONFIG_NOT_EXIST",
            Retcode::RetUnsupportedPropState => "RET_UNSUPPORTED_PROP_STATE",
            Retcode::RetSceneEntryIdNotMatch => "RET_SCENE_ENTRY_ID_NOT_MATCH",
            Retcode::RetSceneEntityMoveCheckFailed => {
                "RET_SCENE_ENTITY_MOVE_CHECK_FAILED"
            }
            Retcode::RetAssistMonsterCountLimit => "RET_ASSIST_MONSTER_COUNT_LIMIT",
            Retcode::RetSceneUseSkillFail => "RET_SCENE_USE_SKILL_FAIL",
            Retcode::RetPropIsHidden => "RET_PROP_IS_HIDDEN",
            Retcode::RetLoadingSuccAlready => "RET_LOADING_SUCC_ALREADY",
            Retcode::RetSceneEntityTypeInvalid => "RET_SCENE_ENTITY_TYPE_INVALID",
            Retcode::RetInteractTypeInvalid => "RET_INTERACT_TYPE_INVALID",
            Retcode::RetInteractNotInRegion => "RET_INTERACT_NOT_IN_REGION",
            Retcode::RetInteractSubTypeInvalid => "RET_INTERACT_SUB_TYPE_INVALID",
            Retcode::RetNotLeaderEntity => "RET_NOT_LEADER_ENTITY",
            Retcode::RetMonsterIsNotFarmElement => "RET_MONSTER_IS_NOT_FARM_ELEMENT",
            Retcode::RetMonsterConfigNotExist => "RET_MONSTER_CONFIG_NOT_EXIST",
            Retcode::RetAvatarHpAlreadyFull => "RET_AVATAR_HP_ALREADY_FULL",
            Retcode::RetCurInteractEntityNotMatch => "RET_CUR_INTERACT_ENTITY_NOT_MATCH",
            Retcode::RetPlaneTypeNotAllow => "RET_PLANE_TYPE_NOT_ALLOW",
            Retcode::RetGroupNotExist => "RET_GROUP_NOT_EXIST",
            Retcode::RetGroupSaveDataInCd => "RET_GROUP_SAVE_DATA_IN_CD",
            Retcode::RetGroupSaveLenghReachMax => "RET_GROUP_SAVE_LENGH_REACH_MAX",
            Retcode::RetRecentElementNotExist => "RET_RECENT_ELEMENT_NOT_EXIST",
            Retcode::RetRecentElementStageNotMatch => {
                "RET_RECENT_ELEMENT_STAGE_NOT_MATCH"
            }
            Retcode::RetScenePositionVersionNotMatch => {
                "RET_SCENE_POSITION_VERSION_NOT_MATCH"
            }
            Retcode::RetGameplayCounterNotExist => "RET_GAMEPLAY_COUNTER_NOT_EXIST",
            Retcode::RetGameplayCounterNotEnough => "RET_GAMEPLAY_COUNTER_NOT_ENOUGH",
            Retcode::RetGroupStateNotMatch => "RET_GROUP_STATE_NOT_MATCH",
            Retcode::RetSceneEntityPosNotMatch => "RET_SCENE_ENTITY_POS_NOT_MATCH",
            Retcode::RetGroupStateCustomSaveDataOff => {
                "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF"
            }
            Retcode::RetSceneNotMatch => "RET_SCENE_NOT_MATCH",
            Retcode::RetBuyTimesLimit => "RET_BUY_TIMES_LIMIT",
            Retcode::RetBuyLimitType => "RET_BUY_LIMIT_TYPE",
            Retcode::RetShopNotOpen => "RET_SHOP_NOT_OPEN",
            Retcode::RetGoodsNotOpen => "RET_GOODS_NOT_OPEN",
            Retcode::RetCityLevelRewardTaken => "RET_CITY_LEVEL_REWARD_TAKEN",
            Retcode::RetCityLevelNotMeet => "RET_CITY_LEVEL_NOT_MEET",
            Retcode::RetSingleBuyLimit => "RET_SINGLE_BUY_LIMIT",
            Retcode::RetTutorialNotUnlock => "RET_TUTORIAL_NOT_UNLOCK",
            Retcode::RetTutorialUnlockAlready => "RET_TUTORIAL_UNLOCK_ALREADY",
            Retcode::RetTutorialFinishAlready => "RET_TUTORIAL_FINISH_ALREADY",
            Retcode::RetTutorialPreNotUnlock => "RET_TUTORIAL_PRE_NOT_UNLOCK",
            Retcode::RetTutorialPlayerLevelNotMatch => {
                "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH"
            }
            Retcode::RetTutorialTutorialNotFound => "RET_TUTORIAL_TUTORIAL_NOT_FOUND",
            Retcode::RetChallengeNotExist => "RET_CHALLENGE_NOT_EXIST",
            Retcode::RetChallengeNotUnlock => "RET_CHALLENGE_NOT_UNLOCK",
            Retcode::RetChallengeAlready => "RET_CHALLENGE_ALREADY",
            Retcode::RetChallengeLineupEditForbidden => {
                "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN"
            }
            Retcode::RetChallengeLineupEmpty => "RET_CHALLENGE_LINEUP_EMPTY",
            Retcode::RetChallengeNotDoing => "RET_CHALLENGE_NOT_DOING",
            Retcode::RetChallengeNotFinish => "RET_CHALLENGE_NOT_FINISH",
            Retcode::RetChallengeTargetNotFinish => "RET_CHALLENGE_TARGET_NOT_FINISH",
            Retcode::RetChallengeTargetRewardTaken => "RET_CHALLENGE_TARGET_REWARD_TAKEN",
            Retcode::RetChallengeTimeNotValid => "RET_CHALLENGE_TIME_NOT_VALID",
            Retcode::RetChallengeStarsCountNotMeet => {
                "RET_CHALLENGE_STARS_COUNT_NOT_MEET"
            }
            Retcode::RetChallengeStarsRewardTaken => "RET_CHALLENGE_STARS_REWARD_TAKEN",
            Retcode::RetChallengeStarsNotExist => "RET_CHALLENGE_STARS_NOT_EXIST",
            Retcode::RetChallengeCurSceneNotEntryFloor => {
                "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR"
            }
            Retcode::RetChallengeNoTeamArchive => "RET_CHALLENGE_NO_TEAM_ARCHIVE",
            Retcode::RetChallengeLineupAvatarTypeInvalid => {
                "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID"
            }
            Retcode::RetChallengeLineupRecommendInCd => {
                "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Retcode::RetBasicTypeAlready => "RET_BASIC_TYPE_ALREADY",
            Retcode::RetNoBasicType => "RET_NO_BASIC_TYPE",
            Retcode::RetNotChooseBasicType => "RET_NOT_CHOOSE_BASIC_TYPE",
            Retcode::RetNotFuncClose => "RET_NOT_FUNC_CLOSE",
            Retcode::RetNotChooseGender => "RET_NOT_CHOOSE_GENDER",
            Retcode::RetNotReqUnlockBasicType => "RET_NOT_REQ_UNLOCK_BASIC_TYPE",
            Retcode::RetAvatarPathLocked => "RET_AVATAR_PATH_LOCKED",
            Retcode::RetRogueStatusNotMatch => "RET_ROGUE_STATUS_NOT_MATCH",
            Retcode::RetRogueSelectBuffNotExist => "RET_ROGUE_SELECT_BUFF_NOT_EXIST",
            Retcode::RetRogueCoinNotEnough => "RET_ROGUE_COIN_NOT_ENOUGH",
            Retcode::RetRogueStaminaNotEnough => "RET_ROGUE_STAMINA_NOT_ENOUGH",
            Retcode::RetRogueAppraisalCountNotEnough => {
                "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH"
            }
            Retcode::RetRoguePropAlreadyUsed => "RET_ROGUE_PROP_ALREADY_USED",
            Retcode::RetRogueRecordAlreadySaved => "RET_ROGUE_RECORD_ALREADY_SAVED",
            Retcode::RetRogueRollBuffMaxCount => "RET_ROGUE_ROLL_BUFF_MAX_COUNT",
            Retcode::RetRoguePickAvatarInvalid => "RET_ROGUE_PICK_AVATAR_INVALID",
            Retcode::RetRogueQuestExpire => "RET_ROGUE_QUEST_EXPIRE",
            Retcode::RetRogueQuestRewardAlready => "RET_ROGUE_QUEST_REWARD_ALREADY",
            Retcode::RetRogueReviveCountNotEnough => "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH",
            Retcode::RetRogueAreaInvalid => "RET_ROGUE_AREA_INVALID",
            Retcode::RetRogueScoreRewardPoolInvalid => {
                "RET_ROGUE_SCORE_REWARD_POOL_INVALID"
            }
            Retcode::RetRogueScoreRewardRowInvalid => {
                "RET_ROGUE_SCORE_REWARD_ROW_INVALID"
            }
            Retcode::RetRogueAeonLevelNotMeet => "RET_ROGUE_AEON_LEVEL_NOT_MEET",
            Retcode::RetRogueAeonLevelRewardAlreadyTaken => {
                "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetRogueAeonConfigNotExist => "RET_ROGUE_AEON_CONFIG_NOT_EXIST",
            Retcode::RetRogueTrialAvatarInvalid => "RET_ROGUE_TRIAL_AVATAR_INVALID",
            Retcode::RetRogueHandbookRewardAlreadyTaken => {
                "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetRogueRoomTypeNotMatch => "RET_ROGUE_ROOM_TYPE_NOT_MATCH",
            Retcode::RetRogueShopGoodNotFound => "RET_ROGUE_SHOP_GOOD_NOT_FOUND",
            Retcode::RetRogueShopGoodAlreadyBought => {
                "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT"
            }
            Retcode::RetRogueShopGoodAlreadyOwn => "RET_ROGUE_SHOP_GOOD_ALREADY_OWN",
            Retcode::RetRogueShopMiracleNotExist => "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST",
            Retcode::RetRogueShopNotExist => "RET_ROGUE_SHOP_NOT_EXIST",
            Retcode::RetRogueShopCannotRefresh => "RET_ROGUE_SHOP_CANNOT_REFRESH",
            Retcode::RetRogueSelectBuffCertainMismatch => {
                "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH"
            }
            Retcode::RetMissionEventConfigNotExist => {
                "RET_MISSION_EVENT_CONFIG_NOT_EXIST"
            }
            Retcode::RetMissionEventNotClient => "RET_MISSION_EVENT_NOT_CLIENT",
            Retcode::RetMissionEventFinished => "RET_MISSION_EVENT_FINISHED",
            Retcode::RetMissionEventDoing => "RET_MISSION_EVENT_DOING",
            Retcode::RetHasChallengeMissionEvent => "RET_HAS_CHALLENGE_MISSION_EVENT",
            Retcode::RetNotChallengeMissionEvent => "RET_NOT_CHALLENGE_MISSION_EVENT",
            Retcode::RetGachaIdNotExist => "RET_GACHA_ID_NOT_EXIST",
            Retcode::RetGachaNumInvalid => "RET_GACHA_NUM_INVALID",
            Retcode::RetGachaFirstGachaMustOne => "RET_GACHA_FIRST_GACHA_MUST_ONE",
            Retcode::RetGachaReqDuplicated => "RET_GACHA_REQ_DUPLICATED",
            Retcode::RetGachaNotInSchedule => "RET_GACHA_NOT_IN_SCHEDULE",
            Retcode::RetGachaNewbieClose => "RET_GACHA_NEWBIE_CLOSE",
            Retcode::RetGachaTodayLimited => "RET_GACHA_TODAY_LIMITED",
            Retcode::RetGachaNotSupport => "RET_GACHA_NOT_SUPPORT",
            Retcode::RetGachaCeilingNotEnough => "RET_GACHA_CEILING_NOT_ENOUGH",
            Retcode::RetGachaCeilingClose => "RET_GACHA_CEILING_CLOSE",
            Retcode::RetNotInRaid => "RET_NOT_IN_RAID",
            Retcode::RetRaidDoing => "RET_RAID_DOING",
            Retcode::RetNotProp => "RET_NOT_PROP",
            Retcode::RetRaidIdNotMatch => "RET_RAID_ID_NOT_MATCH",
            Retcode::RetRaidRestartNotMatch => "RET_RAID_RESTART_NOT_MATCH",
            Retcode::RetRaidLimit => "RET_RAID_LIMIT",
            Retcode::RetRaidAvatarListEmpty => "RET_RAID_AVATAR_LIST_EMPTY",
            Retcode::RetRaidAvatarNotExist => "RET_RAID_AVATAR_NOT_EXIST",
            Retcode::RetChallengeRaidRewardAlready => "RET_CHALLENGE_RAID_REWARD_ALREADY",
            Retcode::RetChallengeRaidScoreNotReach => {
                "RET_CHALLENGE_RAID_SCORE_NOT_REACH"
            }
            Retcode::RetChallengeRaidNotOpen => "RET_CHALLENGE_RAID_NOT_OPEN",
            Retcode::RetRaidFinished => "RET_RAID_FINISHED",
            Retcode::RetRaidWorldLevelNotLock => "RET_RAID_WORLD_LEVEL_NOT_LOCK",
            Retcode::RetRaidCannotUseAssist => "RET_RAID_CANNOT_USE_ASSIST",
            Retcode::RetRaidAvatarNotMatch => "RET_RAID_AVATAR_NOT_MATCH",
            Retcode::RetRaidCanNotSave => "RET_RAID_CAN_NOT_SAVE",
            Retcode::RetRaidNoSave => "RET_RAID_NO_SAVE",
            Retcode::RetActivityRaidNotOpen => "RET_ACTIVITY_RAID_NOT_OPEN",
            Retcode::RetRaidAvatarCaptainNotExist => "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST",
            Retcode::RetRaidStoryLineNotMatch => "RET_RAID_STORY_LINE_NOT_MATCH",
            Retcode::RetTalkEventAlreadyTaken => "RET_TALK_EVENT_ALREADY_TAKEN",
            Retcode::RetNpcAlreadyMeet => "RET_NPC_ALREADY_MEET",
            Retcode::RetNpcNotInConfig => "RET_NPC_NOT_IN_CONFIG",
            Retcode::RetDialogueGroupDismatch => "RET_DIALOGUE_GROUP_DISMATCH",
            Retcode::RetDialogueEventInvalid => "RET_DIALOGUE_EVENT_INVALID",
            Retcode::RetTalkEventTakeProtoNotMatch => {
                "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH"
            }
            Retcode::RetTalkEventNotValid => "RET_TALK_EVENT_NOT_VALID",
            Retcode::RetExpeditionConfigNotExist => "RET_EXPEDITION_CONFIG_NOT_EXIST",
            Retcode::RetExpeditionRewardConfigNotExist => {
                "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST"
            }
            Retcode::RetExpeditionNotUnlocked => "RET_EXPEDITION_NOT_UNLOCKED",
            Retcode::RetExpeditionAlreadyAccepted => "RET_EXPEDITION_ALREADY_ACCEPTED",
            Retcode::RetExpeditionRepeatedAvatar => "RET_EXPEDITION_REPEATED_AVATAR",
            Retcode::RetAvatarAlreadyDispatched => "RET_AVATAR_ALREADY_DISPATCHED",
            Retcode::RetExpeditionNotAccepted => "RET_EXPEDITION_NOT_ACCEPTED",
            Retcode::RetExpeditionNotFinish => "RET_EXPEDITION_NOT_FINISH",
            Retcode::RetExpeditionAlreadyFinish => "RET_EXPEDITION_ALREADY_FINISH",
            Retcode::RetExpeditionTeamCountLimit => "RET_EXPEDITION_TEAM_COUNT_LIMIT",
            Retcode::RetExpeditionAvatarNumNotMatch => {
                "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH"
            }
            Retcode::RetExpeditionNotOpen => "RET_EXPEDITION_NOT_OPEN",
            Retcode::RetExpeditionFriendAvatarNotValid => {
                "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID"
            }
            Retcode::RetExpeditionNotPublished => "RET_EXPEDITION_NOT_PUBLISHED",
            Retcode::RetLoginActivityHasTaken => "RET_LOGIN_ACTIVITY_HAS_TAKEN",
            Retcode::RetLoginActivityDaysLack => "RET_LOGIN_ACTIVITY_DAYS_LACK",
            Retcode::RetTrialActivityRewardAlreadyTake => {
                "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE"
            }
            Retcode::RetTrialActivityStageNotFinish => {
                "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH"
            }
            Retcode::RetMonsterResearchActivityHasTaken => {
                "RET_MONSTER_RESEARCH_ACTIVITY_HAS_TAKEN"
            }
            Retcode::RetMonsterResearchActivityMaterialNotSubmitted => {
                "RET_MONSTER_RESEARCH_ACTIVITY_MATERIAL_NOT_SUBMITTED"
            }
            Retcode::RetMonsterResearchActivityMaterialAlreadySubmitted => {
                "RET_MONSTER_RESEARCH_ACTIVITY_MATERIAL_ALREADY_SUBMITTED"
            }
            Retcode::RetFantasticStoryActivityStoryError => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR"
            }
            Retcode::RetFantasticStoryActivityStoryNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN"
            }
            Retcode::RetFantasticStoryActivityBattleError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR"
            }
            Retcode::RetFantasticStoryActivityBattleNotOpen => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN"
            }
            Retcode::RetFantasticStoryActivityBattleAvatarError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR"
            }
            Retcode::RetFantasticStoryActivityBattleBuffError => {
                "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR"
            }
            Retcode::RetFantasticStoryActivityPreBattleScoreNotEnough => {
                "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH"
            }
            Retcode::RetTrialActivityAlreadyInTrialActivity => {
                "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY"
            }
            Retcode::RetCommonActivityNotOpen => "RET_COMMON_ACTIVITY_NOT_OPEN",
            Retcode::RetMessageConfigNotExist => "RET_MESSAGE_CONFIG_NOT_EXIST",
            Retcode::RetMessageSectionNotTake => "RET_MESSAGE_SECTION_NOT_TAKE",
            Retcode::RetMessageGroupNotTake => "RET_MESSAGE_GROUP_NOT_TAKE",
            Retcode::RetMessageSectionIdNotMatch => "RET_MESSAGE_SECTION_ID_NOT_MATCH",
            Retcode::RetMessageSectionCanNotFinish => {
                "RET_MESSAGE_SECTION_CAN_NOT_FINISH"
            }
            Retcode::RetMessageItemCanNotFinish => "RET_MESSAGE_ITEM_CAN_NOT_FINISH",
            Retcode::RetMessageItemRaidCanNotFinish => {
                "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH"
            }
            Retcode::RetFriendAlreadyIsFriend => "RET_FRIEND_ALREADY_IS_FRIEND",
            Retcode::RetFriendIsNotFriend => "RET_FRIEND_IS_NOT_FRIEND",
            Retcode::RetFriendApplyExpire => "RET_FRIEND_APPLY_EXPIRE",
            Retcode::RetFriendInBlacklist => "RET_FRIEND_IN_BLACKLIST",
            Retcode::RetFriendNotInBlacklist => "RET_FRIEND_NOT_IN_BLACKLIST",
            Retcode::RetFriendNumberLimit => "RET_FRIEND_NUMBER_LIMIT",
            Retcode::RetFriendBlacklistNumberLimit => "RET_FRIEND_BLACKLIST_NUMBER_LIMIT",
            Retcode::RetFriendDailyApplyLimit => "RET_FRIEND_DAILY_APPLY_LIMIT",
            Retcode::RetFriendInHandleLimit => "RET_FRIEND_IN_HANDLE_LIMIT",
            Retcode::RetFriendApplyInCd => "RET_FRIEND_APPLY_IN_CD",
            Retcode::RetFriendRemarkNameFormatError => {
                "RET_FRIEND_REMARK_NAME_FORMAT_ERROR"
            }
            Retcode::RetFriendPlayerNotFound => "RET_FRIEND_PLAYER_NOT_FOUND",
            Retcode::RetFriendInTargetBlacklist => "RET_FRIEND_IN_TARGET_BLACKLIST",
            Retcode::RetFriendTargetNumberLimit => "RET_FRIEND_TARGET_NUMBER_LIMIT",
            Retcode::RetAssistQueryTooFast => "RET_ASSIST_QUERY_TOO_FAST",
            Retcode::RetAssistNotExist => "RET_ASSIST_NOT_EXIST",
            Retcode::RetAssistUsedAlready => "RET_ASSIST_USED_ALREADY",
            Retcode::RetFriendReportReasonFormatError => {
                "RET_FRIEND_REPORT_REASON_FORMAT_ERROR"
            }
            Retcode::RetFriendReportSensitiveWords => "RET_FRIEND_REPORT_SENSITIVE_WORDS",
            Retcode::RetAssistUsedTimesOver => "RET_ASSIST_USED_TIMES_OVER",
            Retcode::RetAssistQuitAlready => "RET_ASSIST_QUIT_ALREADY",
            Retcode::RetAssistAvatarInLineup => "RET_ASSIST_AVATAR_IN_LINEUP",
            Retcode::RetAssistNoReward => "RET_ASSIST_NO_REWARD",
            Retcode::RetFriendSearchNumLimit => "RET_FRIEND_SEARCH_NUM_LIMIT",
            Retcode::RetFriendSearchInCd => "RET_FRIEND_SEARCH_IN_CD",
            Retcode::RetFriendRemarkNameUtf8Error => "RET_FRIEND_REMARK_NAME_UTF8_ERROR",
            Retcode::RetFriendReportReasonUtf8Error => {
                "RET_FRIEND_REPORT_REASON_UTF8_ERROR"
            }
            Retcode::RetAssistSetAlready => "RET_ASSIST_SET_ALREADY",
            Retcode::RetFriendTargetForbidOtherApply => {
                "RET_FRIEND_TARGET_FORBID_OTHER_APPLY"
            }
            Retcode::RetFriendMarkedCntMax => "RET_FRIEND_MARKED_CNT_MAX",
            Retcode::RetFriendMarkedAlready => "RET_FRIEND_MARKED_ALREADY",
            Retcode::RetFriendNotMarked => "RET_FRIEND_NOT_MARKED",
            Retcode::RetFriendChallengeLineupRecommendInCd => {
                "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD"
            }
            Retcode::RetViewPlayerCardInCd => "RET_VIEW_PLAYER_CARD_IN_CD",
            Retcode::RetViewPlayerBattleRecordInCd => {
                "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD"
            }
            Retcode::RetPlayerBoardHeadIconNotExist => {
                "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST"
            }
            Retcode::RetPlayerBoardHeadIconLocked => "RET_PLAYER_BOARD_HEAD_ICON_LOCKED",
            Retcode::RetPlayerBoardHeadIconAlreadyUnlocked => {
                "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED"
            }
            Retcode::RetPlayerBoardDisplayAvatarNotExist => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST"
            }
            Retcode::RetPlayerBoardDisplayAvatarExceedLimit => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT"
            }
            Retcode::RetPlayerBoardDisplayRepeatedAvatar => {
                "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR"
            }
            Retcode::RetPlayerBoardDisplayAvatarSamePos => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS"
            }
            Retcode::RetPlayerBoardDisplayAvatarLocked => {
                "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED"
            }
            Retcode::RetSignatureLengthExceedLimit => "RET_SIGNATURE_LENGTH_EXCEED_LIMIT",
            Retcode::RetSignatureSensitiveWords => "RET_SIGNATURE_SENSITIVE_WORDS",
            Retcode::RetPlayerBoardAssistAvatarNotExist => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST"
            }
            Retcode::RetPlayerBoardAssistAvatarLocked => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED"
            }
            Retcode::RetSignatureUtf8Error => "RET_SIGNATURE_UTF8_ERROR",
            Retcode::RetPlayerBoardAssistAvatarCntError => {
                "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR"
            }
            Retcode::RetBattlePassTierNotValid => "RET_BATTLE_PASS_TIER_NOT_VALID",
            Retcode::RetBattlePassLevelNotMeet => "RET_BATTLE_PASS_LEVEL_NOT_MEET",
            Retcode::RetBattlePassRewardTakeAlready => {
                "RET_BATTLE_PASS_REWARD_TAKE_ALREADY"
            }
            Retcode::RetBattlePassNotPremium => "RET_BATTLE_PASS_NOT_PREMIUM",
            Retcode::RetBattlePassNotDoing => "RET_BATTLE_PASS_NOT_DOING",
            Retcode::RetBattlePassLevelInvalid => "RET_BATTLE_PASS_LEVEL_INVALID",
            Retcode::RetBattlePassNotUnlock => "RET_BATTLE_PASS_NOT_UNLOCK",
            Retcode::RetBattlePassNoReward => "RET_BATTLE_PASS_NO_REWARD",
            Retcode::RetBattlePassQuestNotValid => "RET_BATTLE_PASS_QUEST_NOT_VALID",
            Retcode::RetBattlePassNotChooseOptional => {
                "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL"
            }
            Retcode::RetBattlePassNotTakeReward => "RET_BATTLE_PASS_NOT_TAKE_REWARD",
            Retcode::RetBattlePassOptionalNotValid => {
                "RET_BATTLE_PASS_OPTIONAL_NOT_VALID"
            }
            Retcode::RetBattlePassBuyAlready => "RET_BATTLE_PASS_BUY_ALREADY",
            Retcode::RetBattlePassNearEnd => "RET_BATTLE_PASS_NEAR_END",
            Retcode::RetMusicLocked => "RET_MUSIC_LOCKED",
            Retcode::RetMusicNotExist => "RET_MUSIC_NOT_EXIST",
            Retcode::RetMusicUnlockFailed => "RET_MUSIC_UNLOCK_FAILED",
            Retcode::RetPunkLordLackSummonTimes => "RET_PUNK_LORD_LACK_SUMMON_TIMES",
            Retcode::RetPunkLordAttackingMonsterLimit => {
                "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT"
            }
            Retcode::RetPunkLordMonsterNotExist => "RET_PUNK_LORD_MONSTER_NOT_EXIST",
            Retcode::RetPunkLordMonsterAlreadyShared => {
                "RET_PUNK_LORD_MONSTER_ALREADY_SHARED"
            }
            Retcode::RetPunkLordMonsterExpired => "RET_PUNK_LORD_MONSTER_EXPIRED",
            Retcode::RetPunkLordSelfMonsterAttackLimit => {
                "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT"
            }
            Retcode::RetPunkLordLackSupportTimes => "RET_PUNK_LORD_LACK_SUPPORT_TIMES",
            Retcode::RetPunkLordMonsterAlreadyKilled => {
                "RET_PUNK_LORD_MONSTER_ALREADY_KILLED"
            }
            Retcode::RetPunkLordMonsterAttackerLimit => {
                "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT"
            }
            Retcode::RetPunkLordWorldLevleNotValid => {
                "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID"
            }
            Retcode::RetPunkLordRewardLevleNotExist => {
                "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST"
            }
            Retcode::RetPunkLordPointNotMeet => "RET_PUNK_LORD_POINT_NOT_MEET",
            Retcode::RetPunkLordInAttacking => "RET_PUNK_LORD_IN_ATTACKING",
            Retcode::RetPunkLordOperationInCd => "RET_PUNK_LORD_OPERATION_IN_CD",
            Retcode::RetPunkLordRewardAlreadyTaken => {
                "RET_PUNK_LORD_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetPunkLordOverBonusRewardLimit => {
                "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT"
            }
            Retcode::RetPunkLordNotInSchedule => "RET_PUNK_LORD_NOT_IN_SCHEDULE",
            Retcode::RetPunkLordMonsterNotAttacked => {
                "RET_PUNK_LORD_MONSTER_NOT_ATTACKED"
            }
            Retcode::RetPunkLordMonsterNotKilled => "RET_PUNK_LORD_MONSTER_NOT_KILLED",
            Retcode::RetPunkLordMonsterKilledScoreAlreadyTake => {
                "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE"
            }
            Retcode::RetPunkLordRewardLevleAlreadyTake => {
                "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE"
            }
            Retcode::RetDailyActiveLevelInvalid => "RET_DAILY_ACTIVE_LEVEL_INVALID",
            Retcode::RetDailyActiveLevelRewardAlreadyTaken => {
                "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetDailyActiveLevelApNotEnough => {
                "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH"
            }
            Retcode::RetDailyMeetPam => "RET_DAILY_MEET_PAM",
            Retcode::RetReplayIdNotMatch => "RET_REPLAY_ID_NOT_MATCH",
            Retcode::RetReplayReqNotValid => "RET_REPLAY_REQ_NOT_VALID",
            Retcode::RetFightActivityDifficultyLevelNotPassed => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED"
            }
            Retcode::RetFightActivityDifficultyLevelRewardAlreadyTake => {
                "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE"
            }
            Retcode::RetFightActivityStageNotOpen => "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN",
            Retcode::RetFightActivityLevelNotUnlock => {
                "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK"
            }
            Retcode::RetTrainVisitorVisitorNotExist => {
                "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST"
            }
            Retcode::RetTrainVisitorBehaviorNotExist => {
                "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST"
            }
            Retcode::RetTrainVisitorBehaviorFinished => {
                "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED"
            }
            Retcode::RetTrainVisitorAllBehaviorRewardTaken => {
                "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN"
            }
            Retcode::RetTrainVisitorGetOnMissionNotFinish => {
                "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH"
            }
            Retcode::RetTrainVisitorNotGetOff => "RET_TRAIN_VISITOR_NOT_GET_OFF",
            Retcode::RetTextJoinUnknowIsOverride => "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE",
            Retcode::RetTextJoinIdNotExist => "RET_TEXT_JOIN_ID_NOT_EXIST",
            Retcode::RetTextJoinCanNotOverride => "RET_TEXT_JOIN_CAN_NOT_OVERRIDE",
            Retcode::RetTextJoinItemIdError => "RET_TEXT_JOIN_ITEM_ID_ERROR",
            Retcode::RetTextJoinSensitiveCheckError => {
                "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR"
            }
            Retcode::RetTextJoinMustOverride => "RET_TEXT_JOIN_MUST_OVERRIDE",
            Retcode::RetTextJoinTextEmpty => "RET_TEXT_JOIN_TEXT_EMPTY",
            Retcode::RetTextJoinTextFormatError => "RET_TEXT_JOIN_TEXT_FORMAT_ERROR",
            Retcode::RetTextJoinTextUtf8Error => "RET_TEXT_JOIN_TEXT_UTF8_ERROR",
            Retcode::RetTextJoinBatchReqIdRepeat => "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT",
            Retcode::RetTextJoinTypeNotSupportBatchReq => {
                "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ"
            }
            Retcode::RetTextJoinAvatarIdNotExist => "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST",
            Retcode::RetTextJoinUnknowType => "RET_TEXT_JOIN_UNKNOW_TYPE",
            Retcode::RetPamMissionMissionIdError => "RET_PAM_MISSION_MISSION_ID_ERROR",
            Retcode::RetPamMissionMissionExpire => "RET_PAM_MISSION_MISSION_EXPIRE",
            Retcode::RetChatTypeNotExist => "RET_CHAT_TYPE_NOT_EXIST",
            Retcode::RetMsgTypeNotExist => "RET_MSG_TYPE_NOT_EXIST",
            Retcode::RetChatNoTargetUid => "RET_CHAT_NO_TARGET_UID",
            Retcode::RetChatMsgEmpty => "RET_CHAT_MSG_EMPTY",
            Retcode::RetChatMsgExceedLimit => "RET_CHAT_MSG_EXCEED_LIMIT",
            Retcode::RetChatMsgSensitiveCheckError => {
                "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR"
            }
            Retcode::RetChatMsgUtf8Error => "RET_CHAT_MSG_UTF8_ERROR",
            Retcode::RetChatForbidSwitchOpen => "RET_CHAT_FORBID_SWITCH_OPEN",
            Retcode::RetChatForbid => "RET_CHAT_FORBID",
            Retcode::RetChatMsgIncludeSpecialStr => "RET_CHAT_MSG_INCLUDE_SPECIAL_STR",
            Retcode::RetChatMsgEmojiNotExist => "RET_CHAT_MSG_EMOJI_NOT_EXIST",
            Retcode::RetChatMsgEmojiGenderNotMatch => {
                "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH"
            }
            Retcode::RetChatMsgEmojiNotMarked => "RET_CHAT_MSG_EMOJI_NOT_MARKED",
            Retcode::RetChatMsgEmojiAlreadyMarked => "RET_CHAT_MSG_EMOJI_ALREADY_MARKED",
            Retcode::RetChatMsgEmojiMarkedMaxLimit => {
                "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT"
            }
            Retcode::RetBoxingClubChallengeNotOpen => {
                "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN"
            }
            Retcode::RetMuseumNotOpen => "RET_MUSEUM_NOT_OPEN",
            Retcode::RetMuseumTurnCntNotMatch => "RET_MUSEUM_TURN_CNT_NOT_MATCH",
            Retcode::RetMuseumPhaseNotReach => "RET_MUSEUM_PHASE_NOT_REACH",
            Retcode::RetMuseumUnknowStuff => "RET_MUSEUM_UNKNOW_STUFF",
            Retcode::RetMuseumUnknowArea => "RET_MUSEUM_UNKNOW_AREA",
            Retcode::RetMuseumUnknowPos => "RET_MUSEUM_UNKNOW_POS",
            Retcode::RetMuseumStuffAlreadyInArea => "RET_MUSEUM_STUFF_ALREADY_IN_AREA",
            Retcode::RetMuseumStuffNotInArea => "RET_MUSEUM_STUFF_NOT_IN_AREA",
            Retcode::RetMuseumGetNpcRepeat => "RET_MUSEUM_GET_NPC_REPEAT",
            Retcode::RetMuseumGetNpcUnlock => "RET_MUSEUM_GET_NPC_UNLOCK",
            Retcode::RetMuseumGetNpcNotEnough => "RET_MUSEUM_GET_NPC_NOT_ENOUGH",
            Retcode::RetMuseumChangeStuffAreaError => {
                "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR"
            }
            Retcode::RetMuseumNotInit => "RET_MUSEUM_NOT_INIT",
            Retcode::RetMuseumEventError => "RET_MUSEUM_EVENT_ERROR",
            Retcode::RetMuseumUnknowChooseEventId => "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID",
            Retcode::RetMuseumEventOrderNotMatch => "RET_MUSEUM_EVENT_ORDER_NOT_MATCH",
            Retcode::RetMuseumEventPhaseNotUnlock => "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK",
            Retcode::RetMuseumEventMissionNotFound => {
                "RET_MUSEUM_EVENT_MISSION_NOT_FOUND"
            }
            Retcode::RetMuseumAreaLevelUpAlready => "RET_MUSEUM_AREA_LEVEL_UP_ALREADY",
            Retcode::RetMuseumStuffAlreadyUsed => "RET_MUSEUM_STUFF_ALREADY_USED",
            Retcode::RetMuseumEventRoundNotUnlock => "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK",
            Retcode::RetMuseumStuffInArea => "RET_MUSEUM_STUFF_IN_AREA",
            Retcode::RetMuseumStuffDispatch => "RET_MUSEUM_STUFF_DISPATCH",
            Retcode::RetMuseumIsEnd => "RET_MUSEUM_IS_END",
            Retcode::RetMuseumStuffLeaving => "RET_MUSEUM_STUFF_LEAVING",
            Retcode::RetMuseumEventMissionNotFinish => {
                "RET_MUSEUM_EVENT_MISSION_NOT_FINISH"
            }
            Retcode::RetMuseumCollectRewardNotExist => {
                "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST"
            }
            Retcode::RetMuseumCollectRewardAlreadyTaken => {
                "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetMuseumAcceptMissionMaxLimit => {
                "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT"
            }
            Retcode::RetRogueChallengeNotOpen => "RET_ROGUE_CHALLENGE_NOT_OPEN",
            Retcode::RetRogueChallengeAssisRefreshLimit => {
                "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT"
            }
            Retcode::RetAlleyNotInit => "RET_ALLEY_NOT_INIT",
            Retcode::RetAlleyNotOpen => "RET_ALLEY_NOT_OPEN",
            Retcode::RetAlleyMapNotExist => "RET_ALLEY_MAP_NOT_EXIST",
            Retcode::RetAlleyEmptyPosList => "RET_ALLEY_EMPTY_POS_LIST",
            Retcode::RetAlleyLinePosInvalid => "RET_ALLEY_LINE_POS_INVALID",
            Retcode::RetAlleyShopNotUnlock => "RET_ALLEY_SHOP_NOT_UNLOCK",
            Retcode::RetAlleyDepotFull => "RET_ALLEY_DEPOT_FULL",
            Retcode::RetAlleyShopNotInclude => "RET_ALLEY_SHOP_NOT_INCLUDE",
            Retcode::RetAlleyEventNotUnlock => "RET_ALLEY_EVENT_NOT_UNLOCK",
            Retcode::RetAlleyEventNotRefresh => "RET_ALLEY_EVENT_NOT_REFRESH",
            Retcode::RetAlleyEventStateDoing => "RET_ALLEY_EVENT_STATE_DOING",
            Retcode::RetAlleyEventStateFinish => "RET_ALLEY_EVENT_STATE_FINISH",
            Retcode::RetAlleyEventError => "RET_ALLEY_EVENT_ERROR",
            Retcode::RetAlleyRewardLevelError => "RET_ALLEY_REWARD_LEVEL_ERROR",
            Retcode::RetAlleyRewardPrestigeNotEnough => {
                "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH"
            }
            Retcode::RetAlleyShipEmpty => "RET_ALLEY_SHIP_EMPTY",
            Retcode::RetAlleyShipIdDismatch => "RET_ALLEY_SHIP_ID_DISMATCH",
            Retcode::RetAlleyShipNotExist => "RET_ALLEY_SHIP_NOT_EXIST",
            Retcode::RetAlleyShipNotUnlock => "RET_ALLEY_SHIP_NOT_UNLOCK",
            Retcode::RetAlleyGoodsNotExist => "RET_ALLEY_GOODS_NOT_EXIST",
            Retcode::RetAlleyGoodsNotUnlock => "RET_ALLEY_GOODS_NOT_UNLOCK",
            Retcode::RetAlleyProfitNotPositive => "RET_ALLEY_PROFIT_NOT_POSITIVE",
            Retcode::RetAlleySpecialOrderDismatch => "RET_ALLEY_SPECIAL_ORDER_DISMATCH",
            Retcode::RetAlleyOrderGoodsOverLimit => "RET_ALLEY_ORDER_GOODS_OVER_LIMIT",
            Retcode::RetAlleySpecialOrderConditionNotMeet => {
                "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET"
            }
            Retcode::RetAlleyDepotSizeOverLimit => "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT",
            Retcode::RetAlleyGoodsNotEnough => "RET_ALLEY_GOODS_NOT_ENOUGH",
            Retcode::RetAlleyOrderIndexInvalid => "RET_ALLEY_ORDER_INDEX_INVALID",
            Retcode::RetAlleyRewardAlreadyTake => "RET_ALLEY_REWARD_ALREADY_TAKE",
            Retcode::RetAlleyRewardNotExist => "RET_ALLEY_REWARD_NOT_EXIST",
            Retcode::RetAlleyMainMissionNotDoing => "RET_ALLEY_MAIN_MISSION_NOT_DOING",
            Retcode::RetAlleyCriticalEventNotFinish => {
                "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH"
            }
            Retcode::RetAlleyShopGoodsNotValid => "RET_ALLEY_SHOP_GOODS_NOT_VALID",
            Retcode::RetAlleySlashNotOpen => "RET_ALLEY_SLASH_NOT_OPEN",
            Retcode::RetAlleyPlacingAnchorInvalid => "RET_ALLEY_PLACING_ANCHOR_INVALID",
            Retcode::RetAlleyPlacingGoodsIndexInvalid => {
                "RET_ALLEY_PLACING_GOODS_INDEX_INVALID"
            }
            Retcode::RetAlleySaveMapTooQuick => "RET_ALLEY_SAVE_MAP_TOO_QUICK",
            Retcode::RetAlleyMapNotLink => "RET_ALLEY_MAP_NOT_LINK",
            Retcode::RetAlleyFundsNotLowerBase => "RET_ALLEY_FUNDS_NOT_LOWER_BASE",
            Retcode::RetAlleyEventNotFinish => "RET_ALLEY_EVENT_NOT_FINISH",
            Retcode::RetAlleyNormalOrderNotMeet => "RET_ALLEY_NORMAL_ORDER_NOT_MEET",
            Retcode::RetPlayerReturnNotOpen => "RET_PLAYER_RETURN_NOT_OPEN",
            Retcode::RetPlayerReturnIsSigned => "RET_PLAYER_RETURN_IS_SIGNED",
            Retcode::RetPlayerReturnPointNotEnough => {
                "RET_PLAYER_RETURN_POINT_NOT_ENOUGH"
            }
            Retcode::RetPlayerReturnConditionInvalid => {
                "RET_PLAYER_RETURN_CONDITION_INVALID"
            }
            Retcode::RetPlayerReturnHasSigned => "RET_PLAYER_RETURN_HAS_SIGNED",
            Retcode::RetPlayerReturnRewardTaken => "RET_PLAYER_RETURN_REWARD_TAKEN",
            Retcode::RetAetherDivideNoLineup => "RET_AETHER_DIVIDE_NO_LINEUP",
            Retcode::RetAetherDivideLineupInvalid => "RET_AETHER_DIVIDE_LINEUP_INVALID",
            Retcode::RetChatBubbleIdError => "RET_CHAT_BUBBLE_ID_ERROR",
            Retcode::RetChatBubbleIdNotUnlock => "RET_CHAT_BUBBLE_ID_NOT_UNLOCK",
            Retcode::RetPhoneThemeIdError => "RET_PHONE_THEME_ID_ERROR",
            Retcode::RetPhoneThemeIdNotUnlock => "RET_PHONE_THEME_ID_NOT_UNLOCK",
            Retcode::RetChatBubbleSelectIsCurrent => "RET_CHAT_BUBBLE_SELECT_IS_CURRENT",
            Retcode::RetPhoneThemeSelectIsCurrent => "RET_PHONE_THEME_SELECT_IS_CURRENT",
            Retcode::RetChessRogueConfigNotFound => "RET_CHESS_ROGUE_CONFIG_NOT_FOUND",
            Retcode::RetChessRogueConfigInvalid => "RET_CHESS_ROGUE_CONFIG_INVALID",
            Retcode::RetChessRogueNoValidRoom => "RET_CHESS_ROGUE_NO_VALID_ROOM",
            Retcode::RetChessRogueNoCellInfo => "RET_CHESS_ROGUE_NO_CELL_INFO",
            Retcode::RetChessRogueCellNotFinish => "RET_CHESS_ROGUE_CELL_NOT_FINISH",
            Retcode::RetChessRogueCellIsLocked => "RET_CHESS_ROGUE_CELL_IS_LOCKED",
            Retcode::RetChessRogueScheduleNotMatch => {
                "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH"
            }
            Retcode::RetChessRogueStatusFail => "RET_CHESS_ROGUE_STATUS_FAIL",
            Retcode::RetChessRogueAreaNotExist => "RET_CHESS_ROGUE_AREA_NOT_EXIST",
            Retcode::RetChessRogueLineupFail => "RET_CHESS_ROGUE_LINEUP_FAIL",
            Retcode::RetChessRogueAeonFail => "RET_CHESS_ROGUE_AEON_FAIL",
            Retcode::RetChessRogueEnterCellFail => "RET_CHESS_ROGUE_ENTER_CELL_FAIL",
            Retcode::RetChessRogueRollDiceFail => "RET_CHESS_ROGUE_ROLL_DICE_FAIL",
            Retcode::RetChessRogueDiceStatusFail => "RET_CHESS_ROGUE_DICE_STATUS_FAIL",
            Retcode::RetChessRogueDiceCntNotFull => "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL",
            Retcode::RetChessRogueUnlock => "RET_CHESS_ROGUE_UNLOCK",
            Retcode::RetChessRoguePickAvatarFail => "RET_CHESS_ROGUE_PICK_AVATAR_FAIL",
            Retcode::RetChessRogueAvatarInvalid => "RET_CHESS_ROGUE_AVATAR_INVALID",
            Retcode::RetChessRogueCellCanNotSelect => {
                "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT"
            }
            Retcode::RetChessRogueDiceConfirmed => "RET_CHESS_ROGUE_DICE_CONFIRMED",
            Retcode::RetChessRogueNousDiceNotMatch => {
                "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH"
            }
            Retcode::RetChessRogueNousDiceRarityFail => {
                "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL"
            }
            Retcode::RetChessRogueNousDiceSurfaceDuplicate => {
                "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE"
            }
            Retcode::RetChessRogueNotInRogue => "RET_CHESS_ROGUE_NOT_IN_ROGUE",
            Retcode::RetChessRogueNousDiceBranchLimit => {
                "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT"
            }
            Retcode::RetHeliobusNotOpen => "RET_HELIOBUS_NOT_OPEN",
            Retcode::RetHeliobusSnsPostNotUnlock => "RET_HELIOBUS_SNS_POST_NOT_UNLOCK",
            Retcode::RetHeliobusSnsAlreadyRead => "RET_HELIOBUS_SNS_ALREADY_READ",
            Retcode::RetHeliobusSnsAlreadyLiked => "RET_HELIOBUS_SNS_ALREADY_LIKED",
            Retcode::RetHeliobusSnsAlreadyCommented => {
                "RET_HELIOBUS_SNS_ALREADY_COMMENTED"
            }
            Retcode::RetHeliobusSnsInMission => "RET_HELIOBUS_SNS_IN_MISSION",
            Retcode::RetHeliobusSnsAlreadyPosted => "RET_HELIOBUS_SNS_ALREADY_POSTED",
            Retcode::RetHeliobusSnsNotDoingMission => {
                "RET_HELIOBUS_SNS_NOT_DOING_MISSION"
            }
            Retcode::RetHeliobusRewardLevelMax => "RET_HELIOBUS_REWARD_LEVEL_MAX",
            Retcode::RetHeliobusIncomeNotEnough => "RET_HELIOBUS_INCOME_NOT_ENOUGH",
            Retcode::RetHeliobusSnsCommentNotUnlock => {
                "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK"
            }
            Retcode::RetHeliobusChallengeNotUnlock => "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK",
            Retcode::RetHeliobusChallengeIdError => "RET_HELIOBUS_CHALLENGE_ID_ERROR",
            Retcode::RetHeliobusSkillNotUnlock => "RET_HELIOBUS_SKILL_NOT_UNLOCK",
            Retcode::RetHeliobusAcceptPostMissionFail => {
                "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL"
            }
            Retcode::RetHeliobusSkillNotSelected => "RET_HELIOBUS_SKILL_NOT_SELECTED",
            Retcode::RetHeliobusPlaneTypeInvalid => "RET_HELIOBUS_PLANE_TYPE_INVALID",
            Retcode::RetReddotParamInvalid => "RET_REDDOT_PARAM_INVALID",
            Retcode::RetReddotActivityNotOpen => "RET_REDDOT_ACTIVITY_NOT_OPEN",
            Retcode::RetRogueEndlessActivityConfigError => {
                "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR"
            }
            Retcode::RetRogueEndlessActivityNotOpen => {
                "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN"
            }
            Retcode::RetRogueEndlessActivityOverBonusRewardLimit => {
                "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT"
            }
            Retcode::RetRogueEndlessActivityScoreNotMeet => {
                "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET"
            }
            Retcode::RetRogueEndlessActivityRewardLevleAlreadyTake => {
                "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE"
            }
            Retcode::RetHeartDialScriptNotFound => "RET_HEART_DIAL_SCRIPT_NOT_FOUND",
            Retcode::RetHeartDialScriptEmotionTheSame => {
                "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME"
            }
            Retcode::RetHeartDialScriptStepNotNormal => {
                "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL"
            }
            Retcode::RetHeartDialScriptConditionNotMatch => {
                "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH"
            }
            Retcode::RetHeartDialScriptSubmitItemNumNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH"
            }
            Retcode::RetHeartDialScriptSubmitItemIdNotMatch => {
                "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH"
            }
            Retcode::RetHeartDialDialogueNotFound => "RET_HEART_DIAL_DIALOGUE_NOT_FOUND",
            Retcode::RetHeartDialDialogueAlreadyPerformed => {
                "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED"
            }
            Retcode::RetHeartDialNpcNotFound => "RET_HEART_DIAL_NPC_NOT_FOUND",
            Retcode::RetHeartDialTraceConfigNotFound => {
                "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND"
            }
            Retcode::RetHeartDialFloorTraceExist => "RET_HEART_DIAL_FLOOR_TRACE_EXIST",
            Retcode::RetHeartDialTraceFloorNotMatch => {
                "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH"
            }
            Retcode::RetTravelBrochureConfigError => "RET_TRAVEL_BROCHURE_CONFIG_ERROR",
            Retcode::RetTravelBrochureParamInvalid => "RET_TRAVEL_BROCHURE_PARAM_INVALID",
            Retcode::RetTravelBrochureLocked => "RET_TRAVEL_BROCHURE_LOCKED",
            Retcode::RetTravelBrochureCannotOperate => {
                "RET_TRAVEL_BROCHURE_CANNOT_OPERATE"
            }
            Retcode::RetTravelBrochureWorldIdNotMatch => {
                "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH"
            }
            Retcode::RetTravelBrochureHasNoWorldBook => {
                "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK"
            }
            Retcode::RetTravelBrochurePageFull => "RET_TRAVEL_BROCHURE_PAGE_FULL",
            Retcode::RetMapRotationNotInRegion => "RET_MAP_ROTATION_NOT_IN_REGION",
            Retcode::RetMapRotationRotaterAlreadyDeployed => {
                "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED"
            }
            Retcode::RetMapRotationEnergyNotEnough => {
                "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH"
            }
            Retcode::RetMapRotationEntityNotOnCurPose => {
                "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE"
            }
            Retcode::RetMapRotationRotaterNotDeployed => {
                "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED"
            }
            Retcode::RetMapRotationPoseRotaterMismatch => {
                "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH"
            }
            Retcode::RetMapRotationRotaterNotRemovable => {
                "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE"
            }
            Retcode::RetMapRotationRotaterDisposable => {
                "RET_MAP_ROTATION_ROTATER_DISPOSABLE"
            }
            Retcode::RetSpaceZooActivityCatNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND"
            }
            Retcode::RetSpaceZooActivityCatParamInvalid => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID"
            }
            Retcode::RetSpaceZooActivityCatItemNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH"
            }
            Retcode::RetSpaceZooActivityCatBagFull => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL"
            }
            Retcode::RetSpaceZooActivityCatNotToMutate => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE"
            }
            Retcode::RetSpaceZooActivityCatStateError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR"
            }
            Retcode::RetSpaceZooActivityCatCatteryLocked => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED"
            }
            Retcode::RetSpaceZooActivityCatOutNow => "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW",
            Retcode::RetSpaceZooActivityCatConfigNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND"
            }
            Retcode::RetSpaceZooActivityCatFeatureNotFound => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND"
            }
            Retcode::RetSpaceZooActivityCatAddCatError => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR"
            }
            Retcode::RetSpaceZooActivityCatMoneyNotEnough => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH"
            }
            Retcode::RetSpaceZooActivityCatCondNotMatch => {
                "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH"
            }
            Retcode::RetStrongChallengeActivityStageCfgMiss => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS"
            }
            Retcode::RetStrongChallengeActivityStageNotOpen => {
                "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN"
            }
            Retcode::RetStrongChallengeActivityBuffError => {
                "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR"
            }
            Retcode::RetRollShopNotFound => "RET_ROLL_SHOP_NOT_FOUND",
            Retcode::RetRollShopGroupEmpty => "RET_ROLL_SHOP_GROUP_EMPTY",
            Retcode::RetRollShopEmpty => "RET_ROLL_SHOP_EMPTY",
            Retcode::RetRollShopGachaReqDuplicated => {
                "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED"
            }
            Retcode::RetRollShopRandomError => "RET_ROLL_SHOP_RANDOM_ERROR",
            Retcode::RetRollShopGroupTypeNotFound => "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND",
            Retcode::RetRollShopHasStoredRewardAlready => {
                "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY"
            }
            Retcode::RetRollShopNoStoredReward => "RET_ROLL_SHOP_NO_STORED_REWARD",
            Retcode::RetRollShopNotInValidScene => "RET_ROLL_SHOP_NOT_IN_VALID_SCENE",
            Retcode::RetRollShopInvalidRollShopType => {
                "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE"
            }
            Retcode::RetActivityRaidCollectionPrevNotFinish => {
                "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH"
            }
            Retcode::RetActivityRaidCollectionGroupEnterNextUnavailable => {
                "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE"
            }
            Retcode::RetActivityRaidCollectionIsLast => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_LAST"
            }
            Retcode::RetActivityRaidCollectionIsNotNext => {
                "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT"
            }
            Retcode::RetOfferingNotUnlock => "RET_OFFERING_NOT_UNLOCK",
            Retcode::RetOfferingLevelNotUnlock => "RET_OFFERING_LEVEL_NOT_UNLOCK",
            Retcode::RetOfferingReachMaxLevel => "RET_OFFERING_REACH_MAX_LEVEL",
            Retcode::RetOfferingItemNotEnough => "RET_OFFERING_ITEM_NOT_ENOUGH",
            Retcode::RetOfferingLongtailNotOpen => "RET_OFFERING_LONGTAIL_NOT_OPEN",
            Retcode::RetOfferingRewardCondition => "RET_OFFERING_REWARD_CONDITION",
            Retcode::RetDrinkMakerChatInvalid => "RET_DRINK_MAKER_CHAT_INVALID",
            Retcode::RetDrinkMakerParamInvalid => "RET_DRINK_MAKER_PARAM_INVALID",
            Retcode::RetDrinkMakerParamNotUnlock => "RET_DRINK_MAKER_PARAM_NOT_UNLOCK",
            Retcode::RetDrinkMakerConfigNotFound => "RET_DRINK_MAKER_CONFIG_NOT_FOUND",
            Retcode::RetDrinkMakerNotLastChat => "RET_DRINK_MAKER_NOT_LAST_CHAT",
            Retcode::RetDrinkMakerDayAndFreePhaseNotOpen => {
                "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN"
            }
            Retcode::RetMonopolyNotOpen => "RET_MONOPOLY_NOT_OPEN",
            Retcode::RetMonopolyConfigError => "RET_MONOPOLY_CONFIG_ERROR",
            Retcode::RetMonopolyDiceNotEnough => "RET_MONOPOLY_DICE_NOT_ENOUGH",
            Retcode::RetMonopolyCurCellNotFinish => "RET_MONOPOLY_CUR_CELL_NOT_FINISH",
            Retcode::RetMonopolyCoinNotEnough => "RET_MONOPOLY_COIN_NOT_ENOUGH",
            Retcode::RetMonopolyCellWaitPending => "RET_MONOPOLY_CELL_WAIT_PENDING",
            Retcode::RetMonopolyCellStateError => "RET_MONOPOLY_CELL_STATE_ERROR",
            Retcode::RetMonopolyCellContentError => "RET_MONOPOLY_CELL_CONTENT_ERROR",
            Retcode::RetMonopolyItemNotEnough => "RET_MONOPOLY_ITEM_NOT_ENOUGH",
            Retcode::RetMonopolyCellContentCannotGiveup => {
                "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP"
            }
            Retcode::RetMonopolyAssetLevelInvalid => "RET_MONOPOLY_ASSET_LEVEL_INVALID",
            Retcode::RetMonopolyTurnNotFinish => "RET_MONOPOLY_TURN_NOT_FINISH",
            Retcode::RetMonopolyGuideNotFinish => "RET_MONOPOLY_GUIDE_NOT_FINISH",
            Retcode::RetMonopolyRaffleRewardReissued => {
                "RET_MONOPOLY_RAFFLE_REWARD_REISSUED"
            }
            Retcode::RetMonopolyNoGameActive => "RET_MONOPOLY_NO_GAME_ACTIVE",
            Retcode::RetMonopolyGameRatioNotIncreasable => {
                "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE"
            }
            Retcode::RetMonopolyGameRatioMax => "RET_MONOPOLY_GAME_RATIO_MAX",
            Retcode::RetMonopolyGameTargetRatioInvalid => {
                "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID"
            }
            Retcode::RetMonopolyGameBingoFlipPosInvalid => {
                "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID"
            }
            Retcode::RetMonopolyGameGuessAlreadyChoose => {
                "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE"
            }
            Retcode::RetMonopolyGameGuessChooseInvalid => {
                "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID"
            }
            Retcode::RetMonopolyGameGuessInformationAlreadyBought => {
                "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT"
            }
            Retcode::RetMonopolyGameRaiseRatioNotUnlock => {
                "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK"
            }
            Retcode::RetMonopolyFriendNotSynced => "RET_MONOPOLY_FRIEND_NOT_SYNCED",
            Retcode::RetMonopolyGetFriendRankingListInCd => {
                "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD"
            }
            Retcode::RetMonopolyLikeTargetNotFriend => {
                "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND"
            }
            Retcode::RetMonopolyDailyAlreadyLiked => "RET_MONOPOLY_DAILY_ALREADY_LIKED",
            Retcode::RetMonopolySocialEventStatusNotMatch => {
                "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH"
            }
            Retcode::RetMonopolySocialEventServerCacheNotExist => {
                "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST"
            }
            Retcode::RetMonopolyActivityIdNotMatch => {
                "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH"
            }
            Retcode::RetMonopolyRafflePoolNotExist => {
                "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST"
            }
            Retcode::RetMonopolyRafflePoolTimeNotMatch => {
                "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH"
            }
            Retcode::RetMonopolyRafflePoolPhaseNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET"
            }
            Retcode::RetMonopolyRafflePoolShowTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET"
            }
            Retcode::RetMonopolyRaffleTicketNotFound => {
                "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND"
            }
            Retcode::RetMonopolyRaffleTicketTimeNotMeet => {
                "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET"
            }
            Retcode::RetMonopolyRaffleTicketRewardAlreadyTaken => {
                "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetMonopolyRafflePoolNotInRaffleTime => {
                "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME"
            }
            Retcode::RetMonopolyMbtiReportRewardAlreadyTaken => {
                "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetEvolveBuildLevelGaming => "RET_EVOLVE_BUILD_LEVEL_GAMING",
            Retcode::RetEveolveBuildLevelBanRandom => {
                "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM"
            }
            Retcode::RetEvolveBuildFirstRewardAlreadyTaken => {
                "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN"
            }
            Retcode::RetEvolveBuildLevelUnfinish => "RET_EVOLVE_BUILD_LEVEL_UNFINISH",
            Retcode::RetEvolveBuildShopAbilityMaxLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL"
            }
            Retcode::RetEvolveBuildShopAbilityMinLevel => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL"
            }
            Retcode::RetEvolveBuildShopAbilityNotGet => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET"
            }
            Retcode::RetEvolveBuildLevelLock => "RET_EVOLVE_BUILD_LEVEL_LOCK",
            Retcode::RetEvolveBuildExpNotEnough => "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH",
            Retcode::RetEvolveBuildShopAbilityLevelError => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR"
            }
            Retcode::RetEvolveBuildActivityNotOpen => {
                "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN"
            }
            Retcode::RetEvolveBuildShopAbilityEmpty => {
                "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY"
            }
            Retcode::RetEvolveBuildLevelNotStart => "RET_EVOLVE_BUILD_LEVEL_NOT_START",
            Retcode::RetEvolveBuildShopLock => "RET_EVOLVE_BUILD_SHOP_LOCK",
            Retcode::RetEvolveBuildRewardLock => "RET_EVOLVE_BUILD_REWARD_LOCK",
            Retcode::RetEvolveBuildRewardLevelMax => "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX",
            Retcode::RetEvolveBuildRewardAlreadyAllTaken => {
                "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN"
            }
            Retcode::RetClockParkConfigError => "RET_CLOCK_PARK_CONFIG_ERROR",
            Retcode::RetClockParkEffectError => "RET_CLOCK_PARK_EFFECT_ERROR",
            Retcode::RetClockParkScriptAlreadyUnlock => {
                "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK"
            }
            Retcode::RetClockParkScriptUnlockConditionNotMeet => {
                "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET"
            }
            Retcode::RetClockParkTalentAlreadyUnlock => {
                "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK"
            }
            Retcode::RetClockParkScriptLocked => "RET_CLOCK_PARK_SCRIPT_LOCKED",
            Retcode::RetClockParkHasOngoingScript => "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT",
            Retcode::RetClockParkNoOngoingScript => "RET_CLOCK_PARK_NO_ONGOING_SCRIPT",
            Retcode::RetClockParkDicePlacementError => {
                "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR"
            }
            Retcode::RetClockParkMismatchStatus => "RET_CLOCK_PARK_MISMATCH_STATUS",
            Retcode::RetClockParkNoBuff => "RET_CLOCK_PARK_NO_BUFF",
            Retcode::RetClockParkSlotMachineGachaReqDuplicated => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED"
            }
            Retcode::RetClockParkSlotMachineCostNotEnough => {
                "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH"
            }
            Retcode::RetClockParkSlotMachineGachaCntExceedLimit => {
                "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT"
            }
            Retcode::RetClockParkNotOpen => "RET_CLOCK_PARK_NOT_OPEN",
            Retcode::RetTournRogueStatusMismatch => "RET_TOURN_ROGUE_STATUS_MISMATCH",
            Retcode::RetMatchAlreadyInMatch => "RET_MATCH_ALREADY_IN_MATCH",
            Retcode::RetMatchNotInMatch => "RET_MATCH_NOT_IN_MATCH",
            Retcode::RetMatchPlayNotOpen => "RET_MATCH_PLAY_NOT_OPEN",
            Retcode::RetCrossStateError => "RET_CROSS_STATE_ERROR",
            Retcode::RetMatchVersionNotEqual => "RET_MATCH_VERSION_NOT_EQUAL",
            Retcode::RetMatchPlayerNotInLobbyRoom => "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM",
            Retcode::RetLobbyStateNotMatch => "RET_LOBBY_STATE_NOT_MATCH",
            Retcode::RetLobbyRoomNotExist => "RET_LOBBY_ROOM_NOT_EXIST",
            Retcode::RetLobbyRoomPalyerFull => "RET_LOBBY_ROOM_PALYER_FULL",
            Retcode::RetLobbyRoomPalyerNotReady => "RET_LOBBY_ROOM_PALYER_NOT_READY",
            Retcode::RetLobbyRoomPalyerFighting => "RET_LOBBY_ROOM_PALYER_FIGHTING",
            Retcode::RetFightRoomNotExist => "RET_FIGHT_ROOM_NOT_EXIST",
            Retcode::RetFightMatch3PlayerStateErr => "RET_FIGHT_MATCH3_PLAYER_STATE_ERR",
            Retcode::RetFightMatch3RoomStateErr => "RET_FIGHT_MATCH3_ROOM_STATE_ERR",
            Retcode::RetSwordTrainingNoActiveGame => "RET_SWORD_TRAINING_NO_ACTIVE_GAME",
            Retcode::RetSwordTrainingNoPendingActionMatch => {
                "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH"
            }
            Retcode::RetSwordTrainingPartnerAbilityInvalid => {
                "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID"
            }
            Retcode::RetSwordTrainingSkillAlreadyLearned => {
                "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED"
            }
            Retcode::RetSwordTrainingConditionNotMeet => {
                "RET_SWORD_TRAINING_CONDITION_NOT_MEET"
            }
            Retcode::RetSwordTrainingParentSkillNotLearned => {
                "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED"
            }
            Retcode::RetSwordTrainingSkillTypeNotUnlock => {
                "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK"
            }
            Retcode::RetSwordTrainingGameAlreadyExist => {
                "RET_SWORD_TRAINING_GAME_ALREADY_EXIST"
            }
            Retcode::RetSwordTrainingEndingHintNotMatch => {
                "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH"
            }
            Retcode::RetSwordTrainingStorylineConfigNotFound => {
                "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND"
            }
            Retcode::RetSwordTrainingStoryConfigNotFound => {
                "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND"
            }
            Retcode::RetSwordTrainingUnlockNotFinish => {
                "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH"
            }
            Retcode::RetSwordTrainingOptionMismatch => {
                "RET_SWORD_TRAINING_OPTION_MISMATCH"
            }
            Retcode::RetSwordTrainingRestoreWithoutExamFailed => {
                "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED"
            }
            Retcode::RetSwordTrainingNoRestoreGameAvailable => {
                "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE"
            }
            Retcode::RetSwordTrainingEndingStoryNotMatch => {
                "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH"
            }
            Retcode::RetSwordTrainingEndingNotFinish => {
                "RET_SWORD_TRAINING_ENDING_NOT_FINISH"
            }
            Retcode::RetSwordTrainingEndingRewardTaken => {
                "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN"
            }
            Retcode::RetSwordTrainingCombatRankNotChange => {
                "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE"
            }
            Retcode::RetSwordTrainingDirectBattleDisable => {
                "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE"
            }
            Retcode::RetFightFestPhaseNotMatch => "RET_FIGHT_FEST_PHASE_NOT_MATCH",
            Retcode::RetFightFestScoreRaceAlreadyFinish => {
                "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH"
            }
            Retcode::RetFightFestChallengeLocked => "RET_FIGHT_FEST_CHALLENGE_LOCKED",
            Retcode::RetFightFestCoachSkillLocked => "RET_FIGHT_FEST_COACH_SKILL_LOCKED",
            Retcode::RetFightFestCoachSkillEquipTypeExisted => {
                "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED"
            }
            Retcode::RetFightFestScoreRaceMissionDoind => {
                "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND"
            }
            Retcode::RetFightFestCoachSkillNoEquip => {
                "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP"
            }
            Retcode::RetPetNotExist => "RET_PET_NOT_EXIST",
            Retcode::RetPetAlreadySummoned => "RET_PET_ALREADY_SUMMONED",
            Retcode::RetPetNotSummoned => "RET_PET_NOT_SUMMONED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RET_SUCC" => Some(Self::RetSucc),
            "RET_FAIL" => Some(Self::RetFail),
            "RET_SERVER_INTERNAL_ERROR" => Some(Self::RetServerInternalError),
            "RET_TIMEOUT" => Some(Self::RetTimeout),
            "RET_REPEATED_REQ" => Some(Self::RetRepeatedReq),
            "RET_REQ_PARA_INVALID" => Some(Self::RetReqParaInvalid),
            "RET_PLAYER_DATA_ERROR" => Some(Self::RetPlayerDataError),
            "RET_PLAYER_CLIENT_PAUSED" => Some(Self::RetPlayerClientPaused),
            "RET_FUNC_CHECK_FAILED" => Some(Self::RetFuncCheckFailed),
            "RET_FEATURE_SWITCH_CLOSED" => Some(Self::RetFeatureSwitchClosed),
            "RET_FREQ_OVER_LIMIT" => Some(Self::RetFreqOverLimit),
            "RET_SYSTEM_BUSY" => Some(Self::RetSystemBusy),
            "RET_PLAYER_NOT_ONLINE" => Some(Self::RetPlayerNotOnline),
            "RET_REPEATE_LOGIN" => Some(Self::RetRepeateLogin),
            "RET_RETRY_LOGIN" => Some(Self::RetRetryLogin),
            "RET_WAIT_LOGIN" => Some(Self::RetWaitLogin),
            "RET_NOT_IN_WHITE_LIST" => Some(Self::RetNotInWhiteList),
            "RET_IN_BLACK_LIST" => Some(Self::RetInBlackList),
            "RET_ACCOUNT_VERIFY_ERROR" => Some(Self::RetAccountVerifyError),
            "RET_ACCOUNT_PARA_ERROR" => Some(Self::RetAccountParaError),
            "RET_ANTI_ADDICT_LOGIN" => Some(Self::RetAntiAddictLogin),
            "RET_CHECK_SUM_ERROR" => Some(Self::RetCheckSumError),
            "RET_REACH_MAX_PLAYER_NUM" => Some(Self::RetReachMaxPlayerNum),
            "RET_ALREADY_REGISTERED" => Some(Self::RetAlreadyRegistered),
            "RET_GENDER_ERROR" => Some(Self::RetGenderError),
            "SET_NICKNAME_RET_CALLBACK_PROCESSING" => {
                Some(Self::SetNicknameRetCallbackProcessing)
            }
            "RET_IN_GM_BIND_ACCESS" => Some(Self::RetInGmBindAccess),
            "RET_QUEST_REWARD_ALREADY_TAKEN" => Some(Self::RetQuestRewardAlreadyTaken),
            "RET_QUEST_NOT_ACCEPT" => Some(Self::RetQuestNotAccept),
            "RET_QUEST_NOT_FINISH" => Some(Self::RetQuestNotFinish),
            "RET_QUEST_STATUS_ERROR" => Some(Self::RetQuestStatusError),
            "RET_ACHIEVEMENT_LEVEL_NOT_REACH" => Some(Self::RetAchievementLevelNotReach),
            "RET_ACHIEVEMENT_LEVEL_ALREADY_TAKEN" => {
                Some(Self::RetAchievementLevelAlreadyTaken)
            }
            "RET_AVATAR_NOT_EXIST" => Some(Self::RetAvatarNotExist),
            "RET_AVATAR_RES_EXP_NOT_ENOUGH" => Some(Self::RetAvatarResExpNotEnough),
            "RET_AVATAR_EXP_REACH_PROMOTION_LIMIT" => {
                Some(Self::RetAvatarExpReachPromotionLimit)
            }
            "RET_AVATAR_REACH_MAX_PROMOTION" => Some(Self::RetAvatarReachMaxPromotion),
            "RET_SKILLTREE_CONFIG_NOT_EXIST" => Some(Self::RetSkilltreeConfigNotExist),
            "RET_SKILLTREE_ALREADY_UNLOCK" => Some(Self::RetSkilltreeAlreadyUnlock),
            "RET_SKILLTREE_PRE_LOCKED" => Some(Self::RetSkilltreePreLocked),
            "RET_SKILLTREE_LEVEL_NOT_MEET" => Some(Self::RetSkilltreeLevelNotMeet),
            "RET_SKILLTREE_RANK_NOT_MEET" => Some(Self::RetSkilltreeRankNotMeet),
            "RET_AVATAR_DRESS_NO_EQUIPMENT" => Some(Self::RetAvatarDressNoEquipment),
            "RET_AVATAR_EXP_ITEM_NOT_EXIST" => Some(Self::RetAvatarExpItemNotExist),
            "RET_SKILLTREE_POINT_LOCKED" => Some(Self::RetSkilltreePointLocked),
            "RET_SKILLTREE_POINT_LEVEL_UPGRADE_NOT_MATCH" => {
                Some(Self::RetSkilltreePointLevelUpgradeNotMatch)
            }
            "RET_SKILLTREE_POINT_LEVEL_REACH_MAX" => {
                Some(Self::RetSkilltreePointLevelReachMax)
            }
            "RET_WORLD_LEVEL_NOT_MEET" => Some(Self::RetWorldLevelNotMeet),
            "RET_PLAYER_LEVEL_NOT_MEET" => Some(Self::RetPlayerLevelNotMeet),
            "RET_AVATAR_RANK_NOT_MATCH" => Some(Self::RetAvatarRankNotMatch),
            "RET_AVATAR_RANK_REACH_MAX" => Some(Self::RetAvatarRankReachMax),
            "RET_HERO_BASIC_TYPE_NOT_MATCH" => Some(Self::RetHeroBasicTypeNotMatch),
            "RET_AVATAR_PROMOTION_NOT_MEET" => Some(Self::RetAvatarPromotionNotMeet),
            "RET_PROMOTION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetPromotionRewardConfigNotExist)
            }
            "RET_PROMOTION_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPromotionRewardAlreadyTaken)
            }
            "RET_AVATAR_SKIN_ITEM_NOT_EXIST" => Some(Self::RetAvatarSkinItemNotExist),
            "RET_AVATAR_SKIN_ALREADY_DRESSED" => Some(Self::RetAvatarSkinAlreadyDressed),
            "RET_AVATAR_NOT_DRESS_SKIN" => Some(Self::RetAvatarNotDressSkin),
            "RET_AVATAR_SKIN_NOT_MATCH_AVATAR" => Some(Self::RetAvatarSkinNotMatchAvatar),
            "RET_ITEM_NOT_EXIST" => Some(Self::RetItemNotExist),
            "RET_ITEM_COST_NOT_ENOUGH" => Some(Self::RetItemCostNotEnough),
            "RET_ITEM_COST_TOO_MUCH" => Some(Self::RetItemCostTooMuch),
            "RET_ITEM_NO_COST" => Some(Self::RetItemNoCost),
            "RET_ITEM_NOT_ENOUGH" => Some(Self::RetItemNotEnough),
            "RET_ITEM_INVALID" => Some(Self::RetItemInvalid),
            "RET_ITEM_CONFIG_NOT_EXIST" => Some(Self::RetItemConfigNotExist),
            "RET_SCOIN_NOT_ENOUGH" => Some(Self::RetScoinNotEnough),
            "RET_ITEM_REWARD_EXCEED_LIMIT" => Some(Self::RetItemRewardExceedLimit),
            "RET_ITEM_INVALID_USE" => Some(Self::RetItemInvalidUse),
            "RET_ITEM_USE_CONFIG_NOT_EXIST" => Some(Self::RetItemUseConfigNotExist),
            "RET_REWARD_CONFIG_NOT_EXIST" => Some(Self::RetRewardConfigNotExist),
            "RET_ITEM_EXCEED_LIMIT" => Some(Self::RetItemExceedLimit),
            "RET_ITEM_COUNT_INVALID" => Some(Self::RetItemCountInvalid),
            "RET_ITEM_USE_TARGET_TYPE_INVALID" => Some(Self::RetItemUseTargetTypeInvalid),
            "RET_ITEM_USE_SATIETY_FULL" => Some(Self::RetItemUseSatietyFull),
            "RET_ITEM_COMPOSE_NOT_EXIST" => Some(Self::RetItemComposeNotExist),
            "RET_RELIC_COMPOSE_NOT_EXIST" => Some(Self::RetRelicComposeNotExist),
            "RET_ITEM_CAN_NOT_SELL" => Some(Self::RetItemCanNotSell),
            "RET_ITEM_SELL_EXCEDD_LIMIT" => Some(Self::RetItemSellExceddLimit),
            "RET_ITEM_NOT_IN_COST_LIST" => Some(Self::RetItemNotInCostList),
            "RET_ITEM_SPECIAL_COST_NOT_ENOUGH" => Some(Self::RetItemSpecialCostNotEnough),
            "RET_ITEM_SPECIAL_COST_TOO_MUCH" => Some(Self::RetItemSpecialCostTooMuch),
            "RET_ITEM_FORMULA_NOT_EXIST" => Some(Self::RetItemFormulaNotExist),
            "RET_ITEM_AUTO_GIFT_OPTIONAL_NOT_EXIST" => {
                Some(Self::RetItemAutoGiftOptionalNotExist)
            }
            "RET_RELIC_COMPOSE_RELIC_INVALID" => Some(Self::RetRelicComposeRelicInvalid),
            "RET_RELIC_COMPOSE_MAIN_AFFIX_ID_INVALID" => {
                Some(Self::RetRelicComposeMainAffixIdInvalid)
            }
            "RET_RELIC_COMPOSE_WRONG_FORMULA_TYPE" => {
                Some(Self::RetRelicComposeWrongFormulaType)
            }
            "RET_RELIC_COMPOSE_RELIC_NOT_EXIST" => {
                Some(Self::RetRelicComposeRelicNotExist)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_COUNT_INVALID" => {
                Some(Self::RetRelicComposeBlackGoldCountInvalid)
            }
            "RET_RELIC_COMPOSE_BLACK_GOLD_NOT_NEED" => {
                Some(Self::RetRelicComposeBlackGoldNotNeed)
            }
            "RET_MONTH_CARD_CANNOT_USE" => Some(Self::RetMonthCardCannotUse),
            "RET_ITEM_REWARD_EXCEED_DISAPPEAR" => {
                Some(Self::RetItemRewardExceedDisappear)
            }
            "RET_ITEM_NEED_RECYCLE" => Some(Self::RetItemNeedRecycle),
            "RET_ITEM_COMPOSE_EXCEED_LIMIT" => Some(Self::RetItemComposeExceedLimit),
            "RET_ITEM_CAN_NOT_DESTROY" => Some(Self::RetItemCanNotDestroy),
            "RET_ITEM_ALREADY_MARK" => Some(Self::RetItemAlreadyMark),
            "RET_ITEM_MARK_EXCEED_LIMIT" => Some(Self::RetItemMarkExceedLimit),
            "RET_ITEM_NOT_MARK" => Some(Self::RetItemNotMark),
            "RET_ITEN_TURN_FOOD_NOT_SET" => Some(Self::RetItenTurnFoodNotSet),
            "RET_ITEM_TURN_FOOD_ALREADY_SET" => Some(Self::RetItemTurnFoodAlreadySet),
            "RET_ITEM_TURN_FOOD_CONSUME_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodConsumeTypeError)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_OPEN" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyOpen)
            }
            "RET_ITEM_TURN_FOOD_SWITCH_ALREADY_CLOSE" => {
                Some(Self::RetItemTurnFoodSwitchAlreadyClose)
            }
            "RET_HCOIN_EXCHANGE_TOO_MUCH" => Some(Self::RetHcoinExchangeTooMuch),
            "RET_ITEM_TURN_FOOD_SCENE_TYPE_ERROR" => {
                Some(Self::RetItemTurnFoodSceneTypeError)
            }
            "RET_EQUIPMENT_ALREADY_DRESSED" => Some(Self::RetEquipmentAlreadyDressed),
            "RET_EQUIPMENT_NOT_EXIST" => Some(Self::RetEquipmentNotExist),
            "RET_EQUIPMENT_REACH_LEVEL_LIMIT" => Some(Self::RetEquipmentReachLevelLimit),
            "RET_EQUIPMENT_CONSUME_SELF" => Some(Self::RetEquipmentConsumeSelf),
            "RET_EQUIPMENT_ALREADY_LOCKED" => Some(Self::RetEquipmentAlreadyLocked),
            "RET_EQUIPMENT_ALREADY_UNLOCKED" => Some(Self::RetEquipmentAlreadyUnlocked),
            "RET_EQUIPMENT_LOCKED" => Some(Self::RetEquipmentLocked),
            "RET_EQUIPMENT_SELECT_NUM_OVER_LIMIT" => {
                Some(Self::RetEquipmentSelectNumOverLimit)
            }
            "RET_EQUIPMENT_RANK_UP_MUST_CONSUME_SAME_TID" => {
                Some(Self::RetEquipmentRankUpMustConsumeSameTid)
            }
            "RET_EQUIPMENT_PROMOTION_REACH_MAX" => {
                Some(Self::RetEquipmentPromotionReachMax)
            }
            "RET_EQUIPMENT_RANK_UP_REACH_MAX" => Some(Self::RetEquipmentRankUpReachMax),
            "RET_EQUIPMENT_LEVEL_REACH_MAX" => Some(Self::RetEquipmentLevelReachMax),
            "RET_EQUIPMENT_EXCEED_LIMIT" => Some(Self::RetEquipmentExceedLimit),
            "RET_RELIC_NOT_EXIST" => Some(Self::RetRelicNotExist),
            "RET_RELIC_REACH_LEVEL_LIMIT" => Some(Self::RetRelicReachLevelLimit),
            "RET_RELIC_CONSUME_SELF" => Some(Self::RetRelicConsumeSelf),
            "RET_RELIC_ALREADY_DRESSED" => Some(Self::RetRelicAlreadyDressed),
            "RET_RELIC_LOCKED" => Some(Self::RetRelicLocked),
            "RET_RELIC_ALREADY_LOCKED" => Some(Self::RetRelicAlreadyLocked),
            "RET_RELIC_ALREADY_UNLOCKED" => Some(Self::RetRelicAlreadyUnlocked),
            "RET_RELIC_LEVEL_IS_NOT_ZERO" => Some(Self::RetRelicLevelIsNotZero),
            "RET_UNIQUE_ID_REPEATED" => Some(Self::RetUniqueIdRepeated),
            "RET_EQUIPMENT_LEVEL_NOT_MEET" => Some(Self::RetEquipmentLevelNotMeet),
            "RET_EQUIPMENT_ITEM_NOT_IN_COST_LIST" => {
                Some(Self::RetEquipmentItemNotInCostList)
            }
            "RET_EQUIPMENT_LEVEL_GREATER_THAN_ONE" => {
                Some(Self::RetEquipmentLevelGreaterThanOne)
            }
            "RET_EQUIPMENT_ALREADY_RANKED" => Some(Self::RetEquipmentAlreadyRanked),
            "RET_RELIC_EXCEED_LIMIT" => Some(Self::RetRelicExceedLimit),
            "RET_RELIC_ALREADY_DISCARDED" => Some(Self::RetRelicAlreadyDiscarded),
            "RET_RELIC_ALREADY_UNDISCARDED" => Some(Self::RetRelicAlreadyUndiscarded),
            "RET_EQUIPMENT_BATCH_LOCK_TOO_FAST" => {
                Some(Self::RetEquipmentBatchLockTooFast)
            }
            "RET_RELIC_FILTER_PLAN_SLOT_EMPTY" => Some(Self::RetRelicFilterPlanSlotEmpty),
            "RET_RELIC_FILTER_PLAN_NUM_EXCEED_LIMIT" => {
                Some(Self::RetRelicFilterPlanNumExceedLimit)
            }
            "RET_RELIC_FILTER_PLAN_NAME_UTF8_ERROR" => {
                Some(Self::RetRelicFilterPlanNameUtf8Error)
            }
            "RET_RELIC_FILTER_PLAN_NAME_FORMAT_ERROR" => {
                Some(Self::RetRelicFilterPlanNameFormatError)
            }
            "RET_RELIC_FILTER_PLAN_NO_CHANGE" => Some(Self::RetRelicFilterPlanNoChange),
            "RET_LINEUP_INVALID_INDEX" => Some(Self::RetLineupInvalidIndex),
            "RET_LINEUP_INVALID_MEMBER_POS" => Some(Self::RetLineupInvalidMemberPos),
            "RET_LINEUP_SWAP_NOT_EXIST" => Some(Self::RetLineupSwapNotExist),
            "RET_LINEUP_AVATAR_ALREADY_IN" => Some(Self::RetLineupAvatarAlreadyIn),
            "RET_LINEUP_CREATE_AVATAR_ERROR" => Some(Self::RetLineupCreateAvatarError),
            "RET_LINEUP_AVATAR_INIT_ERROR" => Some(Self::RetLineupAvatarInitError),
            "RET_LINEUP_NOT_EXIST" => Some(Self::RetLineupNotExist),
            "RET_LINEUP_ONLY_ONE_MEMBER" => Some(Self::RetLineupOnlyOneMember),
            "RET_LINEUP_SAME_LEADER_SLOT" => Some(Self::RetLineupSameLeaderSlot),
            "RET_LINEUP_NO_LEADER_SELECT" => Some(Self::RetLineupNoLeaderSelect),
            "RET_LINEUP_SWAP_SAME_SLOT" => Some(Self::RetLineupSwapSameSlot),
            "RET_LINEUP_AVATAR_NOT_EXIST" => Some(Self::RetLineupAvatarNotExist),
            "RET_LINEUP_TRIAL_AVATAR_CAN_NOT_QUIT" => {
                Some(Self::RetLineupTrialAvatarCanNotQuit)
            }
            "RET_LINEUP_VIRTUAL_LINEUP_PLANE_NOT_MATCH" => {
                Some(Self::RetLineupVirtualLineupPlaneNotMatch)
            }
            "RET_LINEUP_NOT_VALID_LEADER" => Some(Self::RetLineupNotValidLeader),
            "RET_LINEUP_SAME_INDEX" => Some(Self::RetLineupSameIndex),
            "RET_LINEUP_IS_EMPTY" => Some(Self::RetLineupIsEmpty),
            "RET_LINEUP_NAME_FORMAT_ERROR" => Some(Self::RetLineupNameFormatError),
            "RET_LINEUP_TYPE_NOT_MATCH" => Some(Self::RetLineupTypeNotMatch),
            "RET_LINEUP_REPLACE_ALL_FAILED" => Some(Self::RetLineupReplaceAllFailed),
            "RET_LINEUP_NOT_ALLOW_EDIT" => Some(Self::RetLineupNotAllowEdit),
            "RET_LINEUP_AVATAR_IS_ALIVE" => Some(Self::RetLineupAvatarIsAlive),
            "RET_LINEUP_ASSIST_HAS_ONLY_MEMBER" => {
                Some(Self::RetLineupAssistHasOnlyMember)
            }
            "RET_LINEUP_ASSIST_CANNOT_SWITCH" => Some(Self::RetLineupAssistCannotSwitch),
            "RET_LINEUP_AVATAR_TYPE_INVALID" => Some(Self::RetLineupAvatarTypeInvalid),
            "RET_LINEUP_NAME_UTF8_ERROR" => Some(Self::RetLineupNameUtf8Error),
            "RET_LINEUP_LEADER_LOCK" => Some(Self::RetLineupLeaderLock),
            "RET_LINEUP_STORY_LINE_NOT_MATCH" => Some(Self::RetLineupStoryLineNotMatch),
            "RET_LINEUP_AVATAR_LOCK" => Some(Self::RetLineupAvatarLock),
            "RET_LINEUP_AVATAR_INVALID" => Some(Self::RetLineupAvatarInvalid),
            "RET_LINEUP_AVATAR_ALREADY_INIT" => Some(Self::RetLineupAvatarAlreadyInit),
            "RET_LINEUP_LIMITED" => Some(Self::RetLineupLimited),
            "RET_MAIL_NOT_EXIST" => Some(Self::RetMailNotExist),
            "RET_MAIL_RANGE_INVALID" => Some(Self::RetMailRangeInvalid),
            "RET_MAIL_MAIL_ID_INVALID" => Some(Self::RetMailMailIdInvalid),
            "RET_MAIL_NO_MAIL_TAKE_ATTACHMENT" => Some(Self::RetMailNoMailTakeAttachment),
            "RET_MAIL_NO_MAIL_TO_DEL" => Some(Self::RetMailNoMailToDel),
            "RET_MAIL_TYPE_INVALID" => Some(Self::RetMailTypeInvalid),
            "RET_MAIL_PARA_INVALID" => Some(Self::RetMailParaInvalid),
            "RET_MAIL_ATTACHEMENT_INVALID" => Some(Self::RetMailAttachementInvalid),
            "RET_MAIL_TICKET_INVALID" => Some(Self::RetMailTicketInvalid),
            "RET_MAIL_TICKET_REPEATED" => Some(Self::RetMailTicketRepeated),
            "RET_STAGE_SETTLE_ERROR" => Some(Self::RetStageSettleError),
            "RET_STAGE_CONFIG_NOT_EXIST" => Some(Self::RetStageConfigNotExist),
            "RET_STAGE_NOT_FOUND" => Some(Self::RetStageNotFound),
            "RET_STAGE_COCOON_PROP_NOT_VALID" => Some(Self::RetStageCocoonPropNotValid),
            "RET_STAGE_COCOON_WAVE_NOT_VALID" => Some(Self::RetStageCocoonWaveNotValid),
            "RET_STAGE_PROP_ID_NOT_EQUAL" => Some(Self::RetStagePropIdNotEqual),
            "RET_STAGE_COCOON_WAVE_OVER" => Some(Self::RetStageCocoonWaveOver),
            "RET_STAGE_WEEK_COCOON_OVER_CNT" => Some(Self::RetStageWeekCocoonOverCnt),
            "RET_STAGE_COCOON_NOT_OPEN" => Some(Self::RetStageCocoonNotOpen),
            "RET_STAGE_TRIAL_NOT_OPEN" => Some(Self::RetStageTrialNotOpen),
            "RET_STAGE_FARM_NOT_OPEN" => Some(Self::RetStageFarmNotOpen),
            "RET_STAGE_FARM_TYPE_ERROR" => Some(Self::RetStageFarmTypeError),
            "RET_CHAPTER_LOCK" => Some(Self::RetChapterLock),
            "RET_CHAPTER_CHALLENGE_NUM_NOT_ENOUGH" => {
                Some(Self::RetChapterChallengeNumNotEnough)
            }
            "RET_CHAPTER_REWARD_ID_NOT_EXIST" => Some(Self::RetChapterRewardIdNotExist),
            "RET_CHAPTER_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetChapterRewardAlreadyTaken)
            }
            "RET_BATTLE_STAGE_NOT_MATCH" => Some(Self::RetBattleStageNotMatch),
            "RET_IN_BATTLE_NOW" => Some(Self::RetInBattleNow),
            "RET_BATTLE_CHEAT" => Some(Self::RetBattleCheat),
            "RET_BATTLE_FAIL" => Some(Self::RetBattleFail),
            "RET_BATTLE_NO_LINEUP" => Some(Self::RetBattleNoLineup),
            "RET_BATTLE_LINEUP_EMPTY" => Some(Self::RetBattleLineupEmpty),
            "RET_BATTLE_VERSION_NOT_MATCH" => Some(Self::RetBattleVersionNotMatch),
            "RET_BATTLE_QUIT_BY_SERVER" => Some(Self::RetBattleQuitByServer),
            "RET_IN_BATTLE_CHECK" => Some(Self::RetInBattleCheck),
            "RET_BATTLE_CHECK_NEED_RETRY" => Some(Self::RetBattleCheckNeedRetry),
            "RET_BATTLE_COST_TIME_CHECK_FAIL" => Some(Self::RetBattleCostTimeCheckFail),
            "RET_LACK_EXCHANGE_STAMINA_TIMES" => Some(Self::RetLackExchangeStaminaTimes),
            "RET_LACK_STAMINA" => Some(Self::RetLackStamina),
            "RET_STAMINA_FULL" => Some(Self::RetStaminaFull),
            "RET_AUTHKEY_SIGN_TYPE_ERROR" => Some(Self::RetAuthkeySignTypeError),
            "RET_AUTHKEY_SIGN_VER_ERROR" => Some(Self::RetAuthkeySignVerError),
            "RET_NICKNAME_FORMAT_ERROR" => Some(Self::RetNicknameFormatError),
            "RET_SENSITIVE_WORDS" => Some(Self::RetSensitiveWords),
            "RET_LEVEL_REWARD_HAS_TAKEN" => Some(Self::RetLevelRewardHasTaken),
            "RET_LEVEL_REWARD_LEVEL_ERROR" => Some(Self::RetLevelRewardLevelError),
            "RET_LANGUAGE_INVALID" => Some(Self::RetLanguageInvalid),
            "RET_NICKNAME_IN_CD" => Some(Self::RetNicknameInCd),
            "RET_GAMEPLAY_BIRTHDAY_INVALID" => Some(Self::RetGameplayBirthdayInvalid),
            "RET_GAMEPLAY_BIRTHDAY_ALREADY_SET" => {
                Some(Self::RetGameplayBirthdayAlreadySet)
            }
            "RET_NICKNAME_UTF8_ERROR" => Some(Self::RetNicknameUtf8Error),
            "RET_NICKNAME_DIGIT_LIMIT_ERROR" => Some(Self::RetNicknameDigitLimitError),
            "RET_SENSITIVE_WORDS_PLATFORM_ERROR" => {
                Some(Self::RetSensitiveWordsPlatformError)
            }
            "RET_PLAYER_SETTING_TYPE_INVALID" => Some(Self::RetPlayerSettingTypeInvalid),
            "RET_MAZE_LACK_TICKET" => Some(Self::RetMazeLackTicket),
            "RET_MAZE_NOT_UNLOCK" => Some(Self::RetMazeNotUnlock),
            "RET_MAZE_NO_ABILITY" => Some(Self::RetMazeNoAbility),
            "RET_MAZE_NO_PLANE" => Some(Self::RetMazeNoPlane),
            "RET_MAZE_MAP_NOT_EXIST" => Some(Self::RetMazeMapNotExist),
            "RET_MAZE_MP_NOT_ENOUGH" => Some(Self::RetMazeMpNotEnough),
            "RET_SPRING_NOT_ENABLE" => Some(Self::RetSpringNotEnable),
            "RET_SPRING_TOO_FAR" => Some(Self::RetSpringTooFar),
            "RET_NOT_IN_MAZE" => Some(Self::RetNotInMaze),
            "RET_MAZE_TIME_OF_DAY_TYPE_ERROR" => Some(Self::RetMazeTimeOfDayTypeError),
            "RET_SCENE_TRANSFER_LOCKED_BY_TASK" => {
                Some(Self::RetSceneTransferLockedByTask)
            }
            "RET_PLOT_NOT_UNLOCK" => Some(Self::RetPlotNotUnlock),
            "RET_MISSION_NOT_EXIST" => Some(Self::RetMissionNotExist),
            "RET_MISSION_ALREADY_DONE" => Some(Self::RetMissionAlreadyDone),
            "RET_DAILY_TASK_NOT_FINISH" => Some(Self::RetDailyTaskNotFinish),
            "RET_DAILY_TASK_REWARD_HAS_TAKEN" => Some(Self::RetDailyTaskRewardHasTaken),
            "RET_MISSION_NOT_FINISH" => Some(Self::RetMissionNotFinish),
            "RET_MISSION_NOT_DOING" => Some(Self::RetMissionNotDoing),
            "RET_MISSION_FINISH_WAY_NOT_MATCH" => Some(Self::RetMissionFinishWayNotMatch),
            "RET_MISSION_SCENE_NOT_MATCH" => Some(Self::RetMissionSceneNotMatch),
            "RET_MISSION_CUSTOM_VALUE_NOT_VALID" => {
                Some(Self::RetMissionCustomValueNotValid)
            }
            "RET_MISSION_SUB_MISSION_NOT_MATCH" => {
                Some(Self::RetMissionSubMissionNotMatch)
            }
            "RET_ADVENTURE_MAP_NOT_EXIST" => Some(Self::RetAdventureMapNotExist),
            "RET_SCENE_ENTITY_NOT_EXIST" => Some(Self::RetSceneEntityNotExist),
            "RET_NOT_IN_SCENE" => Some(Self::RetNotInScene),
            "RET_SCENE_MONSTER_NOT_EXIST" => Some(Self::RetSceneMonsterNotExist),
            "RET_INTERACT_CONFIG_NOT_EXIST" => Some(Self::RetInteractConfigNotExist),
            "RET_UNSUPPORTED_PROP_STATE" => Some(Self::RetUnsupportedPropState),
            "RET_SCENE_ENTRY_ID_NOT_MATCH" => Some(Self::RetSceneEntryIdNotMatch),
            "RET_SCENE_ENTITY_MOVE_CHECK_FAILED" => {
                Some(Self::RetSceneEntityMoveCheckFailed)
            }
            "RET_ASSIST_MONSTER_COUNT_LIMIT" => Some(Self::RetAssistMonsterCountLimit),
            "RET_SCENE_USE_SKILL_FAIL" => Some(Self::RetSceneUseSkillFail),
            "RET_PROP_IS_HIDDEN" => Some(Self::RetPropIsHidden),
            "RET_LOADING_SUCC_ALREADY" => Some(Self::RetLoadingSuccAlready),
            "RET_SCENE_ENTITY_TYPE_INVALID" => Some(Self::RetSceneEntityTypeInvalid),
            "RET_INTERACT_TYPE_INVALID" => Some(Self::RetInteractTypeInvalid),
            "RET_INTERACT_NOT_IN_REGION" => Some(Self::RetInteractNotInRegion),
            "RET_INTERACT_SUB_TYPE_INVALID" => Some(Self::RetInteractSubTypeInvalid),
            "RET_NOT_LEADER_ENTITY" => Some(Self::RetNotLeaderEntity),
            "RET_MONSTER_IS_NOT_FARM_ELEMENT" => Some(Self::RetMonsterIsNotFarmElement),
            "RET_MONSTER_CONFIG_NOT_EXIST" => Some(Self::RetMonsterConfigNotExist),
            "RET_AVATAR_HP_ALREADY_FULL" => Some(Self::RetAvatarHpAlreadyFull),
            "RET_CUR_INTERACT_ENTITY_NOT_MATCH" => {
                Some(Self::RetCurInteractEntityNotMatch)
            }
            "RET_PLANE_TYPE_NOT_ALLOW" => Some(Self::RetPlaneTypeNotAllow),
            "RET_GROUP_NOT_EXIST" => Some(Self::RetGroupNotExist),
            "RET_GROUP_SAVE_DATA_IN_CD" => Some(Self::RetGroupSaveDataInCd),
            "RET_GROUP_SAVE_LENGH_REACH_MAX" => Some(Self::RetGroupSaveLenghReachMax),
            "RET_RECENT_ELEMENT_NOT_EXIST" => Some(Self::RetRecentElementNotExist),
            "RET_RECENT_ELEMENT_STAGE_NOT_MATCH" => {
                Some(Self::RetRecentElementStageNotMatch)
            }
            "RET_SCENE_POSITION_VERSION_NOT_MATCH" => {
                Some(Self::RetScenePositionVersionNotMatch)
            }
            "RET_GAMEPLAY_COUNTER_NOT_EXIST" => Some(Self::RetGameplayCounterNotExist),
            "RET_GAMEPLAY_COUNTER_NOT_ENOUGH" => Some(Self::RetGameplayCounterNotEnough),
            "RET_GROUP_STATE_NOT_MATCH" => Some(Self::RetGroupStateNotMatch),
            "RET_SCENE_ENTITY_POS_NOT_MATCH" => Some(Self::RetSceneEntityPosNotMatch),
            "RET_GROUP_STATE_CUSTOM_SAVE_DATA_OFF" => {
                Some(Self::RetGroupStateCustomSaveDataOff)
            }
            "RET_SCENE_NOT_MATCH" => Some(Self::RetSceneNotMatch),
            "RET_BUY_TIMES_LIMIT" => Some(Self::RetBuyTimesLimit),
            "RET_BUY_LIMIT_TYPE" => Some(Self::RetBuyLimitType),
            "RET_SHOP_NOT_OPEN" => Some(Self::RetShopNotOpen),
            "RET_GOODS_NOT_OPEN" => Some(Self::RetGoodsNotOpen),
            "RET_CITY_LEVEL_REWARD_TAKEN" => Some(Self::RetCityLevelRewardTaken),
            "RET_CITY_LEVEL_NOT_MEET" => Some(Self::RetCityLevelNotMeet),
            "RET_SINGLE_BUY_LIMIT" => Some(Self::RetSingleBuyLimit),
            "RET_TUTORIAL_NOT_UNLOCK" => Some(Self::RetTutorialNotUnlock),
            "RET_TUTORIAL_UNLOCK_ALREADY" => Some(Self::RetTutorialUnlockAlready),
            "RET_TUTORIAL_FINISH_ALREADY" => Some(Self::RetTutorialFinishAlready),
            "RET_TUTORIAL_PRE_NOT_UNLOCK" => Some(Self::RetTutorialPreNotUnlock),
            "RET_TUTORIAL_PLAYER_LEVEL_NOT_MATCH" => {
                Some(Self::RetTutorialPlayerLevelNotMatch)
            }
            "RET_TUTORIAL_TUTORIAL_NOT_FOUND" => Some(Self::RetTutorialTutorialNotFound),
            "RET_CHALLENGE_NOT_EXIST" => Some(Self::RetChallengeNotExist),
            "RET_CHALLENGE_NOT_UNLOCK" => Some(Self::RetChallengeNotUnlock),
            "RET_CHALLENGE_ALREADY" => Some(Self::RetChallengeAlready),
            "RET_CHALLENGE_LINEUP_EDIT_FORBIDDEN" => {
                Some(Self::RetChallengeLineupEditForbidden)
            }
            "RET_CHALLENGE_LINEUP_EMPTY" => Some(Self::RetChallengeLineupEmpty),
            "RET_CHALLENGE_NOT_DOING" => Some(Self::RetChallengeNotDoing),
            "RET_CHALLENGE_NOT_FINISH" => Some(Self::RetChallengeNotFinish),
            "RET_CHALLENGE_TARGET_NOT_FINISH" => Some(Self::RetChallengeTargetNotFinish),
            "RET_CHALLENGE_TARGET_REWARD_TAKEN" => {
                Some(Self::RetChallengeTargetRewardTaken)
            }
            "RET_CHALLENGE_TIME_NOT_VALID" => Some(Self::RetChallengeTimeNotValid),
            "RET_CHALLENGE_STARS_COUNT_NOT_MEET" => {
                Some(Self::RetChallengeStarsCountNotMeet)
            }
            "RET_CHALLENGE_STARS_REWARD_TAKEN" => {
                Some(Self::RetChallengeStarsRewardTaken)
            }
            "RET_CHALLENGE_STARS_NOT_EXIST" => Some(Self::RetChallengeStarsNotExist),
            "RET_CHALLENGE_CUR_SCENE_NOT_ENTRY_FLOOR" => {
                Some(Self::RetChallengeCurSceneNotEntryFloor)
            }
            "RET_CHALLENGE_NO_TEAM_ARCHIVE" => Some(Self::RetChallengeNoTeamArchive),
            "RET_CHALLENGE_LINEUP_AVATAR_TYPE_INVALID" => {
                Some(Self::RetChallengeLineupAvatarTypeInvalid)
            }
            "RET_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetChallengeLineupRecommendInCd)
            }
            "RET_BASIC_TYPE_ALREADY" => Some(Self::RetBasicTypeAlready),
            "RET_NO_BASIC_TYPE" => Some(Self::RetNoBasicType),
            "RET_NOT_CHOOSE_BASIC_TYPE" => Some(Self::RetNotChooseBasicType),
            "RET_NOT_FUNC_CLOSE" => Some(Self::RetNotFuncClose),
            "RET_NOT_CHOOSE_GENDER" => Some(Self::RetNotChooseGender),
            "RET_NOT_REQ_UNLOCK_BASIC_TYPE" => Some(Self::RetNotReqUnlockBasicType),
            "RET_AVATAR_PATH_LOCKED" => Some(Self::RetAvatarPathLocked),
            "RET_ROGUE_STATUS_NOT_MATCH" => Some(Self::RetRogueStatusNotMatch),
            "RET_ROGUE_SELECT_BUFF_NOT_EXIST" => Some(Self::RetRogueSelectBuffNotExist),
            "RET_ROGUE_COIN_NOT_ENOUGH" => Some(Self::RetRogueCoinNotEnough),
            "RET_ROGUE_STAMINA_NOT_ENOUGH" => Some(Self::RetRogueStaminaNotEnough),
            "RET_ROGUE_APPRAISAL_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueAppraisalCountNotEnough)
            }
            "RET_ROGUE_PROP_ALREADY_USED" => Some(Self::RetRoguePropAlreadyUsed),
            "RET_ROGUE_RECORD_ALREADY_SAVED" => Some(Self::RetRogueRecordAlreadySaved),
            "RET_ROGUE_ROLL_BUFF_MAX_COUNT" => Some(Self::RetRogueRollBuffMaxCount),
            "RET_ROGUE_PICK_AVATAR_INVALID" => Some(Self::RetRoguePickAvatarInvalid),
            "RET_ROGUE_QUEST_EXPIRE" => Some(Self::RetRogueQuestExpire),
            "RET_ROGUE_QUEST_REWARD_ALREADY" => Some(Self::RetRogueQuestRewardAlready),
            "RET_ROGUE_REVIVE_COUNT_NOT_ENOUGH" => {
                Some(Self::RetRogueReviveCountNotEnough)
            }
            "RET_ROGUE_AREA_INVALID" => Some(Self::RetRogueAreaInvalid),
            "RET_ROGUE_SCORE_REWARD_POOL_INVALID" => {
                Some(Self::RetRogueScoreRewardPoolInvalid)
            }
            "RET_ROGUE_SCORE_REWARD_ROW_INVALID" => {
                Some(Self::RetRogueScoreRewardRowInvalid)
            }
            "RET_ROGUE_AEON_LEVEL_NOT_MEET" => Some(Self::RetRogueAeonLevelNotMeet),
            "RET_ROGUE_AEON_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueAeonLevelRewardAlreadyTaken)
            }
            "RET_ROGUE_AEON_CONFIG_NOT_EXIST" => Some(Self::RetRogueAeonConfigNotExist),
            "RET_ROGUE_TRIAL_AVATAR_INVALID" => Some(Self::RetRogueTrialAvatarInvalid),
            "RET_ROGUE_HANDBOOK_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetRogueHandbookRewardAlreadyTaken)
            }
            "RET_ROGUE_ROOM_TYPE_NOT_MATCH" => Some(Self::RetRogueRoomTypeNotMatch),
            "RET_ROGUE_SHOP_GOOD_NOT_FOUND" => Some(Self::RetRogueShopGoodNotFound),
            "RET_ROGUE_SHOP_GOOD_ALREADY_BOUGHT" => {
                Some(Self::RetRogueShopGoodAlreadyBought)
            }
            "RET_ROGUE_SHOP_GOOD_ALREADY_OWN" => Some(Self::RetRogueShopGoodAlreadyOwn),
            "RET_ROGUE_SHOP_MIRACLE_NOT_EXIST" => Some(Self::RetRogueShopMiracleNotExist),
            "RET_ROGUE_SHOP_NOT_EXIST" => Some(Self::RetRogueShopNotExist),
            "RET_ROGUE_SHOP_CANNOT_REFRESH" => Some(Self::RetRogueShopCannotRefresh),
            "RET_ROGUE_SELECT_BUFF_CERTAIN_MISMATCH" => {
                Some(Self::RetRogueSelectBuffCertainMismatch)
            }
            "RET_MISSION_EVENT_CONFIG_NOT_EXIST" => {
                Some(Self::RetMissionEventConfigNotExist)
            }
            "RET_MISSION_EVENT_NOT_CLIENT" => Some(Self::RetMissionEventNotClient),
            "RET_MISSION_EVENT_FINISHED" => Some(Self::RetMissionEventFinished),
            "RET_MISSION_EVENT_DOING" => Some(Self::RetMissionEventDoing),
            "RET_HAS_CHALLENGE_MISSION_EVENT" => Some(Self::RetHasChallengeMissionEvent),
            "RET_NOT_CHALLENGE_MISSION_EVENT" => Some(Self::RetNotChallengeMissionEvent),
            "RET_GACHA_ID_NOT_EXIST" => Some(Self::RetGachaIdNotExist),
            "RET_GACHA_NUM_INVALID" => Some(Self::RetGachaNumInvalid),
            "RET_GACHA_FIRST_GACHA_MUST_ONE" => Some(Self::RetGachaFirstGachaMustOne),
            "RET_GACHA_REQ_DUPLICATED" => Some(Self::RetGachaReqDuplicated),
            "RET_GACHA_NOT_IN_SCHEDULE" => Some(Self::RetGachaNotInSchedule),
            "RET_GACHA_NEWBIE_CLOSE" => Some(Self::RetGachaNewbieClose),
            "RET_GACHA_TODAY_LIMITED" => Some(Self::RetGachaTodayLimited),
            "RET_GACHA_NOT_SUPPORT" => Some(Self::RetGachaNotSupport),
            "RET_GACHA_CEILING_NOT_ENOUGH" => Some(Self::RetGachaCeilingNotEnough),
            "RET_GACHA_CEILING_CLOSE" => Some(Self::RetGachaCeilingClose),
            "RET_NOT_IN_RAID" => Some(Self::RetNotInRaid),
            "RET_RAID_DOING" => Some(Self::RetRaidDoing),
            "RET_NOT_PROP" => Some(Self::RetNotProp),
            "RET_RAID_ID_NOT_MATCH" => Some(Self::RetRaidIdNotMatch),
            "RET_RAID_RESTART_NOT_MATCH" => Some(Self::RetRaidRestartNotMatch),
            "RET_RAID_LIMIT" => Some(Self::RetRaidLimit),
            "RET_RAID_AVATAR_LIST_EMPTY" => Some(Self::RetRaidAvatarListEmpty),
            "RET_RAID_AVATAR_NOT_EXIST" => Some(Self::RetRaidAvatarNotExist),
            "RET_CHALLENGE_RAID_REWARD_ALREADY" => {
                Some(Self::RetChallengeRaidRewardAlready)
            }
            "RET_CHALLENGE_RAID_SCORE_NOT_REACH" => {
                Some(Self::RetChallengeRaidScoreNotReach)
            }
            "RET_CHALLENGE_RAID_NOT_OPEN" => Some(Self::RetChallengeRaidNotOpen),
            "RET_RAID_FINISHED" => Some(Self::RetRaidFinished),
            "RET_RAID_WORLD_LEVEL_NOT_LOCK" => Some(Self::RetRaidWorldLevelNotLock),
            "RET_RAID_CANNOT_USE_ASSIST" => Some(Self::RetRaidCannotUseAssist),
            "RET_RAID_AVATAR_NOT_MATCH" => Some(Self::RetRaidAvatarNotMatch),
            "RET_RAID_CAN_NOT_SAVE" => Some(Self::RetRaidCanNotSave),
            "RET_RAID_NO_SAVE" => Some(Self::RetRaidNoSave),
            "RET_ACTIVITY_RAID_NOT_OPEN" => Some(Self::RetActivityRaidNotOpen),
            "RET_RAID_AVATAR_CAPTAIN_NOT_EXIST" => {
                Some(Self::RetRaidAvatarCaptainNotExist)
            }
            "RET_RAID_STORY_LINE_NOT_MATCH" => Some(Self::RetRaidStoryLineNotMatch),
            "RET_TALK_EVENT_ALREADY_TAKEN" => Some(Self::RetTalkEventAlreadyTaken),
            "RET_NPC_ALREADY_MEET" => Some(Self::RetNpcAlreadyMeet),
            "RET_NPC_NOT_IN_CONFIG" => Some(Self::RetNpcNotInConfig),
            "RET_DIALOGUE_GROUP_DISMATCH" => Some(Self::RetDialogueGroupDismatch),
            "RET_DIALOGUE_EVENT_INVALID" => Some(Self::RetDialogueEventInvalid),
            "RET_TALK_EVENT_TAKE_PROTO_NOT_MATCH" => {
                Some(Self::RetTalkEventTakeProtoNotMatch)
            }
            "RET_TALK_EVENT_NOT_VALID" => Some(Self::RetTalkEventNotValid),
            "RET_EXPEDITION_CONFIG_NOT_EXIST" => Some(Self::RetExpeditionConfigNotExist),
            "RET_EXPEDITION_REWARD_CONFIG_NOT_EXIST" => {
                Some(Self::RetExpeditionRewardConfigNotExist)
            }
            "RET_EXPEDITION_NOT_UNLOCKED" => Some(Self::RetExpeditionNotUnlocked),
            "RET_EXPEDITION_ALREADY_ACCEPTED" => Some(Self::RetExpeditionAlreadyAccepted),
            "RET_EXPEDITION_REPEATED_AVATAR" => Some(Self::RetExpeditionRepeatedAvatar),
            "RET_AVATAR_ALREADY_DISPATCHED" => Some(Self::RetAvatarAlreadyDispatched),
            "RET_EXPEDITION_NOT_ACCEPTED" => Some(Self::RetExpeditionNotAccepted),
            "RET_EXPEDITION_NOT_FINISH" => Some(Self::RetExpeditionNotFinish),
            "RET_EXPEDITION_ALREADY_FINISH" => Some(Self::RetExpeditionAlreadyFinish),
            "RET_EXPEDITION_TEAM_COUNT_LIMIT" => Some(Self::RetExpeditionTeamCountLimit),
            "RET_EXPEDITION_AVATAR_NUM_NOT_MATCH" => {
                Some(Self::RetExpeditionAvatarNumNotMatch)
            }
            "RET_EXPEDITION_NOT_OPEN" => Some(Self::RetExpeditionNotOpen),
            "RET_EXPEDITION_FRIEND_AVATAR_NOT_VALID" => {
                Some(Self::RetExpeditionFriendAvatarNotValid)
            }
            "RET_EXPEDITION_NOT_PUBLISHED" => Some(Self::RetExpeditionNotPublished),
            "RET_LOGIN_ACTIVITY_HAS_TAKEN" => Some(Self::RetLoginActivityHasTaken),
            "RET_LOGIN_ACTIVITY_DAYS_LACK" => Some(Self::RetLoginActivityDaysLack),
            "RET_TRIAL_ACTIVITY_REWARD_ALREADY_TAKE" => {
                Some(Self::RetTrialActivityRewardAlreadyTake)
            }
            "RET_TRIAL_ACTIVITY_STAGE_NOT_FINISH" => {
                Some(Self::RetTrialActivityStageNotFinish)
            }
            "RET_MONSTER_RESEARCH_ACTIVITY_HAS_TAKEN" => {
                Some(Self::RetMonsterResearchActivityHasTaken)
            }
            "RET_MONSTER_RESEARCH_ACTIVITY_MATERIAL_NOT_SUBMITTED" => {
                Some(Self::RetMonsterResearchActivityMaterialNotSubmitted)
            }
            "RET_MONSTER_RESEARCH_ACTIVITY_MATERIAL_ALREADY_SUBMITTED" => {
                Some(Self::RetMonsterResearchActivityMaterialAlreadySubmitted)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_ERROR" => {
                Some(Self::RetFantasticStoryActivityStoryError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_STORY_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityStoryNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_NOT_OPEN" => {
                Some(Self::RetFantasticStoryActivityBattleNotOpen)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_AVATAR_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleAvatarError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_BATTLE_BUFF_ERROR" => {
                Some(Self::RetFantasticStoryActivityBattleBuffError)
            }
            "RET_FANTASTIC_STORY_ACTIVITY_PRE_BATTLE_SCORE_NOT_ENOUGH" => {
                Some(Self::RetFantasticStoryActivityPreBattleScoreNotEnough)
            }
            "RET_TRIAL_ACTIVITY_ALREADY_IN_TRIAL_ACTIVITY" => {
                Some(Self::RetTrialActivityAlreadyInTrialActivity)
            }
            "RET_COMMON_ACTIVITY_NOT_OPEN" => Some(Self::RetCommonActivityNotOpen),
            "RET_MESSAGE_CONFIG_NOT_EXIST" => Some(Self::RetMessageConfigNotExist),
            "RET_MESSAGE_SECTION_NOT_TAKE" => Some(Self::RetMessageSectionNotTake),
            "RET_MESSAGE_GROUP_NOT_TAKE" => Some(Self::RetMessageGroupNotTake),
            "RET_MESSAGE_SECTION_ID_NOT_MATCH" => Some(Self::RetMessageSectionIdNotMatch),
            "RET_MESSAGE_SECTION_CAN_NOT_FINISH" => {
                Some(Self::RetMessageSectionCanNotFinish)
            }
            "RET_MESSAGE_ITEM_CAN_NOT_FINISH" => Some(Self::RetMessageItemCanNotFinish),
            "RET_MESSAGE_ITEM_RAID_CAN_NOT_FINISH" => {
                Some(Self::RetMessageItemRaidCanNotFinish)
            }
            "RET_FRIEND_ALREADY_IS_FRIEND" => Some(Self::RetFriendAlreadyIsFriend),
            "RET_FRIEND_IS_NOT_FRIEND" => Some(Self::RetFriendIsNotFriend),
            "RET_FRIEND_APPLY_EXPIRE" => Some(Self::RetFriendApplyExpire),
            "RET_FRIEND_IN_BLACKLIST" => Some(Self::RetFriendInBlacklist),
            "RET_FRIEND_NOT_IN_BLACKLIST" => Some(Self::RetFriendNotInBlacklist),
            "RET_FRIEND_NUMBER_LIMIT" => Some(Self::RetFriendNumberLimit),
            "RET_FRIEND_BLACKLIST_NUMBER_LIMIT" => {
                Some(Self::RetFriendBlacklistNumberLimit)
            }
            "RET_FRIEND_DAILY_APPLY_LIMIT" => Some(Self::RetFriendDailyApplyLimit),
            "RET_FRIEND_IN_HANDLE_LIMIT" => Some(Self::RetFriendInHandleLimit),
            "RET_FRIEND_APPLY_IN_CD" => Some(Self::RetFriendApplyInCd),
            "RET_FRIEND_REMARK_NAME_FORMAT_ERROR" => {
                Some(Self::RetFriendRemarkNameFormatError)
            }
            "RET_FRIEND_PLAYER_NOT_FOUND" => Some(Self::RetFriendPlayerNotFound),
            "RET_FRIEND_IN_TARGET_BLACKLIST" => Some(Self::RetFriendInTargetBlacklist),
            "RET_FRIEND_TARGET_NUMBER_LIMIT" => Some(Self::RetFriendTargetNumberLimit),
            "RET_ASSIST_QUERY_TOO_FAST" => Some(Self::RetAssistQueryTooFast),
            "RET_ASSIST_NOT_EXIST" => Some(Self::RetAssistNotExist),
            "RET_ASSIST_USED_ALREADY" => Some(Self::RetAssistUsedAlready),
            "RET_FRIEND_REPORT_REASON_FORMAT_ERROR" => {
                Some(Self::RetFriendReportReasonFormatError)
            }
            "RET_FRIEND_REPORT_SENSITIVE_WORDS" => {
                Some(Self::RetFriendReportSensitiveWords)
            }
            "RET_ASSIST_USED_TIMES_OVER" => Some(Self::RetAssistUsedTimesOver),
            "RET_ASSIST_QUIT_ALREADY" => Some(Self::RetAssistQuitAlready),
            "RET_ASSIST_AVATAR_IN_LINEUP" => Some(Self::RetAssistAvatarInLineup),
            "RET_ASSIST_NO_REWARD" => Some(Self::RetAssistNoReward),
            "RET_FRIEND_SEARCH_NUM_LIMIT" => Some(Self::RetFriendSearchNumLimit),
            "RET_FRIEND_SEARCH_IN_CD" => Some(Self::RetFriendSearchInCd),
            "RET_FRIEND_REMARK_NAME_UTF8_ERROR" => {
                Some(Self::RetFriendRemarkNameUtf8Error)
            }
            "RET_FRIEND_REPORT_REASON_UTF8_ERROR" => {
                Some(Self::RetFriendReportReasonUtf8Error)
            }
            "RET_ASSIST_SET_ALREADY" => Some(Self::RetAssistSetAlready),
            "RET_FRIEND_TARGET_FORBID_OTHER_APPLY" => {
                Some(Self::RetFriendTargetForbidOtherApply)
            }
            "RET_FRIEND_MARKED_CNT_MAX" => Some(Self::RetFriendMarkedCntMax),
            "RET_FRIEND_MARKED_ALREADY" => Some(Self::RetFriendMarkedAlready),
            "RET_FRIEND_NOT_MARKED" => Some(Self::RetFriendNotMarked),
            "RET_FRIEND_CHALLENGE_LINEUP_RECOMMEND_IN_CD" => {
                Some(Self::RetFriendChallengeLineupRecommendInCd)
            }
            "RET_VIEW_PLAYER_CARD_IN_CD" => Some(Self::RetViewPlayerCardInCd),
            "RET_VIEW_PLAYER_BATTLE_RECORD_IN_CD" => {
                Some(Self::RetViewPlayerBattleRecordInCd)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_NOT_EXIST" => {
                Some(Self::RetPlayerBoardHeadIconNotExist)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_LOCKED" => {
                Some(Self::RetPlayerBoardHeadIconLocked)
            }
            "RET_PLAYER_BOARD_HEAD_ICON_ALREADY_UNLOCKED" => {
                Some(Self::RetPlayerBoardHeadIconAlreadyUnlocked)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardDisplayAvatarNotExist)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_EXCEED_LIMIT" => {
                Some(Self::RetPlayerBoardDisplayAvatarExceedLimit)
            }
            "RET_PLAYER_BOARD_DISPLAY_REPEATED_AVATAR" => {
                Some(Self::RetPlayerBoardDisplayRepeatedAvatar)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_SAME_POS" => {
                Some(Self::RetPlayerBoardDisplayAvatarSamePos)
            }
            "RET_PLAYER_BOARD_DISPLAY_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardDisplayAvatarLocked)
            }
            "RET_SIGNATURE_LENGTH_EXCEED_LIMIT" => {
                Some(Self::RetSignatureLengthExceedLimit)
            }
            "RET_SIGNATURE_SENSITIVE_WORDS" => Some(Self::RetSignatureSensitiveWords),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_NOT_EXIST" => {
                Some(Self::RetPlayerBoardAssistAvatarNotExist)
            }
            "RET_PLAYER_BOARD_ASSIST_AVATAR_LOCKED" => {
                Some(Self::RetPlayerBoardAssistAvatarLocked)
            }
            "RET_SIGNATURE_UTF8_ERROR" => Some(Self::RetSignatureUtf8Error),
            "RET_PLAYER_BOARD_ASSIST_AVATAR_CNT_ERROR" => {
                Some(Self::RetPlayerBoardAssistAvatarCntError)
            }
            "RET_BATTLE_PASS_TIER_NOT_VALID" => Some(Self::RetBattlePassTierNotValid),
            "RET_BATTLE_PASS_LEVEL_NOT_MEET" => Some(Self::RetBattlePassLevelNotMeet),
            "RET_BATTLE_PASS_REWARD_TAKE_ALREADY" => {
                Some(Self::RetBattlePassRewardTakeAlready)
            }
            "RET_BATTLE_PASS_NOT_PREMIUM" => Some(Self::RetBattlePassNotPremium),
            "RET_BATTLE_PASS_NOT_DOING" => Some(Self::RetBattlePassNotDoing),
            "RET_BATTLE_PASS_LEVEL_INVALID" => Some(Self::RetBattlePassLevelInvalid),
            "RET_BATTLE_PASS_NOT_UNLOCK" => Some(Self::RetBattlePassNotUnlock),
            "RET_BATTLE_PASS_NO_REWARD" => Some(Self::RetBattlePassNoReward),
            "RET_BATTLE_PASS_QUEST_NOT_VALID" => Some(Self::RetBattlePassQuestNotValid),
            "RET_BATTLE_PASS_NOT_CHOOSE_OPTIONAL" => {
                Some(Self::RetBattlePassNotChooseOptional)
            }
            "RET_BATTLE_PASS_NOT_TAKE_REWARD" => Some(Self::RetBattlePassNotTakeReward),
            "RET_BATTLE_PASS_OPTIONAL_NOT_VALID" => {
                Some(Self::RetBattlePassOptionalNotValid)
            }
            "RET_BATTLE_PASS_BUY_ALREADY" => Some(Self::RetBattlePassBuyAlready),
            "RET_BATTLE_PASS_NEAR_END" => Some(Self::RetBattlePassNearEnd),
            "RET_MUSIC_LOCKED" => Some(Self::RetMusicLocked),
            "RET_MUSIC_NOT_EXIST" => Some(Self::RetMusicNotExist),
            "RET_MUSIC_UNLOCK_FAILED" => Some(Self::RetMusicUnlockFailed),
            "RET_PUNK_LORD_LACK_SUMMON_TIMES" => Some(Self::RetPunkLordLackSummonTimes),
            "RET_PUNK_LORD_ATTACKING_MONSTER_LIMIT" => {
                Some(Self::RetPunkLordAttackingMonsterLimit)
            }
            "RET_PUNK_LORD_MONSTER_NOT_EXIST" => Some(Self::RetPunkLordMonsterNotExist),
            "RET_PUNK_LORD_MONSTER_ALREADY_SHARED" => {
                Some(Self::RetPunkLordMonsterAlreadyShared)
            }
            "RET_PUNK_LORD_MONSTER_EXPIRED" => Some(Self::RetPunkLordMonsterExpired),
            "RET_PUNK_LORD_SELF_MONSTER_ATTACK_LIMIT" => {
                Some(Self::RetPunkLordSelfMonsterAttackLimit)
            }
            "RET_PUNK_LORD_LACK_SUPPORT_TIMES" => Some(Self::RetPunkLordLackSupportTimes),
            "RET_PUNK_LORD_MONSTER_ALREADY_KILLED" => {
                Some(Self::RetPunkLordMonsterAlreadyKilled)
            }
            "RET_PUNK_LORD_MONSTER_ATTACKER_LIMIT" => {
                Some(Self::RetPunkLordMonsterAttackerLimit)
            }
            "RET_PUNK_LORD_WORLD_LEVLE_NOT_VALID" => {
                Some(Self::RetPunkLordWorldLevleNotValid)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_NOT_EXIST" => {
                Some(Self::RetPunkLordRewardLevleNotExist)
            }
            "RET_PUNK_LORD_POINT_NOT_MEET" => Some(Self::RetPunkLordPointNotMeet),
            "RET_PUNK_LORD_IN_ATTACKING" => Some(Self::RetPunkLordInAttacking),
            "RET_PUNK_LORD_OPERATION_IN_CD" => Some(Self::RetPunkLordOperationInCd),
            "RET_PUNK_LORD_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetPunkLordRewardAlreadyTaken)
            }
            "RET_PUNK_LORD_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetPunkLordOverBonusRewardLimit)
            }
            "RET_PUNK_LORD_NOT_IN_SCHEDULE" => Some(Self::RetPunkLordNotInSchedule),
            "RET_PUNK_LORD_MONSTER_NOT_ATTACKED" => {
                Some(Self::RetPunkLordMonsterNotAttacked)
            }
            "RET_PUNK_LORD_MONSTER_NOT_KILLED" => Some(Self::RetPunkLordMonsterNotKilled),
            "RET_PUNK_LORD_MONSTER_KILLED_SCORE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordMonsterKilledScoreAlreadyTake)
            }
            "RET_PUNK_LORD_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetPunkLordRewardLevleAlreadyTake)
            }
            "RET_DAILY_ACTIVE_LEVEL_INVALID" => Some(Self::RetDailyActiveLevelInvalid),
            "RET_DAILY_ACTIVE_LEVEL_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetDailyActiveLevelRewardAlreadyTaken)
            }
            "RET_DAILY_ACTIVE_LEVEL_AP_NOT_ENOUGH" => {
                Some(Self::RetDailyActiveLevelApNotEnough)
            }
            "RET_DAILY_MEET_PAM" => Some(Self::RetDailyMeetPam),
            "RET_REPLAY_ID_NOT_MATCH" => Some(Self::RetReplayIdNotMatch),
            "RET_REPLAY_REQ_NOT_VALID" => Some(Self::RetReplayReqNotValid),
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_NOT_PASSED" => {
                Some(Self::RetFightActivityDifficultyLevelNotPassed)
            }
            "RET_FIGHT_ACTIVITY_DIFFICULTY_LEVEL_REWARD_ALREADY_TAKE" => {
                Some(Self::RetFightActivityDifficultyLevelRewardAlreadyTake)
            }
            "RET_FIGHT_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetFightActivityStageNotOpen)
            }
            "RET_FIGHT_ACTIVITY_LEVEL_NOT_UNLOCK" => {
                Some(Self::RetFightActivityLevelNotUnlock)
            }
            "RET_TRAIN_VISITOR_VISITOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorVisitorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_NOT_EXIST" => {
                Some(Self::RetTrainVisitorBehaviorNotExist)
            }
            "RET_TRAIN_VISITOR_BEHAVIOR_FINISHED" => {
                Some(Self::RetTrainVisitorBehaviorFinished)
            }
            "RET_TRAIN_VISITOR_ALL_BEHAVIOR_REWARD_TAKEN" => {
                Some(Self::RetTrainVisitorAllBehaviorRewardTaken)
            }
            "RET_TRAIN_VISITOR_GET_ON_MISSION_NOT_FINISH" => {
                Some(Self::RetTrainVisitorGetOnMissionNotFinish)
            }
            "RET_TRAIN_VISITOR_NOT_GET_OFF" => Some(Self::RetTrainVisitorNotGetOff),
            "RET_TEXT_JOIN_UNKNOW_IS_OVERRIDE" => Some(Self::RetTextJoinUnknowIsOverride),
            "RET_TEXT_JOIN_ID_NOT_EXIST" => Some(Self::RetTextJoinIdNotExist),
            "RET_TEXT_JOIN_CAN_NOT_OVERRIDE" => Some(Self::RetTextJoinCanNotOverride),
            "RET_TEXT_JOIN_ITEM_ID_ERROR" => Some(Self::RetTextJoinItemIdError),
            "RET_TEXT_JOIN_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetTextJoinSensitiveCheckError)
            }
            "RET_TEXT_JOIN_MUST_OVERRIDE" => Some(Self::RetTextJoinMustOverride),
            "RET_TEXT_JOIN_TEXT_EMPTY" => Some(Self::RetTextJoinTextEmpty),
            "RET_TEXT_JOIN_TEXT_FORMAT_ERROR" => Some(Self::RetTextJoinTextFormatError),
            "RET_TEXT_JOIN_TEXT_UTF8_ERROR" => Some(Self::RetTextJoinTextUtf8Error),
            "RET_TEXT_JOIN_BATCH_REQ_ID_REPEAT" => {
                Some(Self::RetTextJoinBatchReqIdRepeat)
            }
            "RET_TEXT_JOIN_TYPE_NOT_SUPPORT_BATCH_REQ" => {
                Some(Self::RetTextJoinTypeNotSupportBatchReq)
            }
            "RET_TEXT_JOIN_AVATAR_ID_NOT_EXIST" => {
                Some(Self::RetTextJoinAvatarIdNotExist)
            }
            "RET_TEXT_JOIN_UNKNOW_TYPE" => Some(Self::RetTextJoinUnknowType),
            "RET_PAM_MISSION_MISSION_ID_ERROR" => Some(Self::RetPamMissionMissionIdError),
            "RET_PAM_MISSION_MISSION_EXPIRE" => Some(Self::RetPamMissionMissionExpire),
            "RET_CHAT_TYPE_NOT_EXIST" => Some(Self::RetChatTypeNotExist),
            "RET_MSG_TYPE_NOT_EXIST" => Some(Self::RetMsgTypeNotExist),
            "RET_CHAT_NO_TARGET_UID" => Some(Self::RetChatNoTargetUid),
            "RET_CHAT_MSG_EMPTY" => Some(Self::RetChatMsgEmpty),
            "RET_CHAT_MSG_EXCEED_LIMIT" => Some(Self::RetChatMsgExceedLimit),
            "RET_CHAT_MSG_SENSITIVE_CHECK_ERROR" => {
                Some(Self::RetChatMsgSensitiveCheckError)
            }
            "RET_CHAT_MSG_UTF8_ERROR" => Some(Self::RetChatMsgUtf8Error),
            "RET_CHAT_FORBID_SWITCH_OPEN" => Some(Self::RetChatForbidSwitchOpen),
            "RET_CHAT_FORBID" => Some(Self::RetChatForbid),
            "RET_CHAT_MSG_INCLUDE_SPECIAL_STR" => Some(Self::RetChatMsgIncludeSpecialStr),
            "RET_CHAT_MSG_EMOJI_NOT_EXIST" => Some(Self::RetChatMsgEmojiNotExist),
            "RET_CHAT_MSG_EMOJI_GENDER_NOT_MATCH" => {
                Some(Self::RetChatMsgEmojiGenderNotMatch)
            }
            "RET_CHAT_MSG_EMOJI_NOT_MARKED" => Some(Self::RetChatMsgEmojiNotMarked),
            "RET_CHAT_MSG_EMOJI_ALREADY_MARKED" => {
                Some(Self::RetChatMsgEmojiAlreadyMarked)
            }
            "RET_CHAT_MSG_EMOJI_MARKED_MAX_LIMIT" => {
                Some(Self::RetChatMsgEmojiMarkedMaxLimit)
            }
            "RET_BOXING_CLUB_CHALLENGE_NOT_OPEN" => {
                Some(Self::RetBoxingClubChallengeNotOpen)
            }
            "RET_MUSEUM_NOT_OPEN" => Some(Self::RetMuseumNotOpen),
            "RET_MUSEUM_TURN_CNT_NOT_MATCH" => Some(Self::RetMuseumTurnCntNotMatch),
            "RET_MUSEUM_PHASE_NOT_REACH" => Some(Self::RetMuseumPhaseNotReach),
            "RET_MUSEUM_UNKNOW_STUFF" => Some(Self::RetMuseumUnknowStuff),
            "RET_MUSEUM_UNKNOW_AREA" => Some(Self::RetMuseumUnknowArea),
            "RET_MUSEUM_UNKNOW_POS" => Some(Self::RetMuseumUnknowPos),
            "RET_MUSEUM_STUFF_ALREADY_IN_AREA" => Some(Self::RetMuseumStuffAlreadyInArea),
            "RET_MUSEUM_STUFF_NOT_IN_AREA" => Some(Self::RetMuseumStuffNotInArea),
            "RET_MUSEUM_GET_NPC_REPEAT" => Some(Self::RetMuseumGetNpcRepeat),
            "RET_MUSEUM_GET_NPC_UNLOCK" => Some(Self::RetMuseumGetNpcUnlock),
            "RET_MUSEUM_GET_NPC_NOT_ENOUGH" => Some(Self::RetMuseumGetNpcNotEnough),
            "RET_MUSEUM_CHANGE_STUFF_AREA_ERROR" => {
                Some(Self::RetMuseumChangeStuffAreaError)
            }
            "RET_MUSEUM_NOT_INIT" => Some(Self::RetMuseumNotInit),
            "RET_MUSEUM_EVENT_ERROR" => Some(Self::RetMuseumEventError),
            "RET_MUSEUM_UNKNOW_CHOOSE_EVENT_ID" => {
                Some(Self::RetMuseumUnknowChooseEventId)
            }
            "RET_MUSEUM_EVENT_ORDER_NOT_MATCH" => Some(Self::RetMuseumEventOrderNotMatch),
            "RET_MUSEUM_EVENT_PHASE_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventPhaseNotUnlock)
            }
            "RET_MUSEUM_EVENT_MISSION_NOT_FOUND" => {
                Some(Self::RetMuseumEventMissionNotFound)
            }
            "RET_MUSEUM_AREA_LEVEL_UP_ALREADY" => Some(Self::RetMuseumAreaLevelUpAlready),
            "RET_MUSEUM_STUFF_ALREADY_USED" => Some(Self::RetMuseumStuffAlreadyUsed),
            "RET_MUSEUM_EVENT_ROUND_NOT_UNLOCK" => {
                Some(Self::RetMuseumEventRoundNotUnlock)
            }
            "RET_MUSEUM_STUFF_IN_AREA" => Some(Self::RetMuseumStuffInArea),
            "RET_MUSEUM_STUFF_DISPATCH" => Some(Self::RetMuseumStuffDispatch),
            "RET_MUSEUM_IS_END" => Some(Self::RetMuseumIsEnd),
            "RET_MUSEUM_STUFF_LEAVING" => Some(Self::RetMuseumStuffLeaving),
            "RET_MUSEUM_EVENT_MISSION_NOT_FINISH" => {
                Some(Self::RetMuseumEventMissionNotFinish)
            }
            "RET_MUSEUM_COLLECT_REWARD_NOT_EXIST" => {
                Some(Self::RetMuseumCollectRewardNotExist)
            }
            "RET_MUSEUM_COLLECT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMuseumCollectRewardAlreadyTaken)
            }
            "RET_MUSEUM_ACCEPT_MISSION_MAX_LIMIT" => {
                Some(Self::RetMuseumAcceptMissionMaxLimit)
            }
            "RET_ROGUE_CHALLENGE_NOT_OPEN" => Some(Self::RetRogueChallengeNotOpen),
            "RET_ROGUE_CHALLENGE_ASSIS_REFRESH_LIMIT" => {
                Some(Self::RetRogueChallengeAssisRefreshLimit)
            }
            "RET_ALLEY_NOT_INIT" => Some(Self::RetAlleyNotInit),
            "RET_ALLEY_NOT_OPEN" => Some(Self::RetAlleyNotOpen),
            "RET_ALLEY_MAP_NOT_EXIST" => Some(Self::RetAlleyMapNotExist),
            "RET_ALLEY_EMPTY_POS_LIST" => Some(Self::RetAlleyEmptyPosList),
            "RET_ALLEY_LINE_POS_INVALID" => Some(Self::RetAlleyLinePosInvalid),
            "RET_ALLEY_SHOP_NOT_UNLOCK" => Some(Self::RetAlleyShopNotUnlock),
            "RET_ALLEY_DEPOT_FULL" => Some(Self::RetAlleyDepotFull),
            "RET_ALLEY_SHOP_NOT_INCLUDE" => Some(Self::RetAlleyShopNotInclude),
            "RET_ALLEY_EVENT_NOT_UNLOCK" => Some(Self::RetAlleyEventNotUnlock),
            "RET_ALLEY_EVENT_NOT_REFRESH" => Some(Self::RetAlleyEventNotRefresh),
            "RET_ALLEY_EVENT_STATE_DOING" => Some(Self::RetAlleyEventStateDoing),
            "RET_ALLEY_EVENT_STATE_FINISH" => Some(Self::RetAlleyEventStateFinish),
            "RET_ALLEY_EVENT_ERROR" => Some(Self::RetAlleyEventError),
            "RET_ALLEY_REWARD_LEVEL_ERROR" => Some(Self::RetAlleyRewardLevelError),
            "RET_ALLEY_REWARD_PRESTIGE_NOT_ENOUGH" => {
                Some(Self::RetAlleyRewardPrestigeNotEnough)
            }
            "RET_ALLEY_SHIP_EMPTY" => Some(Self::RetAlleyShipEmpty),
            "RET_ALLEY_SHIP_ID_DISMATCH" => Some(Self::RetAlleyShipIdDismatch),
            "RET_ALLEY_SHIP_NOT_EXIST" => Some(Self::RetAlleyShipNotExist),
            "RET_ALLEY_SHIP_NOT_UNLOCK" => Some(Self::RetAlleyShipNotUnlock),
            "RET_ALLEY_GOODS_NOT_EXIST" => Some(Self::RetAlleyGoodsNotExist),
            "RET_ALLEY_GOODS_NOT_UNLOCK" => Some(Self::RetAlleyGoodsNotUnlock),
            "RET_ALLEY_PROFIT_NOT_POSITIVE" => Some(Self::RetAlleyProfitNotPositive),
            "RET_ALLEY_SPECIAL_ORDER_DISMATCH" => {
                Some(Self::RetAlleySpecialOrderDismatch)
            }
            "RET_ALLEY_ORDER_GOODS_OVER_LIMIT" => Some(Self::RetAlleyOrderGoodsOverLimit),
            "RET_ALLEY_SPECIAL_ORDER_CONDITION_NOT_MEET" => {
                Some(Self::RetAlleySpecialOrderConditionNotMeet)
            }
            "RET_ALLEY_DEPOT_SIZE_OVER_LIMIT" => Some(Self::RetAlleyDepotSizeOverLimit),
            "RET_ALLEY_GOODS_NOT_ENOUGH" => Some(Self::RetAlleyGoodsNotEnough),
            "RET_ALLEY_ORDER_INDEX_INVALID" => Some(Self::RetAlleyOrderIndexInvalid),
            "RET_ALLEY_REWARD_ALREADY_TAKE" => Some(Self::RetAlleyRewardAlreadyTake),
            "RET_ALLEY_REWARD_NOT_EXIST" => Some(Self::RetAlleyRewardNotExist),
            "RET_ALLEY_MAIN_MISSION_NOT_DOING" => Some(Self::RetAlleyMainMissionNotDoing),
            "RET_ALLEY_CRITICAL_EVENT_NOT_FINISH" => {
                Some(Self::RetAlleyCriticalEventNotFinish)
            }
            "RET_ALLEY_SHOP_GOODS_NOT_VALID" => Some(Self::RetAlleyShopGoodsNotValid),
            "RET_ALLEY_SLASH_NOT_OPEN" => Some(Self::RetAlleySlashNotOpen),
            "RET_ALLEY_PLACING_ANCHOR_INVALID" => {
                Some(Self::RetAlleyPlacingAnchorInvalid)
            }
            "RET_ALLEY_PLACING_GOODS_INDEX_INVALID" => {
                Some(Self::RetAlleyPlacingGoodsIndexInvalid)
            }
            "RET_ALLEY_SAVE_MAP_TOO_QUICK" => Some(Self::RetAlleySaveMapTooQuick),
            "RET_ALLEY_MAP_NOT_LINK" => Some(Self::RetAlleyMapNotLink),
            "RET_ALLEY_FUNDS_NOT_LOWER_BASE" => Some(Self::RetAlleyFundsNotLowerBase),
            "RET_ALLEY_EVENT_NOT_FINISH" => Some(Self::RetAlleyEventNotFinish),
            "RET_ALLEY_NORMAL_ORDER_NOT_MEET" => Some(Self::RetAlleyNormalOrderNotMeet),
            "RET_PLAYER_RETURN_NOT_OPEN" => Some(Self::RetPlayerReturnNotOpen),
            "RET_PLAYER_RETURN_IS_SIGNED" => Some(Self::RetPlayerReturnIsSigned),
            "RET_PLAYER_RETURN_POINT_NOT_ENOUGH" => {
                Some(Self::RetPlayerReturnPointNotEnough)
            }
            "RET_PLAYER_RETURN_CONDITION_INVALID" => {
                Some(Self::RetPlayerReturnConditionInvalid)
            }
            "RET_PLAYER_RETURN_HAS_SIGNED" => Some(Self::RetPlayerReturnHasSigned),
            "RET_PLAYER_RETURN_REWARD_TAKEN" => Some(Self::RetPlayerReturnRewardTaken),
            "RET_AETHER_DIVIDE_NO_LINEUP" => Some(Self::RetAetherDivideNoLineup),
            "RET_AETHER_DIVIDE_LINEUP_INVALID" => {
                Some(Self::RetAetherDivideLineupInvalid)
            }
            "RET_CHAT_BUBBLE_ID_ERROR" => Some(Self::RetChatBubbleIdError),
            "RET_CHAT_BUBBLE_ID_NOT_UNLOCK" => Some(Self::RetChatBubbleIdNotUnlock),
            "RET_PHONE_THEME_ID_ERROR" => Some(Self::RetPhoneThemeIdError),
            "RET_PHONE_THEME_ID_NOT_UNLOCK" => Some(Self::RetPhoneThemeIdNotUnlock),
            "RET_CHAT_BUBBLE_SELECT_IS_CURRENT" => {
                Some(Self::RetChatBubbleSelectIsCurrent)
            }
            "RET_PHONE_THEME_SELECT_IS_CURRENT" => {
                Some(Self::RetPhoneThemeSelectIsCurrent)
            }
            "RET_CHESS_ROGUE_CONFIG_NOT_FOUND" => Some(Self::RetChessRogueConfigNotFound),
            "RET_CHESS_ROGUE_CONFIG_INVALID" => Some(Self::RetChessRogueConfigInvalid),
            "RET_CHESS_ROGUE_NO_VALID_ROOM" => Some(Self::RetChessRogueNoValidRoom),
            "RET_CHESS_ROGUE_NO_CELL_INFO" => Some(Self::RetChessRogueNoCellInfo),
            "RET_CHESS_ROGUE_CELL_NOT_FINISH" => Some(Self::RetChessRogueCellNotFinish),
            "RET_CHESS_ROGUE_CELL_IS_LOCKED" => Some(Self::RetChessRogueCellIsLocked),
            "RET_CHESS_ROGUE_SCHEDULE_NOT_MATCH" => {
                Some(Self::RetChessRogueScheduleNotMatch)
            }
            "RET_CHESS_ROGUE_STATUS_FAIL" => Some(Self::RetChessRogueStatusFail),
            "RET_CHESS_ROGUE_AREA_NOT_EXIST" => Some(Self::RetChessRogueAreaNotExist),
            "RET_CHESS_ROGUE_LINEUP_FAIL" => Some(Self::RetChessRogueLineupFail),
            "RET_CHESS_ROGUE_AEON_FAIL" => Some(Self::RetChessRogueAeonFail),
            "RET_CHESS_ROGUE_ENTER_CELL_FAIL" => Some(Self::RetChessRogueEnterCellFail),
            "RET_CHESS_ROGUE_ROLL_DICE_FAIL" => Some(Self::RetChessRogueRollDiceFail),
            "RET_CHESS_ROGUE_DICE_STATUS_FAIL" => Some(Self::RetChessRogueDiceStatusFail),
            "RET_CHESS_ROGUE_DICE_CNT_NOT_FULL" => {
                Some(Self::RetChessRogueDiceCntNotFull)
            }
            "RET_CHESS_ROGUE_UNLOCK" => Some(Self::RetChessRogueUnlock),
            "RET_CHESS_ROGUE_PICK_AVATAR_FAIL" => Some(Self::RetChessRoguePickAvatarFail),
            "RET_CHESS_ROGUE_AVATAR_INVALID" => Some(Self::RetChessRogueAvatarInvalid),
            "RET_CHESS_ROGUE_CELL_CAN_NOT_SELECT" => {
                Some(Self::RetChessRogueCellCanNotSelect)
            }
            "RET_CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::RetChessRogueDiceConfirmed),
            "RET_CHESS_ROGUE_NOUS_DICE_NOT_MATCH" => {
                Some(Self::RetChessRogueNousDiceNotMatch)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_RARITY_FAIL" => {
                Some(Self::RetChessRogueNousDiceRarityFail)
            }
            "RET_CHESS_ROGUE_NOUS_DICE_SURFACE_DUPLICATE" => {
                Some(Self::RetChessRogueNousDiceSurfaceDuplicate)
            }
            "RET_CHESS_ROGUE_NOT_IN_ROGUE" => Some(Self::RetChessRogueNotInRogue),
            "RET_CHESS_ROGUE_NOUS_DICE_BRANCH_LIMIT" => {
                Some(Self::RetChessRogueNousDiceBranchLimit)
            }
            "RET_HELIOBUS_NOT_OPEN" => Some(Self::RetHeliobusNotOpen),
            "RET_HELIOBUS_SNS_POST_NOT_UNLOCK" => Some(Self::RetHeliobusSnsPostNotUnlock),
            "RET_HELIOBUS_SNS_ALREADY_READ" => Some(Self::RetHeliobusSnsAlreadyRead),
            "RET_HELIOBUS_SNS_ALREADY_LIKED" => Some(Self::RetHeliobusSnsAlreadyLiked),
            "RET_HELIOBUS_SNS_ALREADY_COMMENTED" => {
                Some(Self::RetHeliobusSnsAlreadyCommented)
            }
            "RET_HELIOBUS_SNS_IN_MISSION" => Some(Self::RetHeliobusSnsInMission),
            "RET_HELIOBUS_SNS_ALREADY_POSTED" => Some(Self::RetHeliobusSnsAlreadyPosted),
            "RET_HELIOBUS_SNS_NOT_DOING_MISSION" => {
                Some(Self::RetHeliobusSnsNotDoingMission)
            }
            "RET_HELIOBUS_REWARD_LEVEL_MAX" => Some(Self::RetHeliobusRewardLevelMax),
            "RET_HELIOBUS_INCOME_NOT_ENOUGH" => Some(Self::RetHeliobusIncomeNotEnough),
            "RET_HELIOBUS_SNS_COMMENT_NOT_UNLOCK" => {
                Some(Self::RetHeliobusSnsCommentNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_NOT_UNLOCK" => {
                Some(Self::RetHeliobusChallengeNotUnlock)
            }
            "RET_HELIOBUS_CHALLENGE_ID_ERROR" => Some(Self::RetHeliobusChallengeIdError),
            "RET_HELIOBUS_SKILL_NOT_UNLOCK" => Some(Self::RetHeliobusSkillNotUnlock),
            "RET_HELIOBUS_ACCEPT_POST_MISSION_FAIL" => {
                Some(Self::RetHeliobusAcceptPostMissionFail)
            }
            "RET_HELIOBUS_SKILL_NOT_SELECTED" => Some(Self::RetHeliobusSkillNotSelected),
            "RET_HELIOBUS_PLANE_TYPE_INVALID" => Some(Self::RetHeliobusPlaneTypeInvalid),
            "RET_REDDOT_PARAM_INVALID" => Some(Self::RetReddotParamInvalid),
            "RET_REDDOT_ACTIVITY_NOT_OPEN" => Some(Self::RetReddotActivityNotOpen),
            "RET_ROGUE_ENDLESS_ACTIVITY_CONFIG_ERROR" => {
                Some(Self::RetRogueEndlessActivityConfigError)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetRogueEndlessActivityNotOpen)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_OVER_BONUS_REWARD_LIMIT" => {
                Some(Self::RetRogueEndlessActivityOverBonusRewardLimit)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_SCORE_NOT_MEET" => {
                Some(Self::RetRogueEndlessActivityScoreNotMeet)
            }
            "RET_ROGUE_ENDLESS_ACTIVITY_REWARD_LEVLE_ALREADY_TAKE" => {
                Some(Self::RetRogueEndlessActivityRewardLevleAlreadyTake)
            }
            "RET_HEART_DIAL_SCRIPT_NOT_FOUND" => Some(Self::RetHeartDialScriptNotFound),
            "RET_HEART_DIAL_SCRIPT_EMOTION_THE_SAME" => {
                Some(Self::RetHeartDialScriptEmotionTheSame)
            }
            "RET_HEART_DIAL_SCRIPT_STEP_NOT_NORMAL" => {
                Some(Self::RetHeartDialScriptStepNotNormal)
            }
            "RET_HEART_DIAL_SCRIPT_CONDITION_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptConditionNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_NUM_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemNumNotMatch)
            }
            "RET_HEART_DIAL_SCRIPT_SUBMIT_ITEM_ID_NOT_MATCH" => {
                Some(Self::RetHeartDialScriptSubmitItemIdNotMatch)
            }
            "RET_HEART_DIAL_DIALOGUE_NOT_FOUND" => {
                Some(Self::RetHeartDialDialogueNotFound)
            }
            "RET_HEART_DIAL_DIALOGUE_ALREADY_PERFORMED" => {
                Some(Self::RetHeartDialDialogueAlreadyPerformed)
            }
            "RET_HEART_DIAL_NPC_NOT_FOUND" => Some(Self::RetHeartDialNpcNotFound),
            "RET_HEART_DIAL_TRACE_CONFIG_NOT_FOUND" => {
                Some(Self::RetHeartDialTraceConfigNotFound)
            }
            "RET_HEART_DIAL_FLOOR_TRACE_EXIST" => Some(Self::RetHeartDialFloorTraceExist),
            "RET_HEART_DIAL_TRACE_FLOOR_NOT_MATCH" => {
                Some(Self::RetHeartDialTraceFloorNotMatch)
            }
            "RET_TRAVEL_BROCHURE_CONFIG_ERROR" => {
                Some(Self::RetTravelBrochureConfigError)
            }
            "RET_TRAVEL_BROCHURE_PARAM_INVALID" => {
                Some(Self::RetTravelBrochureParamInvalid)
            }
            "RET_TRAVEL_BROCHURE_LOCKED" => Some(Self::RetTravelBrochureLocked),
            "RET_TRAVEL_BROCHURE_CANNOT_OPERATE" => {
                Some(Self::RetTravelBrochureCannotOperate)
            }
            "RET_TRAVEL_BROCHURE_WORLD_ID_NOT_MATCH" => {
                Some(Self::RetTravelBrochureWorldIdNotMatch)
            }
            "RET_TRAVEL_BROCHURE_HAS_NO_WORLD_BOOK" => {
                Some(Self::RetTravelBrochureHasNoWorldBook)
            }
            "RET_TRAVEL_BROCHURE_PAGE_FULL" => Some(Self::RetTravelBrochurePageFull),
            "RET_MAP_ROTATION_NOT_IN_REGION" => Some(Self::RetMapRotationNotInRegion),
            "RET_MAP_ROTATION_ROTATER_ALREADY_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterAlreadyDeployed)
            }
            "RET_MAP_ROTATION_ENERGY_NOT_ENOUGH" => {
                Some(Self::RetMapRotationEnergyNotEnough)
            }
            "RET_MAP_ROTATION_ENTITY_NOT_ON_CUR_POSE" => {
                Some(Self::RetMapRotationEntityNotOnCurPose)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_DEPLOYED" => {
                Some(Self::RetMapRotationRotaterNotDeployed)
            }
            "RET_MAP_ROTATION_POSE_ROTATER_MISMATCH" => {
                Some(Self::RetMapRotationPoseRotaterMismatch)
            }
            "RET_MAP_ROTATION_ROTATER_NOT_REMOVABLE" => {
                Some(Self::RetMapRotationRotaterNotRemovable)
            }
            "RET_MAP_ROTATION_ROTATER_DISPOSABLE" => {
                Some(Self::RetMapRotationRotaterDisposable)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_PARAM_INVALID" => {
                Some(Self::RetSpaceZooActivityCatParamInvalid)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ITEM_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatItemNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_BAG_FULL" => {
                Some(Self::RetSpaceZooActivityCatBagFull)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_NOT_TO_MUTATE" => {
                Some(Self::RetSpaceZooActivityCatNotToMutate)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_STATE_ERROR" => {
                Some(Self::RetSpaceZooActivityCatStateError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CATTERY_LOCKED" => {
                Some(Self::RetSpaceZooActivityCatCatteryLocked)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_OUT_NOW" => {
                Some(Self::RetSpaceZooActivityCatOutNow)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_CONFIG_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatConfigNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_FEATURE_NOT_FOUND" => {
                Some(Self::RetSpaceZooActivityCatFeatureNotFound)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_ADD_CAT_ERROR" => {
                Some(Self::RetSpaceZooActivityCatAddCatError)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_MONEY_NOT_ENOUGH" => {
                Some(Self::RetSpaceZooActivityCatMoneyNotEnough)
            }
            "RET_SPACE_ZOO_ACTIVITY_CAT_COND_NOT_MATCH" => {
                Some(Self::RetSpaceZooActivityCatCondNotMatch)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_CFG_MISS" => {
                Some(Self::RetStrongChallengeActivityStageCfgMiss)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_STAGE_NOT_OPEN" => {
                Some(Self::RetStrongChallengeActivityStageNotOpen)
            }
            "RET_STRONG_CHALLENGE_ACTIVITY_BUFF_ERROR" => {
                Some(Self::RetStrongChallengeActivityBuffError)
            }
            "RET_ROLL_SHOP_NOT_FOUND" => Some(Self::RetRollShopNotFound),
            "RET_ROLL_SHOP_GROUP_EMPTY" => Some(Self::RetRollShopGroupEmpty),
            "RET_ROLL_SHOP_EMPTY" => Some(Self::RetRollShopEmpty),
            "RET_ROLL_SHOP_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetRollShopGachaReqDuplicated)
            }
            "RET_ROLL_SHOP_RANDOM_ERROR" => Some(Self::RetRollShopRandomError),
            "RET_ROLL_SHOP_GROUP_TYPE_NOT_FOUND" => {
                Some(Self::RetRollShopGroupTypeNotFound)
            }
            "RET_ROLL_SHOP_HAS_STORED_REWARD_ALREADY" => {
                Some(Self::RetRollShopHasStoredRewardAlready)
            }
            "RET_ROLL_SHOP_NO_STORED_REWARD" => Some(Self::RetRollShopNoStoredReward),
            "RET_ROLL_SHOP_NOT_IN_VALID_SCENE" => Some(Self::RetRollShopNotInValidScene),
            "RET_ROLL_SHOP_INVALID_ROLL_SHOP_TYPE" => {
                Some(Self::RetRollShopInvalidRollShopType)
            }
            "RET_ACTIVITY_RAID_COLLECTION_PREV_NOT_FINISH" => {
                Some(Self::RetActivityRaidCollectionPrevNotFinish)
            }
            "RET_ACTIVITY_RAID_COLLECTION_GROUP_ENTER_NEXT_UNAVAILABLE" => {
                Some(Self::RetActivityRaidCollectionGroupEnterNextUnavailable)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_LAST" => {
                Some(Self::RetActivityRaidCollectionIsLast)
            }
            "RET_ACTIVITY_RAID_COLLECTION_IS_NOT_NEXT" => {
                Some(Self::RetActivityRaidCollectionIsNotNext)
            }
            "RET_OFFERING_NOT_UNLOCK" => Some(Self::RetOfferingNotUnlock),
            "RET_OFFERING_LEVEL_NOT_UNLOCK" => Some(Self::RetOfferingLevelNotUnlock),
            "RET_OFFERING_REACH_MAX_LEVEL" => Some(Self::RetOfferingReachMaxLevel),
            "RET_OFFERING_ITEM_NOT_ENOUGH" => Some(Self::RetOfferingItemNotEnough),
            "RET_OFFERING_LONGTAIL_NOT_OPEN" => Some(Self::RetOfferingLongtailNotOpen),
            "RET_OFFERING_REWARD_CONDITION" => Some(Self::RetOfferingRewardCondition),
            "RET_DRINK_MAKER_CHAT_INVALID" => Some(Self::RetDrinkMakerChatInvalid),
            "RET_DRINK_MAKER_PARAM_INVALID" => Some(Self::RetDrinkMakerParamInvalid),
            "RET_DRINK_MAKER_PARAM_NOT_UNLOCK" => Some(Self::RetDrinkMakerParamNotUnlock),
            "RET_DRINK_MAKER_CONFIG_NOT_FOUND" => Some(Self::RetDrinkMakerConfigNotFound),
            "RET_DRINK_MAKER_NOT_LAST_CHAT" => Some(Self::RetDrinkMakerNotLastChat),
            "RET_DRINK_MAKER_DAY_AND_FREE_PHASE_NOT_OPEN" => {
                Some(Self::RetDrinkMakerDayAndFreePhaseNotOpen)
            }
            "RET_MONOPOLY_NOT_OPEN" => Some(Self::RetMonopolyNotOpen),
            "RET_MONOPOLY_CONFIG_ERROR" => Some(Self::RetMonopolyConfigError),
            "RET_MONOPOLY_DICE_NOT_ENOUGH" => Some(Self::RetMonopolyDiceNotEnough),
            "RET_MONOPOLY_CUR_CELL_NOT_FINISH" => Some(Self::RetMonopolyCurCellNotFinish),
            "RET_MONOPOLY_COIN_NOT_ENOUGH" => Some(Self::RetMonopolyCoinNotEnough),
            "RET_MONOPOLY_CELL_WAIT_PENDING" => Some(Self::RetMonopolyCellWaitPending),
            "RET_MONOPOLY_CELL_STATE_ERROR" => Some(Self::RetMonopolyCellStateError),
            "RET_MONOPOLY_CELL_CONTENT_ERROR" => Some(Self::RetMonopolyCellContentError),
            "RET_MONOPOLY_ITEM_NOT_ENOUGH" => Some(Self::RetMonopolyItemNotEnough),
            "RET_MONOPOLY_CELL_CONTENT_CANNOT_GIVEUP" => {
                Some(Self::RetMonopolyCellContentCannotGiveup)
            }
            "RET_MONOPOLY_ASSET_LEVEL_INVALID" => {
                Some(Self::RetMonopolyAssetLevelInvalid)
            }
            "RET_MONOPOLY_TURN_NOT_FINISH" => Some(Self::RetMonopolyTurnNotFinish),
            "RET_MONOPOLY_GUIDE_NOT_FINISH" => Some(Self::RetMonopolyGuideNotFinish),
            "RET_MONOPOLY_RAFFLE_REWARD_REISSUED" => {
                Some(Self::RetMonopolyRaffleRewardReissued)
            }
            "RET_MONOPOLY_NO_GAME_ACTIVE" => Some(Self::RetMonopolyNoGameActive),
            "RET_MONOPOLY_GAME_RATIO_NOT_INCREASABLE" => {
                Some(Self::RetMonopolyGameRatioNotIncreasable)
            }
            "RET_MONOPOLY_GAME_RATIO_MAX" => Some(Self::RetMonopolyGameRatioMax),
            "RET_MONOPOLY_GAME_TARGET_RATIO_INVALID" => {
                Some(Self::RetMonopolyGameTargetRatioInvalid)
            }
            "RET_MONOPOLY_GAME_BINGO_FLIP_POS_INVALID" => {
                Some(Self::RetMonopolyGameBingoFlipPosInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_ALREADY_CHOOSE" => {
                Some(Self::RetMonopolyGameGuessAlreadyChoose)
            }
            "RET_MONOPOLY_GAME_GUESS_CHOOSE_INVALID" => {
                Some(Self::RetMonopolyGameGuessChooseInvalid)
            }
            "RET_MONOPOLY_GAME_GUESS_INFORMATION_ALREADY_BOUGHT" => {
                Some(Self::RetMonopolyGameGuessInformationAlreadyBought)
            }
            "RET_MONOPOLY_GAME_RAISE_RATIO_NOT_UNLOCK" => {
                Some(Self::RetMonopolyGameRaiseRatioNotUnlock)
            }
            "RET_MONOPOLY_FRIEND_NOT_SYNCED" => Some(Self::RetMonopolyFriendNotSynced),
            "RET_MONOPOLY_GET_FRIEND_RANKING_LIST_IN_CD" => {
                Some(Self::RetMonopolyGetFriendRankingListInCd)
            }
            "RET_MONOPOLY_LIKE_TARGET_NOT_FRIEND" => {
                Some(Self::RetMonopolyLikeTargetNotFriend)
            }
            "RET_MONOPOLY_DAILY_ALREADY_LIKED" => {
                Some(Self::RetMonopolyDailyAlreadyLiked)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_STATUS_NOT_MATCH" => {
                Some(Self::RetMonopolySocialEventStatusNotMatch)
            }
            "RET_MONOPOLY_SOCIAL_EVENT_SERVER_CACHE_NOT_EXIST" => {
                Some(Self::RetMonopolySocialEventServerCacheNotExist)
            }
            "RET_MONOPOLY_ACTIVITY_ID_NOT_MATCH" => {
                Some(Self::RetMonopolyActivityIdNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_EXIST" => {
                Some(Self::RetMonopolyRafflePoolNotExist)
            }
            "RET_MONOPOLY_RAFFLE_POOL_TIME_NOT_MATCH" => {
                Some(Self::RetMonopolyRafflePoolTimeNotMatch)
            }
            "RET_MONOPOLY_RAFFLE_POOL_PHASE_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolPhaseNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_POOL_SHOW_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRafflePoolShowTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_NOT_FOUND" => {
                Some(Self::RetMonopolyRaffleTicketNotFound)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_TIME_NOT_MEET" => {
                Some(Self::RetMonopolyRaffleTicketTimeNotMeet)
            }
            "RET_MONOPOLY_RAFFLE_TICKET_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyRaffleTicketRewardAlreadyTaken)
            }
            "RET_MONOPOLY_RAFFLE_POOL_NOT_IN_RAFFLE_TIME" => {
                Some(Self::RetMonopolyRafflePoolNotInRaffleTime)
            }
            "RET_MONOPOLY_MBTI_REPORT_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetMonopolyMbtiReportRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_GAMING" => Some(Self::RetEvolveBuildLevelGaming),
            "RET_EVEOLVE_BUILD_LEVEL_BAN_RANDOM" => {
                Some(Self::RetEveolveBuildLevelBanRandom)
            }
            "RET_EVOLVE_BUILD_FIRST_REWARD_ALREADY_TAKEN" => {
                Some(Self::RetEvolveBuildFirstRewardAlreadyTaken)
            }
            "RET_EVOLVE_BUILD_LEVEL_UNFINISH" => Some(Self::RetEvolveBuildLevelUnfinish),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MAX_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMaxLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_MIN_LEVEL" => {
                Some(Self::RetEvolveBuildShopAbilityMinLevel)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_NOT_GET" => {
                Some(Self::RetEvolveBuildShopAbilityNotGet)
            }
            "RET_EVOLVE_BUILD_LEVEL_LOCK" => Some(Self::RetEvolveBuildLevelLock),
            "RET_EVOLVE_BUILD_EXP_NOT_ENOUGH" => Some(Self::RetEvolveBuildExpNotEnough),
            "RET_EVOLVE_BUILD_SHOP_ABILITY_LEVEL_ERROR" => {
                Some(Self::RetEvolveBuildShopAbilityLevelError)
            }
            "RET_EVOLVE_BUILD_ACTIVITY_NOT_OPEN" => {
                Some(Self::RetEvolveBuildActivityNotOpen)
            }
            "RET_EVOLVE_BUILD_SHOP_ABILITY_EMPTY" => {
                Some(Self::RetEvolveBuildShopAbilityEmpty)
            }
            "RET_EVOLVE_BUILD_LEVEL_NOT_START" => Some(Self::RetEvolveBuildLevelNotStart),
            "RET_EVOLVE_BUILD_SHOP_LOCK" => Some(Self::RetEvolveBuildShopLock),
            "RET_EVOLVE_BUILD_REWARD_LOCK" => Some(Self::RetEvolveBuildRewardLock),
            "RET_EVOLVE_BUILD_REWARD_LEVEL_MAX" => {
                Some(Self::RetEvolveBuildRewardLevelMax)
            }
            "RET_EVOLVE_BUILD_REWARD_ALREADY_ALL_TAKEN" => {
                Some(Self::RetEvolveBuildRewardAlreadyAllTaken)
            }
            "RET_CLOCK_PARK_CONFIG_ERROR" => Some(Self::RetClockParkConfigError),
            "RET_CLOCK_PARK_EFFECT_ERROR" => Some(Self::RetClockParkEffectError),
            "RET_CLOCK_PARK_SCRIPT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkScriptAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_UNLOCK_CONDITION_NOT_MEET" => {
                Some(Self::RetClockParkScriptUnlockConditionNotMeet)
            }
            "RET_CLOCK_PARK_TALENT_ALREADY_UNLOCK" => {
                Some(Self::RetClockParkTalentAlreadyUnlock)
            }
            "RET_CLOCK_PARK_SCRIPT_LOCKED" => Some(Self::RetClockParkScriptLocked),
            "RET_CLOCK_PARK_HAS_ONGOING_SCRIPT" => {
                Some(Self::RetClockParkHasOngoingScript)
            }
            "RET_CLOCK_PARK_NO_ONGOING_SCRIPT" => Some(Self::RetClockParkNoOngoingScript),
            "RET_CLOCK_PARK_DICE_PLACEMENT_ERROR" => {
                Some(Self::RetClockParkDicePlacementError)
            }
            "RET_CLOCK_PARK_MISMATCH_STATUS" => Some(Self::RetClockParkMismatchStatus),
            "RET_CLOCK_PARK_NO_BUFF" => Some(Self::RetClockParkNoBuff),
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_REQ_DUPLICATED" => {
                Some(Self::RetClockParkSlotMachineGachaReqDuplicated)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_COST_NOT_ENOUGH" => {
                Some(Self::RetClockParkSlotMachineCostNotEnough)
            }
            "RET_CLOCK_PARK_SLOT_MACHINE_GACHA_CNT_EXCEED_LIMIT" => {
                Some(Self::RetClockParkSlotMachineGachaCntExceedLimit)
            }
            "RET_CLOCK_PARK_NOT_OPEN" => Some(Self::RetClockParkNotOpen),
            "RET_TOURN_ROGUE_STATUS_MISMATCH" => Some(Self::RetTournRogueStatusMismatch),
            "RET_MATCH_ALREADY_IN_MATCH" => Some(Self::RetMatchAlreadyInMatch),
            "RET_MATCH_NOT_IN_MATCH" => Some(Self::RetMatchNotInMatch),
            "RET_MATCH_PLAY_NOT_OPEN" => Some(Self::RetMatchPlayNotOpen),
            "RET_CROSS_STATE_ERROR" => Some(Self::RetCrossStateError),
            "RET_MATCH_VERSION_NOT_EQUAL" => Some(Self::RetMatchVersionNotEqual),
            "RET_MATCH_PLAYER_NOT_IN_LOBBY_ROOM" => {
                Some(Self::RetMatchPlayerNotInLobbyRoom)
            }
            "RET_LOBBY_STATE_NOT_MATCH" => Some(Self::RetLobbyStateNotMatch),
            "RET_LOBBY_ROOM_NOT_EXIST" => Some(Self::RetLobbyRoomNotExist),
            "RET_LOBBY_ROOM_PALYER_FULL" => Some(Self::RetLobbyRoomPalyerFull),
            "RET_LOBBY_ROOM_PALYER_NOT_READY" => Some(Self::RetLobbyRoomPalyerNotReady),
            "RET_LOBBY_ROOM_PALYER_FIGHTING" => Some(Self::RetLobbyRoomPalyerFighting),
            "RET_FIGHT_ROOM_NOT_EXIST" => Some(Self::RetFightRoomNotExist),
            "RET_FIGHT_MATCH3_PLAYER_STATE_ERR" => {
                Some(Self::RetFightMatch3PlayerStateErr)
            }
            "RET_FIGHT_MATCH3_ROOM_STATE_ERR" => Some(Self::RetFightMatch3RoomStateErr),
            "RET_SWORD_TRAINING_NO_ACTIVE_GAME" => {
                Some(Self::RetSwordTrainingNoActiveGame)
            }
            "RET_SWORD_TRAINING_NO_PENDING_ACTION_MATCH" => {
                Some(Self::RetSwordTrainingNoPendingActionMatch)
            }
            "RET_SWORD_TRAINING_PARTNER_ABILITY_INVALID" => {
                Some(Self::RetSwordTrainingPartnerAbilityInvalid)
            }
            "RET_SWORD_TRAINING_SKILL_ALREADY_LEARNED" => {
                Some(Self::RetSwordTrainingSkillAlreadyLearned)
            }
            "RET_SWORD_TRAINING_CONDITION_NOT_MEET" => {
                Some(Self::RetSwordTrainingConditionNotMeet)
            }
            "RET_SWORD_TRAINING_PARENT_SKILL_NOT_LEARNED" => {
                Some(Self::RetSwordTrainingParentSkillNotLearned)
            }
            "RET_SWORD_TRAINING_SKILL_TYPE_NOT_UNLOCK" => {
                Some(Self::RetSwordTrainingSkillTypeNotUnlock)
            }
            "RET_SWORD_TRAINING_GAME_ALREADY_EXIST" => {
                Some(Self::RetSwordTrainingGameAlreadyExist)
            }
            "RET_SWORD_TRAINING_ENDING_HINT_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingHintNotMatch)
            }
            "RET_SWORD_TRAINING_STORYLINE_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStorylineConfigNotFound)
            }
            "RET_SWORD_TRAINING_STORY_CONFIG_NOT_FOUND" => {
                Some(Self::RetSwordTrainingStoryConfigNotFound)
            }
            "RET_SWORD_TRAINING_UNLOCK_NOT_FINISH" => {
                Some(Self::RetSwordTrainingUnlockNotFinish)
            }
            "RET_SWORD_TRAINING_OPTION_MISMATCH" => {
                Some(Self::RetSwordTrainingOptionMismatch)
            }
            "RET_SWORD_TRAINING_RESTORE_WITHOUT_EXAM_FAILED" => {
                Some(Self::RetSwordTrainingRestoreWithoutExamFailed)
            }
            "RET_SWORD_TRAINING_NO_RESTORE_GAME_AVAILABLE" => {
                Some(Self::RetSwordTrainingNoRestoreGameAvailable)
            }
            "RET_SWORD_TRAINING_ENDING_STORY_NOT_MATCH" => {
                Some(Self::RetSwordTrainingEndingStoryNotMatch)
            }
            "RET_SWORD_TRAINING_ENDING_NOT_FINISH" => {
                Some(Self::RetSwordTrainingEndingNotFinish)
            }
            "RET_SWORD_TRAINING_ENDING_REWARD_TAKEN" => {
                Some(Self::RetSwordTrainingEndingRewardTaken)
            }
            "RET_SWORD_TRAINING_COMBAT_RANK_NOT_CHANGE" => {
                Some(Self::RetSwordTrainingCombatRankNotChange)
            }
            "RET_SWORD_TRAINING_DIRECT_BATTLE_DISABLE" => {
                Some(Self::RetSwordTrainingDirectBattleDisable)
            }
            "RET_FIGHT_FEST_PHASE_NOT_MATCH" => Some(Self::RetFightFestPhaseNotMatch),
            "RET_FIGHT_FEST_SCORE_RACE_ALREADY_FINISH" => {
                Some(Self::RetFightFestScoreRaceAlreadyFinish)
            }
            "RET_FIGHT_FEST_CHALLENGE_LOCKED" => Some(Self::RetFightFestChallengeLocked),
            "RET_FIGHT_FEST_COACH_SKILL_LOCKED" => {
                Some(Self::RetFightFestCoachSkillLocked)
            }
            "RET_FIGHT_FEST_COACH_SKILL_EQUIP_TYPE_EXISTED" => {
                Some(Self::RetFightFestCoachSkillEquipTypeExisted)
            }
            "RET_FIGHT_FEST_SCORE_RACE_MISSION_DOIND" => {
                Some(Self::RetFightFestScoreRaceMissionDoind)
            }
            "RET_FIGHT_FEST_COACH_SKILL_NO_EQUIP" => {
                Some(Self::RetFightFestCoachSkillNoEquip)
            }
            "RET_PET_NOT_EXIST" => Some(Self::RetPetNotExist),
            "RET_PET_ALREADY_SUMMONED" => Some(Self::RetPetAlreadySummoned),
            "RET_PET_NOT_SUMMONED" => Some(Self::RetPetNotSummoned),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdActivityType {
    None = 0,
    CmdGetTrialActivityDataCsReq = 2653,
    CmdGetLoginActivityScRsp = 2606,
    CmdStartTrialActivityCsReq = 2603,
    CmdGetTrialActivityDataScRsp = 2658,
    CmdEnterTrialActivityStageCsReq = 2659,
    CmdSubmitMonsterResearchActivityMaterialCsReq = 2625,
    CmdEnterTrialActivityStageScRsp = 2607,
    CmdGetMonsterResearchActivityDataScRsp = 2698,
    CmdTakeMonsterResearchActivityRewardCsReq = 2617,
    CmdStartTrialActivityScRsp = 2626,
    CmdTakeLoginActivityRewardCsReq = 2611,
    CmdTakeMonsterResearchActivityRewardScRsp = 2692,
    CmdTrialActivityDataChangeScNotify = 2647,
    CmdGetActivityScheduleConfigCsReq = 2656,
    CmdGetMonsterResearchActivityDataCsReq = 2697,
    CmdTakeTrialActivityRewardCsReq = 2641,
    CmdLeaveTrialActivityCsReq = 2613,
    CmdTakeLoginActivityRewardScRsp = 2643,
    CmdLeaveTrialActivityScRsp = 2614,
    CmdCurTrialActivityScNotify = 2622,
    CmdGetLoginActivityCsReq = 2668,
    CmdSubmitMonsterResearchActivityMaterialScRsp = 2624,
    CmdTakeTrialActivityRewardScRsp = 2631,
    CmdGetActivityScheduleConfigScRsp = 2693,
}
impl CmdActivityType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdActivityType::None => "CmdActivityTypeNone",
            CmdActivityType::CmdGetTrialActivityDataCsReq => {
                "CmdGetTrialActivityDataCsReq"
            }
            CmdActivityType::CmdGetLoginActivityScRsp => "CmdGetLoginActivityScRsp",
            CmdActivityType::CmdStartTrialActivityCsReq => "CmdStartTrialActivityCsReq",
            CmdActivityType::CmdGetTrialActivityDataScRsp => {
                "CmdGetTrialActivityDataScRsp"
            }
            CmdActivityType::CmdEnterTrialActivityStageCsReq => {
                "CmdEnterTrialActivityStageCsReq"
            }
            CmdActivityType::CmdSubmitMonsterResearchActivityMaterialCsReq => {
                "CmdSubmitMonsterResearchActivityMaterialCsReq"
            }
            CmdActivityType::CmdEnterTrialActivityStageScRsp => {
                "CmdEnterTrialActivityStageScRsp"
            }
            CmdActivityType::CmdGetMonsterResearchActivityDataScRsp => {
                "CmdGetMonsterResearchActivityDataScRsp"
            }
            CmdActivityType::CmdTakeMonsterResearchActivityRewardCsReq => {
                "CmdTakeMonsterResearchActivityRewardCsReq"
            }
            CmdActivityType::CmdStartTrialActivityScRsp => "CmdStartTrialActivityScRsp",
            CmdActivityType::CmdTakeLoginActivityRewardCsReq => {
                "CmdTakeLoginActivityRewardCsReq"
            }
            CmdActivityType::CmdTakeMonsterResearchActivityRewardScRsp => {
                "CmdTakeMonsterResearchActivityRewardScRsp"
            }
            CmdActivityType::CmdTrialActivityDataChangeScNotify => {
                "CmdTrialActivityDataChangeScNotify"
            }
            CmdActivityType::CmdGetActivityScheduleConfigCsReq => {
                "CmdGetActivityScheduleConfigCsReq"
            }
            CmdActivityType::CmdGetMonsterResearchActivityDataCsReq => {
                "CmdGetMonsterResearchActivityDataCsReq"
            }
            CmdActivityType::CmdTakeTrialActivityRewardCsReq => {
                "CmdTakeTrialActivityRewardCsReq"
            }
            CmdActivityType::CmdLeaveTrialActivityCsReq => "CmdLeaveTrialActivityCsReq",
            CmdActivityType::CmdTakeLoginActivityRewardScRsp => {
                "CmdTakeLoginActivityRewardScRsp"
            }
            CmdActivityType::CmdLeaveTrialActivityScRsp => "CmdLeaveTrialActivityScRsp",
            CmdActivityType::CmdCurTrialActivityScNotify => "CmdCurTrialActivityScNotify",
            CmdActivityType::CmdGetLoginActivityCsReq => "CmdGetLoginActivityCsReq",
            CmdActivityType::CmdSubmitMonsterResearchActivityMaterialScRsp => {
                "CmdSubmitMonsterResearchActivityMaterialScRsp"
            }
            CmdActivityType::CmdTakeTrialActivityRewardScRsp => {
                "CmdTakeTrialActivityRewardScRsp"
            }
            CmdActivityType::CmdGetActivityScheduleConfigScRsp => {
                "CmdGetActivityScheduleConfigScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdActivityTypeNone" => Some(Self::None),
            "CmdGetTrialActivityDataCsReq" => Some(Self::CmdGetTrialActivityDataCsReq),
            "CmdGetLoginActivityScRsp" => Some(Self::CmdGetLoginActivityScRsp),
            "CmdStartTrialActivityCsReq" => Some(Self::CmdStartTrialActivityCsReq),
            "CmdGetTrialActivityDataScRsp" => Some(Self::CmdGetTrialActivityDataScRsp),
            "CmdEnterTrialActivityStageCsReq" => {
                Some(Self::CmdEnterTrialActivityStageCsReq)
            }
            "CmdSubmitMonsterResearchActivityMaterialCsReq" => {
                Some(Self::CmdSubmitMonsterResearchActivityMaterialCsReq)
            }
            "CmdEnterTrialActivityStageScRsp" => {
                Some(Self::CmdEnterTrialActivityStageScRsp)
            }
            "CmdGetMonsterResearchActivityDataScRsp" => {
                Some(Self::CmdGetMonsterResearchActivityDataScRsp)
            }
            "CmdTakeMonsterResearchActivityRewardCsReq" => {
                Some(Self::CmdTakeMonsterResearchActivityRewardCsReq)
            }
            "CmdStartTrialActivityScRsp" => Some(Self::CmdStartTrialActivityScRsp),
            "CmdTakeLoginActivityRewardCsReq" => {
                Some(Self::CmdTakeLoginActivityRewardCsReq)
            }
            "CmdTakeMonsterResearchActivityRewardScRsp" => {
                Some(Self::CmdTakeMonsterResearchActivityRewardScRsp)
            }
            "CmdTrialActivityDataChangeScNotify" => {
                Some(Self::CmdTrialActivityDataChangeScNotify)
            }
            "CmdGetActivityScheduleConfigCsReq" => {
                Some(Self::CmdGetActivityScheduleConfigCsReq)
            }
            "CmdGetMonsterResearchActivityDataCsReq" => {
                Some(Self::CmdGetMonsterResearchActivityDataCsReq)
            }
            "CmdTakeTrialActivityRewardCsReq" => {
                Some(Self::CmdTakeTrialActivityRewardCsReq)
            }
            "CmdLeaveTrialActivityCsReq" => Some(Self::CmdLeaveTrialActivityCsReq),
            "CmdTakeLoginActivityRewardScRsp" => {
                Some(Self::CmdTakeLoginActivityRewardScRsp)
            }
            "CmdLeaveTrialActivityScRsp" => Some(Self::CmdLeaveTrialActivityScRsp),
            "CmdCurTrialActivityScNotify" => Some(Self::CmdCurTrialActivityScNotify),
            "CmdGetLoginActivityCsReq" => Some(Self::CmdGetLoginActivityCsReq),
            "CmdSubmitMonsterResearchActivityMaterialScRsp" => {
                Some(Self::CmdSubmitMonsterResearchActivityMaterialScRsp)
            }
            "CmdTakeTrialActivityRewardScRsp" => {
                Some(Self::CmdTakeTrialActivityRewardScRsp)
            }
            "CmdGetActivityScheduleConfigScRsp" => {
                Some(Self::CmdGetActivityScheduleConfigScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ijngjmooekn {
    TrialActivityStatusNone = 0,
    TrialActivityStatusFinish = 1,
}
impl Ijngjmooekn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ijngjmooekn::TrialActivityStatusNone => "TRIAL_ACTIVITY_STATUS_NONE",
            Ijngjmooekn::TrialActivityStatusFinish => "TRIAL_ACTIVITY_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRIAL_ACTIVITY_STATUS_NONE" => Some(Self::TrialActivityStatusNone),
            "TRIAL_ACTIVITY_STATUS_FINISH" => Some(Self::TrialActivityStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAdventureType {
    None = 0,
    CmdEnterAdventureScRsp = 1306,
    CmdGetFarmStageGachaInfoCsReq = 1311,
    CmdEnterAdventureCsReq = 1368,
    CmdGetFarmStageGachaInfoScRsp = 1343,
}
impl CmdAdventureType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdAdventureType::None => "CmdAdventureTypeNone",
            CmdAdventureType::CmdEnterAdventureScRsp => "CmdEnterAdventureScRsp",
            CmdAdventureType::CmdGetFarmStageGachaInfoCsReq => {
                "CmdGetFarmStageGachaInfoCsReq"
            }
            CmdAdventureType::CmdEnterAdventureCsReq => "CmdEnterAdventureCsReq",
            CmdAdventureType::CmdGetFarmStageGachaInfoScRsp => {
                "CmdGetFarmStageGachaInfoScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAdventureTypeNone" => Some(Self::None),
            "CmdEnterAdventureScRsp" => Some(Self::CmdEnterAdventureScRsp),
            "CmdGetFarmStageGachaInfoCsReq" => Some(Self::CmdGetFarmStageGachaInfoCsReq),
            "CmdEnterAdventureCsReq" => Some(Self::CmdEnterAdventureCsReq),
            "CmdGetFarmStageGachaInfoScRsp" => Some(Self::CmdGetFarmStageGachaInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mjcglmbmflj {
    CmdAetherDivideTypeNone = 0,
    CmdEnterAetherDivideSceneCsReq = 4868,
    CmdAetherDivideRefreshEndlessScRsp = 4876,
    CmdAetherDivideTakeChallengeRewardCsReq = 4845,
    CmdStartAetherDivideSceneBattleCsReq = 4856,
    CmdGetAetherDivideInfoScRsp = 4854,
    CmdAetherDivideLineupScNotify = 4823,
    CmdGetAetherDivideChallengeInfoScRsp = 4808,
    CmdGetAetherDivideChallengeInfoCsReq = 4888,
    CmdSwitchAetherDivideLineUpSlotScRsp = 4824,
    CmdAetherDivideSpiritExpUpScRsp = 4828,
    CmdSetAetherDivideLineUpScRsp = 4848,
    CmdGetAetherDivideInfoCsReq = 4899,
    CmdStartAetherDivideStageBattleScRsp = 4892,
    CmdClearAetherDividePassiveSkillScRsp = 4898,
    CmdStartAetherDivideChallengeBattleScRsp = 4829,
    CmdStartAetherDivideChallengeBattleCsReq = 4839,
    CmdAetherDivideSkillItemScNotify = 4816,
    CmdAetherDivideTainerInfoScNotify = 4832,
    CmdStartAetherDivideSceneBattleScRsp = 4893,
    CmdSwitchAetherDivideLineUpSlotCsReq = 4825,
    CmdEquipAetherDividePassiveSkillCsReq = 4882,
    CmdAetherDivideFinishChallengeScNotify = 4881,
    CmdAetherDivideRefreshEndlessCsReq = 4878,
    CmdClearAetherDividePassiveSkillCsReq = 4897,
    CmdLeaveAetherDivideSceneCsReq = 4811,
    CmdEnterAetherDivideSceneScRsp = 4806,
    CmdSetAetherDivideLineUpCsReq = 4865,
    CmdAetherDivideTakeChallengeRewardScRsp = 4866,
    CmdAetherDivideRefreshEndlessScNotify = 4849,
    CmdEquipAetherDividePassiveSkillScRsp = 4834,
    CmdAetherDivideSpiritInfoScNotify = 4809,
    CmdAetherDivideSpiritExpUpCsReq = 4890,
    CmdStartAetherDivideStageBattleCsReq = 4817,
    CmdLeaveAetherDivideSceneScRsp = 4843,
}
impl Mjcglmbmflj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mjcglmbmflj::CmdAetherDivideTypeNone => "CmdAetherDivideTypeNone",
            Mjcglmbmflj::CmdEnterAetherDivideSceneCsReq => {
                "CmdEnterAetherDivideSceneCsReq"
            }
            Mjcglmbmflj::CmdAetherDivideRefreshEndlessScRsp => {
                "CmdAetherDivideRefreshEndlessScRsp"
            }
            Mjcglmbmflj::CmdAetherDivideTakeChallengeRewardCsReq => {
                "CmdAetherDivideTakeChallengeRewardCsReq"
            }
            Mjcglmbmflj::CmdStartAetherDivideSceneBattleCsReq => {
                "CmdStartAetherDivideSceneBattleCsReq"
            }
            Mjcglmbmflj::CmdGetAetherDivideInfoScRsp => "CmdGetAetherDivideInfoScRsp",
            Mjcglmbmflj::CmdAetherDivideLineupScNotify => "CmdAetherDivideLineupScNotify",
            Mjcglmbmflj::CmdGetAetherDivideChallengeInfoScRsp => {
                "CmdGetAetherDivideChallengeInfoScRsp"
            }
            Mjcglmbmflj::CmdGetAetherDivideChallengeInfoCsReq => {
                "CmdGetAetherDivideChallengeInfoCsReq"
            }
            Mjcglmbmflj::CmdSwitchAetherDivideLineUpSlotScRsp => {
                "CmdSwitchAetherDivideLineUpSlotScRsp"
            }
            Mjcglmbmflj::CmdAetherDivideSpiritExpUpScRsp => {
                "CmdAetherDivideSpiritExpUpScRsp"
            }
            Mjcglmbmflj::CmdSetAetherDivideLineUpScRsp => "CmdSetAetherDivideLineUpScRsp",
            Mjcglmbmflj::CmdGetAetherDivideInfoCsReq => "CmdGetAetherDivideInfoCsReq",
            Mjcglmbmflj::CmdStartAetherDivideStageBattleScRsp => {
                "CmdStartAetherDivideStageBattleScRsp"
            }
            Mjcglmbmflj::CmdClearAetherDividePassiveSkillScRsp => {
                "CmdClearAetherDividePassiveSkillScRsp"
            }
            Mjcglmbmflj::CmdStartAetherDivideChallengeBattleScRsp => {
                "CmdStartAetherDivideChallengeBattleScRsp"
            }
            Mjcglmbmflj::CmdStartAetherDivideChallengeBattleCsReq => {
                "CmdStartAetherDivideChallengeBattleCsReq"
            }
            Mjcglmbmflj::CmdAetherDivideSkillItemScNotify => {
                "CmdAetherDivideSkillItemScNotify"
            }
            Mjcglmbmflj::CmdAetherDivideTainerInfoScNotify => {
                "CmdAetherDivideTainerInfoScNotify"
            }
            Mjcglmbmflj::CmdStartAetherDivideSceneBattleScRsp => {
                "CmdStartAetherDivideSceneBattleScRsp"
            }
            Mjcglmbmflj::CmdSwitchAetherDivideLineUpSlotCsReq => {
                "CmdSwitchAetherDivideLineUpSlotCsReq"
            }
            Mjcglmbmflj::CmdEquipAetherDividePassiveSkillCsReq => {
                "CmdEquipAetherDividePassiveSkillCsReq"
            }
            Mjcglmbmflj::CmdAetherDivideFinishChallengeScNotify => {
                "CmdAetherDivideFinishChallengeScNotify"
            }
            Mjcglmbmflj::CmdAetherDivideRefreshEndlessCsReq => {
                "CmdAetherDivideRefreshEndlessCsReq"
            }
            Mjcglmbmflj::CmdClearAetherDividePassiveSkillCsReq => {
                "CmdClearAetherDividePassiveSkillCsReq"
            }
            Mjcglmbmflj::CmdLeaveAetherDivideSceneCsReq => {
                "CmdLeaveAetherDivideSceneCsReq"
            }
            Mjcglmbmflj::CmdEnterAetherDivideSceneScRsp => {
                "CmdEnterAetherDivideSceneScRsp"
            }
            Mjcglmbmflj::CmdSetAetherDivideLineUpCsReq => "CmdSetAetherDivideLineUpCsReq",
            Mjcglmbmflj::CmdAetherDivideTakeChallengeRewardScRsp => {
                "CmdAetherDivideTakeChallengeRewardScRsp"
            }
            Mjcglmbmflj::CmdAetherDivideRefreshEndlessScNotify => {
                "CmdAetherDivideRefreshEndlessScNotify"
            }
            Mjcglmbmflj::CmdEquipAetherDividePassiveSkillScRsp => {
                "CmdEquipAetherDividePassiveSkillScRsp"
            }
            Mjcglmbmflj::CmdAetherDivideSpiritInfoScNotify => {
                "CmdAetherDivideSpiritInfoScNotify"
            }
            Mjcglmbmflj::CmdAetherDivideSpiritExpUpCsReq => {
                "CmdAetherDivideSpiritExpUpCsReq"
            }
            Mjcglmbmflj::CmdStartAetherDivideStageBattleCsReq => {
                "CmdStartAetherDivideStageBattleCsReq"
            }
            Mjcglmbmflj::CmdLeaveAetherDivideSceneScRsp => {
                "CmdLeaveAetherDivideSceneScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAetherDivideTypeNone" => Some(Self::CmdAetherDivideTypeNone),
            "CmdEnterAetherDivideSceneCsReq" => {
                Some(Self::CmdEnterAetherDivideSceneCsReq)
            }
            "CmdAetherDivideRefreshEndlessScRsp" => {
                Some(Self::CmdAetherDivideRefreshEndlessScRsp)
            }
            "CmdAetherDivideTakeChallengeRewardCsReq" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardCsReq)
            }
            "CmdStartAetherDivideSceneBattleCsReq" => {
                Some(Self::CmdStartAetherDivideSceneBattleCsReq)
            }
            "CmdGetAetherDivideInfoScRsp" => Some(Self::CmdGetAetherDivideInfoScRsp),
            "CmdAetherDivideLineupScNotify" => Some(Self::CmdAetherDivideLineupScNotify),
            "CmdGetAetherDivideChallengeInfoScRsp" => {
                Some(Self::CmdGetAetherDivideChallengeInfoScRsp)
            }
            "CmdGetAetherDivideChallengeInfoCsReq" => {
                Some(Self::CmdGetAetherDivideChallengeInfoCsReq)
            }
            "CmdSwitchAetherDivideLineUpSlotScRsp" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotScRsp)
            }
            "CmdAetherDivideSpiritExpUpScRsp" => {
                Some(Self::CmdAetherDivideSpiritExpUpScRsp)
            }
            "CmdSetAetherDivideLineUpScRsp" => Some(Self::CmdSetAetherDivideLineUpScRsp),
            "CmdGetAetherDivideInfoCsReq" => Some(Self::CmdGetAetherDivideInfoCsReq),
            "CmdStartAetherDivideStageBattleScRsp" => {
                Some(Self::CmdStartAetherDivideStageBattleScRsp)
            }
            "CmdClearAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdClearAetherDividePassiveSkillScRsp)
            }
            "CmdStartAetherDivideChallengeBattleScRsp" => {
                Some(Self::CmdStartAetherDivideChallengeBattleScRsp)
            }
            "CmdStartAetherDivideChallengeBattleCsReq" => {
                Some(Self::CmdStartAetherDivideChallengeBattleCsReq)
            }
            "CmdAetherDivideSkillItemScNotify" => {
                Some(Self::CmdAetherDivideSkillItemScNotify)
            }
            "CmdAetherDivideTainerInfoScNotify" => {
                Some(Self::CmdAetherDivideTainerInfoScNotify)
            }
            "CmdStartAetherDivideSceneBattleScRsp" => {
                Some(Self::CmdStartAetherDivideSceneBattleScRsp)
            }
            "CmdSwitchAetherDivideLineUpSlotCsReq" => {
                Some(Self::CmdSwitchAetherDivideLineUpSlotCsReq)
            }
            "CmdEquipAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdEquipAetherDividePassiveSkillCsReq)
            }
            "CmdAetherDivideFinishChallengeScNotify" => {
                Some(Self::CmdAetherDivideFinishChallengeScNotify)
            }
            "CmdAetherDivideRefreshEndlessCsReq" => {
                Some(Self::CmdAetherDivideRefreshEndlessCsReq)
            }
            "CmdClearAetherDividePassiveSkillCsReq" => {
                Some(Self::CmdClearAetherDividePassiveSkillCsReq)
            }
            "CmdLeaveAetherDivideSceneCsReq" => {
                Some(Self::CmdLeaveAetherDivideSceneCsReq)
            }
            "CmdEnterAetherDivideSceneScRsp" => {
                Some(Self::CmdEnterAetherDivideSceneScRsp)
            }
            "CmdSetAetherDivideLineUpCsReq" => Some(Self::CmdSetAetherDivideLineUpCsReq),
            "CmdAetherDivideTakeChallengeRewardScRsp" => {
                Some(Self::CmdAetherDivideTakeChallengeRewardScRsp)
            }
            "CmdAetherDivideRefreshEndlessScNotify" => {
                Some(Self::CmdAetherDivideRefreshEndlessScNotify)
            }
            "CmdEquipAetherDividePassiveSkillScRsp" => {
                Some(Self::CmdEquipAetherDividePassiveSkillScRsp)
            }
            "CmdAetherDivideSpiritInfoScNotify" => {
                Some(Self::CmdAetherDivideSpiritInfoScNotify)
            }
            "CmdAetherDivideSpiritExpUpCsReq" => {
                Some(Self::CmdAetherDivideSpiritExpUpCsReq)
            }
            "CmdStartAetherDivideStageBattleCsReq" => {
                Some(Self::CmdStartAetherDivideStageBattleCsReq)
            }
            "CmdLeaveAetherDivideSceneScRsp" => {
                Some(Self::CmdLeaveAetherDivideSceneScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jnfhlppocgg {
    CmdAlleyTypeNone = 0,
    CmdAlleyShipUsedCountScNotify = 4723,
    CmdAlleyGuaranteedFundsCsReq = 4778,
    CmdTakePrestigeRewardCsReq = 4799,
    CmdRefreshAlleyOrderCsReq = 4797,
    CmdAlleyEventEffectNotify = 4733,
    CmdLogisticsGameCsReq = 4711,
    CmdAlleyPlacingGameScRsp = 4748,
    CmdAlleyEventChangeNotify = 4751,
    CmdGetSaveLogisticsMapCsReq = 4716,
    CmdLogisticsDetonateStarSkiffCsReq = 4766,
    CmdAlleyFundsScNotify = 4790,
    CmdPrestigeLevelUpCsReq = 4717,
    CmdLogisticsDetonateStarSkiffScRsp = 4746,
    CmdAlleyTakeEventRewardScRsp = 4745,
    CmdAlleyGuaranteedFundsScRsp = 4776,
    CmdAlleyShipUnlockScNotify = 4709,
    CmdAlleyTakeEventRewardCsReq = 4749,
    CmdTakePrestigeRewardScRsp = 4754,
    CmdLogisticsGameScRsp = 4743,
    CmdStartAlleyEventCsReq = 4739,
    CmdLogisticsInfoScNotify = 4781,
    CmdAlleyShipmentEventEffectsScNotify = 4732,
    CmdLogisticsScoreRewardSyncInfoScNotify = 4712,
    CmdAlleyOrderChangedScNotify = 4725,
    CmdActivityRaidPlacingGameCsReq = 4730,
    CmdStartAlleyEventScRsp = 4729,
    CmdPrestigeLevelUpScRsp = 4792,
    CmdAlleyShopLevelScNotify = 4728,
    CmdGetAlleyInfoCsReq = 4768,
    CmdGetSaveLogisticsMapScRsp = 4784,
    CmdRefreshAlleyOrderScRsp = 4798,
    CmdGetAlleyInfoScRsp = 4706,
    CmdSaveLogisticsScRsp = 4708,
    CmdAlleyPlacingGameCsReq = 4765,
    CmdSaveLogisticsCsReq = 4788,
    CmdActivityRaidPlacingGameScRsp = 4795,
}
impl Jnfhlppocgg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jnfhlppocgg::CmdAlleyTypeNone => "CmdAlleyTypeNone",
            Jnfhlppocgg::CmdAlleyShipUsedCountScNotify => "CmdAlleyShipUsedCountScNotify",
            Jnfhlppocgg::CmdAlleyGuaranteedFundsCsReq => "CmdAlleyGuaranteedFundsCsReq",
            Jnfhlppocgg::CmdTakePrestigeRewardCsReq => "CmdTakePrestigeRewardCsReq",
            Jnfhlppocgg::CmdRefreshAlleyOrderCsReq => "CmdRefreshAlleyOrderCsReq",
            Jnfhlppocgg::CmdAlleyEventEffectNotify => "CmdAlleyEventEffectNotify",
            Jnfhlppocgg::CmdLogisticsGameCsReq => "CmdLogisticsGameCsReq",
            Jnfhlppocgg::CmdAlleyPlacingGameScRsp => "CmdAlleyPlacingGameScRsp",
            Jnfhlppocgg::CmdAlleyEventChangeNotify => "CmdAlleyEventChangeNotify",
            Jnfhlppocgg::CmdGetSaveLogisticsMapCsReq => "CmdGetSaveLogisticsMapCsReq",
            Jnfhlppocgg::CmdLogisticsDetonateStarSkiffCsReq => {
                "CmdLogisticsDetonateStarSkiffCsReq"
            }
            Jnfhlppocgg::CmdAlleyFundsScNotify => "CmdAlleyFundsScNotify",
            Jnfhlppocgg::CmdPrestigeLevelUpCsReq => "CmdPrestigeLevelUpCsReq",
            Jnfhlppocgg::CmdLogisticsDetonateStarSkiffScRsp => {
                "CmdLogisticsDetonateStarSkiffScRsp"
            }
            Jnfhlppocgg::CmdAlleyTakeEventRewardScRsp => "CmdAlleyTakeEventRewardScRsp",
            Jnfhlppocgg::CmdAlleyGuaranteedFundsScRsp => "CmdAlleyGuaranteedFundsScRsp",
            Jnfhlppocgg::CmdAlleyShipUnlockScNotify => "CmdAlleyShipUnlockScNotify",
            Jnfhlppocgg::CmdAlleyTakeEventRewardCsReq => "CmdAlleyTakeEventRewardCsReq",
            Jnfhlppocgg::CmdTakePrestigeRewardScRsp => "CmdTakePrestigeRewardScRsp",
            Jnfhlppocgg::CmdLogisticsGameScRsp => "CmdLogisticsGameScRsp",
            Jnfhlppocgg::CmdStartAlleyEventCsReq => "CmdStartAlleyEventCsReq",
            Jnfhlppocgg::CmdLogisticsInfoScNotify => "CmdLogisticsInfoScNotify",
            Jnfhlppocgg::CmdAlleyShipmentEventEffectsScNotify => {
                "CmdAlleyShipmentEventEffectsScNotify"
            }
            Jnfhlppocgg::CmdLogisticsScoreRewardSyncInfoScNotify => {
                "CmdLogisticsScoreRewardSyncInfoScNotify"
            }
            Jnfhlppocgg::CmdAlleyOrderChangedScNotify => "CmdAlleyOrderChangedScNotify",
            Jnfhlppocgg::CmdActivityRaidPlacingGameCsReq => {
                "CmdActivityRaidPlacingGameCsReq"
            }
            Jnfhlppocgg::CmdStartAlleyEventScRsp => "CmdStartAlleyEventScRsp",
            Jnfhlppocgg::CmdPrestigeLevelUpScRsp => "CmdPrestigeLevelUpScRsp",
            Jnfhlppocgg::CmdAlleyShopLevelScNotify => "CmdAlleyShopLevelScNotify",
            Jnfhlppocgg::CmdGetAlleyInfoCsReq => "CmdGetAlleyInfoCsReq",
            Jnfhlppocgg::CmdGetSaveLogisticsMapScRsp => "CmdGetSaveLogisticsMapScRsp",
            Jnfhlppocgg::CmdRefreshAlleyOrderScRsp => "CmdRefreshAlleyOrderScRsp",
            Jnfhlppocgg::CmdGetAlleyInfoScRsp => "CmdGetAlleyInfoScRsp",
            Jnfhlppocgg::CmdSaveLogisticsScRsp => "CmdSaveLogisticsScRsp",
            Jnfhlppocgg::CmdAlleyPlacingGameCsReq => "CmdAlleyPlacingGameCsReq",
            Jnfhlppocgg::CmdSaveLogisticsCsReq => "CmdSaveLogisticsCsReq",
            Jnfhlppocgg::CmdActivityRaidPlacingGameScRsp => {
                "CmdActivityRaidPlacingGameScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAlleyTypeNone" => Some(Self::CmdAlleyTypeNone),
            "CmdAlleyShipUsedCountScNotify" => Some(Self::CmdAlleyShipUsedCountScNotify),
            "CmdAlleyGuaranteedFundsCsReq" => Some(Self::CmdAlleyGuaranteedFundsCsReq),
            "CmdTakePrestigeRewardCsReq" => Some(Self::CmdTakePrestigeRewardCsReq),
            "CmdRefreshAlleyOrderCsReq" => Some(Self::CmdRefreshAlleyOrderCsReq),
            "CmdAlleyEventEffectNotify" => Some(Self::CmdAlleyEventEffectNotify),
            "CmdLogisticsGameCsReq" => Some(Self::CmdLogisticsGameCsReq),
            "CmdAlleyPlacingGameScRsp" => Some(Self::CmdAlleyPlacingGameScRsp),
            "CmdAlleyEventChangeNotify" => Some(Self::CmdAlleyEventChangeNotify),
            "CmdGetSaveLogisticsMapCsReq" => Some(Self::CmdGetSaveLogisticsMapCsReq),
            "CmdLogisticsDetonateStarSkiffCsReq" => {
                Some(Self::CmdLogisticsDetonateStarSkiffCsReq)
            }
            "CmdAlleyFundsScNotify" => Some(Self::CmdAlleyFundsScNotify),
            "CmdPrestigeLevelUpCsReq" => Some(Self::CmdPrestigeLevelUpCsReq),
            "CmdLogisticsDetonateStarSkiffScRsp" => {
                Some(Self::CmdLogisticsDetonateStarSkiffScRsp)
            }
            "CmdAlleyTakeEventRewardScRsp" => Some(Self::CmdAlleyTakeEventRewardScRsp),
            "CmdAlleyGuaranteedFundsScRsp" => Some(Self::CmdAlleyGuaranteedFundsScRsp),
            "CmdAlleyShipUnlockScNotify" => Some(Self::CmdAlleyShipUnlockScNotify),
            "CmdAlleyTakeEventRewardCsReq" => Some(Self::CmdAlleyTakeEventRewardCsReq),
            "CmdTakePrestigeRewardScRsp" => Some(Self::CmdTakePrestigeRewardScRsp),
            "CmdLogisticsGameScRsp" => Some(Self::CmdLogisticsGameScRsp),
            "CmdStartAlleyEventCsReq" => Some(Self::CmdStartAlleyEventCsReq),
            "CmdLogisticsInfoScNotify" => Some(Self::CmdLogisticsInfoScNotify),
            "CmdAlleyShipmentEventEffectsScNotify" => {
                Some(Self::CmdAlleyShipmentEventEffectsScNotify)
            }
            "CmdLogisticsScoreRewardSyncInfoScNotify" => {
                Some(Self::CmdLogisticsScoreRewardSyncInfoScNotify)
            }
            "CmdAlleyOrderChangedScNotify" => Some(Self::CmdAlleyOrderChangedScNotify),
            "CmdActivityRaidPlacingGameCsReq" => {
                Some(Self::CmdActivityRaidPlacingGameCsReq)
            }
            "CmdStartAlleyEventScRsp" => Some(Self::CmdStartAlleyEventScRsp),
            "CmdPrestigeLevelUpScRsp" => Some(Self::CmdPrestigeLevelUpScRsp),
            "CmdAlleyShopLevelScNotify" => Some(Self::CmdAlleyShopLevelScNotify),
            "CmdGetAlleyInfoCsReq" => Some(Self::CmdGetAlleyInfoCsReq),
            "CmdGetSaveLogisticsMapScRsp" => Some(Self::CmdGetSaveLogisticsMapScRsp),
            "CmdRefreshAlleyOrderScRsp" => Some(Self::CmdRefreshAlleyOrderScRsp),
            "CmdGetAlleyInfoScRsp" => Some(Self::CmdGetAlleyInfoScRsp),
            "CmdSaveLogisticsScRsp" => Some(Self::CmdSaveLogisticsScRsp),
            "CmdAlleyPlacingGameCsReq" => Some(Self::CmdAlleyPlacingGameCsReq),
            "CmdSaveLogisticsCsReq" => Some(Self::CmdSaveLogisticsCsReq),
            "CmdActivityRaidPlacingGameScRsp" => {
                Some(Self::CmdActivityRaidPlacingGameScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ohpeonhnbci {
    Left = 0,
    Right = 1,
    Up = 2,
    Down = 3,
    LeftUp = 4,
    LeftDown = 5,
    RightUp = 6,
    RightDown = 7,
}
impl Ohpeonhnbci {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ohpeonhnbci::Left => "LEFT",
            Ohpeonhnbci::Right => "RIGHT",
            Ohpeonhnbci::Up => "UP",
            Ohpeonhnbci::Down => "DOWN",
            Ohpeonhnbci::LeftUp => "LEFT_UP",
            Ohpeonhnbci::LeftDown => "LEFT_DOWN",
            Ohpeonhnbci::RightUp => "RIGHT_UP",
            Ohpeonhnbci::RightDown => "RIGHT_DOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LEFT" => Some(Self::Left),
            "RIGHT" => Some(Self::Right),
            "UP" => Some(Self::Up),
            "DOWN" => Some(Self::Down),
            "LEFT_UP" => Some(Self::LeftUp),
            "LEFT_DOWN" => Some(Self::LeftDown),
            "RIGHT_UP" => Some(Self::RightUp),
            "RIGHT_DOWN" => Some(Self::RightDown),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aklfmicjnmj {
    AlleyEventTypeNone = 0,
    AlleyMainEvent = 1,
    AlleyCriticalEvent = 2,
    AlleyDailyEvent = 3,
}
impl Aklfmicjnmj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Aklfmicjnmj::AlleyEventTypeNone => "ALLEY_EVENT_TYPE_NONE",
            Aklfmicjnmj::AlleyMainEvent => "ALLEY_MAIN_EVENT",
            Aklfmicjnmj::AlleyCriticalEvent => "ALLEY_CRITICAL_EVENT",
            Aklfmicjnmj::AlleyDailyEvent => "ALLEY_DAILY_EVENT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_EVENT_TYPE_NONE" => Some(Self::AlleyEventTypeNone),
            "ALLEY_MAIN_EVENT" => Some(Self::AlleyMainEvent),
            "ALLEY_CRITICAL_EVENT" => Some(Self::AlleyCriticalEvent),
            "ALLEY_DAILY_EVENT" => Some(Self::AlleyDailyEvent),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hadkcbmomck {
    AlleyStateNone = 0,
    AlleyEventDoing = 1,
    AlleyEventFinish = 2,
    AlleyEventRewarded = 3,
}
impl Hadkcbmomck {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hadkcbmomck::AlleyStateNone => "ALLEY_STATE_NONE",
            Hadkcbmomck::AlleyEventDoing => "ALLEY_EVENT_DOING",
            Hadkcbmomck::AlleyEventFinish => "ALLEY_EVENT_FINISH",
            Hadkcbmomck::AlleyEventRewarded => "ALLEY_EVENT_REWARDED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ALLEY_STATE_NONE" => Some(Self::AlleyStateNone),
            "ALLEY_EVENT_DOING" => Some(Self::AlleyEventDoing),
            "ALLEY_EVENT_FINISH" => Some(Self::AlleyEventFinish),
            "ALLEY_EVENT_REWARDED" => Some(Self::AlleyEventRewarded),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdArchiveType {
    None = 0,
    CmdGetArchiveDataScRsp = 2306,
    CmdGetUpdatedArchiveDataScRsp = 2343,
    CmdGetArchiveDataCsReq = 2368,
    CmdGetUpdatedArchiveDataCsReq = 2311,
}
impl CmdArchiveType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdArchiveType::None => "CmdArchiveTypeNone",
            CmdArchiveType::CmdGetArchiveDataScRsp => "CmdGetArchiveDataScRsp",
            CmdArchiveType::CmdGetUpdatedArchiveDataScRsp => {
                "CmdGetUpdatedArchiveDataScRsp"
            }
            CmdArchiveType::CmdGetArchiveDataCsReq => "CmdGetArchiveDataCsReq",
            CmdArchiveType::CmdGetUpdatedArchiveDataCsReq => {
                "CmdGetUpdatedArchiveDataCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdArchiveTypeNone" => Some(Self::None),
            "CmdGetArchiveDataScRsp" => Some(Self::CmdGetArchiveDataScRsp),
            "CmdGetUpdatedArchiveDataScRsp" => Some(Self::CmdGetUpdatedArchiveDataScRsp),
            "CmdGetArchiveDataCsReq" => Some(Self::CmdGetArchiveDataCsReq),
            "CmdGetUpdatedArchiveDataCsReq" => Some(Self::CmdGetUpdatedArchiveDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdAvatarType {
    None = 0,
    CmdTakeOffEquipmentCsReq = 399,
    CmdDressRelicAvatarCsReq = 334,
    CmdAvatarExpUpScRsp = 343,
    CmdTakeOffEquipmentScRsp = 354,
    CmdAddAvatarScNotify = 365,
    CmdMarkAvatarScRsp = 381,
    CmdAvatarExpUpCsReq = 311,
    CmdRankUpAvatarScRsp = 382,
    CmdPromoteAvatarCsReq = 339,
    CmdDressAvatarScRsp = 333,
    CmdUnlockSkilltreeScRsp = 393,
    CmdDressAvatarSkinScRsp = 390,
    CmdPromoteAvatarScRsp = 329,
    CmdTakeOffRelicScRsp = 325,
    CmdRankUpAvatarCsReq = 348,
    CmdDressRelicAvatarScRsp = 397,
    CmdTakeOffAvatarSkinCsReq = 328,
    CmdDressAvatarSkinCsReq = 392,
    CmdTakeOffRelicCsReq = 398,
    CmdMarkAvatarCsReq = 308,
    CmdTakePromotionRewardScRsp = 317,
    CmdTakeOffAvatarSkinScRsp = 309,
    CmdGetAvatarDataScRsp = 306,
    CmdTakePromotionRewardCsReq = 324,
    CmdGetAvatarDataCsReq = 368,
    CmdUnlockAvatarSkinScNotify = 388,
    CmdDressAvatarCsReq = 351,
    CmdUnlockSkilltreeCsReq = 356,
}
impl CmdAvatarType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdAvatarType::None => "CmdAvatarTypeNone",
            CmdAvatarType::CmdTakeOffEquipmentCsReq => "CmdTakeOffEquipmentCsReq",
            CmdAvatarType::CmdDressRelicAvatarCsReq => "CmdDressRelicAvatarCsReq",
            CmdAvatarType::CmdAvatarExpUpScRsp => "CmdAvatarExpUpScRsp",
            CmdAvatarType::CmdTakeOffEquipmentScRsp => "CmdTakeOffEquipmentScRsp",
            CmdAvatarType::CmdAddAvatarScNotify => "CmdAddAvatarScNotify",
            CmdAvatarType::CmdMarkAvatarScRsp => "CmdMarkAvatarScRsp",
            CmdAvatarType::CmdAvatarExpUpCsReq => "CmdAvatarExpUpCsReq",
            CmdAvatarType::CmdRankUpAvatarScRsp => "CmdRankUpAvatarScRsp",
            CmdAvatarType::CmdPromoteAvatarCsReq => "CmdPromoteAvatarCsReq",
            CmdAvatarType::CmdDressAvatarScRsp => "CmdDressAvatarScRsp",
            CmdAvatarType::CmdUnlockSkilltreeScRsp => "CmdUnlockSkilltreeScRsp",
            CmdAvatarType::CmdDressAvatarSkinScRsp => "CmdDressAvatarSkinScRsp",
            CmdAvatarType::CmdPromoteAvatarScRsp => "CmdPromoteAvatarScRsp",
            CmdAvatarType::CmdTakeOffRelicScRsp => "CmdTakeOffRelicScRsp",
            CmdAvatarType::CmdRankUpAvatarCsReq => "CmdRankUpAvatarCsReq",
            CmdAvatarType::CmdDressRelicAvatarScRsp => "CmdDressRelicAvatarScRsp",
            CmdAvatarType::CmdTakeOffAvatarSkinCsReq => "CmdTakeOffAvatarSkinCsReq",
            CmdAvatarType::CmdDressAvatarSkinCsReq => "CmdDressAvatarSkinCsReq",
            CmdAvatarType::CmdTakeOffRelicCsReq => "CmdTakeOffRelicCsReq",
            CmdAvatarType::CmdMarkAvatarCsReq => "CmdMarkAvatarCsReq",
            CmdAvatarType::CmdTakePromotionRewardScRsp => "CmdTakePromotionRewardScRsp",
            CmdAvatarType::CmdTakeOffAvatarSkinScRsp => "CmdTakeOffAvatarSkinScRsp",
            CmdAvatarType::CmdGetAvatarDataScRsp => "CmdGetAvatarDataScRsp",
            CmdAvatarType::CmdTakePromotionRewardCsReq => "CmdTakePromotionRewardCsReq",
            CmdAvatarType::CmdGetAvatarDataCsReq => "CmdGetAvatarDataCsReq",
            CmdAvatarType::CmdUnlockAvatarSkinScNotify => "CmdUnlockAvatarSkinScNotify",
            CmdAvatarType::CmdDressAvatarCsReq => "CmdDressAvatarCsReq",
            CmdAvatarType::CmdUnlockSkilltreeCsReq => "CmdUnlockSkilltreeCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdAvatarTypeNone" => Some(Self::None),
            "CmdTakeOffEquipmentCsReq" => Some(Self::CmdTakeOffEquipmentCsReq),
            "CmdDressRelicAvatarCsReq" => Some(Self::CmdDressRelicAvatarCsReq),
            "CmdAvatarExpUpScRsp" => Some(Self::CmdAvatarExpUpScRsp),
            "CmdTakeOffEquipmentScRsp" => Some(Self::CmdTakeOffEquipmentScRsp),
            "CmdAddAvatarScNotify" => Some(Self::CmdAddAvatarScNotify),
            "CmdMarkAvatarScRsp" => Some(Self::CmdMarkAvatarScRsp),
            "CmdAvatarExpUpCsReq" => Some(Self::CmdAvatarExpUpCsReq),
            "CmdRankUpAvatarScRsp" => Some(Self::CmdRankUpAvatarScRsp),
            "CmdPromoteAvatarCsReq" => Some(Self::CmdPromoteAvatarCsReq),
            "CmdDressAvatarScRsp" => Some(Self::CmdDressAvatarScRsp),
            "CmdUnlockSkilltreeScRsp" => Some(Self::CmdUnlockSkilltreeScRsp),
            "CmdDressAvatarSkinScRsp" => Some(Self::CmdDressAvatarSkinScRsp),
            "CmdPromoteAvatarScRsp" => Some(Self::CmdPromoteAvatarScRsp),
            "CmdTakeOffRelicScRsp" => Some(Self::CmdTakeOffRelicScRsp),
            "CmdRankUpAvatarCsReq" => Some(Self::CmdRankUpAvatarCsReq),
            "CmdDressRelicAvatarScRsp" => Some(Self::CmdDressRelicAvatarScRsp),
            "CmdTakeOffAvatarSkinCsReq" => Some(Self::CmdTakeOffAvatarSkinCsReq),
            "CmdDressAvatarSkinCsReq" => Some(Self::CmdDressAvatarSkinCsReq),
            "CmdTakeOffRelicCsReq" => Some(Self::CmdTakeOffRelicCsReq),
            "CmdMarkAvatarCsReq" => Some(Self::CmdMarkAvatarCsReq),
            "CmdTakePromotionRewardScRsp" => Some(Self::CmdTakePromotionRewardScRsp),
            "CmdTakeOffAvatarSkinScRsp" => Some(Self::CmdTakeOffAvatarSkinScRsp),
            "CmdGetAvatarDataScRsp" => Some(Self::CmdGetAvatarDataScRsp),
            "CmdTakePromotionRewardCsReq" => Some(Self::CmdTakePromotionRewardCsReq),
            "CmdGetAvatarDataCsReq" => Some(Self::CmdGetAvatarDataCsReq),
            "CmdUnlockAvatarSkinScNotify" => Some(Self::CmdUnlockAvatarSkinScNotify),
            "CmdDressAvatarCsReq" => Some(Self::CmdDressAvatarCsReq),
            "CmdUnlockSkilltreeCsReq" => Some(Self::CmdUnlockSkilltreeCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AddAvatarSrc {
    None = 0,
    Gacha = 1,
    Rogue = 2,
}
impl AddAvatarSrc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AddAvatarSrc::None => "ADD_AVATAR_SRC_NONE",
            AddAvatarSrc::Gacha => "ADD_AVATAR_SRC_GACHA",
            AddAvatarSrc::Rogue => "ADD_AVATAR_SRC_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ADD_AVATAR_SRC_NONE" => Some(Self::None),
            "ADD_AVATAR_SRC_GACHA" => Some(Self::Gacha),
            "ADD_AVATAR_SRC_ROGUE" => Some(Self::Rogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdBattleType {
    None = 0,
    CmdSyncClientResVersionCsReq = 139,
    CmdGetCurBattleInfoScRsp = 193,
    CmdReBattleAfterBattleLoseCsNotify = 165,
    CmdServerSimulateBattleFinishScNotify = 154,
    CmdQuitBattleScRsp = 143,
    CmdQuitBattleCsReq = 111,
    CmdGetCurBattleInfoCsReq = 156,
    CmdPveBattleResultCsReq = 168,
    CmdBattleLogReportScRsp = 199,
    CmdQuitBattleScNotify = 151,
    CmdRebattleByClientCsNotify = 148,
    CmdBattleLogReportCsReq = 133,
    CmdSyncClientResVersionScRsp = 129,
    CmdPveBattleResultScRsp = 106,
}
impl CmdBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdBattleType::None => "CmdBattleTypeNone",
            CmdBattleType::CmdSyncClientResVersionCsReq => "CmdSyncClientResVersionCsReq",
            CmdBattleType::CmdGetCurBattleInfoScRsp => "CmdGetCurBattleInfoScRsp",
            CmdBattleType::CmdReBattleAfterBattleLoseCsNotify => {
                "CmdReBattleAfterBattleLoseCsNotify"
            }
            CmdBattleType::CmdServerSimulateBattleFinishScNotify => {
                "CmdServerSimulateBattleFinishScNotify"
            }
            CmdBattleType::CmdQuitBattleScRsp => "CmdQuitBattleScRsp",
            CmdBattleType::CmdQuitBattleCsReq => "CmdQuitBattleCsReq",
            CmdBattleType::CmdGetCurBattleInfoCsReq => "CmdGetCurBattleInfoCsReq",
            CmdBattleType::CmdPveBattleResultCsReq => "CmdPVEBattleResultCsReq",
            CmdBattleType::CmdBattleLogReportScRsp => "CmdBattleLogReportScRsp",
            CmdBattleType::CmdQuitBattleScNotify => "CmdQuitBattleScNotify",
            CmdBattleType::CmdRebattleByClientCsNotify => "CmdRebattleByClientCsNotify",
            CmdBattleType::CmdBattleLogReportCsReq => "CmdBattleLogReportCsReq",
            CmdBattleType::CmdSyncClientResVersionScRsp => "CmdSyncClientResVersionScRsp",
            CmdBattleType::CmdPveBattleResultScRsp => "CmdPVEBattleResultScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleTypeNone" => Some(Self::None),
            "CmdSyncClientResVersionCsReq" => Some(Self::CmdSyncClientResVersionCsReq),
            "CmdGetCurBattleInfoScRsp" => Some(Self::CmdGetCurBattleInfoScRsp),
            "CmdReBattleAfterBattleLoseCsNotify" => {
                Some(Self::CmdReBattleAfterBattleLoseCsNotify)
            }
            "CmdServerSimulateBattleFinishScNotify" => {
                Some(Self::CmdServerSimulateBattleFinishScNotify)
            }
            "CmdQuitBattleScRsp" => Some(Self::CmdQuitBattleScRsp),
            "CmdQuitBattleCsReq" => Some(Self::CmdQuitBattleCsReq),
            "CmdGetCurBattleInfoCsReq" => Some(Self::CmdGetCurBattleInfoCsReq),
            "CmdPVEBattleResultCsReq" => Some(Self::CmdPveBattleResultCsReq),
            "CmdBattleLogReportScRsp" => Some(Self::CmdBattleLogReportScRsp),
            "CmdQuitBattleScNotify" => Some(Self::CmdQuitBattleScNotify),
            "CmdRebattleByClientCsNotify" => Some(Self::CmdRebattleByClientCsNotify),
            "CmdBattleLogReportCsReq" => Some(Self::CmdBattleLogReportCsReq),
            "CmdSyncClientResVersionScRsp" => Some(Self::CmdSyncClientResVersionScRsp),
            "CmdPVEBattleResultScRsp" => Some(Self::CmdPveBattleResultScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dbbjgclmmjp {
    CmdBattleCollegeTypeNone = 0,
    CmdGetBattleCollegeDataScRsp = 5706,
    CmdGetBattleCollegeDataCsReq = 5768,
    CmdStartBattleCollegeScRsp = 5756,
    CmdBattleCollegeDataChangeScNotify = 5711,
    CmdStartBattleCollegeCsReq = 5743,
}
impl Dbbjgclmmjp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Dbbjgclmmjp::CmdBattleCollegeTypeNone => "CmdBattleCollegeTypeNone",
            Dbbjgclmmjp::CmdGetBattleCollegeDataScRsp => "CmdGetBattleCollegeDataScRsp",
            Dbbjgclmmjp::CmdGetBattleCollegeDataCsReq => "CmdGetBattleCollegeDataCsReq",
            Dbbjgclmmjp::CmdStartBattleCollegeScRsp => "CmdStartBattleCollegeScRsp",
            Dbbjgclmmjp::CmdBattleCollegeDataChangeScNotify => {
                "CmdBattleCollegeDataChangeScNotify"
            }
            Dbbjgclmmjp::CmdStartBattleCollegeCsReq => "CmdStartBattleCollegeCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattleCollegeTypeNone" => Some(Self::CmdBattleCollegeTypeNone),
            "CmdGetBattleCollegeDataScRsp" => Some(Self::CmdGetBattleCollegeDataScRsp),
            "CmdGetBattleCollegeDataCsReq" => Some(Self::CmdGetBattleCollegeDataCsReq),
            "CmdStartBattleCollegeScRsp" => Some(Self::CmdStartBattleCollegeScRsp),
            "CmdBattleCollegeDataChangeScNotify" => {
                Some(Self::CmdBattleCollegeDataChangeScNotify)
            }
            "CmdStartBattleCollegeCsReq" => Some(Self::CmdStartBattleCollegeCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fahljamiphk {
    CmdBattlePassTypeNone = 0,
    CmdTakeAllRewardCsReq = 3029,
    CmdBattlePassInfoNotify = 3068,
    CmdTakeAllRewardScRsp = 3051,
    CmdTakeBpRewardCsReq = 3043,
    CmdBuyBpLevelScRsp = 3039,
    CmdBuyBpLevelCsReq = 3093,
    CmdTakeBpRewardScRsp = 3056,
}
impl Fahljamiphk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Fahljamiphk::CmdBattlePassTypeNone => "CmdBattlePassTypeNone",
            Fahljamiphk::CmdTakeAllRewardCsReq => "CmdTakeAllRewardCsReq",
            Fahljamiphk::CmdBattlePassInfoNotify => "CmdBattlePassInfoNotify",
            Fahljamiphk::CmdTakeAllRewardScRsp => "CmdTakeAllRewardScRsp",
            Fahljamiphk::CmdTakeBpRewardCsReq => "CmdTakeBpRewardCsReq",
            Fahljamiphk::CmdBuyBpLevelScRsp => "CmdBuyBpLevelScRsp",
            Fahljamiphk::CmdBuyBpLevelCsReq => "CmdBuyBpLevelCsReq",
            Fahljamiphk::CmdTakeBpRewardScRsp => "CmdTakeBpRewardScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBattlePassTypeNone" => Some(Self::CmdBattlePassTypeNone),
            "CmdTakeAllRewardCsReq" => Some(Self::CmdTakeAllRewardCsReq),
            "CmdBattlePassInfoNotify" => Some(Self::CmdBattlePassInfoNotify),
            "CmdTakeAllRewardScRsp" => Some(Self::CmdTakeAllRewardScRsp),
            "CmdTakeBpRewardCsReq" => Some(Self::CmdTakeBpRewardCsReq),
            "CmdBuyBpLevelScRsp" => Some(Self::CmdBuyBpLevelScRsp),
            "CmdBuyBpLevelCsReq" => Some(Self::CmdBuyBpLevelCsReq),
            "CmdTakeBpRewardScRsp" => Some(Self::CmdTakeBpRewardScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lhcilpbmhdj {
    BpTierTypeNone = 0,
    BpTierTypeFree = 1,
    BpTierTypePremium1 = 2,
    BpTierTypePremium2 = 3,
}
impl Lhcilpbmhdj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lhcilpbmhdj::BpTierTypeNone => "BP_TIER_TYPE_NONE",
            Lhcilpbmhdj::BpTierTypeFree => "BP_TIER_TYPE_FREE",
            Lhcilpbmhdj::BpTierTypePremium1 => "BP_TIER_TYPE_PREMIUM_1",
            Lhcilpbmhdj::BpTierTypePremium2 => "BP_TIER_TYPE_PREMIUM_2",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_TIER_TYPE_NONE" => Some(Self::BpTierTypeNone),
            "BP_TIER_TYPE_FREE" => Some(Self::BpTierTypeFree),
            "BP_TIER_TYPE_PREMIUM_1" => Some(Self::BpTierTypePremium1),
            "BP_TIER_TYPE_PREMIUM_2" => Some(Self::BpTierTypePremium2),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bbfkmccgbef {
    BpRewaradTypeNone = 0,
    BpRewaradTypeFree = 1,
    BpRewaradTypePremium1 = 2,
    BpRewaradTypePremium2 = 3,
    BpRewaradTypePremiumOptional = 4,
}
impl Bbfkmccgbef {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Bbfkmccgbef::BpRewaradTypeNone => "BP_REWARAD_TYPE_NONE",
            Bbfkmccgbef::BpRewaradTypeFree => "BP_REWARAD_TYPE_FREE",
            Bbfkmccgbef::BpRewaradTypePremium1 => "BP_REWARAD_TYPE_PREMIUM_1",
            Bbfkmccgbef::BpRewaradTypePremium2 => "BP_REWARAD_TYPE_PREMIUM_2",
            Bbfkmccgbef::BpRewaradTypePremiumOptional => {
                "BP_REWARAD_TYPE_PREMIUM_OPTIONAL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BP_REWARAD_TYPE_NONE" => Some(Self::BpRewaradTypeNone),
            "BP_REWARAD_TYPE_FREE" => Some(Self::BpRewaradTypeFree),
            "BP_REWARAD_TYPE_PREMIUM_1" => Some(Self::BpRewaradTypePremium1),
            "BP_REWARAD_TYPE_PREMIUM_2" => Some(Self::BpRewaradTypePremium2),
            "BP_REWARAD_TYPE_PREMIUM_OPTIONAL" => {
                Some(Self::BpRewaradTypePremiumOptional)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mhghefbeklg {
    CmdBoxingClubTypeNone = 0,
    CmdBoxingClubRewardScNotify = 4251,
    CmdChooseBoxingClubResonanceScRsp = 4254,
    CmdChooseBoxingClubStageOptionalBuffCsReq = 4282,
    CmdGetBoxingClubInfoScRsp = 4206,
    CmdSetBoxingClubResonanceLineupScRsp = 4248,
    CmdGiveUpBoxingClubChallengeScRsp = 4229,
    CmdGetBoxingClubInfoCsReq = 4268,
    CmdMatchBoxingClubOpponentCsReq = 4211,
    CmdStartBoxingClubBattleScRsp = 4293,
    CmdChooseBoxingClubStageOptionalBuffScRsp = 4234,
    CmdChooseBoxingClubResonanceCsReq = 4299,
    CmdBoxingClubChallengeUpdateScNotify = 4233,
    CmdMatchBoxingClubOpponentScRsp = 4243,
    CmdStartBoxingClubBattleCsReq = 4256,
    CmdGiveUpBoxingClubChallengeCsReq = 4239,
    CmdSetBoxingClubResonanceLineupCsReq = 4265,
}
impl Mhghefbeklg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mhghefbeklg::CmdBoxingClubTypeNone => "CmdBoxingClubTypeNone",
            Mhghefbeklg::CmdBoxingClubRewardScNotify => "CmdBoxingClubRewardScNotify",
            Mhghefbeklg::CmdChooseBoxingClubResonanceScRsp => {
                "CmdChooseBoxingClubResonanceScRsp"
            }
            Mhghefbeklg::CmdChooseBoxingClubStageOptionalBuffCsReq => {
                "CmdChooseBoxingClubStageOptionalBuffCsReq"
            }
            Mhghefbeklg::CmdGetBoxingClubInfoScRsp => "CmdGetBoxingClubInfoScRsp",
            Mhghefbeklg::CmdSetBoxingClubResonanceLineupScRsp => {
                "CmdSetBoxingClubResonanceLineupScRsp"
            }
            Mhghefbeklg::CmdGiveUpBoxingClubChallengeScRsp => {
                "CmdGiveUpBoxingClubChallengeScRsp"
            }
            Mhghefbeklg::CmdGetBoxingClubInfoCsReq => "CmdGetBoxingClubInfoCsReq",
            Mhghefbeklg::CmdMatchBoxingClubOpponentCsReq => {
                "CmdMatchBoxingClubOpponentCsReq"
            }
            Mhghefbeklg::CmdStartBoxingClubBattleScRsp => "CmdStartBoxingClubBattleScRsp",
            Mhghefbeklg::CmdChooseBoxingClubStageOptionalBuffScRsp => {
                "CmdChooseBoxingClubStageOptionalBuffScRsp"
            }
            Mhghefbeklg::CmdChooseBoxingClubResonanceCsReq => {
                "CmdChooseBoxingClubResonanceCsReq"
            }
            Mhghefbeklg::CmdBoxingClubChallengeUpdateScNotify => {
                "CmdBoxingClubChallengeUpdateScNotify"
            }
            Mhghefbeklg::CmdMatchBoxingClubOpponentScRsp => {
                "CmdMatchBoxingClubOpponentScRsp"
            }
            Mhghefbeklg::CmdStartBoxingClubBattleCsReq => "CmdStartBoxingClubBattleCsReq",
            Mhghefbeklg::CmdGiveUpBoxingClubChallengeCsReq => {
                "CmdGiveUpBoxingClubChallengeCsReq"
            }
            Mhghefbeklg::CmdSetBoxingClubResonanceLineupCsReq => {
                "CmdSetBoxingClubResonanceLineupCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdBoxingClubTypeNone" => Some(Self::CmdBoxingClubTypeNone),
            "CmdBoxingClubRewardScNotify" => Some(Self::CmdBoxingClubRewardScNotify),
            "CmdChooseBoxingClubResonanceScRsp" => {
                Some(Self::CmdChooseBoxingClubResonanceScRsp)
            }
            "CmdChooseBoxingClubStageOptionalBuffCsReq" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffCsReq)
            }
            "CmdGetBoxingClubInfoScRsp" => Some(Self::CmdGetBoxingClubInfoScRsp),
            "CmdSetBoxingClubResonanceLineupScRsp" => {
                Some(Self::CmdSetBoxingClubResonanceLineupScRsp)
            }
            "CmdGiveUpBoxingClubChallengeScRsp" => {
                Some(Self::CmdGiveUpBoxingClubChallengeScRsp)
            }
            "CmdGetBoxingClubInfoCsReq" => Some(Self::CmdGetBoxingClubInfoCsReq),
            "CmdMatchBoxingClubOpponentCsReq" => {
                Some(Self::CmdMatchBoxingClubOpponentCsReq)
            }
            "CmdStartBoxingClubBattleScRsp" => Some(Self::CmdStartBoxingClubBattleScRsp),
            "CmdChooseBoxingClubStageOptionalBuffScRsp" => {
                Some(Self::CmdChooseBoxingClubStageOptionalBuffScRsp)
            }
            "CmdChooseBoxingClubResonanceCsReq" => {
                Some(Self::CmdChooseBoxingClubResonanceCsReq)
            }
            "CmdBoxingClubChallengeUpdateScNotify" => {
                Some(Self::CmdBoxingClubChallengeUpdateScNotify)
            }
            "CmdMatchBoxingClubOpponentScRsp" => {
                Some(Self::CmdMatchBoxingClubOpponentScRsp)
            }
            "CmdStartBoxingClubBattleCsReq" => Some(Self::CmdStartBoxingClubBattleCsReq),
            "CmdGiveUpBoxingClubChallengeCsReq" => {
                Some(Self::CmdGiveUpBoxingClubChallengeCsReq)
            }
            "CmdSetBoxingClubResonanceLineupCsReq" => {
                Some(Self::CmdSetBoxingClubResonanceLineupCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdChallengeType {
    None = 0,
    CmdChallengeLineupNotify = 1754,
    CmdGetCurChallengeCsReq = 1733,
    CmdGetChallengeGroupStatisticsScRsp = 1798,
    CmdStartChallengeScRsp = 1743,
    CmdChallengeSettleNotify = 1739,
    CmdStartPartialChallengeCsReq = 1725,
    CmdStartChallengeCsReq = 1711,
    CmdGetChallengeScRsp = 1706,
    CmdGetChallengeRecommendLineupListCsReq = 1708,
    CmdGetCurChallengeScRsp = 1799,
    CmdRestartChallengePhaseScRsp = 1790,
    CmdGetChallengeGroupStatisticsCsReq = 1797,
    CmdEnterChallengeNextPhaseCsReq = 1728,
    CmdTakeChallengeRewardScRsp = 1734,
    CmdRestartChallengePhaseCsReq = 1792,
    CmdChallengeBossPhaseSettleNotify = 1788,
    CmdEnterChallengeNextPhaseScRsp = 1709,
    CmdTakeChallengeRewardCsReq = 1782,
    CmdLeaveChallengeScRsp = 1793,
    CmdGetChallengeCsReq = 1768,
    CmdLeaveChallengeCsReq = 1756,
    CmdGetChallengeRecommendLineupListScRsp = 1781,
    CmdStartPartialChallengeScRsp = 1724,
}
impl CmdChallengeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdChallengeType::None => "CmdChallengeTypeNone",
            CmdChallengeType::CmdChallengeLineupNotify => "CmdChallengeLineupNotify",
            CmdChallengeType::CmdGetCurChallengeCsReq => "CmdGetCurChallengeCsReq",
            CmdChallengeType::CmdGetChallengeGroupStatisticsScRsp => {
                "CmdGetChallengeGroupStatisticsScRsp"
            }
            CmdChallengeType::CmdStartChallengeScRsp => "CmdStartChallengeScRsp",
            CmdChallengeType::CmdChallengeSettleNotify => "CmdChallengeSettleNotify",
            CmdChallengeType::CmdStartPartialChallengeCsReq => {
                "CmdStartPartialChallengeCsReq"
            }
            CmdChallengeType::CmdStartChallengeCsReq => "CmdStartChallengeCsReq",
            CmdChallengeType::CmdGetChallengeScRsp => "CmdGetChallengeScRsp",
            CmdChallengeType::CmdGetChallengeRecommendLineupListCsReq => {
                "CmdGetChallengeRecommendLineupListCsReq"
            }
            CmdChallengeType::CmdGetCurChallengeScRsp => "CmdGetCurChallengeScRsp",
            CmdChallengeType::CmdRestartChallengePhaseScRsp => {
                "CmdRestartChallengePhaseScRsp"
            }
            CmdChallengeType::CmdGetChallengeGroupStatisticsCsReq => {
                "CmdGetChallengeGroupStatisticsCsReq"
            }
            CmdChallengeType::CmdEnterChallengeNextPhaseCsReq => {
                "CmdEnterChallengeNextPhaseCsReq"
            }
            CmdChallengeType::CmdTakeChallengeRewardScRsp => {
                "CmdTakeChallengeRewardScRsp"
            }
            CmdChallengeType::CmdRestartChallengePhaseCsReq => {
                "CmdRestartChallengePhaseCsReq"
            }
            CmdChallengeType::CmdChallengeBossPhaseSettleNotify => {
                "CmdChallengeBossPhaseSettleNotify"
            }
            CmdChallengeType::CmdEnterChallengeNextPhaseScRsp => {
                "CmdEnterChallengeNextPhaseScRsp"
            }
            CmdChallengeType::CmdTakeChallengeRewardCsReq => {
                "CmdTakeChallengeRewardCsReq"
            }
            CmdChallengeType::CmdLeaveChallengeScRsp => "CmdLeaveChallengeScRsp",
            CmdChallengeType::CmdGetChallengeCsReq => "CmdGetChallengeCsReq",
            CmdChallengeType::CmdLeaveChallengeCsReq => "CmdLeaveChallengeCsReq",
            CmdChallengeType::CmdGetChallengeRecommendLineupListScRsp => {
                "CmdGetChallengeRecommendLineupListScRsp"
            }
            CmdChallengeType::CmdStartPartialChallengeScRsp => {
                "CmdStartPartialChallengeScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChallengeTypeNone" => Some(Self::None),
            "CmdChallengeLineupNotify" => Some(Self::CmdChallengeLineupNotify),
            "CmdGetCurChallengeCsReq" => Some(Self::CmdGetCurChallengeCsReq),
            "CmdGetChallengeGroupStatisticsScRsp" => {
                Some(Self::CmdGetChallengeGroupStatisticsScRsp)
            }
            "CmdStartChallengeScRsp" => Some(Self::CmdStartChallengeScRsp),
            "CmdChallengeSettleNotify" => Some(Self::CmdChallengeSettleNotify),
            "CmdStartPartialChallengeCsReq" => Some(Self::CmdStartPartialChallengeCsReq),
            "CmdStartChallengeCsReq" => Some(Self::CmdStartChallengeCsReq),
            "CmdGetChallengeScRsp" => Some(Self::CmdGetChallengeScRsp),
            "CmdGetChallengeRecommendLineupListCsReq" => {
                Some(Self::CmdGetChallengeRecommendLineupListCsReq)
            }
            "CmdGetCurChallengeScRsp" => Some(Self::CmdGetCurChallengeScRsp),
            "CmdRestartChallengePhaseScRsp" => Some(Self::CmdRestartChallengePhaseScRsp),
            "CmdGetChallengeGroupStatisticsCsReq" => {
                Some(Self::CmdGetChallengeGroupStatisticsCsReq)
            }
            "CmdEnterChallengeNextPhaseCsReq" => {
                Some(Self::CmdEnterChallengeNextPhaseCsReq)
            }
            "CmdTakeChallengeRewardScRsp" => Some(Self::CmdTakeChallengeRewardScRsp),
            "CmdRestartChallengePhaseCsReq" => Some(Self::CmdRestartChallengePhaseCsReq),
            "CmdChallengeBossPhaseSettleNotify" => {
                Some(Self::CmdChallengeBossPhaseSettleNotify)
            }
            "CmdEnterChallengeNextPhaseScRsp" => {
                Some(Self::CmdEnterChallengeNextPhaseScRsp)
            }
            "CmdTakeChallengeRewardCsReq" => Some(Self::CmdTakeChallengeRewardCsReq),
            "CmdLeaveChallengeScRsp" => Some(Self::CmdLeaveChallengeScRsp),
            "CmdGetChallengeCsReq" => Some(Self::CmdGetChallengeCsReq),
            "CmdLeaveChallengeCsReq" => Some(Self::CmdLeaveChallengeCsReq),
            "CmdGetChallengeRecommendLineupListScRsp" => {
                Some(Self::CmdGetChallengeRecommendLineupListScRsp)
            }
            "CmdStartPartialChallengeScRsp" => Some(Self::CmdStartPartialChallengeScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ChallengeStatus {
    ChallengeUnknown = 0,
    ChallengeDoing = 1,
    ChallengeFinish = 2,
    ChallengeFailed = 3,
}
impl ChallengeStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ChallengeStatus::ChallengeUnknown => "CHALLENGE_UNKNOWN",
            ChallengeStatus::ChallengeDoing => "CHALLENGE_DOING",
            ChallengeStatus::ChallengeFinish => "CHALLENGE_FINISH",
            ChallengeStatus::ChallengeFailed => "CHALLENGE_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHALLENGE_UNKNOWN" => Some(Self::ChallengeUnknown),
            "CHALLENGE_DOING" => Some(Self::ChallengeDoing),
            "CHALLENGE_FINISH" => Some(Self::ChallengeFinish),
            "CHALLENGE_FAILED" => Some(Self::ChallengeFailed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bikadnacapb {
    CmdChatTypeNone = 0,
    CmdGetChatFriendHistoryScRsp = 3929,
    CmdGetChatFriendHistoryCsReq = 3939,
    CmdSendMsgScRsp = 3906,
    CmdGetChatEmojiListCsReq = 3951,
    CmdSendMsgCsReq = 3968,
    CmdPrivateMsgOfflineUsersScNotify = 3943,
    CmdGetLoginChatInfoScRsp = 3934,
    CmdRevcMsgScNotify = 3911,
    CmdGetChatEmojiListScRsp = 3933,
    CmdBatchMarkChatEmojiCsReq = 3965,
    CmdMarkChatEmojiCsReq = 3999,
    CmdMarkChatEmojiScRsp = 3954,
    CmdGetLoginChatInfoCsReq = 3982,
    CmdGetPrivateChatHistoryScRsp = 3993,
    CmdGetPrivateChatHistoryCsReq = 3956,
    CmdBatchMarkChatEmojiScRsp = 3948,
}
impl Bikadnacapb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Bikadnacapb::CmdChatTypeNone => "CmdChatTypeNone",
            Bikadnacapb::CmdGetChatFriendHistoryScRsp => "CmdGetChatFriendHistoryScRsp",
            Bikadnacapb::CmdGetChatFriendHistoryCsReq => "CmdGetChatFriendHistoryCsReq",
            Bikadnacapb::CmdSendMsgScRsp => "CmdSendMsgScRsp",
            Bikadnacapb::CmdGetChatEmojiListCsReq => "CmdGetChatEmojiListCsReq",
            Bikadnacapb::CmdSendMsgCsReq => "CmdSendMsgCsReq",
            Bikadnacapb::CmdPrivateMsgOfflineUsersScNotify => {
                "CmdPrivateMsgOfflineUsersScNotify"
            }
            Bikadnacapb::CmdGetLoginChatInfoScRsp => "CmdGetLoginChatInfoScRsp",
            Bikadnacapb::CmdRevcMsgScNotify => "CmdRevcMsgScNotify",
            Bikadnacapb::CmdGetChatEmojiListScRsp => "CmdGetChatEmojiListScRsp",
            Bikadnacapb::CmdBatchMarkChatEmojiCsReq => "CmdBatchMarkChatEmojiCsReq",
            Bikadnacapb::CmdMarkChatEmojiCsReq => "CmdMarkChatEmojiCsReq",
            Bikadnacapb::CmdMarkChatEmojiScRsp => "CmdMarkChatEmojiScRsp",
            Bikadnacapb::CmdGetLoginChatInfoCsReq => "CmdGetLoginChatInfoCsReq",
            Bikadnacapb::CmdGetPrivateChatHistoryScRsp => "CmdGetPrivateChatHistoryScRsp",
            Bikadnacapb::CmdGetPrivateChatHistoryCsReq => "CmdGetPrivateChatHistoryCsReq",
            Bikadnacapb::CmdBatchMarkChatEmojiScRsp => "CmdBatchMarkChatEmojiScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChatTypeNone" => Some(Self::CmdChatTypeNone),
            "CmdGetChatFriendHistoryScRsp" => Some(Self::CmdGetChatFriendHistoryScRsp),
            "CmdGetChatFriendHistoryCsReq" => Some(Self::CmdGetChatFriendHistoryCsReq),
            "CmdSendMsgScRsp" => Some(Self::CmdSendMsgScRsp),
            "CmdGetChatEmojiListCsReq" => Some(Self::CmdGetChatEmojiListCsReq),
            "CmdSendMsgCsReq" => Some(Self::CmdSendMsgCsReq),
            "CmdPrivateMsgOfflineUsersScNotify" => {
                Some(Self::CmdPrivateMsgOfflineUsersScNotify)
            }
            "CmdGetLoginChatInfoScRsp" => Some(Self::CmdGetLoginChatInfoScRsp),
            "CmdRevcMsgScNotify" => Some(Self::CmdRevcMsgScNotify),
            "CmdGetChatEmojiListScRsp" => Some(Self::CmdGetChatEmojiListScRsp),
            "CmdBatchMarkChatEmojiCsReq" => Some(Self::CmdBatchMarkChatEmojiCsReq),
            "CmdMarkChatEmojiCsReq" => Some(Self::CmdMarkChatEmojiCsReq),
            "CmdMarkChatEmojiScRsp" => Some(Self::CmdMarkChatEmojiScRsp),
            "CmdGetLoginChatInfoCsReq" => Some(Self::CmdGetLoginChatInfoCsReq),
            "CmdGetPrivateChatHistoryScRsp" => Some(Self::CmdGetPrivateChatHistoryScRsp),
            "CmdGetPrivateChatHistoryCsReq" => Some(Self::CmdGetPrivateChatHistoryCsReq),
            "CmdBatchMarkChatEmojiScRsp" => Some(Self::CmdBatchMarkChatEmojiScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lchfohebiak {
    CmdChessRogueTypeNone = 0,
    CmdChessRoguePickAvatarCsReq = 5446,
    CmdEnhanceChessRogueBuffCsReq = 5458,
    CmdGetChessRogueBuffEnhanceInfoScRsp = 5476,
    CmdChessRogueNousGetRogueTalentInfoScRsp = 5482,
    CmdSelectChessRogueNousSubStoryCsReq = 5427,
    CmdFinishChessRogueSubStoryScRsp = 5491,
    CmdGetChessRogueBuffEnhanceInfoCsReq = 5555,
    CmdChessRogueQuitScRsp = 5444,
    CmdChessRogueSelectBpScRsp = 5566,
    CmdChessRogueQuestFinishNotify = 5460,
    CmdChessRogueStartCsReq = 5514,
    CmdChessRogueRollDiceCsReq = 5529,
    CmdChessRogueEnterScRsp = 5421,
    CmdChessRogueCheatRollScRsp = 5499,
    CmdChessRogueReRollDiceCsReq = 5474,
    CmdChessRogueSkipTeachingLevelScRsp = 5531,
    CmdChessRogueLayerAccountInfoNotify = 5591,
    CmdChessRogueReviveAvatarScRsp = 5481,
    CmdChessRogueUpdateDicePassiveAccumulateValueScNotify = 5463,
    CmdChessRogueUpdateUnlockLevelScNotify = 5430,
    CmdGetChessRogueStoryInfoScRsp = 5462,
    CmdChessRogueMoveCellNotify = 5419,
    CmdChessRogueLeaveScRsp = 5447,
    CmdFinishChessRogueSubStoryCsReq = 5418,
    CmdChessRogueQueryBpCsReq = 5401,
    CmdChessRogueConfirmRollCsReq = 5523,
    CmdChessRogueNousEnableRogueTalentScRsp = 5576,
    CmdGetChessRogueNousStoryInfoScRsp = 5557,
    CmdChessRogueGiveUpScRsp = 5456,
    CmdChessRogueUpdateReviveInfoScNotify = 5434,
    CmdChessRogueSelectCellCsReq = 5549,
    CmdChessRogueUpdateAllowedSelectCellScNotify = 5426,
    CmdChessRogueUpdateBoardScNotify = 5518,
    CmdChessRogueNousEditDiceScRsp = 5565,
    CmdGetChessRogueNousStoryInfoCsReq = 5501,
    CmdGetChessRogueStoryAeonTalkInfoScRsp = 5544,
    CmdChessRogueConfirmRollScRsp = 5596,
    CmdFinishChessRogueNousSubStoryScRsp = 5577,
    CmdEnhanceChessRogueBuffScRsp = 5552,
    CmdSelectChessRogueNousSubStoryScRsp = 5521,
    CmdChessRogueQueryBpScRsp = 5588,
    CmdChessRogueReRollDiceScRsp = 5586,
    CmdChessRogueReviveAvatarCsReq = 5569,
    CmdGetChessRogueStoryAeonTalkInfoCsReq = 5417,
    CmdChessRogueGoAheadCsReq = 5405,
    CmdChessRogueUpdateLevelBaseInfoScNotify = 5431,
    CmdChessRogueQueryCsReq = 5493,
    CmdChessRogueEnterCellScRsp = 5433,
    CmdEnterChessRogueAeonRoomScRsp = 5589,
    CmdSyncChessRogueNousMainStoryScNotify = 5455,
    CmdChessRogueGoAheadScRsp = 5556,
    CmdChessRogueEnterNextLayerScRsp = 5492,
    CmdChessRogueChangeyAeonDimensionNotify = 5425,
    CmdChessRogueStartScRsp = 5600,
    CmdChessRogueLeaveCsReq = 5445,
    CmdFinishChessRogueNousSubStoryCsReq = 5409,
    CmdChessRogueGiveUpRollScRsp = 5489,
    CmdChessRogueUpdateAeonModifierValueScNotify = 5542,
    CmdChessRogueNousEditDiceCsReq = 5459,
    CmdChessRoguePickAvatarScRsp = 5450,
    CmdChessRogueNousDiceUpdateNotify = 5508,
    CmdChessRogueSelectCellScRsp = 5532,
    CmdChessRogueCheatRollCsReq = 5408,
    CmdGetChessRogueStoryInfoCsReq = 5497,
    CmdSyncChessRogueMainStoryFinishScNotify = 5480,
    CmdChessRogueGiveUpCsReq = 5585,
    CmdChessRogueQuitCsReq = 5506,
    CmdChessRogueSelectBpCsReq = 5486,
    CmdEnterChessRogueAeonRoomCsReq = 5520,
    CmdChessRogueEnterCsReq = 5567,
    CmdChessRogueUpdateDiceInfoScNotify = 5461,
    CmdChessRogueQueryAeonDimensionsScRsp = 5536,
    CmdChessRogueRollDiceScRsp = 5539,
    CmdSyncChessRogueNousSubStoryScNotify = 5484,
    CmdChessRogueQueryScRsp = 5507,
    CmdChessRogueQueryAeonDimensionsCsReq = 5413,
    CmdChessRogueUpdateActionPointScNotify = 5487,
    CmdChessRogueEnterNextLayerCsReq = 5568,
    CmdSelectChessRogueSubStoryScRsp = 5587,
    CmdChessRogueGiveUpRollCsReq = 5545,
    CmdSyncChessRogueNousValueScNotify = 5451,
    CmdChessRogueNousEnableRogueTalentCsReq = 5571,
    CmdChessRogueNousGetRogueTalentInfoCsReq = 5592,
    CmdChessRogueFinishCurRoomNotify = 5467,
    CmdSelectChessRogueSubStoryCsReq = 5406,
    CmdChessRogueSkipTeachingLevelCsReq = 5477,
    CmdChessRogueUpdateMoneyInfoScNotify = 5442,
    CmdChessRogueNousDiceSurfaceUnlockNotify = 5453,
    CmdChessRogueCellUpdateNotify = 5498,
    CmdChessRogueEnterCellCsReq = 5490,
}
impl Lchfohebiak {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lchfohebiak::CmdChessRogueTypeNone => "CmdChessRogueTypeNone",
            Lchfohebiak::CmdChessRoguePickAvatarCsReq => "CmdChessRoguePickAvatarCsReq",
            Lchfohebiak::CmdEnhanceChessRogueBuffCsReq => "CmdEnhanceChessRogueBuffCsReq",
            Lchfohebiak::CmdGetChessRogueBuffEnhanceInfoScRsp => {
                "CmdGetChessRogueBuffEnhanceInfoScRsp"
            }
            Lchfohebiak::CmdChessRogueNousGetRogueTalentInfoScRsp => {
                "CmdChessRogueNousGetRogueTalentInfoScRsp"
            }
            Lchfohebiak::CmdSelectChessRogueNousSubStoryCsReq => {
                "CmdSelectChessRogueNousSubStoryCsReq"
            }
            Lchfohebiak::CmdFinishChessRogueSubStoryScRsp => {
                "CmdFinishChessRogueSubStoryScRsp"
            }
            Lchfohebiak::CmdGetChessRogueBuffEnhanceInfoCsReq => {
                "CmdGetChessRogueBuffEnhanceInfoCsReq"
            }
            Lchfohebiak::CmdChessRogueQuitScRsp => "CmdChessRogueQuitScRsp",
            Lchfohebiak::CmdChessRogueSelectBpScRsp => "CmdChessRogueSelectBpScRsp",
            Lchfohebiak::CmdChessRogueQuestFinishNotify => {
                "CmdChessRogueQuestFinishNotify"
            }
            Lchfohebiak::CmdChessRogueStartCsReq => "CmdChessRogueStartCsReq",
            Lchfohebiak::CmdChessRogueRollDiceCsReq => "CmdChessRogueRollDiceCsReq",
            Lchfohebiak::CmdChessRogueEnterScRsp => "CmdChessRogueEnterScRsp",
            Lchfohebiak::CmdChessRogueCheatRollScRsp => "CmdChessRogueCheatRollScRsp",
            Lchfohebiak::CmdChessRogueReRollDiceCsReq => "CmdChessRogueReRollDiceCsReq",
            Lchfohebiak::CmdChessRogueSkipTeachingLevelScRsp => {
                "CmdChessRogueSkipTeachingLevelScRsp"
            }
            Lchfohebiak::CmdChessRogueLayerAccountInfoNotify => {
                "CmdChessRogueLayerAccountInfoNotify"
            }
            Lchfohebiak::CmdChessRogueReviveAvatarScRsp => {
                "CmdChessRogueReviveAvatarScRsp"
            }
            Lchfohebiak::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify => {
                "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify"
            }
            Lchfohebiak::CmdChessRogueUpdateUnlockLevelScNotify => {
                "CmdChessRogueUpdateUnlockLevelScNotify"
            }
            Lchfohebiak::CmdGetChessRogueStoryInfoScRsp => {
                "CmdGetChessRogueStoryInfoScRsp"
            }
            Lchfohebiak::CmdChessRogueMoveCellNotify => "CmdChessRogueMoveCellNotify",
            Lchfohebiak::CmdChessRogueLeaveScRsp => "CmdChessRogueLeaveScRsp",
            Lchfohebiak::CmdFinishChessRogueSubStoryCsReq => {
                "CmdFinishChessRogueSubStoryCsReq"
            }
            Lchfohebiak::CmdChessRogueQueryBpCsReq => "CmdChessRogueQueryBpCsReq",
            Lchfohebiak::CmdChessRogueConfirmRollCsReq => "CmdChessRogueConfirmRollCsReq",
            Lchfohebiak::CmdChessRogueNousEnableRogueTalentScRsp => {
                "CmdChessRogueNousEnableRogueTalentScRsp"
            }
            Lchfohebiak::CmdGetChessRogueNousStoryInfoScRsp => {
                "CmdGetChessRogueNousStoryInfoScRsp"
            }
            Lchfohebiak::CmdChessRogueGiveUpScRsp => "CmdChessRogueGiveUpScRsp",
            Lchfohebiak::CmdChessRogueUpdateReviveInfoScNotify => {
                "CmdChessRogueUpdateReviveInfoScNotify"
            }
            Lchfohebiak::CmdChessRogueSelectCellCsReq => "CmdChessRogueSelectCellCsReq",
            Lchfohebiak::CmdChessRogueUpdateAllowedSelectCellScNotify => {
                "CmdChessRogueUpdateAllowedSelectCellScNotify"
            }
            Lchfohebiak::CmdChessRogueUpdateBoardScNotify => {
                "CmdChessRogueUpdateBoardScNotify"
            }
            Lchfohebiak::CmdChessRogueNousEditDiceScRsp => {
                "CmdChessRogueNousEditDiceScRsp"
            }
            Lchfohebiak::CmdGetChessRogueNousStoryInfoCsReq => {
                "CmdGetChessRogueNousStoryInfoCsReq"
            }
            Lchfohebiak::CmdGetChessRogueStoryAeonTalkInfoScRsp => {
                "CmdGetChessRogueStoryAeonTalkInfoScRsp"
            }
            Lchfohebiak::CmdChessRogueConfirmRollScRsp => "CmdChessRogueConfirmRollScRsp",
            Lchfohebiak::CmdFinishChessRogueNousSubStoryScRsp => {
                "CmdFinishChessRogueNousSubStoryScRsp"
            }
            Lchfohebiak::CmdEnhanceChessRogueBuffScRsp => "CmdEnhanceChessRogueBuffScRsp",
            Lchfohebiak::CmdSelectChessRogueNousSubStoryScRsp => {
                "CmdSelectChessRogueNousSubStoryScRsp"
            }
            Lchfohebiak::CmdChessRogueQueryBpScRsp => "CmdChessRogueQueryBpScRsp",
            Lchfohebiak::CmdChessRogueReRollDiceScRsp => "CmdChessRogueReRollDiceScRsp",
            Lchfohebiak::CmdChessRogueReviveAvatarCsReq => {
                "CmdChessRogueReviveAvatarCsReq"
            }
            Lchfohebiak::CmdGetChessRogueStoryAeonTalkInfoCsReq => {
                "CmdGetChessRogueStoryAeonTalkInfoCsReq"
            }
            Lchfohebiak::CmdChessRogueGoAheadCsReq => "CmdChessRogueGoAheadCsReq",
            Lchfohebiak::CmdChessRogueUpdateLevelBaseInfoScNotify => {
                "CmdChessRogueUpdateLevelBaseInfoScNotify"
            }
            Lchfohebiak::CmdChessRogueQueryCsReq => "CmdChessRogueQueryCsReq",
            Lchfohebiak::CmdChessRogueEnterCellScRsp => "CmdChessRogueEnterCellScRsp",
            Lchfohebiak::CmdEnterChessRogueAeonRoomScRsp => {
                "CmdEnterChessRogueAeonRoomScRsp"
            }
            Lchfohebiak::CmdSyncChessRogueNousMainStoryScNotify => {
                "CmdSyncChessRogueNousMainStoryScNotify"
            }
            Lchfohebiak::CmdChessRogueGoAheadScRsp => "CmdChessRogueGoAheadScRsp",
            Lchfohebiak::CmdChessRogueEnterNextLayerScRsp => {
                "CmdChessRogueEnterNextLayerScRsp"
            }
            Lchfohebiak::CmdChessRogueChangeyAeonDimensionNotify => {
                "CmdChessRogueChangeyAeonDimensionNotify"
            }
            Lchfohebiak::CmdChessRogueStartScRsp => "CmdChessRogueStartScRsp",
            Lchfohebiak::CmdChessRogueLeaveCsReq => "CmdChessRogueLeaveCsReq",
            Lchfohebiak::CmdFinishChessRogueNousSubStoryCsReq => {
                "CmdFinishChessRogueNousSubStoryCsReq"
            }
            Lchfohebiak::CmdChessRogueGiveUpRollScRsp => "CmdChessRogueGiveUpRollScRsp",
            Lchfohebiak::CmdChessRogueUpdateAeonModifierValueScNotify => {
                "CmdChessRogueUpdateAeonModifierValueScNotify"
            }
            Lchfohebiak::CmdChessRogueNousEditDiceCsReq => {
                "CmdChessRogueNousEditDiceCsReq"
            }
            Lchfohebiak::CmdChessRoguePickAvatarScRsp => "CmdChessRoguePickAvatarScRsp",
            Lchfohebiak::CmdChessRogueNousDiceUpdateNotify => {
                "CmdChessRogueNousDiceUpdateNotify"
            }
            Lchfohebiak::CmdChessRogueSelectCellScRsp => "CmdChessRogueSelectCellScRsp",
            Lchfohebiak::CmdChessRogueCheatRollCsReq => "CmdChessRogueCheatRollCsReq",
            Lchfohebiak::CmdGetChessRogueStoryInfoCsReq => {
                "CmdGetChessRogueStoryInfoCsReq"
            }
            Lchfohebiak::CmdSyncChessRogueMainStoryFinishScNotify => {
                "CmdSyncChessRogueMainStoryFinishScNotify"
            }
            Lchfohebiak::CmdChessRogueGiveUpCsReq => "CmdChessRogueGiveUpCsReq",
            Lchfohebiak::CmdChessRogueQuitCsReq => "CmdChessRogueQuitCsReq",
            Lchfohebiak::CmdChessRogueSelectBpCsReq => "CmdChessRogueSelectBpCsReq",
            Lchfohebiak::CmdEnterChessRogueAeonRoomCsReq => {
                "CmdEnterChessRogueAeonRoomCsReq"
            }
            Lchfohebiak::CmdChessRogueEnterCsReq => "CmdChessRogueEnterCsReq",
            Lchfohebiak::CmdChessRogueUpdateDiceInfoScNotify => {
                "CmdChessRogueUpdateDiceInfoScNotify"
            }
            Lchfohebiak::CmdChessRogueQueryAeonDimensionsScRsp => {
                "CmdChessRogueQueryAeonDimensionsScRsp"
            }
            Lchfohebiak::CmdChessRogueRollDiceScRsp => "CmdChessRogueRollDiceScRsp",
            Lchfohebiak::CmdSyncChessRogueNousSubStoryScNotify => {
                "CmdSyncChessRogueNousSubStoryScNotify"
            }
            Lchfohebiak::CmdChessRogueQueryScRsp => "CmdChessRogueQueryScRsp",
            Lchfohebiak::CmdChessRogueQueryAeonDimensionsCsReq => {
                "CmdChessRogueQueryAeonDimensionsCsReq"
            }
            Lchfohebiak::CmdChessRogueUpdateActionPointScNotify => {
                "CmdChessRogueUpdateActionPointScNotify"
            }
            Lchfohebiak::CmdChessRogueEnterNextLayerCsReq => {
                "CmdChessRogueEnterNextLayerCsReq"
            }
            Lchfohebiak::CmdSelectChessRogueSubStoryScRsp => {
                "CmdSelectChessRogueSubStoryScRsp"
            }
            Lchfohebiak::CmdChessRogueGiveUpRollCsReq => "CmdChessRogueGiveUpRollCsReq",
            Lchfohebiak::CmdSyncChessRogueNousValueScNotify => {
                "CmdSyncChessRogueNousValueScNotify"
            }
            Lchfohebiak::CmdChessRogueNousEnableRogueTalentCsReq => {
                "CmdChessRogueNousEnableRogueTalentCsReq"
            }
            Lchfohebiak::CmdChessRogueNousGetRogueTalentInfoCsReq => {
                "CmdChessRogueNousGetRogueTalentInfoCsReq"
            }
            Lchfohebiak::CmdChessRogueFinishCurRoomNotify => {
                "CmdChessRogueFinishCurRoomNotify"
            }
            Lchfohebiak::CmdSelectChessRogueSubStoryCsReq => {
                "CmdSelectChessRogueSubStoryCsReq"
            }
            Lchfohebiak::CmdChessRogueSkipTeachingLevelCsReq => {
                "CmdChessRogueSkipTeachingLevelCsReq"
            }
            Lchfohebiak::CmdChessRogueUpdateMoneyInfoScNotify => {
                "CmdChessRogueUpdateMoneyInfoScNotify"
            }
            Lchfohebiak::CmdChessRogueNousDiceSurfaceUnlockNotify => {
                "CmdChessRogueNousDiceSurfaceUnlockNotify"
            }
            Lchfohebiak::CmdChessRogueCellUpdateNotify => "CmdChessRogueCellUpdateNotify",
            Lchfohebiak::CmdChessRogueEnterCellCsReq => "CmdChessRogueEnterCellCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdChessRogueTypeNone" => Some(Self::CmdChessRogueTypeNone),
            "CmdChessRoguePickAvatarCsReq" => Some(Self::CmdChessRoguePickAvatarCsReq),
            "CmdEnhanceChessRogueBuffCsReq" => Some(Self::CmdEnhanceChessRogueBuffCsReq),
            "CmdGetChessRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoScRsp)
            }
            "CmdChessRogueNousGetRogueTalentInfoScRsp" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoScRsp)
            }
            "CmdSelectChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueNousSubStoryCsReq)
            }
            "CmdFinishChessRogueSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueSubStoryScRsp)
            }
            "CmdGetChessRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetChessRogueBuffEnhanceInfoCsReq)
            }
            "CmdChessRogueQuitScRsp" => Some(Self::CmdChessRogueQuitScRsp),
            "CmdChessRogueSelectBpScRsp" => Some(Self::CmdChessRogueSelectBpScRsp),
            "CmdChessRogueQuestFinishNotify" => {
                Some(Self::CmdChessRogueQuestFinishNotify)
            }
            "CmdChessRogueStartCsReq" => Some(Self::CmdChessRogueStartCsReq),
            "CmdChessRogueRollDiceCsReq" => Some(Self::CmdChessRogueRollDiceCsReq),
            "CmdChessRogueEnterScRsp" => Some(Self::CmdChessRogueEnterScRsp),
            "CmdChessRogueCheatRollScRsp" => Some(Self::CmdChessRogueCheatRollScRsp),
            "CmdChessRogueReRollDiceCsReq" => Some(Self::CmdChessRogueReRollDiceCsReq),
            "CmdChessRogueSkipTeachingLevelScRsp" => {
                Some(Self::CmdChessRogueSkipTeachingLevelScRsp)
            }
            "CmdChessRogueLayerAccountInfoNotify" => {
                Some(Self::CmdChessRogueLayerAccountInfoNotify)
            }
            "CmdChessRogueReviveAvatarScRsp" => {
                Some(Self::CmdChessRogueReviveAvatarScRsp)
            }
            "CmdChessRogueUpdateDicePassiveAccumulateValueScNotify" => {
                Some(Self::CmdChessRogueUpdateDicePassiveAccumulateValueScNotify)
            }
            "CmdChessRogueUpdateUnlockLevelScNotify" => {
                Some(Self::CmdChessRogueUpdateUnlockLevelScNotify)
            }
            "CmdGetChessRogueStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryInfoScRsp)
            }
            "CmdChessRogueMoveCellNotify" => Some(Self::CmdChessRogueMoveCellNotify),
            "CmdChessRogueLeaveScRsp" => Some(Self::CmdChessRogueLeaveScRsp),
            "CmdFinishChessRogueSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueSubStoryCsReq)
            }
            "CmdChessRogueQueryBpCsReq" => Some(Self::CmdChessRogueQueryBpCsReq),
            "CmdChessRogueConfirmRollCsReq" => Some(Self::CmdChessRogueConfirmRollCsReq),
            "CmdChessRogueNousEnableRogueTalentScRsp" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentScRsp)
            }
            "CmdGetChessRogueNousStoryInfoScRsp" => {
                Some(Self::CmdGetChessRogueNousStoryInfoScRsp)
            }
            "CmdChessRogueGiveUpScRsp" => Some(Self::CmdChessRogueGiveUpScRsp),
            "CmdChessRogueUpdateReviveInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateReviveInfoScNotify)
            }
            "CmdChessRogueSelectCellCsReq" => Some(Self::CmdChessRogueSelectCellCsReq),
            "CmdChessRogueUpdateAllowedSelectCellScNotify" => {
                Some(Self::CmdChessRogueUpdateAllowedSelectCellScNotify)
            }
            "CmdChessRogueUpdateBoardScNotify" => {
                Some(Self::CmdChessRogueUpdateBoardScNotify)
            }
            "CmdChessRogueNousEditDiceScRsp" => {
                Some(Self::CmdChessRogueNousEditDiceScRsp)
            }
            "CmdGetChessRogueNousStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueNousStoryInfoCsReq)
            }
            "CmdGetChessRogueStoryAeonTalkInfoScRsp" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoScRsp)
            }
            "CmdChessRogueConfirmRollScRsp" => Some(Self::CmdChessRogueConfirmRollScRsp),
            "CmdFinishChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdFinishChessRogueNousSubStoryScRsp)
            }
            "CmdEnhanceChessRogueBuffScRsp" => Some(Self::CmdEnhanceChessRogueBuffScRsp),
            "CmdSelectChessRogueNousSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueNousSubStoryScRsp)
            }
            "CmdChessRogueQueryBpScRsp" => Some(Self::CmdChessRogueQueryBpScRsp),
            "CmdChessRogueReRollDiceScRsp" => Some(Self::CmdChessRogueReRollDiceScRsp),
            "CmdChessRogueReviveAvatarCsReq" => {
                Some(Self::CmdChessRogueReviveAvatarCsReq)
            }
            "CmdGetChessRogueStoryAeonTalkInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryAeonTalkInfoCsReq)
            }
            "CmdChessRogueGoAheadCsReq" => Some(Self::CmdChessRogueGoAheadCsReq),
            "CmdChessRogueUpdateLevelBaseInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateLevelBaseInfoScNotify)
            }
            "CmdChessRogueQueryCsReq" => Some(Self::CmdChessRogueQueryCsReq),
            "CmdChessRogueEnterCellScRsp" => Some(Self::CmdChessRogueEnterCellScRsp),
            "CmdEnterChessRogueAeonRoomScRsp" => {
                Some(Self::CmdEnterChessRogueAeonRoomScRsp)
            }
            "CmdSyncChessRogueNousMainStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousMainStoryScNotify)
            }
            "CmdChessRogueGoAheadScRsp" => Some(Self::CmdChessRogueGoAheadScRsp),
            "CmdChessRogueEnterNextLayerScRsp" => {
                Some(Self::CmdChessRogueEnterNextLayerScRsp)
            }
            "CmdChessRogueChangeyAeonDimensionNotify" => {
                Some(Self::CmdChessRogueChangeyAeonDimensionNotify)
            }
            "CmdChessRogueStartScRsp" => Some(Self::CmdChessRogueStartScRsp),
            "CmdChessRogueLeaveCsReq" => Some(Self::CmdChessRogueLeaveCsReq),
            "CmdFinishChessRogueNousSubStoryCsReq" => {
                Some(Self::CmdFinishChessRogueNousSubStoryCsReq)
            }
            "CmdChessRogueGiveUpRollScRsp" => Some(Self::CmdChessRogueGiveUpRollScRsp),
            "CmdChessRogueUpdateAeonModifierValueScNotify" => {
                Some(Self::CmdChessRogueUpdateAeonModifierValueScNotify)
            }
            "CmdChessRogueNousEditDiceCsReq" => {
                Some(Self::CmdChessRogueNousEditDiceCsReq)
            }
            "CmdChessRoguePickAvatarScRsp" => Some(Self::CmdChessRoguePickAvatarScRsp),
            "CmdChessRogueNousDiceUpdateNotify" => {
                Some(Self::CmdChessRogueNousDiceUpdateNotify)
            }
            "CmdChessRogueSelectCellScRsp" => Some(Self::CmdChessRogueSelectCellScRsp),
            "CmdChessRogueCheatRollCsReq" => Some(Self::CmdChessRogueCheatRollCsReq),
            "CmdGetChessRogueStoryInfoCsReq" => {
                Some(Self::CmdGetChessRogueStoryInfoCsReq)
            }
            "CmdSyncChessRogueMainStoryFinishScNotify" => {
                Some(Self::CmdSyncChessRogueMainStoryFinishScNotify)
            }
            "CmdChessRogueGiveUpCsReq" => Some(Self::CmdChessRogueGiveUpCsReq),
            "CmdChessRogueQuitCsReq" => Some(Self::CmdChessRogueQuitCsReq),
            "CmdChessRogueSelectBpCsReq" => Some(Self::CmdChessRogueSelectBpCsReq),
            "CmdEnterChessRogueAeonRoomCsReq" => {
                Some(Self::CmdEnterChessRogueAeonRoomCsReq)
            }
            "CmdChessRogueEnterCsReq" => Some(Self::CmdChessRogueEnterCsReq),
            "CmdChessRogueUpdateDiceInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateDiceInfoScNotify)
            }
            "CmdChessRogueQueryAeonDimensionsScRsp" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsScRsp)
            }
            "CmdChessRogueRollDiceScRsp" => Some(Self::CmdChessRogueRollDiceScRsp),
            "CmdSyncChessRogueNousSubStoryScNotify" => {
                Some(Self::CmdSyncChessRogueNousSubStoryScNotify)
            }
            "CmdChessRogueQueryScRsp" => Some(Self::CmdChessRogueQueryScRsp),
            "CmdChessRogueQueryAeonDimensionsCsReq" => {
                Some(Self::CmdChessRogueQueryAeonDimensionsCsReq)
            }
            "CmdChessRogueUpdateActionPointScNotify" => {
                Some(Self::CmdChessRogueUpdateActionPointScNotify)
            }
            "CmdChessRogueEnterNextLayerCsReq" => {
                Some(Self::CmdChessRogueEnterNextLayerCsReq)
            }
            "CmdSelectChessRogueSubStoryScRsp" => {
                Some(Self::CmdSelectChessRogueSubStoryScRsp)
            }
            "CmdChessRogueGiveUpRollCsReq" => Some(Self::CmdChessRogueGiveUpRollCsReq),
            "CmdSyncChessRogueNousValueScNotify" => {
                Some(Self::CmdSyncChessRogueNousValueScNotify)
            }
            "CmdChessRogueNousEnableRogueTalentCsReq" => {
                Some(Self::CmdChessRogueNousEnableRogueTalentCsReq)
            }
            "CmdChessRogueNousGetRogueTalentInfoCsReq" => {
                Some(Self::CmdChessRogueNousGetRogueTalentInfoCsReq)
            }
            "CmdChessRogueFinishCurRoomNotify" => {
                Some(Self::CmdChessRogueFinishCurRoomNotify)
            }
            "CmdSelectChessRogueSubStoryCsReq" => {
                Some(Self::CmdSelectChessRogueSubStoryCsReq)
            }
            "CmdChessRogueSkipTeachingLevelCsReq" => {
                Some(Self::CmdChessRogueSkipTeachingLevelCsReq)
            }
            "CmdChessRogueUpdateMoneyInfoScNotify" => {
                Some(Self::CmdChessRogueUpdateMoneyInfoScNotify)
            }
            "CmdChessRogueNousDiceSurfaceUnlockNotify" => {
                Some(Self::CmdChessRogueNousDiceSurfaceUnlockNotify)
            }
            "CmdChessRogueCellUpdateNotify" => Some(Self::CmdChessRogueCellUpdateNotify),
            "CmdChessRogueEnterCellCsReq" => Some(Self::CmdChessRogueEnterCellCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ffcjbkjenjp {
    ChessRogueDiceIdle = 0,
    ChessRogueDiceRolled = 1,
    ChessRogueDiceConfirmed = 2,
    ChessRogueDiceGiveup = 3,
}
impl Ffcjbkjenjp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ffcjbkjenjp::ChessRogueDiceIdle => "CHESS_ROGUE_DICE_IDLE",
            Ffcjbkjenjp::ChessRogueDiceRolled => "CHESS_ROGUE_DICE_ROLLED",
            Ffcjbkjenjp::ChessRogueDiceConfirmed => "CHESS_ROGUE_DICE_CONFIRMED",
            Ffcjbkjenjp::ChessRogueDiceGiveup => "CHESS_ROGUE_DICE_GIVEUP",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_IDLE" => Some(Self::ChessRogueDiceIdle),
            "CHESS_ROGUE_DICE_ROLLED" => Some(Self::ChessRogueDiceRolled),
            "CHESS_ROGUE_DICE_CONFIRMED" => Some(Self::ChessRogueDiceConfirmed),
            "CHESS_ROGUE_DICE_GIVEUP" => Some(Self::ChessRogueDiceGiveup),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Omlpnkhdeog {
    ChessRogueDiceFixed = 0,
    ChessRogueDiceEditable = 1,
}
impl Omlpnkhdeog {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Omlpnkhdeog::ChessRogueDiceFixed => "CHESS_ROGUE_DICE_FIXED",
            Omlpnkhdeog::ChessRogueDiceEditable => "CHESS_ROGUE_DICE_EDITABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_FIXED" => Some(Self::ChessRogueDiceFixed),
            "CHESS_ROGUE_DICE_EDITABLE" => Some(Self::ChessRogueDiceEditable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mknnebnfbej {
    Idle = 0,
    Selected = 1,
    Processing = 2,
    Finish = 3,
}
impl Mknnebnfbej {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mknnebnfbej::Idle => "IDLE",
            Mknnebnfbej::Selected => "SELECTED",
            Mknnebnfbej::Processing => "PROCESSING",
            Mknnebnfbej::Finish => "FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "IDLE" => Some(Self::Idle),
            "SELECTED" => Some(Self::Selected),
            "PROCESSING" => Some(Self::Processing),
            "FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Idpjmbnedeg {
    ChessRogueCellSpecialTypeNone = 0,
    ChessRogueCellSpecialTypeLocked = 1,
    ChessRogueCellSpecialTypeReplicate = 2,
    ChessRogueCellSpecialTypeProtected = 3,
    ChessRogueCellSpecialTypeSeed = 4,
    ChessRogueCellSpecialTypeStamp = 5,
}
impl Idpjmbnedeg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Idpjmbnedeg::ChessRogueCellSpecialTypeNone => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE"
            }
            Idpjmbnedeg::ChessRogueCellSpecialTypeLocked => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED"
            }
            Idpjmbnedeg::ChessRogueCellSpecialTypeReplicate => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE"
            }
            Idpjmbnedeg::ChessRogueCellSpecialTypeProtected => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED"
            }
            Idpjmbnedeg::ChessRogueCellSpecialTypeSeed => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED"
            }
            Idpjmbnedeg::ChessRogueCellSpecialTypeStamp => {
                "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_NONE" => {
                Some(Self::ChessRogueCellSpecialTypeNone)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_LOCKED" => {
                Some(Self::ChessRogueCellSpecialTypeLocked)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_REPLICATE" => {
                Some(Self::ChessRogueCellSpecialTypeReplicate)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_PROTECTED" => {
                Some(Self::ChessRogueCellSpecialTypeProtected)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_SEED" => {
                Some(Self::ChessRogueCellSpecialTypeSeed)
            }
            "CHESS_ROGUE_CELL_SPECIAL_TYPE_STAMP" => {
                Some(Self::ChessRogueCellSpecialTypeStamp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kebkmnaehol {
    ChessRogueLevelIdle = 0,
    ChessRogueLevelProcessing = 1,
    ChessRogueLevelPending = 2,
    ChessRogueLevelFinish = 3,
    ChessRogueLevelFailed = 4,
    ChessRogueLevelForceFinish = 5,
}
impl Kebkmnaehol {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kebkmnaehol::ChessRogueLevelIdle => "CHESS_ROGUE_LEVEL_IDLE",
            Kebkmnaehol::ChessRogueLevelProcessing => "CHESS_ROGUE_LEVEL_PROCESSING",
            Kebkmnaehol::ChessRogueLevelPending => "CHESS_ROGUE_LEVEL_PENDING",
            Kebkmnaehol::ChessRogueLevelFinish => "CHESS_ROGUE_LEVEL_FINISH",
            Kebkmnaehol::ChessRogueLevelFailed => "CHESS_ROGUE_LEVEL_FAILED",
            Kebkmnaehol::ChessRogueLevelForceFinish => "CHESS_ROGUE_LEVEL_FORCE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_LEVEL_IDLE" => Some(Self::ChessRogueLevelIdle),
            "CHESS_ROGUE_LEVEL_PROCESSING" => Some(Self::ChessRogueLevelProcessing),
            "CHESS_ROGUE_LEVEL_PENDING" => Some(Self::ChessRogueLevelPending),
            "CHESS_ROGUE_LEVEL_FINISH" => Some(Self::ChessRogueLevelFinish),
            "CHESS_ROGUE_LEVEL_FAILED" => Some(Self::ChessRogueLevelFailed),
            "CHESS_ROGUE_LEVEL_FORCE_FINISH" => Some(Self::ChessRogueLevelForceFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pkkjdbmkgck {
    ChessRogueAccountByNone = 0,
    ChessRogueAccountByNormalFinish = 1,
    ChessRogueAccountByNormalQuit = 2,
    ChessRogueAccountByDialog = 3,
    ChessRogueAccountByFailed = 4,
    ChessRogueAccountByCustomOp = 5,
}
impl Pkkjdbmkgck {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pkkjdbmkgck::ChessRogueAccountByNone => "CHESS_ROGUE_ACCOUNT_BY_NONE",
            Pkkjdbmkgck::ChessRogueAccountByNormalFinish => {
                "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH"
            }
            Pkkjdbmkgck::ChessRogueAccountByNormalQuit => {
                "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT"
            }
            Pkkjdbmkgck::ChessRogueAccountByDialog => "CHESS_ROGUE_ACCOUNT_BY_DIALOG",
            Pkkjdbmkgck::ChessRogueAccountByFailed => "CHESS_ROGUE_ACCOUNT_BY_FAILED",
            Pkkjdbmkgck::ChessRogueAccountByCustomOp => {
                "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_ACCOUNT_BY_NONE" => Some(Self::ChessRogueAccountByNone),
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_FINISH" => {
                Some(Self::ChessRogueAccountByNormalFinish)
            }
            "CHESS_ROGUE_ACCOUNT_BY_NORMAL_QUIT" => {
                Some(Self::ChessRogueAccountByNormalQuit)
            }
            "CHESS_ROGUE_ACCOUNT_BY_DIALOG" => Some(Self::ChessRogueAccountByDialog),
            "CHESS_ROGUE_ACCOUNT_BY_FAILED" => Some(Self::ChessRogueAccountByFailed),
            "CHESS_ROGUE_ACCOUNT_BY_CUSTOM_OP" => Some(Self::ChessRogueAccountByCustomOp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eclempbnebp {
    ChessRogueBuffSourceTypeNone = 0,
    ChessRogueBuffSourceTypeSelect = 1,
    ChessRogueBuffSourceTypeEnhance = 2,
    ChessRogueBuffSourceTypeMiracle = 3,
    ChessRogueBuffSourceTypeDialogue = 4,
    ChessRogueBuffSourceTypeBonus = 5,
    ChessRogueBuffSourceTypeShop = 6,
    ChessRogueBuffSourceTypeDice = 7,
    ChessRogueBuffSourceTypeAeon = 8,
    ChessRogueBuffSourceTypeMazeSkill = 9,
    ChessRogueBuffSourceTypeLevelMechanism = 10,
}
impl Eclempbnebp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Eclempbnebp::ChessRogueBuffSourceTypeNone => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeSelect => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeEnhance => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeMiracle => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeDialogue => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeBonus => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeShop => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeDice => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeAeon => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeMazeSkill => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL"
            }
            Eclempbnebp::ChessRogueBuffSourceTypeLevelMechanism => {
                "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueBuffSourceTypeNone)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueBuffSourceTypeSelect)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => {
                Some(Self::ChessRogueBuffSourceTypeEnhance)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => {
                Some(Self::ChessRogueBuffSourceTypeMiracle)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueBuffSourceTypeDialogue)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueBuffSourceTypeBonus)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueBuffSourceTypeShop)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_DICE" => {
                Some(Self::ChessRogueBuffSourceTypeDice)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_AEON" => {
                Some(Self::ChessRogueBuffSourceTypeAeon)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueBuffSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueBuffSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lemalifjabi {
    ChessRogueMiracleSourceTypeNone = 0,
    ChessRogueMiracleSourceTypeSelect = 1,
    ChessRogueMiracleSourceTypeDialogue = 2,
    ChessRogueMiracleSourceTypeBonus = 3,
    ChessRogueMiracleSourceTypeUse = 4,
    ChessRogueMiracleSourceTypeReset = 5,
    ChessRogueMiracleSourceTypeReplace = 6,
    ChessRogueMiracleSourceTypeTrade = 7,
    ChessRogueMiracleSourceTypeGet = 8,
    ChessRogueMiracleSourceTypeShop = 9,
    ChessRogueMiracleSourceTypeMazeSkill = 10,
    ChessRogueMiracleSourceTypeLevelMechanism = 11,
}
impl Lemalifjabi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lemalifjabi::ChessRogueMiracleSourceTypeNone => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeSelect => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeDialogue => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeBonus => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeUse => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeReset => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeReplace => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeTrade => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeGet => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeShop => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeMazeSkill => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Lemalifjabi::ChessRogueMiracleSourceTypeLevelMechanism => {
                "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueMiracleSourceTypeNone)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::ChessRogueMiracleSourceTypeSelect)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::ChessRogueMiracleSourceTypeDialogue)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => {
                Some(Self::ChessRogueMiracleSourceTypeBonus)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_USE" => {
                Some(Self::ChessRogueMiracleSourceTypeUse)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_RESET" => {
                Some(Self::ChessRogueMiracleSourceTypeReset)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::ChessRogueMiracleSourceTypeReplace)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => {
                Some(Self::ChessRogueMiracleSourceTypeTrade)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_GET" => {
                Some(Self::ChessRogueMiracleSourceTypeGet)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => {
                Some(Self::ChessRogueMiracleSourceTypeShop)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::ChessRogueMiracleSourceTypeMazeSkill)
            }
            "CHESS_ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::ChessRogueMiracleSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mmfnjjmglfd {
    ChessRogueUpdateLevelStatusByNone = 0,
    ChessRogueUpdateLevelStatusByDialog = 1,
}
impl Mmfnjjmglfd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mmfnjjmglfd::ChessRogueUpdateLevelStatusByNone => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE"
            }
            Mmfnjjmglfd::ChessRogueUpdateLevelStatusByDialog => {
                "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_NONE" => {
                Some(Self::ChessRogueUpdateLevelStatusByNone)
            }
            "CHESS_ROGUE_UPDATE_LEVEL_STATUS_BY_DIALOG" => {
                Some(Self::ChessRogueUpdateLevelStatusByDialog)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Alapdfpdlno {
    ChessRogueCellUpdateReasonNone = 0,
    ChessRogueCellUpdateReasonModifier = 1,
}
impl Alapdfpdlno {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Alapdfpdlno::ChessRogueCellUpdateReasonNone => {
                "CHESS_ROGUE_CELL_UPDATE_REASON_NONE"
            }
            Alapdfpdlno::ChessRogueCellUpdateReasonModifier => {
                "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_CELL_UPDATE_REASON_NONE" => {
                Some(Self::ChessRogueCellUpdateReasonNone)
            }
            "CHESS_ROGUE_CELL_UPDATE_REASON_MODIFIER" => {
                Some(Self::ChessRogueCellUpdateReasonModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hgnglmloloa {
    ChessRogueAeonTypeNone = 0,
    ChessRogueAeonTypeKnight = 1,
    ChessRogueAeonTypeMemory = 2,
    ChessRogueAeonTypeWarlock = 3,
    ChessRogueAeonTypePriest = 4,
    ChessRogueAeonTypeRogue = 5,
    ChessRogueAeonTypeWarrior = 6,
    ChessRogueAeonTypeHappy = 7,
    ChessRogueAeonTypeBreed = 8,
}
impl Hgnglmloloa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hgnglmloloa::ChessRogueAeonTypeNone => "CHESS_ROGUE_AEON_TYPE_NONE",
            Hgnglmloloa::ChessRogueAeonTypeKnight => "CHESS_ROGUE_AEON_TYPE_KNIGHT",
            Hgnglmloloa::ChessRogueAeonTypeMemory => "CHESS_ROGUE_AEON_TYPE_MEMORY",
            Hgnglmloloa::ChessRogueAeonTypeWarlock => "CHESS_ROGUE_AEON_TYPE_WARLOCK",
            Hgnglmloloa::ChessRogueAeonTypePriest => "CHESS_ROGUE_AEON_TYPE_PRIEST",
            Hgnglmloloa::ChessRogueAeonTypeRogue => "CHESS_ROGUE_AEON_TYPE_ROGUE",
            Hgnglmloloa::ChessRogueAeonTypeWarrior => "CHESS_ROGUE_AEON_TYPE_WARRIOR",
            Hgnglmloloa::ChessRogueAeonTypeHappy => "CHESS_ROGUE_AEON_TYPE_HAPPY",
            Hgnglmloloa::ChessRogueAeonTypeBreed => "CHESS_ROGUE_AEON_TYPE_BREED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_AEON_TYPE_NONE" => Some(Self::ChessRogueAeonTypeNone),
            "CHESS_ROGUE_AEON_TYPE_KNIGHT" => Some(Self::ChessRogueAeonTypeKnight),
            "CHESS_ROGUE_AEON_TYPE_MEMORY" => Some(Self::ChessRogueAeonTypeMemory),
            "CHESS_ROGUE_AEON_TYPE_WARLOCK" => Some(Self::ChessRogueAeonTypeWarlock),
            "CHESS_ROGUE_AEON_TYPE_PRIEST" => Some(Self::ChessRogueAeonTypePriest),
            "CHESS_ROGUE_AEON_TYPE_ROGUE" => Some(Self::ChessRogueAeonTypeRogue),
            "CHESS_ROGUE_AEON_TYPE_WARRIOR" => Some(Self::ChessRogueAeonTypeWarrior),
            "CHESS_ROGUE_AEON_TYPE_HAPPY" => Some(Self::ChessRogueAeonTypeHappy),
            "CHESS_ROGUE_AEON_TYPE_BREED" => Some(Self::ChessRogueAeonTypeBreed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Homhlopfphc {
    ChessRogueDiceSourceTypeNone = 0,
    ChessRogueDiceSourceTypeNormal = 1,
    ChessRogueDiceSourceTypeRepeat = 2,
    ChessRogueDiceSourceTypeCheat = 3,
}
impl Homhlopfphc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Homhlopfphc::ChessRogueDiceSourceTypeNone => {
                "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE"
            }
            Homhlopfphc::ChessRogueDiceSourceTypeNormal => {
                "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL"
            }
            Homhlopfphc::ChessRogueDiceSourceTypeRepeat => {
                "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT"
            }
            Homhlopfphc::ChessRogueDiceSourceTypeCheat => {
                "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NONE" => {
                Some(Self::ChessRogueDiceSourceTypeNone)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_NORMAL" => {
                Some(Self::ChessRogueDiceSourceTypeNormal)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_REPEAT" => {
                Some(Self::ChessRogueDiceSourceTypeRepeat)
            }
            "CHESS_ROGUE_DICE_SOURCE_TYPE_CHEAT" => {
                Some(Self::ChessRogueDiceSourceTypeCheat)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Emeefgmahof {
    ChessRogueNousMainStoryStatusNone = 0,
    ChessRogueNousMainStoryStatusUnlock = 1,
    ChessRogueNousMainStoryStatusFinish = 2,
    ChessRogueNousMainStoryStatusCanTrigger = 3,
}
impl Emeefgmahof {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Emeefgmahof::ChessRogueNousMainStoryStatusNone => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE"
            }
            Emeefgmahof::ChessRogueNousMainStoryStatusUnlock => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK"
            }
            Emeefgmahof::ChessRogueNousMainStoryStatusFinish => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH"
            }
            Emeefgmahof::ChessRogueNousMainStoryStatusCanTrigger => {
                "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_NONE" => {
                Some(Self::ChessRogueNousMainStoryStatusNone)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_UNLOCK" => {
                Some(Self::ChessRogueNousMainStoryStatusUnlock)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_FINISH" => {
                Some(Self::ChessRogueNousMainStoryStatusFinish)
            }
            "CHESS_ROGUE_NOUS_MAIN_STORY_STATUS_CAN_TRIGGER" => {
                Some(Self::ChessRogueNousMainStoryStatusCanTrigger)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cieanjnnbbg {
    None = 0,
    PhaseOne = 1,
    PhaseTwo = 2,
}
impl Cieanjnnbbg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Cieanjnnbbg::None => "NONE",
            Cieanjnnbbg::PhaseOne => "PHASE_ONE",
            Cieanjnnbbg::PhaseTwo => "PHASE_TWO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "PHASE_ONE" => Some(Self::PhaseOne),
            "PHASE_TWO" => Some(Self::PhaseTwo),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pheokcclifc {
    CmdClockParkTypeNone = 0,
    CmdClockParkHandleWaitOperationScRsp = 7245,
    CmdClockParkQuitScriptCsReq = 7206,
    CmdClockParkQuitScriptScRsp = 7212,
    CmdClockParkStartScriptCsReq = 7223,
    CmdClockParkGetOngoingScriptInfoCsReq = 7234,
    CmdClockParkGetInfoScRsp = 7224,
    CmdClockParkUnlockTalentScRsp = 7208,
    CmdClockParkFinishScriptScNotify = 7225,
    CmdClockParkBattleEndScNotify = 7248,
    CmdClockParkGetInfoCsReq = 7207,
    CmdClockParkUseBuffScRsp = 7235,
    CmdClockParkHandleWaitOperationCsReq = 7236,
    CmdClockParkStartScriptScRsp = 7204,
    CmdClockParkGetOngoingScriptInfoScRsp = 7220,
    CmdClockParkUnlockTalentCsReq = 7211,
    CmdClockParkUseBuffCsReq = 7203,
}
impl Pheokcclifc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pheokcclifc::CmdClockParkTypeNone => "CmdClockParkTypeNone",
            Pheokcclifc::CmdClockParkHandleWaitOperationScRsp => {
                "CmdClockParkHandleWaitOperationScRsp"
            }
            Pheokcclifc::CmdClockParkQuitScriptCsReq => "CmdClockParkQuitScriptCsReq",
            Pheokcclifc::CmdClockParkQuitScriptScRsp => "CmdClockParkQuitScriptScRsp",
            Pheokcclifc::CmdClockParkStartScriptCsReq => "CmdClockParkStartScriptCsReq",
            Pheokcclifc::CmdClockParkGetOngoingScriptInfoCsReq => {
                "CmdClockParkGetOngoingScriptInfoCsReq"
            }
            Pheokcclifc::CmdClockParkGetInfoScRsp => "CmdClockParkGetInfoScRsp",
            Pheokcclifc::CmdClockParkUnlockTalentScRsp => "CmdClockParkUnlockTalentScRsp",
            Pheokcclifc::CmdClockParkFinishScriptScNotify => {
                "CmdClockParkFinishScriptScNotify"
            }
            Pheokcclifc::CmdClockParkBattleEndScNotify => "CmdClockParkBattleEndScNotify",
            Pheokcclifc::CmdClockParkGetInfoCsReq => "CmdClockParkGetInfoCsReq",
            Pheokcclifc::CmdClockParkUseBuffScRsp => "CmdClockParkUseBuffScRsp",
            Pheokcclifc::CmdClockParkHandleWaitOperationCsReq => {
                "CmdClockParkHandleWaitOperationCsReq"
            }
            Pheokcclifc::CmdClockParkStartScriptScRsp => "CmdClockParkStartScriptScRsp",
            Pheokcclifc::CmdClockParkGetOngoingScriptInfoScRsp => {
                "CmdClockParkGetOngoingScriptInfoScRsp"
            }
            Pheokcclifc::CmdClockParkUnlockTalentCsReq => "CmdClockParkUnlockTalentCsReq",
            Pheokcclifc::CmdClockParkUseBuffCsReq => "CmdClockParkUseBuffCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdClockParkTypeNone" => Some(Self::CmdClockParkTypeNone),
            "CmdClockParkHandleWaitOperationScRsp" => {
                Some(Self::CmdClockParkHandleWaitOperationScRsp)
            }
            "CmdClockParkQuitScriptCsReq" => Some(Self::CmdClockParkQuitScriptCsReq),
            "CmdClockParkQuitScriptScRsp" => Some(Self::CmdClockParkQuitScriptScRsp),
            "CmdClockParkStartScriptCsReq" => Some(Self::CmdClockParkStartScriptCsReq),
            "CmdClockParkGetOngoingScriptInfoCsReq" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoCsReq)
            }
            "CmdClockParkGetInfoScRsp" => Some(Self::CmdClockParkGetInfoScRsp),
            "CmdClockParkUnlockTalentScRsp" => Some(Self::CmdClockParkUnlockTalentScRsp),
            "CmdClockParkFinishScriptScNotify" => {
                Some(Self::CmdClockParkFinishScriptScNotify)
            }
            "CmdClockParkBattleEndScNotify" => Some(Self::CmdClockParkBattleEndScNotify),
            "CmdClockParkGetInfoCsReq" => Some(Self::CmdClockParkGetInfoCsReq),
            "CmdClockParkUseBuffScRsp" => Some(Self::CmdClockParkUseBuffScRsp),
            "CmdClockParkHandleWaitOperationCsReq" => {
                Some(Self::CmdClockParkHandleWaitOperationCsReq)
            }
            "CmdClockParkStartScriptScRsp" => Some(Self::CmdClockParkStartScriptScRsp),
            "CmdClockParkGetOngoingScriptInfoScRsp" => {
                Some(Self::CmdClockParkGetOngoingScriptInfoScRsp)
            }
            "CmdClockParkUnlockTalentCsReq" => Some(Self::CmdClockParkUnlockTalentCsReq),
            "CmdClockParkUseBuffCsReq" => Some(Self::CmdClockParkUseBuffCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jfenpgffadc {
    ClockParkPlayNone = 0,
    ClockParkPlayNormalDeath = 1,
    ClockParkPlayNormalPass = 2,
    ClockParkPlayFinishScript = 5,
}
impl Jfenpgffadc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jfenpgffadc::ClockParkPlayNone => "CLOCK_PARK_PLAY_NONE",
            Jfenpgffadc::ClockParkPlayNormalDeath => "CLOCK_PARK_PLAY_NORMAL_DEATH",
            Jfenpgffadc::ClockParkPlayNormalPass => "CLOCK_PARK_PLAY_NORMAL_PASS",
            Jfenpgffadc::ClockParkPlayFinishScript => "CLOCK_PARK_PLAY_FINISH_SCRIPT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLOCK_PARK_PLAY_NONE" => Some(Self::ClockParkPlayNone),
            "CLOCK_PARK_PLAY_NORMAL_DEATH" => Some(Self::ClockParkPlayNormalDeath),
            "CLOCK_PARK_PLAY_NORMAL_PASS" => Some(Self::ClockParkPlayNormalPass),
            "CLOCK_PARK_PLAY_FINISH_SCRIPT" => Some(Self::ClockParkPlayFinishScript),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MissionStatus {
    MissionNone = 0,
    MissionDoing = 1,
    MissionFinish = 2,
    MissionPrepared = 3,
}
impl MissionStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MissionStatus::MissionNone => "MISSION_NONE",
            MissionStatus::MissionDoing => "MISSION_DOING",
            MissionStatus::MissionFinish => "MISSION_FINISH",
            MissionStatus::MissionPrepared => "MISSION_PREPARED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_NONE" => Some(Self::MissionNone),
            "MISSION_DOING" => Some(Self::MissionDoing),
            "MISSION_FINISH" => Some(Self::MissionFinish),
            "MISSION_PREPARED" => Some(Self::MissionPrepared),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jnmfgfjpeim {
    MessageSectionNone = 0,
    MessageSectionDoing = 1,
    MessageSectionFinish = 2,
    MessageSectionFrozen = 3,
}
impl Jnmfgfjpeim {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jnmfgfjpeim::MessageSectionNone => "MESSAGE_SECTION_NONE",
            Jnmfgfjpeim::MessageSectionDoing => "MESSAGE_SECTION_DOING",
            Jnmfgfjpeim::MessageSectionFinish => "MESSAGE_SECTION_FINISH",
            Jnmfgfjpeim::MessageSectionFrozen => "MESSAGE_SECTION_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_SECTION_NONE" => Some(Self::MessageSectionNone),
            "MESSAGE_SECTION_DOING" => Some(Self::MessageSectionDoing),
            "MESSAGE_SECTION_FINISH" => Some(Self::MessageSectionFinish),
            "MESSAGE_SECTION_FROZEN" => Some(Self::MessageSectionFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pbcofiploko {
    MessageGroupNone = 0,
    MessageGroupDoing = 1,
    MessageGroupFinish = 2,
    MessageGroupFrozen = 3,
}
impl Pbcofiploko {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pbcofiploko::MessageGroupNone => "MESSAGE_GROUP_NONE",
            Pbcofiploko::MessageGroupDoing => "MESSAGE_GROUP_DOING",
            Pbcofiploko::MessageGroupFinish => "MESSAGE_GROUP_FINISH",
            Pbcofiploko::MessageGroupFrozen => "MESSAGE_GROUP_FROZEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MESSAGE_GROUP_NONE" => Some(Self::MessageGroupNone),
            "MESSAGE_GROUP_DOING" => Some(Self::MessageGroupDoing),
            "MESSAGE_GROUP_FINISH" => Some(Self::MessageGroupFinish),
            "MESSAGE_GROUP_FROZEN" => Some(Self::MessageGroupFrozen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Okfachfdjei {
    BattleRecordNone = 0,
    BattleRecordChallenge = 1,
    BattleRecordRogue = 2,
}
impl Okfachfdjei {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Okfachfdjei::BattleRecordNone => "BATTLE_RECORD_NONE",
            Okfachfdjei::BattleRecordChallenge => "BATTLE_RECORD_CHALLENGE",
            Okfachfdjei::BattleRecordRogue => "BATTLE_RECORD_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BATTLE_RECORD_NONE" => Some(Self::BattleRecordNone),
            "BATTLE_RECORD_CHALLENGE" => Some(Self::BattleRecordChallenge),
            "BATTLE_RECORD_ROGUE" => Some(Self::BattleRecordRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Camlhbegnmo {
    RebattleTypeNone = 0,
    RebattleTypeRebattleMidway = 1,
    RebattleTypeRebattleLose = 2,
    RebattleTypeRebattleMidwayLineup = 3,
    RebattleTypeRebattleLoseLineup = 4,
    RebattleTypeQuitMidway = 5,
    RebattleTypeQuitLose = 6,
}
impl Camlhbegnmo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Camlhbegnmo::RebattleTypeNone => "REBATTLE_TYPE_NONE",
            Camlhbegnmo::RebattleTypeRebattleMidway => "REBATTLE_TYPE_REBATTLE_MIDWAY",
            Camlhbegnmo::RebattleTypeRebattleLose => "REBATTLE_TYPE_REBATTLE_LOSE",
            Camlhbegnmo::RebattleTypeRebattleMidwayLineup => {
                "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP"
            }
            Camlhbegnmo::RebattleTypeRebattleLoseLineup => {
                "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP"
            }
            Camlhbegnmo::RebattleTypeQuitMidway => "REBATTLE_TYPE_QUIT_MIDWAY",
            Camlhbegnmo::RebattleTypeQuitLose => "REBATTLE_TYPE_QUIT_LOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "REBATTLE_TYPE_NONE" => Some(Self::RebattleTypeNone),
            "REBATTLE_TYPE_REBATTLE_MIDWAY" => Some(Self::RebattleTypeRebattleMidway),
            "REBATTLE_TYPE_REBATTLE_LOSE" => Some(Self::RebattleTypeRebattleLose),
            "REBATTLE_TYPE_REBATTLE_MIDWAY_LINEUP" => {
                Some(Self::RebattleTypeRebattleMidwayLineup)
            }
            "REBATTLE_TYPE_REBATTLE_LOSE_LINEUP" => {
                Some(Self::RebattleTypeRebattleLoseLineup)
            }
            "REBATTLE_TYPE_QUIT_MIDWAY" => Some(Self::RebattleTypeQuitMidway),
            "REBATTLE_TYPE_QUIT_LOSE" => Some(Self::RebattleTypeQuitLose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dahcfllbegc {
    ContentPackageStatusNone = 0,
    ContentPackageStatusInit = 1,
    ContentPackageStatusDoing = 2,
    ContentPackageStatusFinished = 3,
    ContentPackageStatusRelease = 4,
}
impl Dahcfllbegc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Dahcfllbegc::ContentPackageStatusNone => "ContentPackageStatus_None",
            Dahcfllbegc::ContentPackageStatusInit => "ContentPackageStatus_Init",
            Dahcfllbegc::ContentPackageStatusDoing => "ContentPackageStatus_Doing",
            Dahcfllbegc::ContentPackageStatusFinished => "ContentPackageStatus_Finished",
            Dahcfllbegc::ContentPackageStatusRelease => "ContentPackageStatus_Release",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ContentPackageStatus_None" => Some(Self::ContentPackageStatusNone),
            "ContentPackageStatus_Init" => Some(Self::ContentPackageStatusInit),
            "ContentPackageStatus_Doing" => Some(Self::ContentPackageStatusDoing),
            "ContentPackageStatus_Finished" => Some(Self::ContentPackageStatusFinished),
            "ContentPackageStatus_Release" => Some(Self::ContentPackageStatusRelease),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Canhmpmfmgl {
    CmdContentPackageTypeNone = 0,
    CmdContentPackageGetDataScRsp = 7524,
    CmdContentPackageUnlockCsReq = 7517,
    CmdContentPackageGetDataCsReq = 7507,
    CmdContentPackageTransferScNotify = 7508,
    CmdContentPackageUnlockScRsp = 7511,
    CmdContentPackageSyncDataScNotify = 7515,
}
impl Canhmpmfmgl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Canhmpmfmgl::CmdContentPackageTypeNone => "CmdContentPackageTypeNone",
            Canhmpmfmgl::CmdContentPackageGetDataScRsp => "CmdContentPackageGetDataScRsp",
            Canhmpmfmgl::CmdContentPackageUnlockCsReq => "CmdContentPackageUnlockCsReq",
            Canhmpmfmgl::CmdContentPackageGetDataCsReq => "CmdContentPackageGetDataCsReq",
            Canhmpmfmgl::CmdContentPackageTransferScNotify => {
                "CmdContentPackageTransferScNotify"
            }
            Canhmpmfmgl::CmdContentPackageUnlockScRsp => "CmdContentPackageUnlockScRsp",
            Canhmpmfmgl::CmdContentPackageSyncDataScNotify => {
                "CmdContentPackageSyncDataScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdContentPackageTypeNone" => Some(Self::CmdContentPackageTypeNone),
            "CmdContentPackageGetDataScRsp" => Some(Self::CmdContentPackageGetDataScRsp),
            "CmdContentPackageUnlockCsReq" => Some(Self::CmdContentPackageUnlockCsReq),
            "CmdContentPackageGetDataCsReq" => Some(Self::CmdContentPackageGetDataCsReq),
            "CmdContentPackageTransferScNotify" => {
                Some(Self::CmdContentPackageTransferScNotify)
            }
            "CmdContentPackageUnlockScRsp" => Some(Self::CmdContentPackageUnlockScRsp),
            "CmdContentPackageSyncDataScNotify" => {
                Some(Self::CmdContentPackageSyncDataScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hfdplehgcbo {
    CmdDailyActiveTypeNone = 0,
    CmdTakeApRewardScRsp = 3306,
    CmdTakeAllApRewardCsReq = 3393,
    CmdDailyActiveInfoNotify = 3356,
    CmdTakeAllApRewardScRsp = 3339,
    CmdTakeApRewardCsReq = 3368,
    CmdGetDailyActiveInfoScRsp = 3343,
    CmdGetDailyActiveInfoCsReq = 3311,
}
impl Hfdplehgcbo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hfdplehgcbo::CmdDailyActiveTypeNone => "CmdDailyActiveTypeNone",
            Hfdplehgcbo::CmdTakeApRewardScRsp => "CmdTakeApRewardScRsp",
            Hfdplehgcbo::CmdTakeAllApRewardCsReq => "CmdTakeAllApRewardCsReq",
            Hfdplehgcbo::CmdDailyActiveInfoNotify => "CmdDailyActiveInfoNotify",
            Hfdplehgcbo::CmdTakeAllApRewardScRsp => "CmdTakeAllApRewardScRsp",
            Hfdplehgcbo::CmdTakeApRewardCsReq => "CmdTakeApRewardCsReq",
            Hfdplehgcbo::CmdGetDailyActiveInfoScRsp => "CmdGetDailyActiveInfoScRsp",
            Hfdplehgcbo::CmdGetDailyActiveInfoCsReq => "CmdGetDailyActiveInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDailyActiveTypeNone" => Some(Self::CmdDailyActiveTypeNone),
            "CmdTakeApRewardScRsp" => Some(Self::CmdTakeApRewardScRsp),
            "CmdTakeAllApRewardCsReq" => Some(Self::CmdTakeAllApRewardCsReq),
            "CmdDailyActiveInfoNotify" => Some(Self::CmdDailyActiveInfoNotify),
            "CmdTakeAllApRewardScRsp" => Some(Self::CmdTakeAllApRewardScRsp),
            "CmdTakeApRewardCsReq" => Some(Self::CmdTakeApRewardCsReq),
            "CmdGetDailyActiveInfoScRsp" => Some(Self::CmdGetDailyActiveInfoScRsp),
            "CmdGetDailyActiveInfoCsReq" => Some(Self::CmdGetDailyActiveInfoCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lgdmdpinecg {
    CmdDrinkMakerTypeNone = 0,
    CmdMakeMissionDrinkScRsp = 6987,
    CmdMakeMissionDrinkCsReq = 6996,
    CmdDrinkMakerDayEndScNotify = 6988,
    CmdMakeDrinkCsReq = 6992,
    CmdGetDrinkMakerDataCsReq = 6999,
    CmdEndDrinkMakerSequenceScRsp = 6982,
    CmdMakeDrinkScRsp = 7000,
    CmdDrinkMakerChallengeCsReq = 6993,
    CmdDrinkMakerUpdateTipsNotify = 6981,
    CmdGetDrinkMakerDataScRsp = 6983,
    CmdEndDrinkMakerSequenceCsReq = 6984,
    CmdDrinkMakerChallengeScRsp = 6990,
}
impl Lgdmdpinecg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lgdmdpinecg::CmdDrinkMakerTypeNone => "CmdDrinkMakerTypeNone",
            Lgdmdpinecg::CmdMakeMissionDrinkScRsp => "CmdMakeMissionDrinkScRsp",
            Lgdmdpinecg::CmdMakeMissionDrinkCsReq => "CmdMakeMissionDrinkCsReq",
            Lgdmdpinecg::CmdDrinkMakerDayEndScNotify => "CmdDrinkMakerDayEndScNotify",
            Lgdmdpinecg::CmdMakeDrinkCsReq => "CmdMakeDrinkCsReq",
            Lgdmdpinecg::CmdGetDrinkMakerDataCsReq => "CmdGetDrinkMakerDataCsReq",
            Lgdmdpinecg::CmdEndDrinkMakerSequenceScRsp => "CmdEndDrinkMakerSequenceScRsp",
            Lgdmdpinecg::CmdMakeDrinkScRsp => "CmdMakeDrinkScRsp",
            Lgdmdpinecg::CmdDrinkMakerChallengeCsReq => "CmdDrinkMakerChallengeCsReq",
            Lgdmdpinecg::CmdDrinkMakerUpdateTipsNotify => "CmdDrinkMakerUpdateTipsNotify",
            Lgdmdpinecg::CmdGetDrinkMakerDataScRsp => "CmdGetDrinkMakerDataScRsp",
            Lgdmdpinecg::CmdEndDrinkMakerSequenceCsReq => "CmdEndDrinkMakerSequenceCsReq",
            Lgdmdpinecg::CmdDrinkMakerChallengeScRsp => "CmdDrinkMakerChallengeScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdDrinkMakerTypeNone" => Some(Self::CmdDrinkMakerTypeNone),
            "CmdMakeMissionDrinkScRsp" => Some(Self::CmdMakeMissionDrinkScRsp),
            "CmdMakeMissionDrinkCsReq" => Some(Self::CmdMakeMissionDrinkCsReq),
            "CmdDrinkMakerDayEndScNotify" => Some(Self::CmdDrinkMakerDayEndScNotify),
            "CmdMakeDrinkCsReq" => Some(Self::CmdMakeDrinkCsReq),
            "CmdGetDrinkMakerDataCsReq" => Some(Self::CmdGetDrinkMakerDataCsReq),
            "CmdEndDrinkMakerSequenceScRsp" => Some(Self::CmdEndDrinkMakerSequenceScRsp),
            "CmdMakeDrinkScRsp" => Some(Self::CmdMakeDrinkScRsp),
            "CmdDrinkMakerChallengeCsReq" => Some(Self::CmdDrinkMakerChallengeCsReq),
            "CmdDrinkMakerUpdateTipsNotify" => Some(Self::CmdDrinkMakerUpdateTipsNotify),
            "CmdGetDrinkMakerDataScRsp" => Some(Self::CmdGetDrinkMakerDataScRsp),
            "CmdEndDrinkMakerSequenceCsReq" => Some(Self::CmdEndDrinkMakerSequenceCsReq),
            "CmdDrinkMakerChallengeScRsp" => Some(Self::CmdDrinkMakerChallengeScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Glhjehobkjb {
    CmdEvolveBuildNone = 0,
    CmdEvolveBuildShopAbilityUpScRsp = 7148,
    CmdEvolveBuildShopAbilityUpCsReq = 7105,
    CmdEvolveBuildCoinNotify = 7127,
    CmdEvolveBuildLeaveScRsp = 7120,
    CmdEvolveBuildStartStageCsReq = 7111,
    CmdEvolveBuildUnlockInfoNotify = 7149,
    CmdEvolveBuildStartLevelScRsp = 7117,
    CmdEvolveBuildReRandomStageCsReq = 7145,
    CmdEvolveBuildShopAbilityResetCsReq = 7133,
    CmdEvolveBuildLeaveCsReq = 7134,
    CmdEvolveBuildTakeExpRewardCsReq = 7135,
    CmdEvolveBuildQueryInfoCsReq = 7107,
    CmdEvolveBuildReRandomStageScRsp = 7106,
    CmdEvolveBuildTakeExpRewardScRsp = 7125,
    CmdEvolveBuildShopAbilityDownScRsp = 7103,
    CmdEvolveBuildStartLevelCsReq = 7115,
    CmdEvolveBuildFinishScNotify = 7136,
    CmdEvolveBuildStartStageScRsp = 7108,
    CmdEvolveBuildGiveupCsReq = 7123,
    CmdEvolveBuildQueryInfoScRsp = 7124,
    CmdEvolveBuildGiveupScRsp = 7104,
    CmdEvolveBuildShopAbilityDownCsReq = 7121,
    CmdEvolveBuildShopAbilityResetScRsp = 7143,
}
impl Glhjehobkjb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Glhjehobkjb::CmdEvolveBuildNone => "CmdEvolveBuildNone",
            Glhjehobkjb::CmdEvolveBuildShopAbilityUpScRsp => {
                "CmdEvolveBuildShopAbilityUpScRsp"
            }
            Glhjehobkjb::CmdEvolveBuildShopAbilityUpCsReq => {
                "CmdEvolveBuildShopAbilityUpCsReq"
            }
            Glhjehobkjb::CmdEvolveBuildCoinNotify => "CmdEvolveBuildCoinNotify",
            Glhjehobkjb::CmdEvolveBuildLeaveScRsp => "CmdEvolveBuildLeaveScRsp",
            Glhjehobkjb::CmdEvolveBuildStartStageCsReq => "CmdEvolveBuildStartStageCsReq",
            Glhjehobkjb::CmdEvolveBuildUnlockInfoNotify => {
                "CmdEvolveBuildUnlockInfoNotify"
            }
            Glhjehobkjb::CmdEvolveBuildStartLevelScRsp => "CmdEvolveBuildStartLevelScRsp",
            Glhjehobkjb::CmdEvolveBuildReRandomStageCsReq => {
                "CmdEvolveBuildReRandomStageCsReq"
            }
            Glhjehobkjb::CmdEvolveBuildShopAbilityResetCsReq => {
                "CmdEvolveBuildShopAbilityResetCsReq"
            }
            Glhjehobkjb::CmdEvolveBuildLeaveCsReq => "CmdEvolveBuildLeaveCsReq",
            Glhjehobkjb::CmdEvolveBuildTakeExpRewardCsReq => {
                "CmdEvolveBuildTakeExpRewardCsReq"
            }
            Glhjehobkjb::CmdEvolveBuildQueryInfoCsReq => "CmdEvolveBuildQueryInfoCsReq",
            Glhjehobkjb::CmdEvolveBuildReRandomStageScRsp => {
                "CmdEvolveBuildReRandomStageScRsp"
            }
            Glhjehobkjb::CmdEvolveBuildTakeExpRewardScRsp => {
                "CmdEvolveBuildTakeExpRewardScRsp"
            }
            Glhjehobkjb::CmdEvolveBuildShopAbilityDownScRsp => {
                "CmdEvolveBuildShopAbilityDownScRsp"
            }
            Glhjehobkjb::CmdEvolveBuildStartLevelCsReq => "CmdEvolveBuildStartLevelCsReq",
            Glhjehobkjb::CmdEvolveBuildFinishScNotify => "CmdEvolveBuildFinishScNotify",
            Glhjehobkjb::CmdEvolveBuildStartStageScRsp => "CmdEvolveBuildStartStageScRsp",
            Glhjehobkjb::CmdEvolveBuildGiveupCsReq => "CmdEvolveBuildGiveupCsReq",
            Glhjehobkjb::CmdEvolveBuildQueryInfoScRsp => "CmdEvolveBuildQueryInfoScRsp",
            Glhjehobkjb::CmdEvolveBuildGiveupScRsp => "CmdEvolveBuildGiveupScRsp",
            Glhjehobkjb::CmdEvolveBuildShopAbilityDownCsReq => {
                "CmdEvolveBuildShopAbilityDownCsReq"
            }
            Glhjehobkjb::CmdEvolveBuildShopAbilityResetScRsp => {
                "CmdEvolveBuildShopAbilityResetScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdEvolveBuildNone" => Some(Self::CmdEvolveBuildNone),
            "CmdEvolveBuildShopAbilityUpScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityUpScRsp)
            }
            "CmdEvolveBuildShopAbilityUpCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityUpCsReq)
            }
            "CmdEvolveBuildCoinNotify" => Some(Self::CmdEvolveBuildCoinNotify),
            "CmdEvolveBuildLeaveScRsp" => Some(Self::CmdEvolveBuildLeaveScRsp),
            "CmdEvolveBuildStartStageCsReq" => Some(Self::CmdEvolveBuildStartStageCsReq),
            "CmdEvolveBuildUnlockInfoNotify" => {
                Some(Self::CmdEvolveBuildUnlockInfoNotify)
            }
            "CmdEvolveBuildStartLevelScRsp" => Some(Self::CmdEvolveBuildStartLevelScRsp),
            "CmdEvolveBuildReRandomStageCsReq" => {
                Some(Self::CmdEvolveBuildReRandomStageCsReq)
            }
            "CmdEvolveBuildShopAbilityResetCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityResetCsReq)
            }
            "CmdEvolveBuildLeaveCsReq" => Some(Self::CmdEvolveBuildLeaveCsReq),
            "CmdEvolveBuildTakeExpRewardCsReq" => {
                Some(Self::CmdEvolveBuildTakeExpRewardCsReq)
            }
            "CmdEvolveBuildQueryInfoCsReq" => Some(Self::CmdEvolveBuildQueryInfoCsReq),
            "CmdEvolveBuildReRandomStageScRsp" => {
                Some(Self::CmdEvolveBuildReRandomStageScRsp)
            }
            "CmdEvolveBuildTakeExpRewardScRsp" => {
                Some(Self::CmdEvolveBuildTakeExpRewardScRsp)
            }
            "CmdEvolveBuildShopAbilityDownScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityDownScRsp)
            }
            "CmdEvolveBuildStartLevelCsReq" => Some(Self::CmdEvolveBuildStartLevelCsReq),
            "CmdEvolveBuildFinishScNotify" => Some(Self::CmdEvolveBuildFinishScNotify),
            "CmdEvolveBuildStartStageScRsp" => Some(Self::CmdEvolveBuildStartStageScRsp),
            "CmdEvolveBuildGiveupCsReq" => Some(Self::CmdEvolveBuildGiveupCsReq),
            "CmdEvolveBuildQueryInfoScRsp" => Some(Self::CmdEvolveBuildQueryInfoScRsp),
            "CmdEvolveBuildGiveupScRsp" => Some(Self::CmdEvolveBuildGiveupScRsp),
            "CmdEvolveBuildShopAbilityDownCsReq" => {
                Some(Self::CmdEvolveBuildShopAbilityDownCsReq)
            }
            "CmdEvolveBuildShopAbilityResetScRsp" => {
                Some(Self::CmdEvolveBuildShopAbilityResetScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lldgfmckmof {
    EvolvePeriodNone = 0,
    EvolvePeriodFirst = 1,
    EvolvePeriodSecond = 2,
    EvolvePeriodThird = 3,
    EvolvePeriodExtra = 4,
}
impl Lldgfmckmof {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lldgfmckmof::EvolvePeriodNone => "EVOLVE_PERIOD_NONE",
            Lldgfmckmof::EvolvePeriodFirst => "EVOLVE_PERIOD_FIRST",
            Lldgfmckmof::EvolvePeriodSecond => "EVOLVE_PERIOD_SECOND",
            Lldgfmckmof::EvolvePeriodThird => "EVOLVE_PERIOD_THIRD",
            Lldgfmckmof::EvolvePeriodExtra => "EVOLVE_PERIOD_EXTRA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_PERIOD_NONE" => Some(Self::EvolvePeriodNone),
            "EVOLVE_PERIOD_FIRST" => Some(Self::EvolvePeriodFirst),
            "EVOLVE_PERIOD_SECOND" => Some(Self::EvolvePeriodSecond),
            "EVOLVE_PERIOD_THIRD" => Some(Self::EvolvePeriodThird),
            "EVOLVE_PERIOD_EXTRA" => Some(Self::EvolvePeriodExtra),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Alcgocanpjh {
    EvolveBattleResultNone = 0,
    EvolveBattleResultWin = 1,
    EvolveBattleResultAllAvatarDead = 2,
    EvolveBattleResultNoDeadLine = 3,
    EvolveBattleResultQuit = 4,
}
impl Alcgocanpjh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Alcgocanpjh::EvolveBattleResultNone => "EVOLVE_BATTLE_RESULT_NONE",
            Alcgocanpjh::EvolveBattleResultWin => "EVOLVE_BATTLE_RESULT_WIN",
            Alcgocanpjh::EvolveBattleResultAllAvatarDead => {
                "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD"
            }
            Alcgocanpjh::EvolveBattleResultNoDeadLine => {
                "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE"
            }
            Alcgocanpjh::EvolveBattleResultQuit => "EVOLVE_BATTLE_RESULT_QUIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVOLVE_BATTLE_RESULT_NONE" => Some(Self::EvolveBattleResultNone),
            "EVOLVE_BATTLE_RESULT_WIN" => Some(Self::EvolveBattleResultWin),
            "EVOLVE_BATTLE_RESULT_ALL_AVATAR_DEAD" => {
                Some(Self::EvolveBattleResultAllAvatarDead)
            }
            "EVOLVE_BATTLE_RESULT_NO_DEAD_LINE" => {
                Some(Self::EvolveBattleResultNoDeadLine)
            }
            "EVOLVE_BATTLE_RESULT_QUIT" => Some(Self::EvolveBattleResultQuit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdExpeditionType {
    None = 0,
    CmdTakeExpeditionRewardCsReq = 2539,
    CmdTakeActivityExpeditionRewardScRsp = 2582,
    CmdCancelActivityExpeditionCsReq = 2554,
    CmdAcceptMultipleExpeditionCsReq = 2534,
    CmdTakeMultipleExpeditionRewardScRsp = 2525,
    CmdAcceptActivityExpeditionCsReq = 2533,
    CmdGetExpeditionDataScRsp = 2506,
    CmdCancelExpeditionCsReq = 2556,
    CmdAcceptExpeditionCsReq = 2511,
    CmdAcceptExpeditionScRsp = 2543,
    CmdCancelActivityExpeditionScRsp = 2565,
    CmdTakeActivityExpeditionRewardCsReq = 2548,
    CmdAcceptActivityExpeditionScRsp = 2599,
    CmdGetExpeditionDataCsReq = 2568,
    CmdExpeditionDataChangeScNotify = 2551,
    CmdAcceptMultipleExpeditionScRsp = 2597,
    CmdTakeMultipleExpeditionRewardCsReq = 2598,
    CmdCancelExpeditionScRsp = 2593,
    CmdTakeExpeditionRewardScRsp = 2529,
}
impl CmdExpeditionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdExpeditionType::None => "CmdExpeditionTypeNone",
            CmdExpeditionType::CmdTakeExpeditionRewardCsReq => {
                "CmdTakeExpeditionRewardCsReq"
            }
            CmdExpeditionType::CmdTakeActivityExpeditionRewardScRsp => {
                "CmdTakeActivityExpeditionRewardScRsp"
            }
            CmdExpeditionType::CmdCancelActivityExpeditionCsReq => {
                "CmdCancelActivityExpeditionCsReq"
            }
            CmdExpeditionType::CmdAcceptMultipleExpeditionCsReq => {
                "CmdAcceptMultipleExpeditionCsReq"
            }
            CmdExpeditionType::CmdTakeMultipleExpeditionRewardScRsp => {
                "CmdTakeMultipleExpeditionRewardScRsp"
            }
            CmdExpeditionType::CmdAcceptActivityExpeditionCsReq => {
                "CmdAcceptActivityExpeditionCsReq"
            }
            CmdExpeditionType::CmdGetExpeditionDataScRsp => "CmdGetExpeditionDataScRsp",
            CmdExpeditionType::CmdCancelExpeditionCsReq => "CmdCancelExpeditionCsReq",
            CmdExpeditionType::CmdAcceptExpeditionCsReq => "CmdAcceptExpeditionCsReq",
            CmdExpeditionType::CmdAcceptExpeditionScRsp => "CmdAcceptExpeditionScRsp",
            CmdExpeditionType::CmdCancelActivityExpeditionScRsp => {
                "CmdCancelActivityExpeditionScRsp"
            }
            CmdExpeditionType::CmdTakeActivityExpeditionRewardCsReq => {
                "CmdTakeActivityExpeditionRewardCsReq"
            }
            CmdExpeditionType::CmdAcceptActivityExpeditionScRsp => {
                "CmdAcceptActivityExpeditionScRsp"
            }
            CmdExpeditionType::CmdGetExpeditionDataCsReq => "CmdGetExpeditionDataCsReq",
            CmdExpeditionType::CmdExpeditionDataChangeScNotify => {
                "CmdExpeditionDataChangeScNotify"
            }
            CmdExpeditionType::CmdAcceptMultipleExpeditionScRsp => {
                "CmdAcceptMultipleExpeditionScRsp"
            }
            CmdExpeditionType::CmdTakeMultipleExpeditionRewardCsReq => {
                "CmdTakeMultipleExpeditionRewardCsReq"
            }
            CmdExpeditionType::CmdCancelExpeditionScRsp => "CmdCancelExpeditionScRsp",
            CmdExpeditionType::CmdTakeExpeditionRewardScRsp => {
                "CmdTakeExpeditionRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdExpeditionTypeNone" => Some(Self::None),
            "CmdTakeExpeditionRewardCsReq" => Some(Self::CmdTakeExpeditionRewardCsReq),
            "CmdTakeActivityExpeditionRewardScRsp" => {
                Some(Self::CmdTakeActivityExpeditionRewardScRsp)
            }
            "CmdCancelActivityExpeditionCsReq" => {
                Some(Self::CmdCancelActivityExpeditionCsReq)
            }
            "CmdAcceptMultipleExpeditionCsReq" => {
                Some(Self::CmdAcceptMultipleExpeditionCsReq)
            }
            "CmdTakeMultipleExpeditionRewardScRsp" => {
                Some(Self::CmdTakeMultipleExpeditionRewardScRsp)
            }
            "CmdAcceptActivityExpeditionCsReq" => {
                Some(Self::CmdAcceptActivityExpeditionCsReq)
            }
            "CmdGetExpeditionDataScRsp" => Some(Self::CmdGetExpeditionDataScRsp),
            "CmdCancelExpeditionCsReq" => Some(Self::CmdCancelExpeditionCsReq),
            "CmdAcceptExpeditionCsReq" => Some(Self::CmdAcceptExpeditionCsReq),
            "CmdAcceptExpeditionScRsp" => Some(Self::CmdAcceptExpeditionScRsp),
            "CmdCancelActivityExpeditionScRsp" => {
                Some(Self::CmdCancelActivityExpeditionScRsp)
            }
            "CmdTakeActivityExpeditionRewardCsReq" => {
                Some(Self::CmdTakeActivityExpeditionRewardCsReq)
            }
            "CmdAcceptActivityExpeditionScRsp" => {
                Some(Self::CmdAcceptActivityExpeditionScRsp)
            }
            "CmdGetExpeditionDataCsReq" => Some(Self::CmdGetExpeditionDataCsReq),
            "CmdExpeditionDataChangeScNotify" => {
                Some(Self::CmdExpeditionDataChangeScNotify)
            }
            "CmdAcceptMultipleExpeditionScRsp" => {
                Some(Self::CmdAcceptMultipleExpeditionScRsp)
            }
            "CmdTakeMultipleExpeditionRewardCsReq" => {
                Some(Self::CmdTakeMultipleExpeditionRewardCsReq)
            }
            "CmdCancelExpeditionScRsp" => Some(Self::CmdCancelExpeditionScRsp),
            "CmdTakeExpeditionRewardScRsp" => Some(Self::CmdTakeExpeditionRewardScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ddncbdinpeg {
    CmdFantasticStoryActivityTypeNone = 0,
    CmdEnterFantasticStoryActivityStageCsReq = 4943,
    CmdFantasticStoryActivityBattleEndScNotify = 4993,
    CmdGetFantasticStoryActivityDataCsReq = 4968,
    CmdEnterFantasticStoryActivityStageScRsp = 4956,
    CmdGetFantasticStoryActivityDataScRsp = 4906,
    CmdFinishChapterScNotify = 4911,
}
impl Ddncbdinpeg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ddncbdinpeg::CmdFantasticStoryActivityTypeNone => {
                "CmdFantasticStoryActivityTypeNone"
            }
            Ddncbdinpeg::CmdEnterFantasticStoryActivityStageCsReq => {
                "CmdEnterFantasticStoryActivityStageCsReq"
            }
            Ddncbdinpeg::CmdFantasticStoryActivityBattleEndScNotify => {
                "CmdFantasticStoryActivityBattleEndScNotify"
            }
            Ddncbdinpeg::CmdGetFantasticStoryActivityDataCsReq => {
                "CmdGetFantasticStoryActivityDataCsReq"
            }
            Ddncbdinpeg::CmdEnterFantasticStoryActivityStageScRsp => {
                "CmdEnterFantasticStoryActivityStageScRsp"
            }
            Ddncbdinpeg::CmdGetFantasticStoryActivityDataScRsp => {
                "CmdGetFantasticStoryActivityDataScRsp"
            }
            Ddncbdinpeg::CmdFinishChapterScNotify => "CmdFinishChapterScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFantasticStoryActivityTypeNone" => {
                Some(Self::CmdFantasticStoryActivityTypeNone)
            }
            "CmdEnterFantasticStoryActivityStageCsReq" => {
                Some(Self::CmdEnterFantasticStoryActivityStageCsReq)
            }
            "CmdFantasticStoryActivityBattleEndScNotify" => {
                Some(Self::CmdFantasticStoryActivityBattleEndScNotify)
            }
            "CmdGetFantasticStoryActivityDataCsReq" => {
                Some(Self::CmdGetFantasticStoryActivityDataCsReq)
            }
            "CmdEnterFantasticStoryActivityStageScRsp" => {
                Some(Self::CmdEnterFantasticStoryActivityStageScRsp)
            }
            "CmdGetFantasticStoryActivityDataScRsp" => {
                Some(Self::CmdGetFantasticStoryActivityDataScRsp)
            }
            "CmdFinishChapterScNotify" => Some(Self::CmdFinishChapterScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Adllodgmipe {
    CmdFeverTimeActivityTypeNone = 0,
    CmdGetFeverTimeActivityDataCsReq = 7160,
    CmdEnterFeverTimeActivityStageScRsp = 7154,
    CmdGetFeverTimeActivityDataScRsp = 7152,
    CmdEnterFeverTimeActivityStageCsReq = 7151,
    CmdFeverTimeActivityBattleEndScNotify = 7159,
}
impl Adllodgmipe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Adllodgmipe::CmdFeverTimeActivityTypeNone => "CmdFeverTimeActivityTypeNone",
            Adllodgmipe::CmdGetFeverTimeActivityDataCsReq => {
                "CmdGetFeverTimeActivityDataCsReq"
            }
            Adllodgmipe::CmdEnterFeverTimeActivityStageScRsp => {
                "CmdEnterFeverTimeActivityStageScRsp"
            }
            Adllodgmipe::CmdGetFeverTimeActivityDataScRsp => {
                "CmdGetFeverTimeActivityDataScRsp"
            }
            Adllodgmipe::CmdEnterFeverTimeActivityStageCsReq => {
                "CmdEnterFeverTimeActivityStageCsReq"
            }
            Adllodgmipe::CmdFeverTimeActivityBattleEndScNotify => {
                "CmdFeverTimeActivityBattleEndScNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFeverTimeActivityTypeNone" => Some(Self::CmdFeverTimeActivityTypeNone),
            "CmdGetFeverTimeActivityDataCsReq" => {
                Some(Self::CmdGetFeverTimeActivityDataCsReq)
            }
            "CmdEnterFeverTimeActivityStageScRsp" => {
                Some(Self::CmdEnterFeverTimeActivityStageScRsp)
            }
            "CmdGetFeverTimeActivityDataScRsp" => {
                Some(Self::CmdGetFeverTimeActivityDataScRsp)
            }
            "CmdEnterFeverTimeActivityStageCsReq" => {
                Some(Self::CmdEnterFeverTimeActivityStageCsReq)
            }
            "CmdFeverTimeActivityBattleEndScNotify" => {
                Some(Self::CmdFeverTimeActivityBattleEndScNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fpofnnofeeh {
    FeverTimeBattleRankC = 0,
    FeverTimeBattleRankB = 1,
    FeverTimeBattleRankA = 2,
    FeverTimeBattleRankS = 3,
    FeverTimeBattleRankSs = 4,
}
impl Fpofnnofeeh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Fpofnnofeeh::FeverTimeBattleRankC => "FEVER_TIME_BATTLE_RANK_C",
            Fpofnnofeeh::FeverTimeBattleRankB => "FEVER_TIME_BATTLE_RANK_B",
            Fpofnnofeeh::FeverTimeBattleRankA => "FEVER_TIME_BATTLE_RANK_A",
            Fpofnnofeeh::FeverTimeBattleRankS => "FEVER_TIME_BATTLE_RANK_S",
            Fpofnnofeeh::FeverTimeBattleRankSs => "FEVER_TIME_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FEVER_TIME_BATTLE_RANK_C" => Some(Self::FeverTimeBattleRankC),
            "FEVER_TIME_BATTLE_RANK_B" => Some(Self::FeverTimeBattleRankB),
            "FEVER_TIME_BATTLE_RANK_A" => Some(Self::FeverTimeBattleRankA),
            "FEVER_TIME_BATTLE_RANK_S" => Some(Self::FeverTimeBattleRankS),
            "FEVER_TIME_BATTLE_RANK_SS" => Some(Self::FeverTimeBattleRankSs),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Madlanogbob {
    CmdFightTypeNone = 0,
    CmdFightHeartBeatScRsp = 30093,
    CmdFightSessionStopScNotify = 30039,
    CmdFightEnterCsReq = 30068,
    CmdFightHeartBeatCsReq = 30056,
    CmdFightKickOutScNotify = 30043,
    CmdFightEnterScRsp = 30006,
    CmdFightLeaveScNotify = 30011,
}
impl Madlanogbob {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Madlanogbob::CmdFightTypeNone => "CmdFightTypeNone",
            Madlanogbob::CmdFightHeartBeatScRsp => "CmdFightHeartBeatScRsp",
            Madlanogbob::CmdFightSessionStopScNotify => "CmdFightSessionStopScNotify",
            Madlanogbob::CmdFightEnterCsReq => "CmdFightEnterCsReq",
            Madlanogbob::CmdFightHeartBeatCsReq => "CmdFightHeartBeatCsReq",
            Madlanogbob::CmdFightKickOutScNotify => "CmdFightKickOutScNotify",
            Madlanogbob::CmdFightEnterScRsp => "CmdFightEnterScRsp",
            Madlanogbob::CmdFightLeaveScNotify => "CmdFightLeaveScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightTypeNone" => Some(Self::CmdFightTypeNone),
            "CmdFightHeartBeatScRsp" => Some(Self::CmdFightHeartBeatScRsp),
            "CmdFightSessionStopScNotify" => Some(Self::CmdFightSessionStopScNotify),
            "CmdFightEnterCsReq" => Some(Self::CmdFightEnterCsReq),
            "CmdFightHeartBeatCsReq" => Some(Self::CmdFightHeartBeatCsReq),
            "CmdFightKickOutScNotify" => Some(Self::CmdFightKickOutScNotify),
            "CmdFightEnterScRsp" => Some(Self::CmdFightEnterScRsp),
            "CmdFightLeaveScNotify" => Some(Self::CmdFightLeaveScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jeiklnahdgi {
    CmdFightActivityTypeNone = 0,
    CmdEnterFightActivityStageCsReq = 3643,
    CmdTakeFightActivityRewardScRsp = 3639,
    CmdGetFightActivityDataScRsp = 3606,
    CmdGetFightActivityDataCsReq = 3668,
    CmdFightActivityDataChangeScNotify = 3611,
    CmdEnterFightActivityStageScRsp = 3656,
    CmdTakeFightActivityRewardCsReq = 3693,
}
impl Jeiklnahdgi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jeiklnahdgi::CmdFightActivityTypeNone => "CmdFightActivityTypeNone",
            Jeiklnahdgi::CmdEnterFightActivityStageCsReq => {
                "CmdEnterFightActivityStageCsReq"
            }
            Jeiklnahdgi::CmdTakeFightActivityRewardScRsp => {
                "CmdTakeFightActivityRewardScRsp"
            }
            Jeiklnahdgi::CmdGetFightActivityDataScRsp => "CmdGetFightActivityDataScRsp",
            Jeiklnahdgi::CmdGetFightActivityDataCsReq => "CmdGetFightActivityDataCsReq",
            Jeiklnahdgi::CmdFightActivityDataChangeScNotify => {
                "CmdFightActivityDataChangeScNotify"
            }
            Jeiklnahdgi::CmdEnterFightActivityStageScRsp => {
                "CmdEnterFightActivityStageScRsp"
            }
            Jeiklnahdgi::CmdTakeFightActivityRewardCsReq => {
                "CmdTakeFightActivityRewardCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightActivityTypeNone" => Some(Self::CmdFightActivityTypeNone),
            "CmdEnterFightActivityStageCsReq" => {
                Some(Self::CmdEnterFightActivityStageCsReq)
            }
            "CmdTakeFightActivityRewardScRsp" => {
                Some(Self::CmdTakeFightActivityRewardScRsp)
            }
            "CmdGetFightActivityDataScRsp" => Some(Self::CmdGetFightActivityDataScRsp),
            "CmdGetFightActivityDataCsReq" => Some(Self::CmdGetFightActivityDataCsReq),
            "CmdFightActivityDataChangeScNotify" => {
                Some(Self::CmdFightActivityDataChangeScNotify)
            }
            "CmdEnterFightActivityStageScRsp" => {
                Some(Self::CmdEnterFightActivityStageScRsp)
            }
            "CmdTakeFightActivityRewardCsReq" => {
                Some(Self::CmdTakeFightActivityRewardCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mhopfddhfom {
    CmdFightFestTypeNone = 0,
    CmdGetFightFestDataScRsp = 7274,
    CmdFightFestUpdateCoinNotify = 7254,
    CmdFightFestScoreUpdateNotify = 7261,
    CmdStartFightFestScRsp = 7267,
    CmdGetFightFestDataCsReq = 7257,
    CmdFightFestUpdateChallengeRecordNotify = 7273,
    CmdStartFightFestCsReq = 7265,
    CmdFightFestUnlockSkillNotify = 7258,
}
impl Mhopfddhfom {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mhopfddhfom::CmdFightFestTypeNone => "CmdFightFestTypeNone",
            Mhopfddhfom::CmdGetFightFestDataScRsp => "CmdGetFightFestDataScRsp",
            Mhopfddhfom::CmdFightFestUpdateCoinNotify => "CmdFightFestUpdateCoinNotify",
            Mhopfddhfom::CmdFightFestScoreUpdateNotify => "CmdFightFestScoreUpdateNotify",
            Mhopfddhfom::CmdStartFightFestScRsp => "CmdStartFightFestScRsp",
            Mhopfddhfom::CmdGetFightFestDataCsReq => "CmdGetFightFestDataCsReq",
            Mhopfddhfom::CmdFightFestUpdateChallengeRecordNotify => {
                "CmdFightFestUpdateChallengeRecordNotify"
            }
            Mhopfddhfom::CmdStartFightFestCsReq => "CmdStartFightFestCsReq",
            Mhopfddhfom::CmdFightFestUnlockSkillNotify => "CmdFightFestUnlockSkillNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightFestTypeNone" => Some(Self::CmdFightFestTypeNone),
            "CmdGetFightFestDataScRsp" => Some(Self::CmdGetFightFestDataScRsp),
            "CmdFightFestUpdateCoinNotify" => Some(Self::CmdFightFestUpdateCoinNotify),
            "CmdFightFestScoreUpdateNotify" => Some(Self::CmdFightFestScoreUpdateNotify),
            "CmdStartFightFestScRsp" => Some(Self::CmdStartFightFestScRsp),
            "CmdGetFightFestDataCsReq" => Some(Self::CmdGetFightFestDataCsReq),
            "CmdFightFestUpdateChallengeRecordNotify" => {
                Some(Self::CmdFightFestUpdateChallengeRecordNotify)
            }
            "CmdStartFightFestCsReq" => Some(Self::CmdStartFightFestCsReq),
            "CmdFightFestUnlockSkillNotify" => Some(Self::CmdFightFestUnlockSkillNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pakokghoagp {
    FightFestBattleRankC = 0,
    FightFestBattleRankB = 1,
    FightFestBattleRankA = 2,
    FightFestBattleRankS = 3,
    FightFestBattleRankSs = 4,
}
impl Pakokghoagp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pakokghoagp::FightFestBattleRankC => "FIGHT_FEST_BATTLE_RANK_C",
            Pakokghoagp::FightFestBattleRankB => "FIGHT_FEST_BATTLE_RANK_B",
            Pakokghoagp::FightFestBattleRankA => "FIGHT_FEST_BATTLE_RANK_A",
            Pakokghoagp::FightFestBattleRankS => "FIGHT_FEST_BATTLE_RANK_S",
            Pakokghoagp::FightFestBattleRankSs => "FIGHT_FEST_BATTLE_RANK_SS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_BATTLE_RANK_C" => Some(Self::FightFestBattleRankC),
            "FIGHT_FEST_BATTLE_RANK_B" => Some(Self::FightFestBattleRankB),
            "FIGHT_FEST_BATTLE_RANK_A" => Some(Self::FightFestBattleRankA),
            "FIGHT_FEST_BATTLE_RANK_S" => Some(Self::FightFestBattleRankS),
            "FIGHT_FEST_BATTLE_RANK_SS" => Some(Self::FightFestBattleRankSs),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ojikhafakmn {
    FightFestTypeNone = 0,
    FightFestTypeMain = 1,
    FightFestTypeScore = 2,
    FightFestTypeChallenge = 3,
    FightFestTypeTeach = 4,
}
impl Ojikhafakmn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ojikhafakmn::FightFestTypeNone => "FIGHT_FEST_TYPE_NONE",
            Ojikhafakmn::FightFestTypeMain => "FIGHT_FEST_TYPE_MAIN",
            Ojikhafakmn::FightFestTypeScore => "FIGHT_FEST_TYPE_SCORE",
            Ojikhafakmn::FightFestTypeChallenge => "FIGHT_FEST_TYPE_CHALLENGE",
            Ojikhafakmn::FightFestTypeTeach => "FIGHT_FEST_TYPE_TEACH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FIGHT_FEST_TYPE_NONE" => Some(Self::FightFestTypeNone),
            "FIGHT_FEST_TYPE_MAIN" => Some(Self::FightFestTypeMain),
            "FIGHT_FEST_TYPE_SCORE" => Some(Self::FightFestTypeScore),
            "FIGHT_FEST_TYPE_CHALLENGE" => Some(Self::FightFestTypeChallenge),
            "FIGHT_FEST_TYPE_TEACH" => Some(Self::FightFestTypeTeach),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oicjjpbhahi {
    CmdFightMathc3TypeNone = 0,
    CmdFightMatch3ForceUpdateNotify = 30154,
    CmdFightMatch3SwapCsReq = 30193,
    CmdFightMatch3StartCountDownScNotify = 30111,
    CmdFightMatch3ChatScNotify = 30199,
    CmdFightMatch3DataCsReq = 30168,
    CmdFightMatch3ChatCsReq = 30151,
    CmdFightMatch3TurnStartScNotify = 30143,
    CmdFightMatch3SwapScRsp = 30139,
    CmdFightMatch3DataScRsp = 30106,
    CmdFightMatch3OpponentDataScNotify = 30129,
    CmdFightMatch3TurnEndScNotify = 30156,
    CmdFightMatch3ChatScRsp = 30133,
}
impl Oicjjpbhahi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Oicjjpbhahi::CmdFightMathc3TypeNone => "CmdFightMathc3TypeNone",
            Oicjjpbhahi::CmdFightMatch3ForceUpdateNotify => {
                "CmdFightMatch3ForceUpdateNotify"
            }
            Oicjjpbhahi::CmdFightMatch3SwapCsReq => "CmdFightMatch3SwapCsReq",
            Oicjjpbhahi::CmdFightMatch3StartCountDownScNotify => {
                "CmdFightMatch3StartCountDownScNotify"
            }
            Oicjjpbhahi::CmdFightMatch3ChatScNotify => "CmdFightMatch3ChatScNotify",
            Oicjjpbhahi::CmdFightMatch3DataCsReq => "CmdFightMatch3DataCsReq",
            Oicjjpbhahi::CmdFightMatch3ChatCsReq => "CmdFightMatch3ChatCsReq",
            Oicjjpbhahi::CmdFightMatch3TurnStartScNotify => {
                "CmdFightMatch3TurnStartScNotify"
            }
            Oicjjpbhahi::CmdFightMatch3SwapScRsp => "CmdFightMatch3SwapScRsp",
            Oicjjpbhahi::CmdFightMatch3DataScRsp => "CmdFightMatch3DataScRsp",
            Oicjjpbhahi::CmdFightMatch3OpponentDataScNotify => {
                "CmdFightMatch3OpponentDataScNotify"
            }
            Oicjjpbhahi::CmdFightMatch3TurnEndScNotify => "CmdFightMatch3TurnEndScNotify",
            Oicjjpbhahi::CmdFightMatch3ChatScRsp => "CmdFightMatch3ChatScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFightMathc3TypeNone" => Some(Self::CmdFightMathc3TypeNone),
            "CmdFightMatch3ForceUpdateNotify" => {
                Some(Self::CmdFightMatch3ForceUpdateNotify)
            }
            "CmdFightMatch3SwapCsReq" => Some(Self::CmdFightMatch3SwapCsReq),
            "CmdFightMatch3StartCountDownScNotify" => {
                Some(Self::CmdFightMatch3StartCountDownScNotify)
            }
            "CmdFightMatch3ChatScNotify" => Some(Self::CmdFightMatch3ChatScNotify),
            "CmdFightMatch3DataCsReq" => Some(Self::CmdFightMatch3DataCsReq),
            "CmdFightMatch3ChatCsReq" => Some(Self::CmdFightMatch3ChatCsReq),
            "CmdFightMatch3TurnStartScNotify" => {
                Some(Self::CmdFightMatch3TurnStartScNotify)
            }
            "CmdFightMatch3SwapScRsp" => Some(Self::CmdFightMatch3SwapScRsp),
            "CmdFightMatch3DataScRsp" => Some(Self::CmdFightMatch3DataScRsp),
            "CmdFightMatch3OpponentDataScNotify" => {
                Some(Self::CmdFightMatch3OpponentDataScNotify)
            }
            "CmdFightMatch3TurnEndScNotify" => Some(Self::CmdFightMatch3TurnEndScNotify),
            "CmdFightMatch3ChatScRsp" => Some(Self::CmdFightMatch3ChatScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ignpcapkdfc {
    Match3StateIdle = 0,
    Match3StateStart = 1,
    Match3StateMatch = 2,
    Match3StateGame = 3,
    Match3StateHalftime = 4,
    Match3StateOver = 5,
}
impl Ignpcapkdfc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ignpcapkdfc::Match3StateIdle => "MATCH3_STATE_IDLE",
            Ignpcapkdfc::Match3StateStart => "MATCH3_STATE_START",
            Ignpcapkdfc::Match3StateMatch => "MATCH3_STATE_MATCH",
            Ignpcapkdfc::Match3StateGame => "MATCH3_STATE_GAME",
            Ignpcapkdfc::Match3StateHalftime => "MATCH3_STATE_HALFTIME",
            Ignpcapkdfc::Match3StateOver => "MATCH3_STATE_OVER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_STATE_IDLE" => Some(Self::Match3StateIdle),
            "MATCH3_STATE_START" => Some(Self::Match3StateStart),
            "MATCH3_STATE_MATCH" => Some(Self::Match3StateMatch),
            "MATCH3_STATE_GAME" => Some(Self::Match3StateGame),
            "MATCH3_STATE_HALFTIME" => Some(Self::Match3StateHalftime),
            "MATCH3_STATE_OVER" => Some(Self::Match3StateOver),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dblancjjchp {
    Match3PlayerStateAlive = 0,
    Match3PlayerStateDying = 1,
    Match3PlayerStateDead = 2,
    Match3PlayerStateLeave = 3,
}
impl Dblancjjchp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Dblancjjchp::Match3PlayerStateAlive => "MATCH3_PLAYER_STATE_ALIVE",
            Dblancjjchp::Match3PlayerStateDying => "MATCH3_PLAYER_STATE_DYING",
            Dblancjjchp::Match3PlayerStateDead => "MATCH3_PLAYER_STATE_DEAD",
            Dblancjjchp::Match3PlayerStateLeave => "MATCH3_PLAYER_STATE_LEAVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MATCH3_PLAYER_STATE_ALIVE" => Some(Self::Match3PlayerStateAlive),
            "MATCH3_PLAYER_STATE_DYING" => Some(Self::Match3PlayerStateDying),
            "MATCH3_PLAYER_STATE_DEAD" => Some(Self::Match3PlayerStateDead),
            "MATCH3_PLAYER_STATE_LEAVE" => Some(Self::Match3PlayerStateLeave),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Aipongicanm {
    EventBegin = 0,
    EventBreak = 1,
    EventFall = 2,
    EventRefresh = 3,
    EventBirdSkill = 4,
    EventEnv = 5,
    EventShuffle = 6,
    EventSettleTag = 7,
}
impl Aipongicanm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Aipongicanm::EventBegin => "EVENT_BEGIN",
            Aipongicanm::EventBreak => "EVENT_BREAK",
            Aipongicanm::EventFall => "EVENT_FALL",
            Aipongicanm::EventRefresh => "EVENT_REFRESH",
            Aipongicanm::EventBirdSkill => "EVENT_BIRD_SKILL",
            Aipongicanm::EventEnv => "EVENT_ENV",
            Aipongicanm::EventShuffle => "EVENT_SHUFFLE",
            Aipongicanm::EventSettleTag => "EVENT_SETTLE_TAG",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EVENT_BEGIN" => Some(Self::EventBegin),
            "EVENT_BREAK" => Some(Self::EventBreak),
            "EVENT_FALL" => Some(Self::EventFall),
            "EVENT_REFRESH" => Some(Self::EventRefresh),
            "EVENT_BIRD_SKILL" => Some(Self::EventBirdSkill),
            "EVENT_ENV" => Some(Self::EventEnv),
            "EVENT_SHUFFLE" => Some(Self::EventShuffle),
            "EVENT_SETTLE_TAG" => Some(Self::EventSettleTag),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kpjdlplhkhp {
    CmdFriendTypeNone = 0,
    CmdApplyFriendCsReq = 2939,
    CmdGetFriendLoginInfoCsReq = 2969,
    CmdGetPlayerDetailInfoScRsp = 2943,
    CmdSearchPlayerCsReq = 2908,
    CmdGetCurAssistScRsp = 2976,
    CmdSyncDeleteFriendScNotify = 2982,
    CmdDeleteBlacklistCsReq = 2909,
    CmdGetFriendBattleRecordDetailCsReq = 2941,
    CmdGetPlatformPlayerInfoCsReq = 2995,
    CmdGetFriendLoginInfoScRsp = 2967,
    CmdNewAssistHistoryNotify = 2966,
    CmdSetFriendRemarkNameCsReq = 2917,
    CmdDeleteFriendCsReq = 2965,
    CmdGetPlatformPlayerInfoScRsp = 2989,
    CmdSearchPlayerScRsp = 2981,
    CmdSetAssistScRsp = 2923,
    CmdGetFriendApplyListInfoScRsp = 2993,
    CmdTakeAssistRewardScRsp = 2912,
    CmdSetAssistCsReq = 2984,
    CmdGetAssistHistoryCsReq = 2949,
    CmdSetFriendRemarkNameScRsp = 2992,
    CmdGetAssistHistoryScRsp = 2945,
    CmdDeleteFriendScRsp = 2948,
    CmdGetAssistListScRsp = 2916,
    CmdCurAssistChangedNotify = 2930,
    CmdTakeAssistRewardCsReq = 2946,
    CmdGetFriendListInfoScRsp = 2906,
    CmdGetFriendListInfoCsReq = 2968,
    CmdGetFriendAssistListScRsp = 2953,
    CmdGetFriendDevelopmentInfoCsReq = 2903,
    CmdSyncHandleFriendScNotify = 2954,
    CmdGetFriendApplyListInfoCsReq = 2956,
    CmdGetFriendAssistListCsReq = 3000,
    CmdGetFriendChallengeLineupCsReq = 2958,
    CmdHandleFriendCsReq = 2933,
    CmdApplyFriendScRsp = 2929,
    CmdSetFriendMarkCsReq = 2940,
    CmdGetFriendChallengeDetailCsReq = 2959,
    CmdGetAssistListCsReq = 2932,
    CmdSyncApplyFriendScNotify = 2951,
    CmdGetFriendDevelopmentInfoScRsp = 2926,
    CmdHandleFriendScRsp = 2999,
    CmdGetFriendChallengeDetailScRsp = 2907,
    CmdGetPlayerDetailInfoCsReq = 2911,
    CmdSyncAddBlacklistScNotify = 2998,
    CmdReportPlayerScRsp = 2928,
    CmdAddBlacklistCsReq = 2934,
    CmdGetCurAssistCsReq = 2978,
    CmdGetFriendChallengeLineupScRsp = 2947,
    CmdGetFriendBattleRecordDetailScRsp = 2931,
    CmdDeleteBlacklistScRsp = 2988,
    CmdGetFriendRecommendListInfoScRsp = 2924,
    CmdAddBlacklistScRsp = 2997,
    CmdSetForbidOtherApplyFriendCsReq = 2915,
    CmdGetFriendRecommendListInfoCsReq = 2925,
    CmdSetForbidOtherApplyFriendScRsp = 2975,
    CmdSetFriendMarkScRsp = 2985,
    CmdReportPlayerCsReq = 2990,
}
impl Kpjdlplhkhp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kpjdlplhkhp::CmdFriendTypeNone => "CmdFriendTypeNone",
            Kpjdlplhkhp::CmdApplyFriendCsReq => "CmdApplyFriendCsReq",
            Kpjdlplhkhp::CmdGetFriendLoginInfoCsReq => "CmdGetFriendLoginInfoCsReq",
            Kpjdlplhkhp::CmdGetPlayerDetailInfoScRsp => "CmdGetPlayerDetailInfoScRsp",
            Kpjdlplhkhp::CmdSearchPlayerCsReq => "CmdSearchPlayerCsReq",
            Kpjdlplhkhp::CmdGetCurAssistScRsp => "CmdGetCurAssistScRsp",
            Kpjdlplhkhp::CmdSyncDeleteFriendScNotify => "CmdSyncDeleteFriendScNotify",
            Kpjdlplhkhp::CmdDeleteBlacklistCsReq => "CmdDeleteBlacklistCsReq",
            Kpjdlplhkhp::CmdGetFriendBattleRecordDetailCsReq => {
                "CmdGetFriendBattleRecordDetailCsReq"
            }
            Kpjdlplhkhp::CmdGetPlatformPlayerInfoCsReq => "CmdGetPlatformPlayerInfoCsReq",
            Kpjdlplhkhp::CmdGetFriendLoginInfoScRsp => "CmdGetFriendLoginInfoScRsp",
            Kpjdlplhkhp::CmdNewAssistHistoryNotify => "CmdNewAssistHistoryNotify",
            Kpjdlplhkhp::CmdSetFriendRemarkNameCsReq => "CmdSetFriendRemarkNameCsReq",
            Kpjdlplhkhp::CmdDeleteFriendCsReq => "CmdDeleteFriendCsReq",
            Kpjdlplhkhp::CmdGetPlatformPlayerInfoScRsp => "CmdGetPlatformPlayerInfoScRsp",
            Kpjdlplhkhp::CmdSearchPlayerScRsp => "CmdSearchPlayerScRsp",
            Kpjdlplhkhp::CmdSetAssistScRsp => "CmdSetAssistScRsp",
            Kpjdlplhkhp::CmdGetFriendApplyListInfoScRsp => {
                "CmdGetFriendApplyListInfoScRsp"
            }
            Kpjdlplhkhp::CmdTakeAssistRewardScRsp => "CmdTakeAssistRewardScRsp",
            Kpjdlplhkhp::CmdSetAssistCsReq => "CmdSetAssistCsReq",
            Kpjdlplhkhp::CmdGetAssistHistoryCsReq => "CmdGetAssistHistoryCsReq",
            Kpjdlplhkhp::CmdSetFriendRemarkNameScRsp => "CmdSetFriendRemarkNameScRsp",
            Kpjdlplhkhp::CmdGetAssistHistoryScRsp => "CmdGetAssistHistoryScRsp",
            Kpjdlplhkhp::CmdDeleteFriendScRsp => "CmdDeleteFriendScRsp",
            Kpjdlplhkhp::CmdGetAssistListScRsp => "CmdGetAssistListScRsp",
            Kpjdlplhkhp::CmdCurAssistChangedNotify => "CmdCurAssistChangedNotify",
            Kpjdlplhkhp::CmdTakeAssistRewardCsReq => "CmdTakeAssistRewardCsReq",
            Kpjdlplhkhp::CmdGetFriendListInfoScRsp => "CmdGetFriendListInfoScRsp",
            Kpjdlplhkhp::CmdGetFriendListInfoCsReq => "CmdGetFriendListInfoCsReq",
            Kpjdlplhkhp::CmdGetFriendAssistListScRsp => "CmdGetFriendAssistListScRsp",
            Kpjdlplhkhp::CmdGetFriendDevelopmentInfoCsReq => {
                "CmdGetFriendDevelopmentInfoCsReq"
            }
            Kpjdlplhkhp::CmdSyncHandleFriendScNotify => "CmdSyncHandleFriendScNotify",
            Kpjdlplhkhp::CmdGetFriendApplyListInfoCsReq => {
                "CmdGetFriendApplyListInfoCsReq"
            }
            Kpjdlplhkhp::CmdGetFriendAssistListCsReq => "CmdGetFriendAssistListCsReq",
            Kpjdlplhkhp::CmdGetFriendChallengeLineupCsReq => {
                "CmdGetFriendChallengeLineupCsReq"
            }
            Kpjdlplhkhp::CmdHandleFriendCsReq => "CmdHandleFriendCsReq",
            Kpjdlplhkhp::CmdApplyFriendScRsp => "CmdApplyFriendScRsp",
            Kpjdlplhkhp::CmdSetFriendMarkCsReq => "CmdSetFriendMarkCsReq",
            Kpjdlplhkhp::CmdGetFriendChallengeDetailCsReq => {
                "CmdGetFriendChallengeDetailCsReq"
            }
            Kpjdlplhkhp::CmdGetAssistListCsReq => "CmdGetAssistListCsReq",
            Kpjdlplhkhp::CmdSyncApplyFriendScNotify => "CmdSyncApplyFriendScNotify",
            Kpjdlplhkhp::CmdGetFriendDevelopmentInfoScRsp => {
                "CmdGetFriendDevelopmentInfoScRsp"
            }
            Kpjdlplhkhp::CmdHandleFriendScRsp => "CmdHandleFriendScRsp",
            Kpjdlplhkhp::CmdGetFriendChallengeDetailScRsp => {
                "CmdGetFriendChallengeDetailScRsp"
            }
            Kpjdlplhkhp::CmdGetPlayerDetailInfoCsReq => "CmdGetPlayerDetailInfoCsReq",
            Kpjdlplhkhp::CmdSyncAddBlacklistScNotify => "CmdSyncAddBlacklistScNotify",
            Kpjdlplhkhp::CmdReportPlayerScRsp => "CmdReportPlayerScRsp",
            Kpjdlplhkhp::CmdAddBlacklistCsReq => "CmdAddBlacklistCsReq",
            Kpjdlplhkhp::CmdGetCurAssistCsReq => "CmdGetCurAssistCsReq",
            Kpjdlplhkhp::CmdGetFriendChallengeLineupScRsp => {
                "CmdGetFriendChallengeLineupScRsp"
            }
            Kpjdlplhkhp::CmdGetFriendBattleRecordDetailScRsp => {
                "CmdGetFriendBattleRecordDetailScRsp"
            }
            Kpjdlplhkhp::CmdDeleteBlacklistScRsp => "CmdDeleteBlacklistScRsp",
            Kpjdlplhkhp::CmdGetFriendRecommendListInfoScRsp => {
                "CmdGetFriendRecommendListInfoScRsp"
            }
            Kpjdlplhkhp::CmdAddBlacklistScRsp => "CmdAddBlacklistScRsp",
            Kpjdlplhkhp::CmdSetForbidOtherApplyFriendCsReq => {
                "CmdSetForbidOtherApplyFriendCsReq"
            }
            Kpjdlplhkhp::CmdGetFriendRecommendListInfoCsReq => {
                "CmdGetFriendRecommendListInfoCsReq"
            }
            Kpjdlplhkhp::CmdSetForbidOtherApplyFriendScRsp => {
                "CmdSetForbidOtherApplyFriendScRsp"
            }
            Kpjdlplhkhp::CmdSetFriendMarkScRsp => "CmdSetFriendMarkScRsp",
            Kpjdlplhkhp::CmdReportPlayerCsReq => "CmdReportPlayerCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdFriendTypeNone" => Some(Self::CmdFriendTypeNone),
            "CmdApplyFriendCsReq" => Some(Self::CmdApplyFriendCsReq),
            "CmdGetFriendLoginInfoCsReq" => Some(Self::CmdGetFriendLoginInfoCsReq),
            "CmdGetPlayerDetailInfoScRsp" => Some(Self::CmdGetPlayerDetailInfoScRsp),
            "CmdSearchPlayerCsReq" => Some(Self::CmdSearchPlayerCsReq),
            "CmdGetCurAssistScRsp" => Some(Self::CmdGetCurAssistScRsp),
            "CmdSyncDeleteFriendScNotify" => Some(Self::CmdSyncDeleteFriendScNotify),
            "CmdDeleteBlacklistCsReq" => Some(Self::CmdDeleteBlacklistCsReq),
            "CmdGetFriendBattleRecordDetailCsReq" => {
                Some(Self::CmdGetFriendBattleRecordDetailCsReq)
            }
            "CmdGetPlatformPlayerInfoCsReq" => Some(Self::CmdGetPlatformPlayerInfoCsReq),
            "CmdGetFriendLoginInfoScRsp" => Some(Self::CmdGetFriendLoginInfoScRsp),
            "CmdNewAssistHistoryNotify" => Some(Self::CmdNewAssistHistoryNotify),
            "CmdSetFriendRemarkNameCsReq" => Some(Self::CmdSetFriendRemarkNameCsReq),
            "CmdDeleteFriendCsReq" => Some(Self::CmdDeleteFriendCsReq),
            "CmdGetPlatformPlayerInfoScRsp" => Some(Self::CmdGetPlatformPlayerInfoScRsp),
            "CmdSearchPlayerScRsp" => Some(Self::CmdSearchPlayerScRsp),
            "CmdSetAssistScRsp" => Some(Self::CmdSetAssistScRsp),
            "CmdGetFriendApplyListInfoScRsp" => {
                Some(Self::CmdGetFriendApplyListInfoScRsp)
            }
            "CmdTakeAssistRewardScRsp" => Some(Self::CmdTakeAssistRewardScRsp),
            "CmdSetAssistCsReq" => Some(Self::CmdSetAssistCsReq),
            "CmdGetAssistHistoryCsReq" => Some(Self::CmdGetAssistHistoryCsReq),
            "CmdSetFriendRemarkNameScRsp" => Some(Self::CmdSetFriendRemarkNameScRsp),
            "CmdGetAssistHistoryScRsp" => Some(Self::CmdGetAssistHistoryScRsp),
            "CmdDeleteFriendScRsp" => Some(Self::CmdDeleteFriendScRsp),
            "CmdGetAssistListScRsp" => Some(Self::CmdGetAssistListScRsp),
            "CmdCurAssistChangedNotify" => Some(Self::CmdCurAssistChangedNotify),
            "CmdTakeAssistRewardCsReq" => Some(Self::CmdTakeAssistRewardCsReq),
            "CmdGetFriendListInfoScRsp" => Some(Self::CmdGetFriendListInfoScRsp),
            "CmdGetFriendListInfoCsReq" => Some(Self::CmdGetFriendListInfoCsReq),
            "CmdGetFriendAssistListScRsp" => Some(Self::CmdGetFriendAssistListScRsp),
            "CmdGetFriendDevelopmentInfoCsReq" => {
                Some(Self::CmdGetFriendDevelopmentInfoCsReq)
            }
            "CmdSyncHandleFriendScNotify" => Some(Self::CmdSyncHandleFriendScNotify),
            "CmdGetFriendApplyListInfoCsReq" => {
                Some(Self::CmdGetFriendApplyListInfoCsReq)
            }
            "CmdGetFriendAssistListCsReq" => Some(Self::CmdGetFriendAssistListCsReq),
            "CmdGetFriendChallengeLineupCsReq" => {
                Some(Self::CmdGetFriendChallengeLineupCsReq)
            }
            "CmdHandleFriendCsReq" => Some(Self::CmdHandleFriendCsReq),
            "CmdApplyFriendScRsp" => Some(Self::CmdApplyFriendScRsp),
            "CmdSetFriendMarkCsReq" => Some(Self::CmdSetFriendMarkCsReq),
            "CmdGetFriendChallengeDetailCsReq" => {
                Some(Self::CmdGetFriendChallengeDetailCsReq)
            }
            "CmdGetAssistListCsReq" => Some(Self::CmdGetAssistListCsReq),
            "CmdSyncApplyFriendScNotify" => Some(Self::CmdSyncApplyFriendScNotify),
            "CmdGetFriendDevelopmentInfoScRsp" => {
                Some(Self::CmdGetFriendDevelopmentInfoScRsp)
            }
            "CmdHandleFriendScRsp" => Some(Self::CmdHandleFriendScRsp),
            "CmdGetFriendChallengeDetailScRsp" => {
                Some(Self::CmdGetFriendChallengeDetailScRsp)
            }
            "CmdGetPlayerDetailInfoCsReq" => Some(Self::CmdGetPlayerDetailInfoCsReq),
            "CmdSyncAddBlacklistScNotify" => Some(Self::CmdSyncAddBlacklistScNotify),
            "CmdReportPlayerScRsp" => Some(Self::CmdReportPlayerScRsp),
            "CmdAddBlacklistCsReq" => Some(Self::CmdAddBlacklistCsReq),
            "CmdGetCurAssistCsReq" => Some(Self::CmdGetCurAssistCsReq),
            "CmdGetFriendChallengeLineupScRsp" => {
                Some(Self::CmdGetFriendChallengeLineupScRsp)
            }
            "CmdGetFriendBattleRecordDetailScRsp" => {
                Some(Self::CmdGetFriendBattleRecordDetailScRsp)
            }
            "CmdDeleteBlacklistScRsp" => Some(Self::CmdDeleteBlacklistScRsp),
            "CmdGetFriendRecommendListInfoScRsp" => {
                Some(Self::CmdGetFriendRecommendListInfoScRsp)
            }
            "CmdAddBlacklistScRsp" => Some(Self::CmdAddBlacklistScRsp),
            "CmdSetForbidOtherApplyFriendCsReq" => {
                Some(Self::CmdSetForbidOtherApplyFriendCsReq)
            }
            "CmdGetFriendRecommendListInfoCsReq" => {
                Some(Self::CmdGetFriendRecommendListInfoCsReq)
            }
            "CmdSetForbidOtherApplyFriendScRsp" => {
                Some(Self::CmdSetForbidOtherApplyFriendScRsp)
            }
            "CmdSetFriendMarkScRsp" => Some(Self::CmdSetFriendMarkScRsp),
            "CmdReportPlayerCsReq" => Some(Self::CmdReportPlayerCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum FriendOnlineStatus {
    Offline = 0,
    Online = 1,
}
impl FriendOnlineStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            FriendOnlineStatus::Offline => "FRIEND_ONLINE_STATUS_OFFLINE",
            FriendOnlineStatus::Online => "FRIEND_ONLINE_STATUS_ONLINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_ONLINE_STATUS_OFFLINE" => Some(Self::Offline),
            "FRIEND_ONLINE_STATUS_ONLINE" => Some(Self::Online),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mfhcehbfeng {
    FriendApplySourceNone = 0,
    FriendApplySourceSearch = 1,
    FriendApplySourceRecommend = 2,
    FriendApplySourceAssist = 3,
    FriendApplySourceRecommendAssist = 4,
    FriendApplySourcePsnFriend = 5,
    FriendApplySourceAssistReward = 6,
}
impl Mfhcehbfeng {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mfhcehbfeng::FriendApplySourceNone => "FRIEND_APPLY_SOURCE_NONE",
            Mfhcehbfeng::FriendApplySourceSearch => "FRIEND_APPLY_SOURCE_SEARCH",
            Mfhcehbfeng::FriendApplySourceRecommend => "FRIEND_APPLY_SOURCE_RECOMMEND",
            Mfhcehbfeng::FriendApplySourceAssist => "FRIEND_APPLY_SOURCE_ASSIST",
            Mfhcehbfeng::FriendApplySourceRecommendAssist => {
                "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST"
            }
            Mfhcehbfeng::FriendApplySourcePsnFriend => "FRIEND_APPLY_SOURCE_PSN_FRIEND",
            Mfhcehbfeng::FriendApplySourceAssistReward => {
                "FRIEND_APPLY_SOURCE_ASSIST_REWARD"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "FRIEND_APPLY_SOURCE_NONE" => Some(Self::FriendApplySourceNone),
            "FRIEND_APPLY_SOURCE_SEARCH" => Some(Self::FriendApplySourceSearch),
            "FRIEND_APPLY_SOURCE_RECOMMEND" => Some(Self::FriendApplySourceRecommend),
            "FRIEND_APPLY_SOURCE_ASSIST" => Some(Self::FriendApplySourceAssist),
            "FRIEND_APPLY_SOURCE_RECOMMEND_ASSIST" => {
                Some(Self::FriendApplySourceRecommendAssist)
            }
            "FRIEND_APPLY_SOURCE_PSN_FRIEND" => Some(Self::FriendApplySourcePsnFriend),
            "FRIEND_APPLY_SOURCE_ASSIST_REWARD" => {
                Some(Self::FriendApplySourceAssistReward)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdGachaType {
    None = 0,
    CmdExchangeGachaCeilingCsReq = 1939,
    CmdGetGachaInfoCsReq = 1968,
    CmdGetGachaCeilingScRsp = 1993,
    CmdDoGachaScRsp = 1943,
    CmdDoGachaCsReq = 1911,
    CmdGetGachaInfoScRsp = 1906,
    CmdExchangeGachaCeilingScRsp = 1929,
    CmdGetGachaCeilingCsReq = 1956,
}
impl CmdGachaType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdGachaType::None => "CmdGachaTypeNone",
            CmdGachaType::CmdExchangeGachaCeilingCsReq => "CmdExchangeGachaCeilingCsReq",
            CmdGachaType::CmdGetGachaInfoCsReq => "CmdGetGachaInfoCsReq",
            CmdGachaType::CmdGetGachaCeilingScRsp => "CmdGetGachaCeilingScRsp",
            CmdGachaType::CmdDoGachaScRsp => "CmdDoGachaScRsp",
            CmdGachaType::CmdDoGachaCsReq => "CmdDoGachaCsReq",
            CmdGachaType::CmdGetGachaInfoScRsp => "CmdGetGachaInfoScRsp",
            CmdGachaType::CmdExchangeGachaCeilingScRsp => "CmdExchangeGachaCeilingScRsp",
            CmdGachaType::CmdGetGachaCeilingCsReq => "CmdGetGachaCeilingCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdGachaTypeNone" => Some(Self::None),
            "CmdExchangeGachaCeilingCsReq" => Some(Self::CmdExchangeGachaCeilingCsReq),
            "CmdGetGachaInfoCsReq" => Some(Self::CmdGetGachaInfoCsReq),
            "CmdGetGachaCeilingScRsp" => Some(Self::CmdGetGachaCeilingScRsp),
            "CmdDoGachaScRsp" => Some(Self::CmdDoGachaScRsp),
            "CmdDoGachaCsReq" => Some(Self::CmdDoGachaCsReq),
            "CmdGetGachaInfoScRsp" => Some(Self::CmdGetGachaInfoScRsp),
            "CmdExchangeGachaCeilingScRsp" => Some(Self::CmdExchangeGachaCeilingScRsp),
            "CmdGetGachaCeilingCsReq" => Some(Self::CmdGetGachaCeilingCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Njiblanlkod {
    CmdHeartdialTypeNone = 0,
    CmdHeartDialScriptChangeScNotify = 6351,
    CmdChangeScriptEmotionScRsp = 6343,
    CmdHeartDialTraceScriptScRsp = 6399,
    CmdGetHeartDialInfoCsReq = 6368,
    CmdGetHeartDialInfoScRsp = 6306,
    CmdHeartDialTraceScriptCsReq = 6333,
    CmdChangeScriptEmotionCsReq = 6311,
    CmdFinishEmotionDialoguePerformanceCsReq = 6339,
    CmdSubmitEmotionItemCsReq = 6356,
    CmdSubmitEmotionItemScRsp = 6393,
    CmdFinishEmotionDialoguePerformanceScRsp = 6329,
}
impl Njiblanlkod {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Njiblanlkod::CmdHeartdialTypeNone => "CmdHeartdialTypeNone",
            Njiblanlkod::CmdHeartDialScriptChangeScNotify => {
                "CmdHeartDialScriptChangeScNotify"
            }
            Njiblanlkod::CmdChangeScriptEmotionScRsp => "CmdChangeScriptEmotionScRsp",
            Njiblanlkod::CmdHeartDialTraceScriptScRsp => "CmdHeartDialTraceScriptScRsp",
            Njiblanlkod::CmdGetHeartDialInfoCsReq => "CmdGetHeartDialInfoCsReq",
            Njiblanlkod::CmdGetHeartDialInfoScRsp => "CmdGetHeartDialInfoScRsp",
            Njiblanlkod::CmdHeartDialTraceScriptCsReq => "CmdHeartDialTraceScriptCsReq",
            Njiblanlkod::CmdChangeScriptEmotionCsReq => "CmdChangeScriptEmotionCsReq",
            Njiblanlkod::CmdFinishEmotionDialoguePerformanceCsReq => {
                "CmdFinishEmotionDialoguePerformanceCsReq"
            }
            Njiblanlkod::CmdSubmitEmotionItemCsReq => "CmdSubmitEmotionItemCsReq",
            Njiblanlkod::CmdSubmitEmotionItemScRsp => "CmdSubmitEmotionItemScRsp",
            Njiblanlkod::CmdFinishEmotionDialoguePerformanceScRsp => {
                "CmdFinishEmotionDialoguePerformanceScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeartdialTypeNone" => Some(Self::CmdHeartdialTypeNone),
            "CmdHeartDialScriptChangeScNotify" => {
                Some(Self::CmdHeartDialScriptChangeScNotify)
            }
            "CmdChangeScriptEmotionScRsp" => Some(Self::CmdChangeScriptEmotionScRsp),
            "CmdHeartDialTraceScriptScRsp" => Some(Self::CmdHeartDialTraceScriptScRsp),
            "CmdGetHeartDialInfoCsReq" => Some(Self::CmdGetHeartDialInfoCsReq),
            "CmdGetHeartDialInfoScRsp" => Some(Self::CmdGetHeartDialInfoScRsp),
            "CmdHeartDialTraceScriptCsReq" => Some(Self::CmdHeartDialTraceScriptCsReq),
            "CmdChangeScriptEmotionCsReq" => Some(Self::CmdChangeScriptEmotionCsReq),
            "CmdFinishEmotionDialoguePerformanceCsReq" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceCsReq)
            }
            "CmdSubmitEmotionItemCsReq" => Some(Self::CmdSubmitEmotionItemCsReq),
            "CmdSubmitEmotionItemScRsp" => Some(Self::CmdSubmitEmotionItemScRsp),
            "CmdFinishEmotionDialoguePerformanceScRsp" => {
                Some(Self::CmdFinishEmotionDialoguePerformanceScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hijpilajhcm {
    HeartDialEmotionTypePeace = 0,
    HeartDialEmotionTypeAnger = 1,
    HeartDialEmotionTypeHappy = 2,
    HeartDialEmotionTypeSad = 3,
}
impl Hijpilajhcm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hijpilajhcm::HeartDialEmotionTypePeace => "HEART_DIAL_EMOTION_TYPE_PEACE",
            Hijpilajhcm::HeartDialEmotionTypeAnger => "HEART_DIAL_EMOTION_TYPE_ANGER",
            Hijpilajhcm::HeartDialEmotionTypeHappy => "HEART_DIAL_EMOTION_TYPE_HAPPY",
            Hijpilajhcm::HeartDialEmotionTypeSad => "HEART_DIAL_EMOTION_TYPE_SAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_EMOTION_TYPE_PEACE" => Some(Self::HeartDialEmotionTypePeace),
            "HEART_DIAL_EMOTION_TYPE_ANGER" => Some(Self::HeartDialEmotionTypeAnger),
            "HEART_DIAL_EMOTION_TYPE_HAPPY" => Some(Self::HeartDialEmotionTypeHappy),
            "HEART_DIAL_EMOTION_TYPE_SAD" => Some(Self::HeartDialEmotionTypeSad),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mcejjmodajg {
    HeartDialStepTypeMissing = 0,
    HeartDialStepTypeFull = 1,
    HeartDialStepTypeLock = 2,
    HeartDialStepTypeUnlock = 3,
    HeartDialStepTypeNormal = 4,
    HeartDialStepTypeControl = 5,
}
impl Mcejjmodajg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mcejjmodajg::HeartDialStepTypeMissing => "HEART_DIAL_STEP_TYPE_MISSING",
            Mcejjmodajg::HeartDialStepTypeFull => "HEART_DIAL_STEP_TYPE_FULL",
            Mcejjmodajg::HeartDialStepTypeLock => "HEART_DIAL_STEP_TYPE_LOCK",
            Mcejjmodajg::HeartDialStepTypeUnlock => "HEART_DIAL_STEP_TYPE_UNLOCK",
            Mcejjmodajg::HeartDialStepTypeNormal => "HEART_DIAL_STEP_TYPE_NORMAL",
            Mcejjmodajg::HeartDialStepTypeControl => "HEART_DIAL_STEP_TYPE_CONTROL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_STEP_TYPE_MISSING" => Some(Self::HeartDialStepTypeMissing),
            "HEART_DIAL_STEP_TYPE_FULL" => Some(Self::HeartDialStepTypeFull),
            "HEART_DIAL_STEP_TYPE_LOCK" => Some(Self::HeartDialStepTypeLock),
            "HEART_DIAL_STEP_TYPE_UNLOCK" => Some(Self::HeartDialStepTypeUnlock),
            "HEART_DIAL_STEP_TYPE_NORMAL" => Some(Self::HeartDialStepTypeNormal),
            "HEART_DIAL_STEP_TYPE_CONTROL" => Some(Self::HeartDialStepTypeControl),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Acmdlmdecmj {
    HeartDialUnlockStatusLock = 0,
    HeartDialUnlockStatusUnlockSingle = 1,
    HeartDialUnlockStatusUnlockAll = 2,
}
impl Acmdlmdecmj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Acmdlmdecmj::HeartDialUnlockStatusLock => "HEART_DIAL_UNLOCK_STATUS_LOCK",
            Acmdlmdecmj::HeartDialUnlockStatusUnlockSingle => {
                "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE"
            }
            Acmdlmdecmj::HeartDialUnlockStatusUnlockAll => {
                "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "HEART_DIAL_UNLOCK_STATUS_LOCK" => Some(Self::HeartDialUnlockStatusLock),
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_SINGLE" => {
                Some(Self::HeartDialUnlockStatusUnlockSingle)
            }
            "HEART_DIAL_UNLOCK_STATUS_UNLOCK_ALL" => {
                Some(Self::HeartDialUnlockStatusUnlockAll)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gkjkmkfnhfp {
    CmdHeliobusTypeNone = 0,
    CmdHeliobusEnterBattleCsReq = 5824,
    CmdHeliobusStartRaidCsReq = 5892,
    CmdHeliobusEnterBattleScRsp = 5817,
    CmdHeliobusSnsCommentScRsp = 5833,
    CmdHeliobusInfoChangedScNotify = 5854,
    CmdHeliobusSnsLikeScRsp = 5829,
    CmdHeliobusUnlockSkillScNotify = 5882,
    CmdHeliobusSnsPostCsReq = 5856,
    CmdHeliobusActivityDataScRsp = 5806,
    CmdHeliobusUpgradeLevelCsReq = 5865,
    CmdHeliobusSnsLikeCsReq = 5839,
    CmdHeliobusActivityDataCsReq = 5868,
    CmdHeliobusSnsReadCsReq = 5811,
    CmdHeliobusSnsUpdateScNotify = 5899,
    CmdHeliobusSnsReadScRsp = 5843,
    CmdHeliobusSnsPostScRsp = 5893,
    CmdHeliobusUpgradeLevelScRsp = 5848,
    CmdHeliobusSnsCommentCsReq = 5851,
    CmdHeliobusSelectSkillCsReq = 5834,
    CmdHeliobusLineupUpdateScNotify = 5809,
    CmdHeliobusChallengeUpdateScNotify = 5828,
    CmdHeliobusStartRaidScRsp = 5890,
    CmdHeliobusSelectSkillScRsp = 5897,
}
impl Gkjkmkfnhfp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gkjkmkfnhfp::CmdHeliobusTypeNone => "CmdHeliobusTypeNone",
            Gkjkmkfnhfp::CmdHeliobusEnterBattleCsReq => "CmdHeliobusEnterBattleCsReq",
            Gkjkmkfnhfp::CmdHeliobusStartRaidCsReq => "CmdHeliobusStartRaidCsReq",
            Gkjkmkfnhfp::CmdHeliobusEnterBattleScRsp => "CmdHeliobusEnterBattleScRsp",
            Gkjkmkfnhfp::CmdHeliobusSnsCommentScRsp => "CmdHeliobusSnsCommentScRsp",
            Gkjkmkfnhfp::CmdHeliobusInfoChangedScNotify => {
                "CmdHeliobusInfoChangedScNotify"
            }
            Gkjkmkfnhfp::CmdHeliobusSnsLikeScRsp => "CmdHeliobusSnsLikeScRsp",
            Gkjkmkfnhfp::CmdHeliobusUnlockSkillScNotify => {
                "CmdHeliobusUnlockSkillScNotify"
            }
            Gkjkmkfnhfp::CmdHeliobusSnsPostCsReq => "CmdHeliobusSnsPostCsReq",
            Gkjkmkfnhfp::CmdHeliobusActivityDataScRsp => "CmdHeliobusActivityDataScRsp",
            Gkjkmkfnhfp::CmdHeliobusUpgradeLevelCsReq => "CmdHeliobusUpgradeLevelCsReq",
            Gkjkmkfnhfp::CmdHeliobusSnsLikeCsReq => "CmdHeliobusSnsLikeCsReq",
            Gkjkmkfnhfp::CmdHeliobusActivityDataCsReq => "CmdHeliobusActivityDataCsReq",
            Gkjkmkfnhfp::CmdHeliobusSnsReadCsReq => "CmdHeliobusSnsReadCsReq",
            Gkjkmkfnhfp::CmdHeliobusSnsUpdateScNotify => "CmdHeliobusSnsUpdateScNotify",
            Gkjkmkfnhfp::CmdHeliobusSnsReadScRsp => "CmdHeliobusSnsReadScRsp",
            Gkjkmkfnhfp::CmdHeliobusSnsPostScRsp => "CmdHeliobusSnsPostScRsp",
            Gkjkmkfnhfp::CmdHeliobusUpgradeLevelScRsp => "CmdHeliobusUpgradeLevelScRsp",
            Gkjkmkfnhfp::CmdHeliobusSnsCommentCsReq => "CmdHeliobusSnsCommentCsReq",
            Gkjkmkfnhfp::CmdHeliobusSelectSkillCsReq => "CmdHeliobusSelectSkillCsReq",
            Gkjkmkfnhfp::CmdHeliobusLineupUpdateScNotify => {
                "CmdHeliobusLineupUpdateScNotify"
            }
            Gkjkmkfnhfp::CmdHeliobusChallengeUpdateScNotify => {
                "CmdHeliobusChallengeUpdateScNotify"
            }
            Gkjkmkfnhfp::CmdHeliobusStartRaidScRsp => "CmdHeliobusStartRaidScRsp",
            Gkjkmkfnhfp::CmdHeliobusSelectSkillScRsp => "CmdHeliobusSelectSkillScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdHeliobusTypeNone" => Some(Self::CmdHeliobusTypeNone),
            "CmdHeliobusEnterBattleCsReq" => Some(Self::CmdHeliobusEnterBattleCsReq),
            "CmdHeliobusStartRaidCsReq" => Some(Self::CmdHeliobusStartRaidCsReq),
            "CmdHeliobusEnterBattleScRsp" => Some(Self::CmdHeliobusEnterBattleScRsp),
            "CmdHeliobusSnsCommentScRsp" => Some(Self::CmdHeliobusSnsCommentScRsp),
            "CmdHeliobusInfoChangedScNotify" => {
                Some(Self::CmdHeliobusInfoChangedScNotify)
            }
            "CmdHeliobusSnsLikeScRsp" => Some(Self::CmdHeliobusSnsLikeScRsp),
            "CmdHeliobusUnlockSkillScNotify" => {
                Some(Self::CmdHeliobusUnlockSkillScNotify)
            }
            "CmdHeliobusSnsPostCsReq" => Some(Self::CmdHeliobusSnsPostCsReq),
            "CmdHeliobusActivityDataScRsp" => Some(Self::CmdHeliobusActivityDataScRsp),
            "CmdHeliobusUpgradeLevelCsReq" => Some(Self::CmdHeliobusUpgradeLevelCsReq),
            "CmdHeliobusSnsLikeCsReq" => Some(Self::CmdHeliobusSnsLikeCsReq),
            "CmdHeliobusActivityDataCsReq" => Some(Self::CmdHeliobusActivityDataCsReq),
            "CmdHeliobusSnsReadCsReq" => Some(Self::CmdHeliobusSnsReadCsReq),
            "CmdHeliobusSnsUpdateScNotify" => Some(Self::CmdHeliobusSnsUpdateScNotify),
            "CmdHeliobusSnsReadScRsp" => Some(Self::CmdHeliobusSnsReadScRsp),
            "CmdHeliobusSnsPostScRsp" => Some(Self::CmdHeliobusSnsPostScRsp),
            "CmdHeliobusUpgradeLevelScRsp" => Some(Self::CmdHeliobusUpgradeLevelScRsp),
            "CmdHeliobusSnsCommentCsReq" => Some(Self::CmdHeliobusSnsCommentCsReq),
            "CmdHeliobusSelectSkillCsReq" => Some(Self::CmdHeliobusSelectSkillCsReq),
            "CmdHeliobusLineupUpdateScNotify" => {
                Some(Self::CmdHeliobusLineupUpdateScNotify)
            }
            "CmdHeliobusChallengeUpdateScNotify" => {
                Some(Self::CmdHeliobusChallengeUpdateScNotify)
            }
            "CmdHeliobusStartRaidScRsp" => Some(Self::CmdHeliobusStartRaidScRsp),
            "CmdHeliobusSelectSkillScRsp" => Some(Self::CmdHeliobusSelectSkillScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdItemType {
    None = 0,
    CmdMarkItemCsReq = 549,
    CmdLockEquipmentScRsp = 593,
    CmdComposeSelectedRelicScRsp = 509,
    CmdCancelMarkItemNotify = 566,
    CmdSyncTurnFoodNotify = 546,
    CmdComposeLimitNumCompleteNotify = 532,
    CmdDeleteRelicFilterPlanCsReq = 507,
    CmdSetTurnFoodSwitchCsReq = 512,
    CmdRechargeSuccNotify = 517,
    CmdLockEquipmentCsReq = 556,
    CmdComposeItemCsReq = 565,
    CmdUseItemScRsp = 529,
    CmdAddRelicFilterPlanScRsp = 558,
    CmdGetMarkItemListScRsp = 576,
    CmdRelicRecommendCsReq = 567,
    CmdGetBagScRsp = 506,
    CmdPromoteEquipmentCsReq = 511,
    CmdDestroyItemScRsp = 523,
    CmdRankUpEquipmentScRsp = 533,
    CmdUseItemCsReq = 539,
    CmdGeneralVirtualItemDataNotify = 595,
    CmdSetTurnFoodSwitchScRsp = 530,
    CmdAddEquipmentScNotify = 588,
    CmdDiscardRelicScRsp = 569,
    CmdDeleteRelicFilterPlanScRsp = 541,
    CmdRelicRecommendScRsp = 515,
    CmdComposeLimitNumUpdateNotify = 516,
    CmdModifyRelicFilterPlanCsReq = 547,
    CmdDestroyItemCsReq = 584,
    CmdExpUpEquipmentScRsp = 554,
    CmdRelicAvatarRecommendScRsp = 540,
    CmdComposeSelectedRelicCsReq = 528,
    CmdAddRelicFilterPlanCsReq = 553,
    CmdLockRelicCsReq = 597,
    CmdExchangeHcoinScRsp = 590,
    CmdSellItemScRsp = 524,
    CmdSellItemCsReq = 525,
    CmdModifyRelicFilterPlanScRsp = 559,
    CmdGetBagCsReq = 568,
    CmdExpUpRelicScRsp = 534,
    CmdMarkRelicFilterPlanCsReq = 531,
    CmdRelicAvatarRecommendCsReq = 575,
    CmdExchangeHcoinCsReq = 592,
    CmdGetMarkItemListCsReq = 578,
    CmdPromoteEquipmentScRsp = 543,
    CmdExpUpEquipmentCsReq = 599,
    CmdGetRecyleTimeCsReq = 508,
    CmdDiscardRelicCsReq = 589,
    CmdComposeItemScRsp = 548,
    CmdMarkItemScRsp = 545,
    CmdLockRelicScRsp = 598,
    CmdMarkRelicFilterPlanScRsp = 503,
    CmdRelicFilterPlanClearNameScNotify = 526,
    CmdRankUpEquipmentCsReq = 551,
    CmdGetRelicFilterPlanCsReq = 585,
    CmdExpUpRelicCsReq = 582,
    CmdGetRecyleTimeScRsp = 581,
    CmdGetRelicFilterPlanScRsp = 600,
}
impl CmdItemType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdItemType::None => "CmdItemTypeNone",
            CmdItemType::CmdMarkItemCsReq => "CmdMarkItemCsReq",
            CmdItemType::CmdLockEquipmentScRsp => "CmdLockEquipmentScRsp",
            CmdItemType::CmdComposeSelectedRelicScRsp => "CmdComposeSelectedRelicScRsp",
            CmdItemType::CmdCancelMarkItemNotify => "CmdCancelMarkItemNotify",
            CmdItemType::CmdSyncTurnFoodNotify => "CmdSyncTurnFoodNotify",
            CmdItemType::CmdComposeLimitNumCompleteNotify => {
                "CmdComposeLimitNumCompleteNotify"
            }
            CmdItemType::CmdDeleteRelicFilterPlanCsReq => "CmdDeleteRelicFilterPlanCsReq",
            CmdItemType::CmdSetTurnFoodSwitchCsReq => "CmdSetTurnFoodSwitchCsReq",
            CmdItemType::CmdRechargeSuccNotify => "CmdRechargeSuccNotify",
            CmdItemType::CmdLockEquipmentCsReq => "CmdLockEquipmentCsReq",
            CmdItemType::CmdComposeItemCsReq => "CmdComposeItemCsReq",
            CmdItemType::CmdUseItemScRsp => "CmdUseItemScRsp",
            CmdItemType::CmdAddRelicFilterPlanScRsp => "CmdAddRelicFilterPlanScRsp",
            CmdItemType::CmdGetMarkItemListScRsp => "CmdGetMarkItemListScRsp",
            CmdItemType::CmdRelicRecommendCsReq => "CmdRelicRecommendCsReq",
            CmdItemType::CmdGetBagScRsp => "CmdGetBagScRsp",
            CmdItemType::CmdPromoteEquipmentCsReq => "CmdPromoteEquipmentCsReq",
            CmdItemType::CmdDestroyItemScRsp => "CmdDestroyItemScRsp",
            CmdItemType::CmdRankUpEquipmentScRsp => "CmdRankUpEquipmentScRsp",
            CmdItemType::CmdUseItemCsReq => "CmdUseItemCsReq",
            CmdItemType::CmdGeneralVirtualItemDataNotify => {
                "CmdGeneralVirtualItemDataNotify"
            }
            CmdItemType::CmdSetTurnFoodSwitchScRsp => "CmdSetTurnFoodSwitchScRsp",
            CmdItemType::CmdAddEquipmentScNotify => "CmdAddEquipmentScNotify",
            CmdItemType::CmdDiscardRelicScRsp => "CmdDiscardRelicScRsp",
            CmdItemType::CmdDeleteRelicFilterPlanScRsp => "CmdDeleteRelicFilterPlanScRsp",
            CmdItemType::CmdRelicRecommendScRsp => "CmdRelicRecommendScRsp",
            CmdItemType::CmdComposeLimitNumUpdateNotify => {
                "CmdComposeLimitNumUpdateNotify"
            }
            CmdItemType::CmdModifyRelicFilterPlanCsReq => "CmdModifyRelicFilterPlanCsReq",
            CmdItemType::CmdDestroyItemCsReq => "CmdDestroyItemCsReq",
            CmdItemType::CmdExpUpEquipmentScRsp => "CmdExpUpEquipmentScRsp",
            CmdItemType::CmdRelicAvatarRecommendScRsp => "CmdRelicAvatarRecommendScRsp",
            CmdItemType::CmdComposeSelectedRelicCsReq => "CmdComposeSelectedRelicCsReq",
            CmdItemType::CmdAddRelicFilterPlanCsReq => "CmdAddRelicFilterPlanCsReq",
            CmdItemType::CmdLockRelicCsReq => "CmdLockRelicCsReq",
            CmdItemType::CmdExchangeHcoinScRsp => "CmdExchangeHcoinScRsp",
            CmdItemType::CmdSellItemScRsp => "CmdSellItemScRsp",
            CmdItemType::CmdSellItemCsReq => "CmdSellItemCsReq",
            CmdItemType::CmdModifyRelicFilterPlanScRsp => "CmdModifyRelicFilterPlanScRsp",
            CmdItemType::CmdGetBagCsReq => "CmdGetBagCsReq",
            CmdItemType::CmdExpUpRelicScRsp => "CmdExpUpRelicScRsp",
            CmdItemType::CmdMarkRelicFilterPlanCsReq => "CmdMarkRelicFilterPlanCsReq",
            CmdItemType::CmdRelicAvatarRecommendCsReq => "CmdRelicAvatarRecommendCsReq",
            CmdItemType::CmdExchangeHcoinCsReq => "CmdExchangeHcoinCsReq",
            CmdItemType::CmdGetMarkItemListCsReq => "CmdGetMarkItemListCsReq",
            CmdItemType::CmdPromoteEquipmentScRsp => "CmdPromoteEquipmentScRsp",
            CmdItemType::CmdExpUpEquipmentCsReq => "CmdExpUpEquipmentCsReq",
            CmdItemType::CmdGetRecyleTimeCsReq => "CmdGetRecyleTimeCsReq",
            CmdItemType::CmdDiscardRelicCsReq => "CmdDiscardRelicCsReq",
            CmdItemType::CmdComposeItemScRsp => "CmdComposeItemScRsp",
            CmdItemType::CmdMarkItemScRsp => "CmdMarkItemScRsp",
            CmdItemType::CmdLockRelicScRsp => "CmdLockRelicScRsp",
            CmdItemType::CmdMarkRelicFilterPlanScRsp => "CmdMarkRelicFilterPlanScRsp",
            CmdItemType::CmdRelicFilterPlanClearNameScNotify => {
                "CmdRelicFilterPlanClearNameScNotify"
            }
            CmdItemType::CmdRankUpEquipmentCsReq => "CmdRankUpEquipmentCsReq",
            CmdItemType::CmdGetRelicFilterPlanCsReq => "CmdGetRelicFilterPlanCsReq",
            CmdItemType::CmdExpUpRelicCsReq => "CmdExpUpRelicCsReq",
            CmdItemType::CmdGetRecyleTimeScRsp => "CmdGetRecyleTimeScRsp",
            CmdItemType::CmdGetRelicFilterPlanScRsp => "CmdGetRelicFilterPlanScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdItemTypeNone" => Some(Self::None),
            "CmdMarkItemCsReq" => Some(Self::CmdMarkItemCsReq),
            "CmdLockEquipmentScRsp" => Some(Self::CmdLockEquipmentScRsp),
            "CmdComposeSelectedRelicScRsp" => Some(Self::CmdComposeSelectedRelicScRsp),
            "CmdCancelMarkItemNotify" => Some(Self::CmdCancelMarkItemNotify),
            "CmdSyncTurnFoodNotify" => Some(Self::CmdSyncTurnFoodNotify),
            "CmdComposeLimitNumCompleteNotify" => {
                Some(Self::CmdComposeLimitNumCompleteNotify)
            }
            "CmdDeleteRelicFilterPlanCsReq" => Some(Self::CmdDeleteRelicFilterPlanCsReq),
            "CmdSetTurnFoodSwitchCsReq" => Some(Self::CmdSetTurnFoodSwitchCsReq),
            "CmdRechargeSuccNotify" => Some(Self::CmdRechargeSuccNotify),
            "CmdLockEquipmentCsReq" => Some(Self::CmdLockEquipmentCsReq),
            "CmdComposeItemCsReq" => Some(Self::CmdComposeItemCsReq),
            "CmdUseItemScRsp" => Some(Self::CmdUseItemScRsp),
            "CmdAddRelicFilterPlanScRsp" => Some(Self::CmdAddRelicFilterPlanScRsp),
            "CmdGetMarkItemListScRsp" => Some(Self::CmdGetMarkItemListScRsp),
            "CmdRelicRecommendCsReq" => Some(Self::CmdRelicRecommendCsReq),
            "CmdGetBagScRsp" => Some(Self::CmdGetBagScRsp),
            "CmdPromoteEquipmentCsReq" => Some(Self::CmdPromoteEquipmentCsReq),
            "CmdDestroyItemScRsp" => Some(Self::CmdDestroyItemScRsp),
            "CmdRankUpEquipmentScRsp" => Some(Self::CmdRankUpEquipmentScRsp),
            "CmdUseItemCsReq" => Some(Self::CmdUseItemCsReq),
            "CmdGeneralVirtualItemDataNotify" => {
                Some(Self::CmdGeneralVirtualItemDataNotify)
            }
            "CmdSetTurnFoodSwitchScRsp" => Some(Self::CmdSetTurnFoodSwitchScRsp),
            "CmdAddEquipmentScNotify" => Some(Self::CmdAddEquipmentScNotify),
            "CmdDiscardRelicScRsp" => Some(Self::CmdDiscardRelicScRsp),
            "CmdDeleteRelicFilterPlanScRsp" => Some(Self::CmdDeleteRelicFilterPlanScRsp),
            "CmdRelicRecommendScRsp" => Some(Self::CmdRelicRecommendScRsp),
            "CmdComposeLimitNumUpdateNotify" => {
                Some(Self::CmdComposeLimitNumUpdateNotify)
            }
            "CmdModifyRelicFilterPlanCsReq" => Some(Self::CmdModifyRelicFilterPlanCsReq),
            "CmdDestroyItemCsReq" => Some(Self::CmdDestroyItemCsReq),
            "CmdExpUpEquipmentScRsp" => Some(Self::CmdExpUpEquipmentScRsp),
            "CmdRelicAvatarRecommendScRsp" => Some(Self::CmdRelicAvatarRecommendScRsp),
            "CmdComposeSelectedRelicCsReq" => Some(Self::CmdComposeSelectedRelicCsReq),
            "CmdAddRelicFilterPlanCsReq" => Some(Self::CmdAddRelicFilterPlanCsReq),
            "CmdLockRelicCsReq" => Some(Self::CmdLockRelicCsReq),
            "CmdExchangeHcoinScRsp" => Some(Self::CmdExchangeHcoinScRsp),
            "CmdSellItemScRsp" => Some(Self::CmdSellItemScRsp),
            "CmdSellItemCsReq" => Some(Self::CmdSellItemCsReq),
            "CmdModifyRelicFilterPlanScRsp" => Some(Self::CmdModifyRelicFilterPlanScRsp),
            "CmdGetBagCsReq" => Some(Self::CmdGetBagCsReq),
            "CmdExpUpRelicScRsp" => Some(Self::CmdExpUpRelicScRsp),
            "CmdMarkRelicFilterPlanCsReq" => Some(Self::CmdMarkRelicFilterPlanCsReq),
            "CmdRelicAvatarRecommendCsReq" => Some(Self::CmdRelicAvatarRecommendCsReq),
            "CmdExchangeHcoinCsReq" => Some(Self::CmdExchangeHcoinCsReq),
            "CmdGetMarkItemListCsReq" => Some(Self::CmdGetMarkItemListCsReq),
            "CmdPromoteEquipmentScRsp" => Some(Self::CmdPromoteEquipmentScRsp),
            "CmdExpUpEquipmentCsReq" => Some(Self::CmdExpUpEquipmentCsReq),
            "CmdGetRecyleTimeCsReq" => Some(Self::CmdGetRecyleTimeCsReq),
            "CmdDiscardRelicCsReq" => Some(Self::CmdDiscardRelicCsReq),
            "CmdComposeItemScRsp" => Some(Self::CmdComposeItemScRsp),
            "CmdMarkItemScRsp" => Some(Self::CmdMarkItemScRsp),
            "CmdLockRelicScRsp" => Some(Self::CmdLockRelicScRsp),
            "CmdMarkRelicFilterPlanScRsp" => Some(Self::CmdMarkRelicFilterPlanScRsp),
            "CmdRelicFilterPlanClearNameScNotify" => {
                Some(Self::CmdRelicFilterPlanClearNameScNotify)
            }
            "CmdRankUpEquipmentCsReq" => Some(Self::CmdRankUpEquipmentCsReq),
            "CmdGetRelicFilterPlanCsReq" => Some(Self::CmdGetRelicFilterPlanCsReq),
            "CmdExpUpRelicCsReq" => Some(Self::CmdExpUpRelicCsReq),
            "CmdGetRecyleTimeScRsp" => Some(Self::CmdGetRecyleTimeScRsp),
            "CmdGetRelicFilterPlanScRsp" => Some(Self::CmdGetRelicFilterPlanScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Koedfpccpch {
    TurnFoodSwitchNone = 0,
    TurnFoodSwitchAttack = 1,
    TurnFoodSwitchDefine = 2,
}
impl Koedfpccpch {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Koedfpccpch::TurnFoodSwitchNone => "TURN_FOOD_SWITCH_NONE",
            Koedfpccpch::TurnFoodSwitchAttack => "TURN_FOOD_SWITCH_ATTACK",
            Koedfpccpch::TurnFoodSwitchDefine => "TURN_FOOD_SWITCH_DEFINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TURN_FOOD_SWITCH_NONE" => Some(Self::TurnFoodSwitchNone),
            "TURN_FOOD_SWITCH_ATTACK" => Some(Self::TurnFoodSwitchAttack),
            "TURN_FOOD_SWITCH_DEFINE" => Some(Self::TurnFoodSwitchDefine),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dkfoeihhpkf {
    CmdJukeboxTypeNone = 0,
    CmdPlayBackGroundMusicCsReq = 3111,
    CmdTrialBackGroundMusicCsReq = 3139,
    CmdGetJukeboxDataScRsp = 3106,
    CmdUnlockBackGroundMusicScRsp = 3193,
    CmdTrialBackGroundMusicScRsp = 3129,
    CmdPlayBackGroundMusicScRsp = 3143,
    CmdGetJukeboxDataCsReq = 3168,
    CmdUnlockBackGroundMusicCsReq = 3156,
}
impl Dkfoeihhpkf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Dkfoeihhpkf::CmdJukeboxTypeNone => "CmdJukeboxTypeNone",
            Dkfoeihhpkf::CmdPlayBackGroundMusicCsReq => "CmdPlayBackGroundMusicCsReq",
            Dkfoeihhpkf::CmdTrialBackGroundMusicCsReq => "CmdTrialBackGroundMusicCsReq",
            Dkfoeihhpkf::CmdGetJukeboxDataScRsp => "CmdGetJukeboxDataScRsp",
            Dkfoeihhpkf::CmdUnlockBackGroundMusicScRsp => "CmdUnlockBackGroundMusicScRsp",
            Dkfoeihhpkf::CmdTrialBackGroundMusicScRsp => "CmdTrialBackGroundMusicScRsp",
            Dkfoeihhpkf::CmdPlayBackGroundMusicScRsp => "CmdPlayBackGroundMusicScRsp",
            Dkfoeihhpkf::CmdGetJukeboxDataCsReq => "CmdGetJukeboxDataCsReq",
            Dkfoeihhpkf::CmdUnlockBackGroundMusicCsReq => "CmdUnlockBackGroundMusicCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdJukeboxTypeNone" => Some(Self::CmdJukeboxTypeNone),
            "CmdPlayBackGroundMusicCsReq" => Some(Self::CmdPlayBackGroundMusicCsReq),
            "CmdTrialBackGroundMusicCsReq" => Some(Self::CmdTrialBackGroundMusicCsReq),
            "CmdGetJukeboxDataScRsp" => Some(Self::CmdGetJukeboxDataScRsp),
            "CmdUnlockBackGroundMusicScRsp" => Some(Self::CmdUnlockBackGroundMusicScRsp),
            "CmdTrialBackGroundMusicScRsp" => Some(Self::CmdTrialBackGroundMusicScRsp),
            "CmdPlayBackGroundMusicScRsp" => Some(Self::CmdPlayBackGroundMusicScRsp),
            "CmdGetJukeboxDataCsReq" => Some(Self::CmdGetJukeboxDataCsReq),
            "CmdUnlockBackGroundMusicCsReq" => Some(Self::CmdUnlockBackGroundMusicCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdLineupType {
    None = 0,
    CmdSetLineupNameCsReq = 798,
    CmdQuitLineupScRsp = 729,
    CmdGetCurLineupDataScRsp = 743,
    CmdGetAllLineupDataCsReq = 724,
    CmdSetLineupNameScRsp = 725,
    CmdJoinLineupScRsp = 793,
    CmdChangeLineupLeaderScRsp = 782,
    CmdSwitchLineupIndexCsReq = 734,
    CmdSwapLineupCsReq = 751,
    CmdSwapLineupScRsp = 733,
    CmdReplaceLineupScRsp = 728,
    CmdGetAllLineupDataScRsp = 717,
    CmdGetLineupAvatarDataCsReq = 754,
    CmdGetStageLineupScRsp = 706,
    CmdGetLineupAvatarDataScRsp = 765,
    CmdJoinLineupCsReq = 756,
    CmdGetStageLineupCsReq = 768,
    CmdReplaceLineupCsReq = 790,
    CmdSyncLineupNotify = 799,
    CmdGetCurLineupDataCsReq = 711,
    CmdSwitchLineupIndexScRsp = 797,
    CmdExtraLineupDestroyNotify = 709,
    CmdChangeLineupLeaderCsReq = 748,
    CmdQuitLineupCsReq = 739,
    CmdVirtualLineupDestroyNotify = 792,
}
impl CmdLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdLineupType::None => "CmdLineupTypeNone",
            CmdLineupType::CmdSetLineupNameCsReq => "CmdSetLineupNameCsReq",
            CmdLineupType::CmdQuitLineupScRsp => "CmdQuitLineupScRsp",
            CmdLineupType::CmdGetCurLineupDataScRsp => "CmdGetCurLineupDataScRsp",
            CmdLineupType::CmdGetAllLineupDataCsReq => "CmdGetAllLineupDataCsReq",
            CmdLineupType::CmdSetLineupNameScRsp => "CmdSetLineupNameScRsp",
            CmdLineupType::CmdJoinLineupScRsp => "CmdJoinLineupScRsp",
            CmdLineupType::CmdChangeLineupLeaderScRsp => "CmdChangeLineupLeaderScRsp",
            CmdLineupType::CmdSwitchLineupIndexCsReq => "CmdSwitchLineupIndexCsReq",
            CmdLineupType::CmdSwapLineupCsReq => "CmdSwapLineupCsReq",
            CmdLineupType::CmdSwapLineupScRsp => "CmdSwapLineupScRsp",
            CmdLineupType::CmdReplaceLineupScRsp => "CmdReplaceLineupScRsp",
            CmdLineupType::CmdGetAllLineupDataScRsp => "CmdGetAllLineupDataScRsp",
            CmdLineupType::CmdGetLineupAvatarDataCsReq => "CmdGetLineupAvatarDataCsReq",
            CmdLineupType::CmdGetStageLineupScRsp => "CmdGetStageLineupScRsp",
            CmdLineupType::CmdGetLineupAvatarDataScRsp => "CmdGetLineupAvatarDataScRsp",
            CmdLineupType::CmdJoinLineupCsReq => "CmdJoinLineupCsReq",
            CmdLineupType::CmdGetStageLineupCsReq => "CmdGetStageLineupCsReq",
            CmdLineupType::CmdReplaceLineupCsReq => "CmdReplaceLineupCsReq",
            CmdLineupType::CmdSyncLineupNotify => "CmdSyncLineupNotify",
            CmdLineupType::CmdGetCurLineupDataCsReq => "CmdGetCurLineupDataCsReq",
            CmdLineupType::CmdSwitchLineupIndexScRsp => "CmdSwitchLineupIndexScRsp",
            CmdLineupType::CmdExtraLineupDestroyNotify => "CmdExtraLineupDestroyNotify",
            CmdLineupType::CmdChangeLineupLeaderCsReq => "CmdChangeLineupLeaderCsReq",
            CmdLineupType::CmdQuitLineupCsReq => "CmdQuitLineupCsReq",
            CmdLineupType::CmdVirtualLineupDestroyNotify => {
                "CmdVirtualLineupDestroyNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLineupTypeNone" => Some(Self::None),
            "CmdSetLineupNameCsReq" => Some(Self::CmdSetLineupNameCsReq),
            "CmdQuitLineupScRsp" => Some(Self::CmdQuitLineupScRsp),
            "CmdGetCurLineupDataScRsp" => Some(Self::CmdGetCurLineupDataScRsp),
            "CmdGetAllLineupDataCsReq" => Some(Self::CmdGetAllLineupDataCsReq),
            "CmdSetLineupNameScRsp" => Some(Self::CmdSetLineupNameScRsp),
            "CmdJoinLineupScRsp" => Some(Self::CmdJoinLineupScRsp),
            "CmdChangeLineupLeaderScRsp" => Some(Self::CmdChangeLineupLeaderScRsp),
            "CmdSwitchLineupIndexCsReq" => Some(Self::CmdSwitchLineupIndexCsReq),
            "CmdSwapLineupCsReq" => Some(Self::CmdSwapLineupCsReq),
            "CmdSwapLineupScRsp" => Some(Self::CmdSwapLineupScRsp),
            "CmdReplaceLineupScRsp" => Some(Self::CmdReplaceLineupScRsp),
            "CmdGetAllLineupDataScRsp" => Some(Self::CmdGetAllLineupDataScRsp),
            "CmdGetLineupAvatarDataCsReq" => Some(Self::CmdGetLineupAvatarDataCsReq),
            "CmdGetStageLineupScRsp" => Some(Self::CmdGetStageLineupScRsp),
            "CmdGetLineupAvatarDataScRsp" => Some(Self::CmdGetLineupAvatarDataScRsp),
            "CmdJoinLineupCsReq" => Some(Self::CmdJoinLineupCsReq),
            "CmdGetStageLineupCsReq" => Some(Self::CmdGetStageLineupCsReq),
            "CmdReplaceLineupCsReq" => Some(Self::CmdReplaceLineupCsReq),
            "CmdSyncLineupNotify" => Some(Self::CmdSyncLineupNotify),
            "CmdGetCurLineupDataCsReq" => Some(Self::CmdGetCurLineupDataCsReq),
            "CmdSwitchLineupIndexScRsp" => Some(Self::CmdSwitchLineupIndexScRsp),
            "CmdExtraLineupDestroyNotify" => Some(Self::CmdExtraLineupDestroyNotify),
            "CmdChangeLineupLeaderCsReq" => Some(Self::CmdChangeLineupLeaderCsReq),
            "CmdQuitLineupCsReq" => Some(Self::CmdQuitLineupCsReq),
            "CmdVirtualLineupDestroyNotify" => Some(Self::CmdVirtualLineupDestroyNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cahdjeaggfa {
    LineupTypeNone = 0,
    LineupTypePreset = 1,
    LineupTypeVirtual = 2,
    LineupTypeExtra = 3,
    LineupTypeStoryLine = 4,
}
impl Cahdjeaggfa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Cahdjeaggfa::LineupTypeNone => "LINEUP_TYPE_NONE",
            Cahdjeaggfa::LineupTypePreset => "LINEUP_TYPE_PRESET",
            Cahdjeaggfa::LineupTypeVirtual => "LINEUP_TYPE_VIRTUAL",
            Cahdjeaggfa::LineupTypeExtra => "LINEUP_TYPE_EXTRA",
            Cahdjeaggfa::LineupTypeStoryLine => "LINEUP_TYPE_STORY_LINE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_TYPE_NONE" => Some(Self::LineupTypeNone),
            "LINEUP_TYPE_PRESET" => Some(Self::LineupTypePreset),
            "LINEUP_TYPE_VIRTUAL" => Some(Self::LineupTypeVirtual),
            "LINEUP_TYPE_EXTRA" => Some(Self::LineupTypeExtra),
            "LINEUP_TYPE_STORY_LINE" => Some(Self::LineupTypeStoryLine),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ExtraLineupType {
    LineupNone = 0,
    LineupChallenge = 1,
    LineupRogue = 2,
    LineupChallenge2 = 3,
    LineupChallenge3 = 4,
    LineupRogueChallenge = 5,
    LineupStageTrial = 6,
    LineupRogueTrial = 7,
    LineupActivity = 8,
    LineupBoxingClub = 9,
    LineupTreasureDungeon = 11,
    LineupChessRogue = 12,
    LineupHeliobus = 13,
    LineupTournRogue = 14,
    LineupRelicRogue = 15,
    LineupArcadeRogue = 16,
}
impl ExtraLineupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            ExtraLineupType::LineupNone => "LINEUP_NONE",
            ExtraLineupType::LineupChallenge => "LINEUP_CHALLENGE",
            ExtraLineupType::LineupRogue => "LINEUP_ROGUE",
            ExtraLineupType::LineupChallenge2 => "LINEUP_CHALLENGE_2",
            ExtraLineupType::LineupChallenge3 => "LINEUP_CHALLENGE_3",
            ExtraLineupType::LineupRogueChallenge => "LINEUP_ROGUE_CHALLENGE",
            ExtraLineupType::LineupStageTrial => "LINEUP_STAGE_TRIAL",
            ExtraLineupType::LineupRogueTrial => "LINEUP_ROGUE_TRIAL",
            ExtraLineupType::LineupActivity => "LINEUP_ACTIVITY",
            ExtraLineupType::LineupBoxingClub => "LINEUP_BOXING_CLUB",
            ExtraLineupType::LineupTreasureDungeon => "LINEUP_TREASURE_DUNGEON",
            ExtraLineupType::LineupChessRogue => "LINEUP_CHESS_ROGUE",
            ExtraLineupType::LineupHeliobus => "LINEUP_HELIOBUS",
            ExtraLineupType::LineupTournRogue => "LINEUP_TOURN_ROGUE",
            ExtraLineupType::LineupRelicRogue => "LINEUP_RELIC_ROGUE",
            ExtraLineupType::LineupArcadeRogue => "LINEUP_ARCADE_ROGUE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "LINEUP_NONE" => Some(Self::LineupNone),
            "LINEUP_CHALLENGE" => Some(Self::LineupChallenge),
            "LINEUP_ROGUE" => Some(Self::LineupRogue),
            "LINEUP_CHALLENGE_2" => Some(Self::LineupChallenge2),
            "LINEUP_CHALLENGE_3" => Some(Self::LineupChallenge3),
            "LINEUP_ROGUE_CHALLENGE" => Some(Self::LineupRogueChallenge),
            "LINEUP_STAGE_TRIAL" => Some(Self::LineupStageTrial),
            "LINEUP_ROGUE_TRIAL" => Some(Self::LineupRogueTrial),
            "LINEUP_ACTIVITY" => Some(Self::LineupActivity),
            "LINEUP_BOXING_CLUB" => Some(Self::LineupBoxingClub),
            "LINEUP_TREASURE_DUNGEON" => Some(Self::LineupTreasureDungeon),
            "LINEUP_CHESS_ROGUE" => Some(Self::LineupChessRogue),
            "LINEUP_HELIOBUS" => Some(Self::LineupHeliobus),
            "LINEUP_TOURN_ROGUE" => Some(Self::LineupTournRogue),
            "LINEUP_RELIC_ROGUE" => Some(Self::LineupRelicRogue),
            "LINEUP_ARCADE_ROGUE" => Some(Self::LineupArcadeRogue),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SyncLineupReason {
    SyncReasonNone = 0,
    SyncReasonMpAdd = 1,
    SyncReasonMpAddPropHit = 2,
    SyncReasonHpAdd = 3,
    SyncReasonHpAddPropHit = 4,
}
impl SyncLineupReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SyncLineupReason::SyncReasonNone => "SYNC_REASON_NONE",
            SyncLineupReason::SyncReasonMpAdd => "SYNC_REASON_MP_ADD",
            SyncLineupReason::SyncReasonMpAddPropHit => "SYNC_REASON_MP_ADD_PROP_HIT",
            SyncLineupReason::SyncReasonHpAdd => "SYNC_REASON_HP_ADD",
            SyncLineupReason::SyncReasonHpAddPropHit => "SYNC_REASON_HP_ADD_PROP_HIT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYNC_REASON_NONE" => Some(Self::SyncReasonNone),
            "SYNC_REASON_MP_ADD" => Some(Self::SyncReasonMpAdd),
            "SYNC_REASON_MP_ADD_PROP_HIT" => Some(Self::SyncReasonMpAddPropHit),
            "SYNC_REASON_HP_ADD" => Some(Self::SyncReasonHpAdd),
            "SYNC_REASON_HP_ADD_PROP_HIT" => Some(Self::SyncReasonHpAddPropHit),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Idooiaenifb {
    CmdLobbyTypeNone = 0,
    CmdLobbyQuitCsReq = 7362,
    CmdLobbyInviteScRsp = 7356,
    CmdLobbyBeginCsReq = 7361,
    CmdLobbyJoinScRsp = 7367,
    CmdLobbyJoinCsReq = 7365,
    CmdLobbyModifyPlayerInfoScRsp = 7354,
    CmdLobbyKickOutCsReq = 7384,
    CmdLobbyGetInfoScRsp = 7371,
    CmdLobbyKickOutScRsp = 7370,
    CmdLobbyGetInfoCsReq = 7398,
    CmdLobbyBeginScRsp = 7358,
    CmdLobbyCreateScRsp = 7374,
    CmdLobbyCreateCsReq = 7357,
    CmdLobbySyncInfoScNotify = 7386,
    CmdLobbyInviteCsReq = 7395,
    CmdLobbyModifyPlayerInfoCsReq = 7373,
    CmdLobbyQuitScRsp = 7389,
    CmdLobbyInviteScNotify = 7355,
}
impl Idooiaenifb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Idooiaenifb::CmdLobbyTypeNone => "CmdLobbyTypeNone",
            Idooiaenifb::CmdLobbyQuitCsReq => "CmdLobbyQuitCsReq",
            Idooiaenifb::CmdLobbyInviteScRsp => "CmdLobbyInviteScRsp",
            Idooiaenifb::CmdLobbyBeginCsReq => "CmdLobbyBeginCsReq",
            Idooiaenifb::CmdLobbyJoinScRsp => "CmdLobbyJoinScRsp",
            Idooiaenifb::CmdLobbyJoinCsReq => "CmdLobbyJoinCsReq",
            Idooiaenifb::CmdLobbyModifyPlayerInfoScRsp => "CmdLobbyModifyPlayerInfoScRsp",
            Idooiaenifb::CmdLobbyKickOutCsReq => "CmdLobbyKickOutCsReq",
            Idooiaenifb::CmdLobbyGetInfoScRsp => "CmdLobbyGetInfoScRsp",
            Idooiaenifb::CmdLobbyKickOutScRsp => "CmdLobbyKickOutScRsp",
            Idooiaenifb::CmdLobbyGetInfoCsReq => "CmdLobbyGetInfoCsReq",
            Idooiaenifb::CmdLobbyBeginScRsp => "CmdLobbyBeginScRsp",
            Idooiaenifb::CmdLobbyCreateScRsp => "CmdLobbyCreateScRsp",
            Idooiaenifb::CmdLobbyCreateCsReq => "CmdLobbyCreateCsReq",
            Idooiaenifb::CmdLobbySyncInfoScNotify => "CmdLobbySyncInfoScNotify",
            Idooiaenifb::CmdLobbyInviteCsReq => "CmdLobbyInviteCsReq",
            Idooiaenifb::CmdLobbyModifyPlayerInfoCsReq => "CmdLobbyModifyPlayerInfoCsReq",
            Idooiaenifb::CmdLobbyQuitScRsp => "CmdLobbyQuitScRsp",
            Idooiaenifb::CmdLobbyInviteScNotify => "CmdLobbyInviteScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdLobbyTypeNone" => Some(Self::CmdLobbyTypeNone),
            "CmdLobbyQuitCsReq" => Some(Self::CmdLobbyQuitCsReq),
            "CmdLobbyInviteScRsp" => Some(Self::CmdLobbyInviteScRsp),
            "CmdLobbyBeginCsReq" => Some(Self::CmdLobbyBeginCsReq),
            "CmdLobbyJoinScRsp" => Some(Self::CmdLobbyJoinScRsp),
            "CmdLobbyJoinCsReq" => Some(Self::CmdLobbyJoinCsReq),
            "CmdLobbyModifyPlayerInfoScRsp" => Some(Self::CmdLobbyModifyPlayerInfoScRsp),
            "CmdLobbyKickOutCsReq" => Some(Self::CmdLobbyKickOutCsReq),
            "CmdLobbyGetInfoScRsp" => Some(Self::CmdLobbyGetInfoScRsp),
            "CmdLobbyKickOutScRsp" => Some(Self::CmdLobbyKickOutScRsp),
            "CmdLobbyGetInfoCsReq" => Some(Self::CmdLobbyGetInfoCsReq),
            "CmdLobbyBeginScRsp" => Some(Self::CmdLobbyBeginScRsp),
            "CmdLobbyCreateScRsp" => Some(Self::CmdLobbyCreateScRsp),
            "CmdLobbyCreateCsReq" => Some(Self::CmdLobbyCreateCsReq),
            "CmdLobbySyncInfoScNotify" => Some(Self::CmdLobbySyncInfoScNotify),
            "CmdLobbyInviteCsReq" => Some(Self::CmdLobbyInviteCsReq),
            "CmdLobbyModifyPlayerInfoCsReq" => Some(Self::CmdLobbyModifyPlayerInfoCsReq),
            "CmdLobbyQuitScRsp" => Some(Self::CmdLobbyQuitScRsp),
            "CmdLobbyInviteScNotify" => Some(Self::CmdLobbyInviteScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMailType {
    None = 0,
    CmdGetMailScRsp = 806,
    CmdMarkReadMailCsReq = 811,
    CmdGetMailCsReq = 868,
    CmdMarkReadMailScRsp = 843,
    CmdNewMailScNotify = 851,
    CmdDelMailScRsp = 893,
    CmdTakeMailAttachmentScRsp = 829,
    CmdDelMailCsReq = 856,
    CmdTakeMailAttachmentCsReq = 839,
}
impl CmdMailType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdMailType::None => "CmdMailTypeNone",
            CmdMailType::CmdGetMailScRsp => "CmdGetMailScRsp",
            CmdMailType::CmdMarkReadMailCsReq => "CmdMarkReadMailCsReq",
            CmdMailType::CmdGetMailCsReq => "CmdGetMailCsReq",
            CmdMailType::CmdMarkReadMailScRsp => "CmdMarkReadMailScRsp",
            CmdMailType::CmdNewMailScNotify => "CmdNewMailScNotify",
            CmdMailType::CmdDelMailScRsp => "CmdDelMailScRsp",
            CmdMailType::CmdTakeMailAttachmentScRsp => "CmdTakeMailAttachmentScRsp",
            CmdMailType::CmdDelMailCsReq => "CmdDelMailCsReq",
            CmdMailType::CmdTakeMailAttachmentCsReq => "CmdTakeMailAttachmentCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMailTypeNone" => Some(Self::None),
            "CmdGetMailScRsp" => Some(Self::CmdGetMailScRsp),
            "CmdMarkReadMailCsReq" => Some(Self::CmdMarkReadMailCsReq),
            "CmdGetMailCsReq" => Some(Self::CmdGetMailCsReq),
            "CmdMarkReadMailScRsp" => Some(Self::CmdMarkReadMailScRsp),
            "CmdNewMailScNotify" => Some(Self::CmdNewMailScNotify),
            "CmdDelMailScRsp" => Some(Self::CmdDelMailScRsp),
            "CmdTakeMailAttachmentScRsp" => Some(Self::CmdTakeMailAttachmentScRsp),
            "CmdDelMailCsReq" => Some(Self::CmdDelMailCsReq),
            "CmdTakeMailAttachmentCsReq" => Some(Self::CmdTakeMailAttachmentCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Boikhbbncba {
    MailTypeNormal = 0,
    MailTypeStar = 1,
}
impl Boikhbbncba {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Boikhbbncba::MailTypeNormal => "MAIL_TYPE_NORMAL",
            Boikhbbncba::MailTypeStar => "MAIL_TYPE_STAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIL_TYPE_NORMAL" => Some(Self::MailTypeNormal),
            "MAIL_TYPE_STAR" => Some(Self::MailTypeStar),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jhbepgcaplh {
    CmdMapRotationTypeNone = 0,
    CmdResetMapRotationRegionCsReq = 6865,
    CmdUpdateRotaterScNotify = 6824,
    CmdDeployRotaterScRsp = 6893,
    CmdRotateMapCsReq = 6839,
    CmdInteractChargerScRsp = 6843,
    CmdGetMapRotationDataCsReq = 6899,
    CmdInteractChargerCsReq = 6811,
    CmdUpdateMapRotationDataScNotify = 6897,
    CmdLeaveMapRotationRegionScRsp = 6833,
    CmdUpdateEnergyScNotify = 6834,
    CmdLeaveMapRotationRegionScNotify = 6882,
    CmdEnterMapRotationRegionScRsp = 6806,
    CmdGetMapRotationDataScRsp = 6854,
    CmdLeaveMapRotationRegionCsReq = 6851,
    CmdResetMapRotationRegionScRsp = 6848,
    CmdRotateMapScRsp = 6829,
    CmdDeployRotaterCsReq = 6856,
    CmdRemoveRotaterScRsp = 6825,
    CmdEnterMapRotationRegionCsReq = 6868,
    CmdRemoveRotaterCsReq = 6898,
}
impl Jhbepgcaplh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jhbepgcaplh::CmdMapRotationTypeNone => "CmdMapRotationTypeNone",
            Jhbepgcaplh::CmdResetMapRotationRegionCsReq => {
                "CmdResetMapRotationRegionCsReq"
            }
            Jhbepgcaplh::CmdUpdateRotaterScNotify => "CmdUpdateRotaterScNotify",
            Jhbepgcaplh::CmdDeployRotaterScRsp => "CmdDeployRotaterScRsp",
            Jhbepgcaplh::CmdRotateMapCsReq => "CmdRotateMapCsReq",
            Jhbepgcaplh::CmdInteractChargerScRsp => "CmdInteractChargerScRsp",
            Jhbepgcaplh::CmdGetMapRotationDataCsReq => "CmdGetMapRotationDataCsReq",
            Jhbepgcaplh::CmdInteractChargerCsReq => "CmdInteractChargerCsReq",
            Jhbepgcaplh::CmdUpdateMapRotationDataScNotify => {
                "CmdUpdateMapRotationDataScNotify"
            }
            Jhbepgcaplh::CmdLeaveMapRotationRegionScRsp => {
                "CmdLeaveMapRotationRegionScRsp"
            }
            Jhbepgcaplh::CmdUpdateEnergyScNotify => "CmdUpdateEnergyScNotify",
            Jhbepgcaplh::CmdLeaveMapRotationRegionScNotify => {
                "CmdLeaveMapRotationRegionScNotify"
            }
            Jhbepgcaplh::CmdEnterMapRotationRegionScRsp => {
                "CmdEnterMapRotationRegionScRsp"
            }
            Jhbepgcaplh::CmdGetMapRotationDataScRsp => "CmdGetMapRotationDataScRsp",
            Jhbepgcaplh::CmdLeaveMapRotationRegionCsReq => {
                "CmdLeaveMapRotationRegionCsReq"
            }
            Jhbepgcaplh::CmdResetMapRotationRegionScRsp => {
                "CmdResetMapRotationRegionScRsp"
            }
            Jhbepgcaplh::CmdRotateMapScRsp => "CmdRotateMapScRsp",
            Jhbepgcaplh::CmdDeployRotaterCsReq => "CmdDeployRotaterCsReq",
            Jhbepgcaplh::CmdRemoveRotaterScRsp => "CmdRemoveRotaterScRsp",
            Jhbepgcaplh::CmdEnterMapRotationRegionCsReq => {
                "CmdEnterMapRotationRegionCsReq"
            }
            Jhbepgcaplh::CmdRemoveRotaterCsReq => "CmdRemoveRotaterCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMapRotationTypeNone" => Some(Self::CmdMapRotationTypeNone),
            "CmdResetMapRotationRegionCsReq" => {
                Some(Self::CmdResetMapRotationRegionCsReq)
            }
            "CmdUpdateRotaterScNotify" => Some(Self::CmdUpdateRotaterScNotify),
            "CmdDeployRotaterScRsp" => Some(Self::CmdDeployRotaterScRsp),
            "CmdRotateMapCsReq" => Some(Self::CmdRotateMapCsReq),
            "CmdInteractChargerScRsp" => Some(Self::CmdInteractChargerScRsp),
            "CmdGetMapRotationDataCsReq" => Some(Self::CmdGetMapRotationDataCsReq),
            "CmdInteractChargerCsReq" => Some(Self::CmdInteractChargerCsReq),
            "CmdUpdateMapRotationDataScNotify" => {
                Some(Self::CmdUpdateMapRotationDataScNotify)
            }
            "CmdLeaveMapRotationRegionScRsp" => {
                Some(Self::CmdLeaveMapRotationRegionScRsp)
            }
            "CmdUpdateEnergyScNotify" => Some(Self::CmdUpdateEnergyScNotify),
            "CmdLeaveMapRotationRegionScNotify" => {
                Some(Self::CmdLeaveMapRotationRegionScNotify)
            }
            "CmdEnterMapRotationRegionScRsp" => {
                Some(Self::CmdEnterMapRotationRegionScRsp)
            }
            "CmdGetMapRotationDataScRsp" => Some(Self::CmdGetMapRotationDataScRsp),
            "CmdLeaveMapRotationRegionCsReq" => {
                Some(Self::CmdLeaveMapRotationRegionCsReq)
            }
            "CmdResetMapRotationRegionScRsp" => {
                Some(Self::CmdResetMapRotationRegionScRsp)
            }
            "CmdRotateMapScRsp" => Some(Self::CmdRotateMapScRsp),
            "CmdDeployRotaterCsReq" => Some(Self::CmdDeployRotaterCsReq),
            "CmdRemoveRotaterScRsp" => Some(Self::CmdRemoveRotaterScRsp),
            "CmdEnterMapRotationRegionCsReq" => {
                Some(Self::CmdEnterMapRotationRegionCsReq)
            }
            "CmdRemoveRotaterCsReq" => Some(Self::CmdRemoveRotaterCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ahoodboincp {
    CmdMatchTypeNone = 0,
    CmdMatchResultScNotify = 7311,
    CmdStartMatchScRsp = 7324,
    CmdCancelMatchScRsp = 7317,
    CmdStartMatchCsReq = 7307,
    CmdGetCrossInfoCsReq = 7308,
    CmdCancelMatchCsReq = 7315,
    CmdGetCrossInfoScRsp = 7323,
}
impl Ahoodboincp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ahoodboincp::CmdMatchTypeNone => "CmdMatchTypeNone",
            Ahoodboincp::CmdMatchResultScNotify => "CmdMatchResultScNotify",
            Ahoodboincp::CmdStartMatchScRsp => "CmdStartMatchScRsp",
            Ahoodboincp::CmdCancelMatchScRsp => "CmdCancelMatchScRsp",
            Ahoodboincp::CmdStartMatchCsReq => "CmdStartMatchCsReq",
            Ahoodboincp::CmdGetCrossInfoCsReq => "CmdGetCrossInfoCsReq",
            Ahoodboincp::CmdCancelMatchCsReq => "CmdCancelMatchCsReq",
            Ahoodboincp::CmdGetCrossInfoScRsp => "CmdGetCrossInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchTypeNone" => Some(Self::CmdMatchTypeNone),
            "CmdMatchResultScNotify" => Some(Self::CmdMatchResultScNotify),
            "CmdStartMatchScRsp" => Some(Self::CmdStartMatchScRsp),
            "CmdCancelMatchScRsp" => Some(Self::CmdCancelMatchScRsp),
            "CmdStartMatchCsReq" => Some(Self::CmdStartMatchCsReq),
            "CmdGetCrossInfoCsReq" => Some(Self::CmdGetCrossInfoCsReq),
            "CmdCancelMatchCsReq" => Some(Self::CmdCancelMatchCsReq),
            "CmdGetCrossInfoScRsp" => Some(Self::CmdGetCrossInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gogeiggmpdf {
    CmdMatchThreeModuleTypeNone = 0,
    CmdMatchThreeLevelEndCsReq = 7415,
    CmdMatchThreeGetDataCsReq = 7407,
    CmdMatchThreeSetBirdPosCsReq = 7408,
    CmdMatchThreeLevelEndScRsp = 7417,
    CmdMatchThreeSetBirdPosScRsp = 7423,
    CmdMatchThreeGetDataScRsp = 7424,
    CmdMatchThreeSyncDataScNotify = 7411,
}
impl Gogeiggmpdf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gogeiggmpdf::CmdMatchThreeModuleTypeNone => "CmdMatchThreeModuleTypeNone",
            Gogeiggmpdf::CmdMatchThreeLevelEndCsReq => "CmdMatchThreeLevelEndCsReq",
            Gogeiggmpdf::CmdMatchThreeGetDataCsReq => "CmdMatchThreeGetDataCsReq",
            Gogeiggmpdf::CmdMatchThreeSetBirdPosCsReq => "CmdMatchThreeSetBirdPosCsReq",
            Gogeiggmpdf::CmdMatchThreeLevelEndScRsp => "CmdMatchThreeLevelEndScRsp",
            Gogeiggmpdf::CmdMatchThreeSetBirdPosScRsp => "CmdMatchThreeSetBirdPosScRsp",
            Gogeiggmpdf::CmdMatchThreeGetDataScRsp => "CmdMatchThreeGetDataScRsp",
            Gogeiggmpdf::CmdMatchThreeSyncDataScNotify => "CmdMatchThreeSyncDataScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMatchThreeModuleTypeNone" => Some(Self::CmdMatchThreeModuleTypeNone),
            "CmdMatchThreeLevelEndCsReq" => Some(Self::CmdMatchThreeLevelEndCsReq),
            "CmdMatchThreeGetDataCsReq" => Some(Self::CmdMatchThreeGetDataCsReq),
            "CmdMatchThreeSetBirdPosCsReq" => Some(Self::CmdMatchThreeSetBirdPosCsReq),
            "CmdMatchThreeLevelEndScRsp" => Some(Self::CmdMatchThreeLevelEndScRsp),
            "CmdMatchThreeSetBirdPosScRsp" => Some(Self::CmdMatchThreeSetBirdPosScRsp),
            "CmdMatchThreeGetDataScRsp" => Some(Self::CmdMatchThreeGetDataScRsp),
            "CmdMatchThreeSyncDataScNotify" => Some(Self::CmdMatchThreeSyncDataScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Obnecljmhjj {
    MatchThreeStatisticsNone = 0,
    MatchThreeStatisticsFirst = 1,
    MatchThreeStatisticsSecond = 2,
    MatchThreeStatisticsThird = 3,
    MatchThreeStatisticsFruit = 4,
    MatchThreeStatisticsSkill = 5,
    MatchThreeStatisticsDefeat = 6,
    MatchThreeStatisticsBomb = 7,
    MatchThreeStatisticsDamage = 8,
    MatchThreeStatisticsEnergy = 9,
    MatchThreeStatisticsSwapBomb = 10,
}
impl Obnecljmhjj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Obnecljmhjj::MatchThreeStatisticsNone => "MatchThreeStatistics_None",
            Obnecljmhjj::MatchThreeStatisticsFirst => "MatchThreeStatistics_First",
            Obnecljmhjj::MatchThreeStatisticsSecond => "MatchThreeStatistics_Second",
            Obnecljmhjj::MatchThreeStatisticsThird => "MatchThreeStatistics_Third",
            Obnecljmhjj::MatchThreeStatisticsFruit => "MatchThreeStatistics_Fruit",
            Obnecljmhjj::MatchThreeStatisticsSkill => "MatchThreeStatistics_Skill",
            Obnecljmhjj::MatchThreeStatisticsDefeat => "MatchThreeStatistics_Defeat",
            Obnecljmhjj::MatchThreeStatisticsBomb => "MatchThreeStatistics_Bomb",
            Obnecljmhjj::MatchThreeStatisticsDamage => "MatchThreeStatistics_Damage",
            Obnecljmhjj::MatchThreeStatisticsEnergy => "MatchThreeStatistics_Energy",
            Obnecljmhjj::MatchThreeStatisticsSwapBomb => "MatchThreeStatistics_SwapBomb",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MatchThreeStatistics_None" => Some(Self::MatchThreeStatisticsNone),
            "MatchThreeStatistics_First" => Some(Self::MatchThreeStatisticsFirst),
            "MatchThreeStatistics_Second" => Some(Self::MatchThreeStatisticsSecond),
            "MatchThreeStatistics_Third" => Some(Self::MatchThreeStatisticsThird),
            "MatchThreeStatistics_Fruit" => Some(Self::MatchThreeStatisticsFruit),
            "MatchThreeStatistics_Skill" => Some(Self::MatchThreeStatisticsSkill),
            "MatchThreeStatistics_Defeat" => Some(Self::MatchThreeStatisticsDefeat),
            "MatchThreeStatistics_Bomb" => Some(Self::MatchThreeStatisticsBomb),
            "MatchThreeStatistics_Damage" => Some(Self::MatchThreeStatisticsDamage),
            "MatchThreeStatistics_Energy" => Some(Self::MatchThreeStatisticsEnergy),
            "MatchThreeStatistics_SwapBomb" => Some(Self::MatchThreeStatisticsSwapBomb),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMessageType {
    None = 0,
    CmdFinishItemIdScRsp = 2793,
    CmdFinishPerformSectionIdScRsp = 2733,
    CmdFinishSectionIdScRsp = 2729,
    CmdFinishSectionIdCsReq = 2739,
    CmdGetNpcMessageGroupScRsp = 2706,
    CmdFinishPerformSectionIdCsReq = 2751,
    CmdFinishItemIdCsReq = 2756,
    CmdGetNpcStatusScRsp = 2743,
    CmdGetNpcMessageGroupCsReq = 2768,
    CmdGetNpcStatusCsReq = 2711,
}
impl CmdMessageType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdMessageType::None => "CmdMessageTypeNone",
            CmdMessageType::CmdFinishItemIdScRsp => "CmdFinishItemIdScRsp",
            CmdMessageType::CmdFinishPerformSectionIdScRsp => {
                "CmdFinishPerformSectionIdScRsp"
            }
            CmdMessageType::CmdFinishSectionIdScRsp => "CmdFinishSectionIdScRsp",
            CmdMessageType::CmdFinishSectionIdCsReq => "CmdFinishSectionIdCsReq",
            CmdMessageType::CmdGetNpcMessageGroupScRsp => "CmdGetNpcMessageGroupScRsp",
            CmdMessageType::CmdFinishPerformSectionIdCsReq => {
                "CmdFinishPerformSectionIdCsReq"
            }
            CmdMessageType::CmdFinishItemIdCsReq => "CmdFinishItemIdCsReq",
            CmdMessageType::CmdGetNpcStatusScRsp => "CmdGetNpcStatusScRsp",
            CmdMessageType::CmdGetNpcMessageGroupCsReq => "CmdGetNpcMessageGroupCsReq",
            CmdMessageType::CmdGetNpcStatusCsReq => "CmdGetNpcStatusCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMessageTypeNone" => Some(Self::None),
            "CmdFinishItemIdScRsp" => Some(Self::CmdFinishItemIdScRsp),
            "CmdFinishPerformSectionIdScRsp" => {
                Some(Self::CmdFinishPerformSectionIdScRsp)
            }
            "CmdFinishSectionIdScRsp" => Some(Self::CmdFinishSectionIdScRsp),
            "CmdFinishSectionIdCsReq" => Some(Self::CmdFinishSectionIdCsReq),
            "CmdGetNpcMessageGroupScRsp" => Some(Self::CmdGetNpcMessageGroupScRsp),
            "CmdFinishPerformSectionIdCsReq" => {
                Some(Self::CmdFinishPerformSectionIdCsReq)
            }
            "CmdFinishItemIdCsReq" => Some(Self::CmdFinishItemIdCsReq),
            "CmdGetNpcStatusScRsp" => Some(Self::CmdGetNpcStatusScRsp),
            "CmdGetNpcMessageGroupCsReq" => Some(Self::CmdGetNpcMessageGroupCsReq),
            "CmdGetNpcStatusCsReq" => Some(Self::CmdGetNpcStatusCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mnnpgmjjgml {
    CmdMiscModuleTypeNone = 0,
    CmdDifficultyAdjustmentUpdateDataScRsp = 4123,
    CmdSubmitOrigamiItemCsReq = 4182,
    CmdDifficultyAdjustmentUpdateDataCsReq = 4184,
    CmdSecurityReportScRsp = 4154,
    CmdGetGunPlayDataScRsp = 4188,
    CmdDifficultyAdjustmentGetDataCsReq = 4132,
    CmdGetMovieRacingDataCsReq = 4117,
    CmdGetShareDataScRsp = 4143,
    CmdDifficultyAdjustmentGetDataScRsp = 4116,
    CmdSecurityReportCsReq = 4199,
    CmdCancelCacheNotifyCsReq = 4151,
    CmdShareCsReq = 4168,
    CmdGetShareDataCsReq = 4111,
    CmdTakePictureScRsp = 4193,
    CmdCancelCacheNotifyScRsp = 4133,
    CmdUpdateGunPlayDataScRsp = 4181,
    CmdGetGunPlayDataCsReq = 4109,
    CmdTakePictureCsReq = 4156,
    CmdGetMovieRacingDataScRsp = 4192,
    CmdUpdateMovieRacingDataScRsp = 4128,
    CmdShareScRsp = 4106,
    CmdTriggerVoiceScRsp = 4148,
    CmdUpdateGunPlayDataCsReq = 4108,
    CmdUpdateMovieRacingDataCsReq = 4190,
    CmdSubmitOrigamiItemScRsp = 4134,
    CmdTriggerVoiceCsReq = 4165,
}
impl Mnnpgmjjgml {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mnnpgmjjgml::CmdMiscModuleTypeNone => "CmdMiscModuleTypeNone",
            Mnnpgmjjgml::CmdDifficultyAdjustmentUpdateDataScRsp => {
                "CmdDifficultyAdjustmentUpdateDataScRsp"
            }
            Mnnpgmjjgml::CmdSubmitOrigamiItemCsReq => "CmdSubmitOrigamiItemCsReq",
            Mnnpgmjjgml::CmdDifficultyAdjustmentUpdateDataCsReq => {
                "CmdDifficultyAdjustmentUpdateDataCsReq"
            }
            Mnnpgmjjgml::CmdSecurityReportScRsp => "CmdSecurityReportScRsp",
            Mnnpgmjjgml::CmdGetGunPlayDataScRsp => "CmdGetGunPlayDataScRsp",
            Mnnpgmjjgml::CmdDifficultyAdjustmentGetDataCsReq => {
                "CmdDifficultyAdjustmentGetDataCsReq"
            }
            Mnnpgmjjgml::CmdGetMovieRacingDataCsReq => "CmdGetMovieRacingDataCsReq",
            Mnnpgmjjgml::CmdGetShareDataScRsp => "CmdGetShareDataScRsp",
            Mnnpgmjjgml::CmdDifficultyAdjustmentGetDataScRsp => {
                "CmdDifficultyAdjustmentGetDataScRsp"
            }
            Mnnpgmjjgml::CmdSecurityReportCsReq => "CmdSecurityReportCsReq",
            Mnnpgmjjgml::CmdCancelCacheNotifyCsReq => "CmdCancelCacheNotifyCsReq",
            Mnnpgmjjgml::CmdShareCsReq => "CmdShareCsReq",
            Mnnpgmjjgml::CmdGetShareDataCsReq => "CmdGetShareDataCsReq",
            Mnnpgmjjgml::CmdTakePictureScRsp => "CmdTakePictureScRsp",
            Mnnpgmjjgml::CmdCancelCacheNotifyScRsp => "CmdCancelCacheNotifyScRsp",
            Mnnpgmjjgml::CmdUpdateGunPlayDataScRsp => "CmdUpdateGunPlayDataScRsp",
            Mnnpgmjjgml::CmdGetGunPlayDataCsReq => "CmdGetGunPlayDataCsReq",
            Mnnpgmjjgml::CmdTakePictureCsReq => "CmdTakePictureCsReq",
            Mnnpgmjjgml::CmdGetMovieRacingDataScRsp => "CmdGetMovieRacingDataScRsp",
            Mnnpgmjjgml::CmdUpdateMovieRacingDataScRsp => "CmdUpdateMovieRacingDataScRsp",
            Mnnpgmjjgml::CmdShareScRsp => "CmdShareScRsp",
            Mnnpgmjjgml::CmdTriggerVoiceScRsp => "CmdTriggerVoiceScRsp",
            Mnnpgmjjgml::CmdUpdateGunPlayDataCsReq => "CmdUpdateGunPlayDataCsReq",
            Mnnpgmjjgml::CmdUpdateMovieRacingDataCsReq => "CmdUpdateMovieRacingDataCsReq",
            Mnnpgmjjgml::CmdSubmitOrigamiItemScRsp => "CmdSubmitOrigamiItemScRsp",
            Mnnpgmjjgml::CmdTriggerVoiceCsReq => "CmdTriggerVoiceCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMiscModuleTypeNone" => Some(Self::CmdMiscModuleTypeNone),
            "CmdDifficultyAdjustmentUpdateDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataScRsp)
            }
            "CmdSubmitOrigamiItemCsReq" => Some(Self::CmdSubmitOrigamiItemCsReq),
            "CmdDifficultyAdjustmentUpdateDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentUpdateDataCsReq)
            }
            "CmdSecurityReportScRsp" => Some(Self::CmdSecurityReportScRsp),
            "CmdGetGunPlayDataScRsp" => Some(Self::CmdGetGunPlayDataScRsp),
            "CmdDifficultyAdjustmentGetDataCsReq" => {
                Some(Self::CmdDifficultyAdjustmentGetDataCsReq)
            }
            "CmdGetMovieRacingDataCsReq" => Some(Self::CmdGetMovieRacingDataCsReq),
            "CmdGetShareDataScRsp" => Some(Self::CmdGetShareDataScRsp),
            "CmdDifficultyAdjustmentGetDataScRsp" => {
                Some(Self::CmdDifficultyAdjustmentGetDataScRsp)
            }
            "CmdSecurityReportCsReq" => Some(Self::CmdSecurityReportCsReq),
            "CmdCancelCacheNotifyCsReq" => Some(Self::CmdCancelCacheNotifyCsReq),
            "CmdShareCsReq" => Some(Self::CmdShareCsReq),
            "CmdGetShareDataCsReq" => Some(Self::CmdGetShareDataCsReq),
            "CmdTakePictureScRsp" => Some(Self::CmdTakePictureScRsp),
            "CmdCancelCacheNotifyScRsp" => Some(Self::CmdCancelCacheNotifyScRsp),
            "CmdUpdateGunPlayDataScRsp" => Some(Self::CmdUpdateGunPlayDataScRsp),
            "CmdGetGunPlayDataCsReq" => Some(Self::CmdGetGunPlayDataCsReq),
            "CmdTakePictureCsReq" => Some(Self::CmdTakePictureCsReq),
            "CmdGetMovieRacingDataScRsp" => Some(Self::CmdGetMovieRacingDataScRsp),
            "CmdUpdateMovieRacingDataScRsp" => Some(Self::CmdUpdateMovieRacingDataScRsp),
            "CmdShareScRsp" => Some(Self::CmdShareScRsp),
            "CmdTriggerVoiceScRsp" => Some(Self::CmdTriggerVoiceScRsp),
            "CmdUpdateGunPlayDataCsReq" => Some(Self::CmdUpdateGunPlayDataCsReq),
            "CmdUpdateMovieRacingDataCsReq" => Some(Self::CmdUpdateMovieRacingDataCsReq),
            "CmdSubmitOrigamiItemScRsp" => Some(Self::CmdSubmitOrigamiItemScRsp),
            "CmdTriggerVoiceCsReq" => Some(Self::CmdTriggerVoiceCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mcfficiioho {
    CacheNotifyTypeNone = 0,
    CacheNotifyTypeRecycle = 1,
    CacheNotifyTypeRecharge = 2,
}
impl Mcfficiioho {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mcfficiioho::CacheNotifyTypeNone => "CACHE_NOTIFY_TYPE_NONE",
            Mcfficiioho::CacheNotifyTypeRecycle => "CACHE_NOTIFY_TYPE_RECYCLE",
            Mcfficiioho::CacheNotifyTypeRecharge => "CACHE_NOTIFY_TYPE_RECHARGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CACHE_NOTIFY_TYPE_NONE" => Some(Self::CacheNotifyTypeNone),
            "CACHE_NOTIFY_TYPE_RECYCLE" => Some(Self::CacheNotifyTypeRecycle),
            "CACHE_NOTIFY_TYPE_RECHARGE" => Some(Self::CacheNotifyTypeRecharge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gnankafabkp {
    MovieRacingOverTake = 0,
    MovieRacingOverTakeEndless = 1,
    MovieRacingShooting = 2,
    MovieRacingShootingEndless = 3,
}
impl Gnankafabkp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gnankafabkp::MovieRacingOverTake => "MOVIE_RACING_OVER_TAKE",
            Gnankafabkp::MovieRacingOverTakeEndless => "MOVIE_RACING_OVER_TAKE_ENDLESS",
            Gnankafabkp::MovieRacingShooting => "MOVIE_RACING_SHOOTING",
            Gnankafabkp::MovieRacingShootingEndless => "MOVIE_RACING_SHOOTING_ENDLESS",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MOVIE_RACING_OVER_TAKE" => Some(Self::MovieRacingOverTake),
            "MOVIE_RACING_OVER_TAKE_ENDLESS" => Some(Self::MovieRacingOverTakeEndless),
            "MOVIE_RACING_SHOOTING" => Some(Self::MovieRacingShooting),
            "MOVIE_RACING_SHOOTING_ENDLESS" => Some(Self::MovieRacingShootingEndless),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gdkighgodkj {
    DifficultyAjustmentTypeDefault = 0,
    DifficultyAjustmentTypeEasy = 1,
}
impl Gdkighgodkj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gdkighgodkj::DifficultyAjustmentTypeDefault => {
                "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT"
            }
            Gdkighgodkj::DifficultyAjustmentTypeEasy => "DIFFICULTY_AJUSTMENT_TYPE_EASY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_TYPE_DEFAULT" => {
                Some(Self::DifficultyAjustmentTypeDefault)
            }
            "DIFFICULTY_AJUSTMENT_TYPE_EASY" => Some(Self::DifficultyAjustmentTypeEasy),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pchdmnlenjo {
    DifficultyAjustmentSourceNone = 0,
    DifficultyAjustmentSourceRaid = 1,
    DifficultyAjustmentSourceEvent = 2,
}
impl Pchdmnlenjo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pchdmnlenjo::DifficultyAjustmentSourceNone => {
                "DIFFICULTY_AJUSTMENT_SOURCE_NONE"
            }
            Pchdmnlenjo::DifficultyAjustmentSourceRaid => {
                "DIFFICULTY_AJUSTMENT_SOURCE_RAID"
            }
            Pchdmnlenjo::DifficultyAjustmentSourceEvent => {
                "DIFFICULTY_AJUSTMENT_SOURCE_EVENT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DIFFICULTY_AJUSTMENT_SOURCE_NONE" => {
                Some(Self::DifficultyAjustmentSourceNone)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_RAID" => {
                Some(Self::DifficultyAjustmentSourceRaid)
            }
            "DIFFICULTY_AJUSTMENT_SOURCE_EVENT" => {
                Some(Self::DifficultyAjustmentSourceEvent)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdMissionType {
    None = 0,
    CmdDailyTaskDataScNotify = 1229,
    CmdAcceptMissionEventScRsp = 1225,
    CmdSyncTaskCsReq = 1293,
    CmdMissionAcceptScNotify = 1249,
    CmdSetMissionEventProgressScRsp = 1209,
    CmdSetMissionEventProgressCsReq = 1228,
    CmdStartFinishSubMissionScNotify = 1232,
    CmdMissionGroupWarnScNotify = 1254,
    CmdGetMissionStatusScRsp = 1217,
    CmdGetMissionDataCsReq = 1268,
    CmdFinishCosumeItemMissionCsReq = 1265,
    CmdAcceptMainMissionScRsp = 1223,
    CmdGetMissionStatusCsReq = 1224,
    CmdGetMissionEventDataScRsp = 1234,
    CmdFinishTalkMissionScRsp = 1243,
    CmdSyncTaskScRsp = 1239,
    CmdFinishCosumeItemMissionScRsp = 1248,
    CmdAcceptMainMissionCsReq = 1284,
    CmdGetMainMissionCustomValueScRsp = 1276,
    CmdStartFinishMainMissionScNotify = 1216,
    CmdSubMissionRewardScNotify = 1288,
    CmdInterruptMissionEventCsReq = 1292,
    CmdGetMissionDataScRsp = 1206,
    CmdFinishTalkMissionCsReq = 1211,
    CmdGetMissionEventDataCsReq = 1282,
    CmdTeleportToMissionResetPointScRsp = 1281,
    CmdGetMainMissionCustomValueCsReq = 1278,
    CmdMissionEventRewardScNotify = 1297,
    CmdMissionRewardScNotify = 1256,
    CmdUpdateTrackMainMissionIdScRsp = 1246,
    CmdAcceptMissionEventCsReq = 1298,
    CmdUpdateTrackMainMissionIdCsReq = 1266,
    CmdTeleportToMissionResetPointCsReq = 1208,
    CmdInterruptMissionEventScRsp = 1290,
}
impl CmdMissionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdMissionType::None => "CmdMissionTypeNone",
            CmdMissionType::CmdDailyTaskDataScNotify => "CmdDailyTaskDataScNotify",
            CmdMissionType::CmdAcceptMissionEventScRsp => "CmdAcceptMissionEventScRsp",
            CmdMissionType::CmdSyncTaskCsReq => "CmdSyncTaskCsReq",
            CmdMissionType::CmdMissionAcceptScNotify => "CmdMissionAcceptScNotify",
            CmdMissionType::CmdSetMissionEventProgressScRsp => {
                "CmdSetMissionEventProgressScRsp"
            }
            CmdMissionType::CmdSetMissionEventProgressCsReq => {
                "CmdSetMissionEventProgressCsReq"
            }
            CmdMissionType::CmdStartFinishSubMissionScNotify => {
                "CmdStartFinishSubMissionScNotify"
            }
            CmdMissionType::CmdMissionGroupWarnScNotify => "CmdMissionGroupWarnScNotify",
            CmdMissionType::CmdGetMissionStatusScRsp => "CmdGetMissionStatusScRsp",
            CmdMissionType::CmdGetMissionDataCsReq => "CmdGetMissionDataCsReq",
            CmdMissionType::CmdFinishCosumeItemMissionCsReq => {
                "CmdFinishCosumeItemMissionCsReq"
            }
            CmdMissionType::CmdAcceptMainMissionScRsp => "CmdAcceptMainMissionScRsp",
            CmdMissionType::CmdGetMissionStatusCsReq => "CmdGetMissionStatusCsReq",
            CmdMissionType::CmdGetMissionEventDataScRsp => "CmdGetMissionEventDataScRsp",
            CmdMissionType::CmdFinishTalkMissionScRsp => "CmdFinishTalkMissionScRsp",
            CmdMissionType::CmdSyncTaskScRsp => "CmdSyncTaskScRsp",
            CmdMissionType::CmdFinishCosumeItemMissionScRsp => {
                "CmdFinishCosumeItemMissionScRsp"
            }
            CmdMissionType::CmdAcceptMainMissionCsReq => "CmdAcceptMainMissionCsReq",
            CmdMissionType::CmdGetMainMissionCustomValueScRsp => {
                "CmdGetMainMissionCustomValueScRsp"
            }
            CmdMissionType::CmdStartFinishMainMissionScNotify => {
                "CmdStartFinishMainMissionScNotify"
            }
            CmdMissionType::CmdSubMissionRewardScNotify => "CmdSubMissionRewardScNotify",
            CmdMissionType::CmdInterruptMissionEventCsReq => {
                "CmdInterruptMissionEventCsReq"
            }
            CmdMissionType::CmdGetMissionDataScRsp => "CmdGetMissionDataScRsp",
            CmdMissionType::CmdFinishTalkMissionCsReq => "CmdFinishTalkMissionCsReq",
            CmdMissionType::CmdGetMissionEventDataCsReq => "CmdGetMissionEventDataCsReq",
            CmdMissionType::CmdTeleportToMissionResetPointScRsp => {
                "CmdTeleportToMissionResetPointScRsp"
            }
            CmdMissionType::CmdGetMainMissionCustomValueCsReq => {
                "CmdGetMainMissionCustomValueCsReq"
            }
            CmdMissionType::CmdMissionEventRewardScNotify => {
                "CmdMissionEventRewardScNotify"
            }
            CmdMissionType::CmdMissionRewardScNotify => "CmdMissionRewardScNotify",
            CmdMissionType::CmdUpdateTrackMainMissionIdScRsp => {
                "CmdUpdateTrackMainMissionIdScRsp"
            }
            CmdMissionType::CmdAcceptMissionEventCsReq => "CmdAcceptMissionEventCsReq",
            CmdMissionType::CmdUpdateTrackMainMissionIdCsReq => {
                "CmdUpdateTrackMainMissionIdCsReq"
            }
            CmdMissionType::CmdTeleportToMissionResetPointCsReq => {
                "CmdTeleportToMissionResetPointCsReq"
            }
            CmdMissionType::CmdInterruptMissionEventScRsp => {
                "CmdInterruptMissionEventScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMissionTypeNone" => Some(Self::None),
            "CmdDailyTaskDataScNotify" => Some(Self::CmdDailyTaskDataScNotify),
            "CmdAcceptMissionEventScRsp" => Some(Self::CmdAcceptMissionEventScRsp),
            "CmdSyncTaskCsReq" => Some(Self::CmdSyncTaskCsReq),
            "CmdMissionAcceptScNotify" => Some(Self::CmdMissionAcceptScNotify),
            "CmdSetMissionEventProgressScRsp" => {
                Some(Self::CmdSetMissionEventProgressScRsp)
            }
            "CmdSetMissionEventProgressCsReq" => {
                Some(Self::CmdSetMissionEventProgressCsReq)
            }
            "CmdStartFinishSubMissionScNotify" => {
                Some(Self::CmdStartFinishSubMissionScNotify)
            }
            "CmdMissionGroupWarnScNotify" => Some(Self::CmdMissionGroupWarnScNotify),
            "CmdGetMissionStatusScRsp" => Some(Self::CmdGetMissionStatusScRsp),
            "CmdGetMissionDataCsReq" => Some(Self::CmdGetMissionDataCsReq),
            "CmdFinishCosumeItemMissionCsReq" => {
                Some(Self::CmdFinishCosumeItemMissionCsReq)
            }
            "CmdAcceptMainMissionScRsp" => Some(Self::CmdAcceptMainMissionScRsp),
            "CmdGetMissionStatusCsReq" => Some(Self::CmdGetMissionStatusCsReq),
            "CmdGetMissionEventDataScRsp" => Some(Self::CmdGetMissionEventDataScRsp),
            "CmdFinishTalkMissionScRsp" => Some(Self::CmdFinishTalkMissionScRsp),
            "CmdSyncTaskScRsp" => Some(Self::CmdSyncTaskScRsp),
            "CmdFinishCosumeItemMissionScRsp" => {
                Some(Self::CmdFinishCosumeItemMissionScRsp)
            }
            "CmdAcceptMainMissionCsReq" => Some(Self::CmdAcceptMainMissionCsReq),
            "CmdGetMainMissionCustomValueScRsp" => {
                Some(Self::CmdGetMainMissionCustomValueScRsp)
            }
            "CmdStartFinishMainMissionScNotify" => {
                Some(Self::CmdStartFinishMainMissionScNotify)
            }
            "CmdSubMissionRewardScNotify" => Some(Self::CmdSubMissionRewardScNotify),
            "CmdInterruptMissionEventCsReq" => Some(Self::CmdInterruptMissionEventCsReq),
            "CmdGetMissionDataScRsp" => Some(Self::CmdGetMissionDataScRsp),
            "CmdFinishTalkMissionCsReq" => Some(Self::CmdFinishTalkMissionCsReq),
            "CmdGetMissionEventDataCsReq" => Some(Self::CmdGetMissionEventDataCsReq),
            "CmdTeleportToMissionResetPointScRsp" => {
                Some(Self::CmdTeleportToMissionResetPointScRsp)
            }
            "CmdGetMainMissionCustomValueCsReq" => {
                Some(Self::CmdGetMainMissionCustomValueCsReq)
            }
            "CmdMissionEventRewardScNotify" => Some(Self::CmdMissionEventRewardScNotify),
            "CmdMissionRewardScNotify" => Some(Self::CmdMissionRewardScNotify),
            "CmdUpdateTrackMainMissionIdScRsp" => {
                Some(Self::CmdUpdateTrackMainMissionIdScRsp)
            }
            "CmdAcceptMissionEventCsReq" => Some(Self::CmdAcceptMissionEventCsReq),
            "CmdUpdateTrackMainMissionIdCsReq" => {
                Some(Self::CmdUpdateTrackMainMissionIdCsReq)
            }
            "CmdTeleportToMissionResetPointCsReq" => {
                Some(Self::CmdTeleportToMissionResetPointCsReq)
            }
            "CmdInterruptMissionEventScRsp" => Some(Self::CmdInterruptMissionEventScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kefklcglpbb {
    MissionSyncRecordNone = 0,
    MissionSyncRecordMainMissionAccept = 1,
    MissionSyncRecordMainMissionStart = 2,
    MissionSyncRecordMainMissionFinish = 3,
    MissionSyncRecordMainMissionDelete = 4,
    MissionSyncRecordMissionAccept = 11,
    MissionSyncRecordMissionStart = 12,
    MissionSyncRecordMissionFinish = 13,
    MissionSyncRecordMissionDelete = 14,
    MissionSyncRecordMissionProgress = 15,
}
impl Kefklcglpbb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kefklcglpbb::MissionSyncRecordNone => "MISSION_SYNC_RECORD_NONE",
            Kefklcglpbb::MissionSyncRecordMainMissionAccept => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT"
            }
            Kefklcglpbb::MissionSyncRecordMainMissionStart => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_START"
            }
            Kefklcglpbb::MissionSyncRecordMainMissionFinish => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH"
            }
            Kefklcglpbb::MissionSyncRecordMainMissionDelete => {
                "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE"
            }
            Kefklcglpbb::MissionSyncRecordMissionAccept => {
                "MISSION_SYNC_RECORD_MISSION_ACCEPT"
            }
            Kefklcglpbb::MissionSyncRecordMissionStart => {
                "MISSION_SYNC_RECORD_MISSION_START"
            }
            Kefklcglpbb::MissionSyncRecordMissionFinish => {
                "MISSION_SYNC_RECORD_MISSION_FINISH"
            }
            Kefklcglpbb::MissionSyncRecordMissionDelete => {
                "MISSION_SYNC_RECORD_MISSION_DELETE"
            }
            Kefklcglpbb::MissionSyncRecordMissionProgress => {
                "MISSION_SYNC_RECORD_MISSION_PROGRESS"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MISSION_SYNC_RECORD_NONE" => Some(Self::MissionSyncRecordNone),
            "MISSION_SYNC_RECORD_MAIN_MISSION_ACCEPT" => {
                Some(Self::MissionSyncRecordMainMissionAccept)
            }
            "MISSION_SYNC_RECORD_MAIN_MISSION_START" => {
                Some(Self::MissionSyncRecordMainMissionStart)
            }
            "MISSION_SYNC_RECORD_MAIN_MISSION_FINISH" => {
                Some(Self::MissionSyncRecordMainMissionFinish)
            }
            "MISSION_SYNC_RECORD_MAIN_MISSION_DELETE" => {
                Some(Self::MissionSyncRecordMainMissionDelete)
            }
            "MISSION_SYNC_RECORD_MISSION_ACCEPT" => {
                Some(Self::MissionSyncRecordMissionAccept)
            }
            "MISSION_SYNC_RECORD_MISSION_START" => {
                Some(Self::MissionSyncRecordMissionStart)
            }
            "MISSION_SYNC_RECORD_MISSION_FINISH" => {
                Some(Self::MissionSyncRecordMissionFinish)
            }
            "MISSION_SYNC_RECORD_MISSION_DELETE" => {
                Some(Self::MissionSyncRecordMissionDelete)
            }
            "MISSION_SYNC_RECORD_MISSION_PROGRESS" => {
                Some(Self::MissionSyncRecordMissionProgress)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kgmjpadefpp {
    MainMissionSyncNone = 0,
    MainMissionSyncMcv = 1,
}
impl Kgmjpadefpp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kgmjpadefpp::MainMissionSyncNone => "MAIN_MISSION_SYNC_NONE",
            Kgmjpadefpp::MainMissionSyncMcv => "MAIN_MISSION_SYNC_MCV",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAIN_MISSION_SYNC_NONE" => Some(Self::MainMissionSyncNone),
            "MAIN_MISSION_SYNC_MCV" => Some(Self::MainMissionSyncMcv),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hkmebfmeeko {
    TrackMainMissionUpdateNone = 0,
    TrackMainMissionUpdateAuto = 1,
    TrackMainMissionUpdateManual = 2,
    TrackMainMissionUpdateLoginReport = 3,
}
impl Hkmebfmeeko {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hkmebfmeeko::TrackMainMissionUpdateNone => "TRACK_MAIN_MISSION_UPDATE_NONE",
            Hkmebfmeeko::TrackMainMissionUpdateAuto => "TRACK_MAIN_MISSION_UPDATE_AUTO",
            Hkmebfmeeko::TrackMainMissionUpdateManual => {
                "TRACK_MAIN_MISSION_UPDATE_MANUAL"
            }
            Hkmebfmeeko::TrackMainMissionUpdateLoginReport => {
                "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRACK_MAIN_MISSION_UPDATE_NONE" => Some(Self::TrackMainMissionUpdateNone),
            "TRACK_MAIN_MISSION_UPDATE_AUTO" => Some(Self::TrackMainMissionUpdateAuto),
            "TRACK_MAIN_MISSION_UPDATE_MANUAL" => {
                Some(Self::TrackMainMissionUpdateManual)
            }
            "TRACK_MAIN_MISSION_UPDATE_LOGIN_REPORT" => {
                Some(Self::TrackMainMissionUpdateLoginReport)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Phjadhpnljo {
    CmdMonopolyTypeNone = 0,
    CmdMonopolyScrachRaffleTicketScRsp = 7050,
    CmdMonopolyMoveScRsp = 7051,
    CmdGetMonopolyFriendRankingListCsReq = 7058,
    CmdMonopolyReRollRandomScRsp = 7098,
    CmdMonopolyGameGachaCsReq = 7078,
    CmdGetMonopolyFriendRankingListScRsp = 7047,
    CmdMonopolyGuessDrawScNotify = 7067,
    CmdMonopolyGetRegionProgressScRsp = 7005,
    CmdGetMonopolyInfoCsReq = 7068,
    CmdMonopolyBuyGoodsCsReq = 7017,
    CmdMonopolyTakePhaseRewardCsReq = 7061,
    CmdMonopolyGameRaiseRatioCsReq = 7016,
    CmdMonopolySelectOptionCsReq = 7033,
    CmdMonopolyGetRaffleTicketCsReq = 7042,
    CmdMonopolyCellUpdateNotify = 7043,
    CmdGetMonopolyMbtiReportRewardCsReq = 7062,
    CmdDailyFirstEnterMonopolyActivityScRsp = 7048,
    CmdDeleteSocialEventServerCacheScRsp = 7073,
    CmdMonopolyGuessBuyInformationCsReq = 7089,
    CmdMonopolyGiveUpCurContentCsReq = 7009,
    CmdMonopolyActionResultScNotify = 7011,
    CmdMonopolyMoveCsReq = 7029,
    CmdMonopolyUpgradeAssetCsReq = 7090,
    CmdMonopolyLikeCsReq = 7059,
    CmdMonopolyClickMbtiReportCsReq = 7038,
    CmdMonopolyGameRaiseRatioScRsp = 7084,
    CmdMonopolyCheatDiceCsReq = 7008,
    CmdGetMonopolyMbtiReportRewardScRsp = 7001,
    CmdMonopolyGameBingoFlipCardScRsp = 7045,
    CmdMonopolyRollRandomCsReq = 7082,
    CmdMonopolyGuessChooseScRsp = 7095,
    CmdMonopolyGiveUpCurContentScRsp = 7088,
    CmdMonopolyRollDiceCsReq = 7093,
    CmdGetMonopolyInfoScRsp = 7006,
    CmdMonopolyConfirmRandomCsReq = 7025,
    CmdMonopolyDailySettleScNotify = 7053,
    CmdGetMonopolyDailyReportScRsp = 7020,
    CmdGetSocialEventServerCacheCsReq = 7022,
    CmdMonopolyGameSettleScNotify = 7023,
    CmdMonopolyEventLoadUpdateScNotify = 7052,
    CmdMonopolyAcceptQuizCsReq = 7066,
    CmdMonopolyContentUpdateScNotify = 7032,
    CmdMonopolyGetDailyInitItemCsReq = 7077,
    CmdMonopolyGetRaffleTicketScRsp = 7083,
    CmdMonopolyReRollRandomCsReq = 7097,
    CmdMonopolyLikeScNotify = 7041,
    CmdMonopolyGameGachaScRsp = 7076,
    CmdGetSocialEventServerCacheScRsp = 7021,
    CmdMonopolyGetRegionProgressCsReq = 7072,
    CmdMonopolySocialEventEffectScNotify = 7014,
    CmdMonopolyGetRafflePoolInfoCsReq = 7064,
    CmdMonopolyRollRandomScRsp = 7034,
    CmdMonopolyGetRafflePoolInfoScRsp = 7070,
    CmdMonopolyLikeScRsp = 7007,
    CmdMonopolyClickCellScRsp = 7027,
    CmdMonopolyUpgradeAssetScRsp = 7028,
    CmdMonopolyGameBingoFlipCardCsReq = 7049,
    CmdMonopolyClickMbtiReportScRsp = 7080,
    CmdMonopolyGetDailyInitItemScRsp = 7055,
    CmdMonopolyEventSelectFriendCsReq = 7026,
    CmdMonopolyTakeRaffleTicketRewardScRsp = 7036,
    CmdMonopolyRollDiceScRsp = 7039,
    CmdMonopolyCheatDiceScRsp = 7081,
    CmdGetMbtiReportScRsp = 7003,
    CmdMonopolyConditionUpdateScNotify = 7063,
    CmdMonopolySelectOptionScRsp = 7099,
    CmdMonopolyGameCreateScNotify = 7012,
    CmdMonopolyGuessBuyInformationScRsp = 7069,
    CmdMonopolyQuizDurationChangeScNotify = 7015,
    CmdMonopolyTakePhaseRewardScRsp = 7079,
    CmdGetMbtiReportCsReq = 7031,
    CmdMonopolyBuyGoodsScRsp = 7092,
    CmdMonopolyAcceptQuizScRsp = 7046,
    CmdGetMonopolyDailyReportCsReq = 7091,
    CmdMonopolySttUpdateScNotify = 7002,
    CmdMonopolyTakeRaffleTicketRewardCsReq = 7096,
    CmdMonopolyGuessChooseCsReq = 7030,
    CmdMonopolyEventSelectFriendScRsp = 7013,
    CmdDailyFirstEnterMonopolyActivityCsReq = 7065,
    CmdMonopolyConfirmRandomScRsp = 7024,
    CmdDeleteSocialEventServerCacheCsReq = 7071,
    CmdMonopolyScrachRaffleTicketCsReq = 7010,
    CmdMonopolyClickCellCsReq = 7057,
}
impl Phjadhpnljo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Phjadhpnljo::CmdMonopolyTypeNone => "CmdMonopolyTypeNone",
            Phjadhpnljo::CmdMonopolyScrachRaffleTicketScRsp => {
                "CmdMonopolyScrachRaffleTicketScRsp"
            }
            Phjadhpnljo::CmdMonopolyMoveScRsp => "CmdMonopolyMoveScRsp",
            Phjadhpnljo::CmdGetMonopolyFriendRankingListCsReq => {
                "CmdGetMonopolyFriendRankingListCsReq"
            }
            Phjadhpnljo::CmdMonopolyReRollRandomScRsp => "CmdMonopolyReRollRandomScRsp",
            Phjadhpnljo::CmdMonopolyGameGachaCsReq => "CmdMonopolyGameGachaCsReq",
            Phjadhpnljo::CmdGetMonopolyFriendRankingListScRsp => {
                "CmdGetMonopolyFriendRankingListScRsp"
            }
            Phjadhpnljo::CmdMonopolyGuessDrawScNotify => "CmdMonopolyGuessDrawScNotify",
            Phjadhpnljo::CmdMonopolyGetRegionProgressScRsp => {
                "CmdMonopolyGetRegionProgressScRsp"
            }
            Phjadhpnljo::CmdGetMonopolyInfoCsReq => "CmdGetMonopolyInfoCsReq",
            Phjadhpnljo::CmdMonopolyBuyGoodsCsReq => "CmdMonopolyBuyGoodsCsReq",
            Phjadhpnljo::CmdMonopolyTakePhaseRewardCsReq => {
                "CmdMonopolyTakePhaseRewardCsReq"
            }
            Phjadhpnljo::CmdMonopolyGameRaiseRatioCsReq => {
                "CmdMonopolyGameRaiseRatioCsReq"
            }
            Phjadhpnljo::CmdMonopolySelectOptionCsReq => "CmdMonopolySelectOptionCsReq",
            Phjadhpnljo::CmdMonopolyGetRaffleTicketCsReq => {
                "CmdMonopolyGetRaffleTicketCsReq"
            }
            Phjadhpnljo::CmdMonopolyCellUpdateNotify => "CmdMonopolyCellUpdateNotify",
            Phjadhpnljo::CmdGetMonopolyMbtiReportRewardCsReq => {
                "CmdGetMonopolyMbtiReportRewardCsReq"
            }
            Phjadhpnljo::CmdDailyFirstEnterMonopolyActivityScRsp => {
                "CmdDailyFirstEnterMonopolyActivityScRsp"
            }
            Phjadhpnljo::CmdDeleteSocialEventServerCacheScRsp => {
                "CmdDeleteSocialEventServerCacheScRsp"
            }
            Phjadhpnljo::CmdMonopolyGuessBuyInformationCsReq => {
                "CmdMonopolyGuessBuyInformationCsReq"
            }
            Phjadhpnljo::CmdMonopolyGiveUpCurContentCsReq => {
                "CmdMonopolyGiveUpCurContentCsReq"
            }
            Phjadhpnljo::CmdMonopolyActionResultScNotify => {
                "CmdMonopolyActionResultScNotify"
            }
            Phjadhpnljo::CmdMonopolyMoveCsReq => "CmdMonopolyMoveCsReq",
            Phjadhpnljo::CmdMonopolyUpgradeAssetCsReq => "CmdMonopolyUpgradeAssetCsReq",
            Phjadhpnljo::CmdMonopolyLikeCsReq => "CmdMonopolyLikeCsReq",
            Phjadhpnljo::CmdMonopolyClickMbtiReportCsReq => {
                "CmdMonopolyClickMbtiReportCsReq"
            }
            Phjadhpnljo::CmdMonopolyGameRaiseRatioScRsp => {
                "CmdMonopolyGameRaiseRatioScRsp"
            }
            Phjadhpnljo::CmdMonopolyCheatDiceCsReq => "CmdMonopolyCheatDiceCsReq",
            Phjadhpnljo::CmdGetMonopolyMbtiReportRewardScRsp => {
                "CmdGetMonopolyMbtiReportRewardScRsp"
            }
            Phjadhpnljo::CmdMonopolyGameBingoFlipCardScRsp => {
                "CmdMonopolyGameBingoFlipCardScRsp"
            }
            Phjadhpnljo::CmdMonopolyRollRandomCsReq => "CmdMonopolyRollRandomCsReq",
            Phjadhpnljo::CmdMonopolyGuessChooseScRsp => "CmdMonopolyGuessChooseScRsp",
            Phjadhpnljo::CmdMonopolyGiveUpCurContentScRsp => {
                "CmdMonopolyGiveUpCurContentScRsp"
            }
            Phjadhpnljo::CmdMonopolyRollDiceCsReq => "CmdMonopolyRollDiceCsReq",
            Phjadhpnljo::CmdGetMonopolyInfoScRsp => "CmdGetMonopolyInfoScRsp",
            Phjadhpnljo::CmdMonopolyConfirmRandomCsReq => "CmdMonopolyConfirmRandomCsReq",
            Phjadhpnljo::CmdMonopolyDailySettleScNotify => {
                "CmdMonopolyDailySettleScNotify"
            }
            Phjadhpnljo::CmdGetMonopolyDailyReportScRsp => {
                "CmdGetMonopolyDailyReportScRsp"
            }
            Phjadhpnljo::CmdGetSocialEventServerCacheCsReq => {
                "CmdGetSocialEventServerCacheCsReq"
            }
            Phjadhpnljo::CmdMonopolyGameSettleScNotify => "CmdMonopolyGameSettleScNotify",
            Phjadhpnljo::CmdMonopolyEventLoadUpdateScNotify => {
                "CmdMonopolyEventLoadUpdateScNotify"
            }
            Phjadhpnljo::CmdMonopolyAcceptQuizCsReq => "CmdMonopolyAcceptQuizCsReq",
            Phjadhpnljo::CmdMonopolyContentUpdateScNotify => {
                "CmdMonopolyContentUpdateScNotify"
            }
            Phjadhpnljo::CmdMonopolyGetDailyInitItemCsReq => {
                "CmdMonopolyGetDailyInitItemCsReq"
            }
            Phjadhpnljo::CmdMonopolyGetRaffleTicketScRsp => {
                "CmdMonopolyGetRaffleTicketScRsp"
            }
            Phjadhpnljo::CmdMonopolyReRollRandomCsReq => "CmdMonopolyReRollRandomCsReq",
            Phjadhpnljo::CmdMonopolyLikeScNotify => "CmdMonopolyLikeScNotify",
            Phjadhpnljo::CmdMonopolyGameGachaScRsp => "CmdMonopolyGameGachaScRsp",
            Phjadhpnljo::CmdGetSocialEventServerCacheScRsp => {
                "CmdGetSocialEventServerCacheScRsp"
            }
            Phjadhpnljo::CmdMonopolyGetRegionProgressCsReq => {
                "CmdMonopolyGetRegionProgressCsReq"
            }
            Phjadhpnljo::CmdMonopolySocialEventEffectScNotify => {
                "CmdMonopolySocialEventEffectScNotify"
            }
            Phjadhpnljo::CmdMonopolyGetRafflePoolInfoCsReq => {
                "CmdMonopolyGetRafflePoolInfoCsReq"
            }
            Phjadhpnljo::CmdMonopolyRollRandomScRsp => "CmdMonopolyRollRandomScRsp",
            Phjadhpnljo::CmdMonopolyGetRafflePoolInfoScRsp => {
                "CmdMonopolyGetRafflePoolInfoScRsp"
            }
            Phjadhpnljo::CmdMonopolyLikeScRsp => "CmdMonopolyLikeScRsp",
            Phjadhpnljo::CmdMonopolyClickCellScRsp => "CmdMonopolyClickCellScRsp",
            Phjadhpnljo::CmdMonopolyUpgradeAssetScRsp => "CmdMonopolyUpgradeAssetScRsp",
            Phjadhpnljo::CmdMonopolyGameBingoFlipCardCsReq => {
                "CmdMonopolyGameBingoFlipCardCsReq"
            }
            Phjadhpnljo::CmdMonopolyClickMbtiReportScRsp => {
                "CmdMonopolyClickMbtiReportScRsp"
            }
            Phjadhpnljo::CmdMonopolyGetDailyInitItemScRsp => {
                "CmdMonopolyGetDailyInitItemScRsp"
            }
            Phjadhpnljo::CmdMonopolyEventSelectFriendCsReq => {
                "CmdMonopolyEventSelectFriendCsReq"
            }
            Phjadhpnljo::CmdMonopolyTakeRaffleTicketRewardScRsp => {
                "CmdMonopolyTakeRaffleTicketRewardScRsp"
            }
            Phjadhpnljo::CmdMonopolyRollDiceScRsp => "CmdMonopolyRollDiceScRsp",
            Phjadhpnljo::CmdMonopolyCheatDiceScRsp => "CmdMonopolyCheatDiceScRsp",
            Phjadhpnljo::CmdGetMbtiReportScRsp => "CmdGetMbtiReportScRsp",
            Phjadhpnljo::CmdMonopolyConditionUpdateScNotify => {
                "CmdMonopolyConditionUpdateScNotify"
            }
            Phjadhpnljo::CmdMonopolySelectOptionScRsp => "CmdMonopolySelectOptionScRsp",
            Phjadhpnljo::CmdMonopolyGameCreateScNotify => "CmdMonopolyGameCreateScNotify",
            Phjadhpnljo::CmdMonopolyGuessBuyInformationScRsp => {
                "CmdMonopolyGuessBuyInformationScRsp"
            }
            Phjadhpnljo::CmdMonopolyQuizDurationChangeScNotify => {
                "CmdMonopolyQuizDurationChangeScNotify"
            }
            Phjadhpnljo::CmdMonopolyTakePhaseRewardScRsp => {
                "CmdMonopolyTakePhaseRewardScRsp"
            }
            Phjadhpnljo::CmdGetMbtiReportCsReq => "CmdGetMbtiReportCsReq",
            Phjadhpnljo::CmdMonopolyBuyGoodsScRsp => "CmdMonopolyBuyGoodsScRsp",
            Phjadhpnljo::CmdMonopolyAcceptQuizScRsp => "CmdMonopolyAcceptQuizScRsp",
            Phjadhpnljo::CmdGetMonopolyDailyReportCsReq => {
                "CmdGetMonopolyDailyReportCsReq"
            }
            Phjadhpnljo::CmdMonopolySttUpdateScNotify => "CmdMonopolySttUpdateScNotify",
            Phjadhpnljo::CmdMonopolyTakeRaffleTicketRewardCsReq => {
                "CmdMonopolyTakeRaffleTicketRewardCsReq"
            }
            Phjadhpnljo::CmdMonopolyGuessChooseCsReq => "CmdMonopolyGuessChooseCsReq",
            Phjadhpnljo::CmdMonopolyEventSelectFriendScRsp => {
                "CmdMonopolyEventSelectFriendScRsp"
            }
            Phjadhpnljo::CmdDailyFirstEnterMonopolyActivityCsReq => {
                "CmdDailyFirstEnterMonopolyActivityCsReq"
            }
            Phjadhpnljo::CmdMonopolyConfirmRandomScRsp => "CmdMonopolyConfirmRandomScRsp",
            Phjadhpnljo::CmdDeleteSocialEventServerCacheCsReq => {
                "CmdDeleteSocialEventServerCacheCsReq"
            }
            Phjadhpnljo::CmdMonopolyScrachRaffleTicketCsReq => {
                "CmdMonopolyScrachRaffleTicketCsReq"
            }
            Phjadhpnljo::CmdMonopolyClickCellCsReq => "CmdMonopolyClickCellCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMonopolyTypeNone" => Some(Self::CmdMonopolyTypeNone),
            "CmdMonopolyScrachRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyScrachRaffleTicketScRsp)
            }
            "CmdMonopolyMoveScRsp" => Some(Self::CmdMonopolyMoveScRsp),
            "CmdGetMonopolyFriendRankingListCsReq" => {
                Some(Self::CmdGetMonopolyFriendRankingListCsReq)
            }
            "CmdMonopolyReRollRandomScRsp" => Some(Self::CmdMonopolyReRollRandomScRsp),
            "CmdMonopolyGameGachaCsReq" => Some(Self::CmdMonopolyGameGachaCsReq),
            "CmdGetMonopolyFriendRankingListScRsp" => {
                Some(Self::CmdGetMonopolyFriendRankingListScRsp)
            }
            "CmdMonopolyGuessDrawScNotify" => Some(Self::CmdMonopolyGuessDrawScNotify),
            "CmdMonopolyGetRegionProgressScRsp" => {
                Some(Self::CmdMonopolyGetRegionProgressScRsp)
            }
            "CmdGetMonopolyInfoCsReq" => Some(Self::CmdGetMonopolyInfoCsReq),
            "CmdMonopolyBuyGoodsCsReq" => Some(Self::CmdMonopolyBuyGoodsCsReq),
            "CmdMonopolyTakePhaseRewardCsReq" => {
                Some(Self::CmdMonopolyTakePhaseRewardCsReq)
            }
            "CmdMonopolyGameRaiseRatioCsReq" => {
                Some(Self::CmdMonopolyGameRaiseRatioCsReq)
            }
            "CmdMonopolySelectOptionCsReq" => Some(Self::CmdMonopolySelectOptionCsReq),
            "CmdMonopolyGetRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyGetRaffleTicketCsReq)
            }
            "CmdMonopolyCellUpdateNotify" => Some(Self::CmdMonopolyCellUpdateNotify),
            "CmdGetMonopolyMbtiReportRewardCsReq" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardCsReq)
            }
            "CmdDailyFirstEnterMonopolyActivityScRsp" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityScRsp)
            }
            "CmdDeleteSocialEventServerCacheScRsp" => {
                Some(Self::CmdDeleteSocialEventServerCacheScRsp)
            }
            "CmdMonopolyGuessBuyInformationCsReq" => {
                Some(Self::CmdMonopolyGuessBuyInformationCsReq)
            }
            "CmdMonopolyGiveUpCurContentCsReq" => {
                Some(Self::CmdMonopolyGiveUpCurContentCsReq)
            }
            "CmdMonopolyActionResultScNotify" => {
                Some(Self::CmdMonopolyActionResultScNotify)
            }
            "CmdMonopolyMoveCsReq" => Some(Self::CmdMonopolyMoveCsReq),
            "CmdMonopolyUpgradeAssetCsReq" => Some(Self::CmdMonopolyUpgradeAssetCsReq),
            "CmdMonopolyLikeCsReq" => Some(Self::CmdMonopolyLikeCsReq),
            "CmdMonopolyClickMbtiReportCsReq" => {
                Some(Self::CmdMonopolyClickMbtiReportCsReq)
            }
            "CmdMonopolyGameRaiseRatioScRsp" => {
                Some(Self::CmdMonopolyGameRaiseRatioScRsp)
            }
            "CmdMonopolyCheatDiceCsReq" => Some(Self::CmdMonopolyCheatDiceCsReq),
            "CmdGetMonopolyMbtiReportRewardScRsp" => {
                Some(Self::CmdGetMonopolyMbtiReportRewardScRsp)
            }
            "CmdMonopolyGameBingoFlipCardScRsp" => {
                Some(Self::CmdMonopolyGameBingoFlipCardScRsp)
            }
            "CmdMonopolyRollRandomCsReq" => Some(Self::CmdMonopolyRollRandomCsReq),
            "CmdMonopolyGuessChooseScRsp" => Some(Self::CmdMonopolyGuessChooseScRsp),
            "CmdMonopolyGiveUpCurContentScRsp" => {
                Some(Self::CmdMonopolyGiveUpCurContentScRsp)
            }
            "CmdMonopolyRollDiceCsReq" => Some(Self::CmdMonopolyRollDiceCsReq),
            "CmdGetMonopolyInfoScRsp" => Some(Self::CmdGetMonopolyInfoScRsp),
            "CmdMonopolyConfirmRandomCsReq" => Some(Self::CmdMonopolyConfirmRandomCsReq),
            "CmdMonopolyDailySettleScNotify" => {
                Some(Self::CmdMonopolyDailySettleScNotify)
            }
            "CmdGetMonopolyDailyReportScRsp" => {
                Some(Self::CmdGetMonopolyDailyReportScRsp)
            }
            "CmdGetSocialEventServerCacheCsReq" => {
                Some(Self::CmdGetSocialEventServerCacheCsReq)
            }
            "CmdMonopolyGameSettleScNotify" => Some(Self::CmdMonopolyGameSettleScNotify),
            "CmdMonopolyEventLoadUpdateScNotify" => {
                Some(Self::CmdMonopolyEventLoadUpdateScNotify)
            }
            "CmdMonopolyAcceptQuizCsReq" => Some(Self::CmdMonopolyAcceptQuizCsReq),
            "CmdMonopolyContentUpdateScNotify" => {
                Some(Self::CmdMonopolyContentUpdateScNotify)
            }
            "CmdMonopolyGetDailyInitItemCsReq" => {
                Some(Self::CmdMonopolyGetDailyInitItemCsReq)
            }
            "CmdMonopolyGetRaffleTicketScRsp" => {
                Some(Self::CmdMonopolyGetRaffleTicketScRsp)
            }
            "CmdMonopolyReRollRandomCsReq" => Some(Self::CmdMonopolyReRollRandomCsReq),
            "CmdMonopolyLikeScNotify" => Some(Self::CmdMonopolyLikeScNotify),
            "CmdMonopolyGameGachaScRsp" => Some(Self::CmdMonopolyGameGachaScRsp),
            "CmdGetSocialEventServerCacheScRsp" => {
                Some(Self::CmdGetSocialEventServerCacheScRsp)
            }
            "CmdMonopolyGetRegionProgressCsReq" => {
                Some(Self::CmdMonopolyGetRegionProgressCsReq)
            }
            "CmdMonopolySocialEventEffectScNotify" => {
                Some(Self::CmdMonopolySocialEventEffectScNotify)
            }
            "CmdMonopolyGetRafflePoolInfoCsReq" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoCsReq)
            }
            "CmdMonopolyRollRandomScRsp" => Some(Self::CmdMonopolyRollRandomScRsp),
            "CmdMonopolyGetRafflePoolInfoScRsp" => {
                Some(Self::CmdMonopolyGetRafflePoolInfoScRsp)
            }
            "CmdMonopolyLikeScRsp" => Some(Self::CmdMonopolyLikeScRsp),
            "CmdMonopolyClickCellScRsp" => Some(Self::CmdMonopolyClickCellScRsp),
            "CmdMonopolyUpgradeAssetScRsp" => Some(Self::CmdMonopolyUpgradeAssetScRsp),
            "CmdMonopolyGameBingoFlipCardCsReq" => {
                Some(Self::CmdMonopolyGameBingoFlipCardCsReq)
            }
            "CmdMonopolyClickMbtiReportScRsp" => {
                Some(Self::CmdMonopolyClickMbtiReportScRsp)
            }
            "CmdMonopolyGetDailyInitItemScRsp" => {
                Some(Self::CmdMonopolyGetDailyInitItemScRsp)
            }
            "CmdMonopolyEventSelectFriendCsReq" => {
                Some(Self::CmdMonopolyEventSelectFriendCsReq)
            }
            "CmdMonopolyTakeRaffleTicketRewardScRsp" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardScRsp)
            }
            "CmdMonopolyRollDiceScRsp" => Some(Self::CmdMonopolyRollDiceScRsp),
            "CmdMonopolyCheatDiceScRsp" => Some(Self::CmdMonopolyCheatDiceScRsp),
            "CmdGetMbtiReportScRsp" => Some(Self::CmdGetMbtiReportScRsp),
            "CmdMonopolyConditionUpdateScNotify" => {
                Some(Self::CmdMonopolyConditionUpdateScNotify)
            }
            "CmdMonopolySelectOptionScRsp" => Some(Self::CmdMonopolySelectOptionScRsp),
            "CmdMonopolyGameCreateScNotify" => Some(Self::CmdMonopolyGameCreateScNotify),
            "CmdMonopolyGuessBuyInformationScRsp" => {
                Some(Self::CmdMonopolyGuessBuyInformationScRsp)
            }
            "CmdMonopolyQuizDurationChangeScNotify" => {
                Some(Self::CmdMonopolyQuizDurationChangeScNotify)
            }
            "CmdMonopolyTakePhaseRewardScRsp" => {
                Some(Self::CmdMonopolyTakePhaseRewardScRsp)
            }
            "CmdGetMbtiReportCsReq" => Some(Self::CmdGetMbtiReportCsReq),
            "CmdMonopolyBuyGoodsScRsp" => Some(Self::CmdMonopolyBuyGoodsScRsp),
            "CmdMonopolyAcceptQuizScRsp" => Some(Self::CmdMonopolyAcceptQuizScRsp),
            "CmdGetMonopolyDailyReportCsReq" => {
                Some(Self::CmdGetMonopolyDailyReportCsReq)
            }
            "CmdMonopolySttUpdateScNotify" => Some(Self::CmdMonopolySttUpdateScNotify),
            "CmdMonopolyTakeRaffleTicketRewardCsReq" => {
                Some(Self::CmdMonopolyTakeRaffleTicketRewardCsReq)
            }
            "CmdMonopolyGuessChooseCsReq" => Some(Self::CmdMonopolyGuessChooseCsReq),
            "CmdMonopolyEventSelectFriendScRsp" => {
                Some(Self::CmdMonopolyEventSelectFriendScRsp)
            }
            "CmdDailyFirstEnterMonopolyActivityCsReq" => {
                Some(Self::CmdDailyFirstEnterMonopolyActivityCsReq)
            }
            "CmdMonopolyConfirmRandomScRsp" => Some(Self::CmdMonopolyConfirmRandomScRsp),
            "CmdDeleteSocialEventServerCacheCsReq" => {
                Some(Self::CmdDeleteSocialEventServerCacheCsReq)
            }
            "CmdMonopolyScrachRaffleTicketCsReq" => {
                Some(Self::CmdMonopolyScrachRaffleTicketCsReq)
            }
            "CmdMonopolyClickCellCsReq" => Some(Self::CmdMonopolyClickCellCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nbbdamgnjpn {
    MonopolySocialEventStatusNone = 0,
    MonopolySocialEventStatusWaitingSelectFriend = 1,
}
impl Nbbdamgnjpn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nbbdamgnjpn::MonopolySocialEventStatusNone => {
                "MONOPOLY_SOCIAL_EVENT_STATUS_NONE"
            }
            Nbbdamgnjpn::MonopolySocialEventStatusWaitingSelectFriend => {
                "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_SOCIAL_EVENT_STATUS_NONE" => {
                Some(Self::MonopolySocialEventStatusNone)
            }
            "MONOPOLY_SOCIAL_EVENT_STATUS_WAITING_SELECT_FRIEND" => {
                Some(Self::MonopolySocialEventStatusWaitingSelectFriend)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Efjdphpapii {
    MonopolyCellStateIdle = 0,
    MonopolyCellStateBarrier = 1,
    MonopolyCellStateGround = 2,
    MonopolyCellStateFinish = 3,
}
impl Efjdphpapii {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Efjdphpapii::MonopolyCellStateIdle => "MONOPOLY_CELL_STATE_IDLE",
            Efjdphpapii::MonopolyCellStateBarrier => "MONOPOLY_CELL_STATE_BARRIER",
            Efjdphpapii::MonopolyCellStateGround => "MONOPOLY_CELL_STATE_GROUND",
            Efjdphpapii::MonopolyCellStateFinish => "MONOPOLY_CELL_STATE_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_CELL_STATE_IDLE" => Some(Self::MonopolyCellStateIdle),
            "MONOPOLY_CELL_STATE_BARRIER" => Some(Self::MonopolyCellStateBarrier),
            "MONOPOLY_CELL_STATE_GROUND" => Some(Self::MonopolyCellStateGround),
            "MONOPOLY_CELL_STATE_FINISH" => Some(Self::MonopolyCellStateFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ciaoikeanea {
    MonopolyActionResultSourceTypeNone = 0,
    MonopolyActionResultSourceTypeEffect = 1,
    MonopolyActionResultSourceTypeAssetBonus = 2,
    MonopolyActionResultSourceTypeAssetTax = 3,
    MonopolyActionResultSourceTypeAssetUpgrade = 4,
    MonopolyActionResultSourceTypeGameSettle = 5,
    MonopolyActionResultSourceTypeBuyGoods = 6,
    MonopolyActionResultSourceTypeClick = 7,
    MonopolyActionResultSourceTypeSocialEvent = 8,
    MonopolyActionResultSourceTypeLike = 9,
    MonopolyActionResultSourceTypeQuizGameSettle = 10,
}
impl Ciaoikeanea {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ciaoikeanea::MonopolyActionResultSourceTypeNone => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeEffect => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeAssetBonus => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeAssetTax => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeAssetUpgrade => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeBuyGoods => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeClick => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeSocialEvent => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeLike => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE"
            }
            Ciaoikeanea::MonopolyActionResultSourceTypeQuizGameSettle => {
                "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::MonopolyActionResultSourceTypeNone)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_EFFECT" => {
                Some(Self::MonopolyActionResultSourceTypeEffect)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_BONUS" => {
                Some(Self::MonopolyActionResultSourceTypeAssetBonus)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_TAX" => {
                Some(Self::MonopolyActionResultSourceTypeAssetTax)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_ASSET_UPGRADE" => {
                Some(Self::MonopolyActionResultSourceTypeAssetUpgrade)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeGameSettle)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_BUY_GOODS" => {
                Some(Self::MonopolyActionResultSourceTypeBuyGoods)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_CLICK" => {
                Some(Self::MonopolyActionResultSourceTypeClick)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_SOCIAL_EVENT" => {
                Some(Self::MonopolyActionResultSourceTypeSocialEvent)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_LIKE" => {
                Some(Self::MonopolyActionResultSourceTypeLike)
            }
            "MONOPOLY_ACTION_RESULT_SOURCE_TYPE_QUIZ_GAME_SETTLE" => {
                Some(Self::MonopolyActionResultSourceTypeQuizGameSettle)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jkahomjihll {
    CmdMultiplayerTypeNone = 0,
    CmdMultiplayerFightGiveUpCsReq = 1056,
    CmdMultiplayerGetFightGateScRsp = 1043,
    CmdMultiplayerFightGameFinishScNotify = 1029,
    CmdMultiplayerFightGameStateCsReq = 1068,
    CmdMultiplayerFightGameStateScRsp = 1006,
    CmdMultiplayerFightGameStartScNotify = 1039,
    CmdMultiplayerMatch3FinishScNotify = 1051,
    CmdMultiplayerFightGiveUpScRsp = 1093,
    CmdMultiplayerGetFightGateCsReq = 1011,
}
impl Jkahomjihll {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jkahomjihll::CmdMultiplayerTypeNone => "CmdMultiplayerTypeNone",
            Jkahomjihll::CmdMultiplayerFightGiveUpCsReq => {
                "CmdMultiplayerFightGiveUpCsReq"
            }
            Jkahomjihll::CmdMultiplayerGetFightGateScRsp => {
                "CmdMultiplayerGetFightGateScRsp"
            }
            Jkahomjihll::CmdMultiplayerFightGameFinishScNotify => {
                "CmdMultiplayerFightGameFinishScNotify"
            }
            Jkahomjihll::CmdMultiplayerFightGameStateCsReq => {
                "CmdMultiplayerFightGameStateCsReq"
            }
            Jkahomjihll::CmdMultiplayerFightGameStateScRsp => {
                "CmdMultiplayerFightGameStateScRsp"
            }
            Jkahomjihll::CmdMultiplayerFightGameStartScNotify => {
                "CmdMultiplayerFightGameStartScNotify"
            }
            Jkahomjihll::CmdMultiplayerMatch3FinishScNotify => {
                "CmdMultiplayerMatch3FinishScNotify"
            }
            Jkahomjihll::CmdMultiplayerFightGiveUpScRsp => {
                "CmdMultiplayerFightGiveUpScRsp"
            }
            Jkahomjihll::CmdMultiplayerGetFightGateCsReq => {
                "CmdMultiplayerGetFightGateCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultiplayerTypeNone" => Some(Self::CmdMultiplayerTypeNone),
            "CmdMultiplayerFightGiveUpCsReq" => {
                Some(Self::CmdMultiplayerFightGiveUpCsReq)
            }
            "CmdMultiplayerGetFightGateScRsp" => {
                Some(Self::CmdMultiplayerGetFightGateScRsp)
            }
            "CmdMultiplayerFightGameFinishScNotify" => {
                Some(Self::CmdMultiplayerFightGameFinishScNotify)
            }
            "CmdMultiplayerFightGameStateCsReq" => {
                Some(Self::CmdMultiplayerFightGameStateCsReq)
            }
            "CmdMultiplayerFightGameStateScRsp" => {
                Some(Self::CmdMultiplayerFightGameStateScRsp)
            }
            "CmdMultiplayerFightGameStartScNotify" => {
                Some(Self::CmdMultiplayerFightGameStartScNotify)
            }
            "CmdMultiplayerMatch3FinishScNotify" => {
                Some(Self::CmdMultiplayerMatch3FinishScNotify)
            }
            "CmdMultiplayerFightGiveUpScRsp" => {
                Some(Self::CmdMultiplayerFightGiveUpScRsp)
            }
            "CmdMultiplayerGetFightGateCsReq" => {
                Some(Self::CmdMultiplayerGetFightGateCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nglgknnfibf {
    CmdMultipleDropTypeNone = 0,
    CmdMultipleDropInfoNotify = 4693,
    CmdGetMultipleDropInfoCsReq = 4668,
    CmdGetMultipleDropInfoScRsp = 4606,
    CmdMultipleDropInfoScNotify = 4611,
    CmdGetPlayerReturnMultiDropInfoCsReq = 4643,
    CmdGetPlayerReturnMultiDropInfoScRsp = 4656,
}
impl Nglgknnfibf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nglgknnfibf::CmdMultipleDropTypeNone => "CmdMultipleDropTypeNone",
            Nglgknnfibf::CmdMultipleDropInfoNotify => "CmdMultipleDropInfoNotify",
            Nglgknnfibf::CmdGetMultipleDropInfoCsReq => "CmdGetMultipleDropInfoCsReq",
            Nglgknnfibf::CmdGetMultipleDropInfoScRsp => "CmdGetMultipleDropInfoScRsp",
            Nglgknnfibf::CmdMultipleDropInfoScNotify => "CmdMultipleDropInfoScNotify",
            Nglgknnfibf::CmdGetPlayerReturnMultiDropInfoCsReq => {
                "CmdGetPlayerReturnMultiDropInfoCsReq"
            }
            Nglgknnfibf::CmdGetPlayerReturnMultiDropInfoScRsp => {
                "CmdGetPlayerReturnMultiDropInfoScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMultipleDropTypeNone" => Some(Self::CmdMultipleDropTypeNone),
            "CmdMultipleDropInfoNotify" => Some(Self::CmdMultipleDropInfoNotify),
            "CmdGetMultipleDropInfoCsReq" => Some(Self::CmdGetMultipleDropInfoCsReq),
            "CmdGetMultipleDropInfoScRsp" => Some(Self::CmdGetMultipleDropInfoScRsp),
            "CmdMultipleDropInfoScNotify" => Some(Self::CmdMultipleDropInfoScNotify),
            "CmdGetPlayerReturnMultiDropInfoCsReq" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoCsReq)
            }
            "CmdGetPlayerReturnMultiDropInfoScRsp" => {
                Some(Self::CmdGetPlayerReturnMultiDropInfoScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Npcfpipllda {
    CmdMuseumTypeNone = 0,
    CmdUpgradeAreaScRsp = 4348,
    CmdMuseumDispatchFinishedScNotify = 4328,
    CmdUpgradeAreaCsReq = 4365,
    CmdMuseumTargetMissionFinishNotify = 4388,
    CmdMuseumRandomEventQueryCsReq = 4324,
    CmdGetExhibitScNotify = 4333,
    CmdBuyNpcStuffScRsp = 4343,
    CmdMuseumRandomEventQueryScRsp = 4317,
    CmdSetStuffToAreaCsReq = 4356,
    CmdRemoveStuffFromAreaCsReq = 4339,
    CmdMuseumTargetRewardNotify = 4308,
    CmdMuseumRandomEventStartScNotify = 4325,
    CmdMuseumRandomEventSelectScRsp = 4390,
    CmdFinishCurTurnScRsp = 4354,
    CmdMuseumFundsChangedScNotify = 4398,
    CmdMuseumTakeCollectRewardScRsp = 4332,
    CmdGetMuseumInfoCsReq = 4368,
    CmdGetMuseumInfoScRsp = 4306,
    CmdSetStuffToAreaScRsp = 4393,
    CmdUpgradeAreaStatScRsp = 4334,
    CmdMuseumTakeCollectRewardCsReq = 4381,
    CmdUpgradeAreaStatCsReq = 4382,
    CmdMuseumTargetStartNotify = 4309,
    CmdBuyNpcStuffCsReq = 4311,
    CmdFinishCurTurnCsReq = 4399,
    CmdGetStuffScNotify = 4351,
    CmdMuseumRandomEventSelectCsReq = 4392,
    CmdRemoveStuffFromAreaScRsp = 4329,
    CmdMuseumInfoChangedScNotify = 4397,
}
impl Npcfpipllda {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Npcfpipllda::CmdMuseumTypeNone => "CmdMuseumTypeNone",
            Npcfpipllda::CmdUpgradeAreaScRsp => "CmdUpgradeAreaScRsp",
            Npcfpipllda::CmdMuseumDispatchFinishedScNotify => {
                "CmdMuseumDispatchFinishedScNotify"
            }
            Npcfpipllda::CmdUpgradeAreaCsReq => "CmdUpgradeAreaCsReq",
            Npcfpipllda::CmdMuseumTargetMissionFinishNotify => {
                "CmdMuseumTargetMissionFinishNotify"
            }
            Npcfpipllda::CmdMuseumRandomEventQueryCsReq => {
                "CmdMuseumRandomEventQueryCsReq"
            }
            Npcfpipllda::CmdGetExhibitScNotify => "CmdGetExhibitScNotify",
            Npcfpipllda::CmdBuyNpcStuffScRsp => "CmdBuyNpcStuffScRsp",
            Npcfpipllda::CmdMuseumRandomEventQueryScRsp => {
                "CmdMuseumRandomEventQueryScRsp"
            }
            Npcfpipllda::CmdSetStuffToAreaCsReq => "CmdSetStuffToAreaCsReq",
            Npcfpipllda::CmdRemoveStuffFromAreaCsReq => "CmdRemoveStuffFromAreaCsReq",
            Npcfpipllda::CmdMuseumTargetRewardNotify => "CmdMuseumTargetRewardNotify",
            Npcfpipllda::CmdMuseumRandomEventStartScNotify => {
                "CmdMuseumRandomEventStartScNotify"
            }
            Npcfpipllda::CmdMuseumRandomEventSelectScRsp => {
                "CmdMuseumRandomEventSelectScRsp"
            }
            Npcfpipllda::CmdFinishCurTurnScRsp => "CmdFinishCurTurnScRsp",
            Npcfpipllda::CmdMuseumFundsChangedScNotify => "CmdMuseumFundsChangedScNotify",
            Npcfpipllda::CmdMuseumTakeCollectRewardScRsp => {
                "CmdMuseumTakeCollectRewardScRsp"
            }
            Npcfpipllda::CmdGetMuseumInfoCsReq => "CmdGetMuseumInfoCsReq",
            Npcfpipllda::CmdGetMuseumInfoScRsp => "CmdGetMuseumInfoScRsp",
            Npcfpipllda::CmdSetStuffToAreaScRsp => "CmdSetStuffToAreaScRsp",
            Npcfpipllda::CmdUpgradeAreaStatScRsp => "CmdUpgradeAreaStatScRsp",
            Npcfpipllda::CmdMuseumTakeCollectRewardCsReq => {
                "CmdMuseumTakeCollectRewardCsReq"
            }
            Npcfpipllda::CmdUpgradeAreaStatCsReq => "CmdUpgradeAreaStatCsReq",
            Npcfpipllda::CmdMuseumTargetStartNotify => "CmdMuseumTargetStartNotify",
            Npcfpipllda::CmdBuyNpcStuffCsReq => "CmdBuyNpcStuffCsReq",
            Npcfpipllda::CmdFinishCurTurnCsReq => "CmdFinishCurTurnCsReq",
            Npcfpipllda::CmdGetStuffScNotify => "CmdGetStuffScNotify",
            Npcfpipllda::CmdMuseumRandomEventSelectCsReq => {
                "CmdMuseumRandomEventSelectCsReq"
            }
            Npcfpipllda::CmdRemoveStuffFromAreaScRsp => "CmdRemoveStuffFromAreaScRsp",
            Npcfpipllda::CmdMuseumInfoChangedScNotify => "CmdMuseumInfoChangedScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdMuseumTypeNone" => Some(Self::CmdMuseumTypeNone),
            "CmdUpgradeAreaScRsp" => Some(Self::CmdUpgradeAreaScRsp),
            "CmdMuseumDispatchFinishedScNotify" => {
                Some(Self::CmdMuseumDispatchFinishedScNotify)
            }
            "CmdUpgradeAreaCsReq" => Some(Self::CmdUpgradeAreaCsReq),
            "CmdMuseumTargetMissionFinishNotify" => {
                Some(Self::CmdMuseumTargetMissionFinishNotify)
            }
            "CmdMuseumRandomEventQueryCsReq" => {
                Some(Self::CmdMuseumRandomEventQueryCsReq)
            }
            "CmdGetExhibitScNotify" => Some(Self::CmdGetExhibitScNotify),
            "CmdBuyNpcStuffScRsp" => Some(Self::CmdBuyNpcStuffScRsp),
            "CmdMuseumRandomEventQueryScRsp" => {
                Some(Self::CmdMuseumRandomEventQueryScRsp)
            }
            "CmdSetStuffToAreaCsReq" => Some(Self::CmdSetStuffToAreaCsReq),
            "CmdRemoveStuffFromAreaCsReq" => Some(Self::CmdRemoveStuffFromAreaCsReq),
            "CmdMuseumTargetRewardNotify" => Some(Self::CmdMuseumTargetRewardNotify),
            "CmdMuseumRandomEventStartScNotify" => {
                Some(Self::CmdMuseumRandomEventStartScNotify)
            }
            "CmdMuseumRandomEventSelectScRsp" => {
                Some(Self::CmdMuseumRandomEventSelectScRsp)
            }
            "CmdFinishCurTurnScRsp" => Some(Self::CmdFinishCurTurnScRsp),
            "CmdMuseumFundsChangedScNotify" => Some(Self::CmdMuseumFundsChangedScNotify),
            "CmdMuseumTakeCollectRewardScRsp" => {
                Some(Self::CmdMuseumTakeCollectRewardScRsp)
            }
            "CmdGetMuseumInfoCsReq" => Some(Self::CmdGetMuseumInfoCsReq),
            "CmdGetMuseumInfoScRsp" => Some(Self::CmdGetMuseumInfoScRsp),
            "CmdSetStuffToAreaScRsp" => Some(Self::CmdSetStuffToAreaScRsp),
            "CmdUpgradeAreaStatScRsp" => Some(Self::CmdUpgradeAreaStatScRsp),
            "CmdMuseumTakeCollectRewardCsReq" => {
                Some(Self::CmdMuseumTakeCollectRewardCsReq)
            }
            "CmdUpgradeAreaStatCsReq" => Some(Self::CmdUpgradeAreaStatCsReq),
            "CmdMuseumTargetStartNotify" => Some(Self::CmdMuseumTargetStartNotify),
            "CmdBuyNpcStuffCsReq" => Some(Self::CmdBuyNpcStuffCsReq),
            "CmdFinishCurTurnCsReq" => Some(Self::CmdFinishCurTurnCsReq),
            "CmdGetStuffScNotify" => Some(Self::CmdGetStuffScNotify),
            "CmdMuseumRandomEventSelectCsReq" => {
                Some(Self::CmdMuseumRandomEventSelectCsReq)
            }
            "CmdRemoveStuffFromAreaScRsp" => Some(Self::CmdRemoveStuffFromAreaScRsp),
            "CmdMuseumInfoChangedScNotify" => Some(Self::CmdMuseumInfoChangedScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Khpkejjhene {
    MuseumRandomEventStateNone = 0,
    MuseumRandomEventStateStart = 1,
    MuseumRandomEventStateProcessing = 2,
    MuseumRandomEventStateFinish = 3,
}
impl Khpkejjhene {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Khpkejjhene::MuseumRandomEventStateNone => "MUSEUM_RANDOM_EVENT_STATE_NONE",
            Khpkejjhene::MuseumRandomEventStateStart => "MUSEUM_RANDOM_EVENT_STATE_START",
            Khpkejjhene::MuseumRandomEventStateProcessing => {
                "MUSEUM_RANDOM_EVENT_STATE_PROCESSING"
            }
            Khpkejjhene::MuseumRandomEventStateFinish => {
                "MUSEUM_RANDOM_EVENT_STATE_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MUSEUM_RANDOM_EVENT_STATE_NONE" => Some(Self::MuseumRandomEventStateNone),
            "MUSEUM_RANDOM_EVENT_STATE_START" => Some(Self::MuseumRandomEventStateStart),
            "MUSEUM_RANDOM_EVENT_STATE_PROCESSING" => {
                Some(Self::MuseumRandomEventStateProcessing)
            }
            "MUSEUM_RANDOM_EVENT_STATE_FINISH" => {
                Some(Self::MuseumRandomEventStateFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ibmkpfblcop {
    WorkPosNone = 0,
    WorkPos1 = 1,
    WorkPos2 = 2,
    WorkPos3 = 3,
}
impl Ibmkpfblcop {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ibmkpfblcop::WorkPosNone => "WORK_POS_NONE",
            Ibmkpfblcop::WorkPos1 => "WORK_POS_1",
            Ibmkpfblcop::WorkPos2 => "WORK_POS_2",
            Ibmkpfblcop::WorkPos3 => "WORK_POS_3",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WORK_POS_NONE" => Some(Self::WorkPosNone),
            "WORK_POS_1" => Some(Self::WorkPos1),
            "WORK_POS_2" => Some(Self::WorkPos2),
            "WORK_POS_3" => Some(Self::WorkPos3),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fkieenabkbi {
    StatTypeNone = 0,
    StatTypeArt = 1,
    StatTypeCulture = 2,
    StatTypePopular = 3,
}
impl Fkieenabkbi {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Fkieenabkbi::StatTypeNone => "STAT_TYPE_NONE",
            Fkieenabkbi::StatTypeArt => "STAT_TYPE_ART",
            Fkieenabkbi::StatTypeCulture => "STAT_TYPE_CULTURE",
            Fkieenabkbi::StatTypePopular => "STAT_TYPE_POPULAR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "STAT_TYPE_NONE" => Some(Self::StatTypeNone),
            "STAT_TYPE_ART" => Some(Self::StatTypeArt),
            "STAT_TYPE_CULTURE" => Some(Self::StatTypeCulture),
            "STAT_TYPE_POPULAR" => Some(Self::StatTypePopular),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gdophdklfdg {
    Unknow = 0,
    MissionReward = 1,
    EventBuyStuff = 2,
    MarketBuyStuff = 3,
    QuestReward = 4,
    Initial = 5,
    PhaseFinishReward = 6,
}
impl Gdophdklfdg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gdophdklfdg::Unknow => "UNKNOW",
            Gdophdklfdg::MissionReward => "MISSION_REWARD",
            Gdophdklfdg::EventBuyStuff => "EVENT_BUY_STUFF",
            Gdophdklfdg::MarketBuyStuff => "MARKET_BUY_STUFF",
            Gdophdklfdg::QuestReward => "QUEST_REWARD",
            Gdophdklfdg::Initial => "INITIAL",
            Gdophdklfdg::PhaseFinishReward => "PHASE_FINISH_REWARD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOW" => Some(Self::Unknow),
            "MISSION_REWARD" => Some(Self::MissionReward),
            "EVENT_BUY_STUFF" => Some(Self::EventBuyStuff),
            "MARKET_BUY_STUFF" => Some(Self::MarketBuyStuff),
            "QUEST_REWARD" => Some(Self::QuestReward),
            "INITIAL" => Some(Self::Initial),
            "PHASE_FINISH_REWARD" => Some(Self::PhaseFinishReward),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mlfpcehlfnb {
    CmdOfferingTypeNone = 0,
    CmdGetOfferingInfoScRsp = 6923,
    CmdTakeOfferingRewardCsReq = 6924,
    CmdTakeOfferingRewardScRsp = 6922,
    CmdSubmitOfferingItemScRsp = 6940,
    CmdSubmitOfferingItemCsReq = 6932,
    CmdOfferingInfoScNotify = 6936,
    CmdGetOfferingInfoCsReq = 6939,
}
impl Mlfpcehlfnb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mlfpcehlfnb::CmdOfferingTypeNone => "CmdOfferingTypeNone",
            Mlfpcehlfnb::CmdGetOfferingInfoScRsp => "CmdGetOfferingInfoScRsp",
            Mlfpcehlfnb::CmdTakeOfferingRewardCsReq => "CmdTakeOfferingRewardCsReq",
            Mlfpcehlfnb::CmdTakeOfferingRewardScRsp => "CmdTakeOfferingRewardScRsp",
            Mlfpcehlfnb::CmdSubmitOfferingItemScRsp => "CmdSubmitOfferingItemScRsp",
            Mlfpcehlfnb::CmdSubmitOfferingItemCsReq => "CmdSubmitOfferingItemCsReq",
            Mlfpcehlfnb::CmdOfferingInfoScNotify => "CmdOfferingInfoScNotify",
            Mlfpcehlfnb::CmdGetOfferingInfoCsReq => "CmdGetOfferingInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdOfferingTypeNone" => Some(Self::CmdOfferingTypeNone),
            "CmdGetOfferingInfoScRsp" => Some(Self::CmdGetOfferingInfoScRsp),
            "CmdTakeOfferingRewardCsReq" => Some(Self::CmdTakeOfferingRewardCsReq),
            "CmdTakeOfferingRewardScRsp" => Some(Self::CmdTakeOfferingRewardScRsp),
            "CmdSubmitOfferingItemScRsp" => Some(Self::CmdSubmitOfferingItemScRsp),
            "CmdSubmitOfferingItemCsReq" => Some(Self::CmdSubmitOfferingItemCsReq),
            "CmdOfferingInfoScNotify" => Some(Self::CmdOfferingInfoScNotify),
            "CmdGetOfferingInfoCsReq" => Some(Self::CmdGetOfferingInfoCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cmebpgjmefe {
    OfferingStateNone = 0,
    OfferingStateLock = 1,
    OfferingStateOpen = 2,
}
impl Cmebpgjmefe {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Cmebpgjmefe::OfferingStateNone => "OFFERING_STATE_NONE",
            Cmebpgjmefe::OfferingStateLock => "OFFERING_STATE_LOCK",
            Cmebpgjmefe::OfferingStateOpen => "OFFERING_STATE_OPEN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "OFFERING_STATE_NONE" => Some(Self::OfferingStateNone),
            "OFFERING_STATE_LOCK" => Some(Self::OfferingStateLock),
            "OFFERING_STATE_OPEN" => Some(Self::OfferingStateOpen),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bnijldmhgfa {
    CmdPamMissionTypeNone = 0,
    CmdAcceptedPamMissionExpireCsReq = 4068,
    CmdAcceptedPamMissionExpireScRsp = 4006,
    CmdSyncAcceptedPamMissionNotify = 4011,
}
impl Bnijldmhgfa {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Bnijldmhgfa::CmdPamMissionTypeNone => "CmdPamMissionTypeNone",
            Bnijldmhgfa::CmdAcceptedPamMissionExpireCsReq => {
                "CmdAcceptedPamMissionExpireCsReq"
            }
            Bnijldmhgfa::CmdAcceptedPamMissionExpireScRsp => {
                "CmdAcceptedPamMissionExpireScRsp"
            }
            Bnijldmhgfa::CmdSyncAcceptedPamMissionNotify => {
                "CmdSyncAcceptedPamMissionNotify"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPamMissionTypeNone" => Some(Self::CmdPamMissionTypeNone),
            "CmdAcceptedPamMissionExpireCsReq" => {
                Some(Self::CmdAcceptedPamMissionExpireCsReq)
            }
            "CmdAcceptedPamMissionExpireScRsp" => {
                Some(Self::CmdAcceptedPamMissionExpireScRsp)
            }
            "CmdSyncAcceptedPamMissionNotify" => {
                Some(Self::CmdSyncAcceptedPamMissionNotify)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mjolclhenkg {
    CmdPetTypeNone = 0,
    CmdRecallPetScRsp = 7608,
    CmdRecallPetCsReq = 7611,
    CmdCurPetChangedScNotify = 7623,
    CmdGetPetDataCsReq = 7607,
    CmdGetPetDataScRsp = 7624,
    CmdSummonPetScRsp = 7617,
    CmdSummonPetCsReq = 7615,
}
impl Mjolclhenkg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mjolclhenkg::CmdPetTypeNone => "CmdPetTypeNone",
            Mjolclhenkg::CmdRecallPetScRsp => "CmdRecallPetScRsp",
            Mjolclhenkg::CmdRecallPetCsReq => "CmdRecallPetCsReq",
            Mjolclhenkg::CmdCurPetChangedScNotify => "CmdCurPetChangedScNotify",
            Mjolclhenkg::CmdGetPetDataCsReq => "CmdGetPetDataCsReq",
            Mjolclhenkg::CmdGetPetDataScRsp => "CmdGetPetDataScRsp",
            Mjolclhenkg::CmdSummonPetScRsp => "CmdSummonPetScRsp",
            Mjolclhenkg::CmdSummonPetCsReq => "CmdSummonPetCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPetTypeNone" => Some(Self::CmdPetTypeNone),
            "CmdRecallPetScRsp" => Some(Self::CmdRecallPetScRsp),
            "CmdRecallPetCsReq" => Some(Self::CmdRecallPetCsReq),
            "CmdCurPetChangedScNotify" => Some(Self::CmdCurPetChangedScNotify),
            "CmdGetPetDataCsReq" => Some(Self::CmdGetPetDataCsReq),
            "CmdGetPetDataScRsp" => Some(Self::CmdGetPetDataScRsp),
            "CmdSummonPetScRsp" => Some(Self::CmdSummonPetScRsp),
            "CmdSummonPetCsReq" => Some(Self::CmdSummonPetCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nmcfcoggnmj {
    CmdPhoneTypeNone = 0,
    CmdUnlockChatBubbleScNotify = 5156,
    CmdGetPhoneDataCsReq = 5168,
    CmdGetPhoneDataScRsp = 5106,
    CmdSelectChatBubbleScRsp = 5143,
    CmdUnlockPhoneThemeScNotify = 5129,
    CmdSelectPhoneThemeScRsp = 5139,
    CmdSelectPhoneThemeCsReq = 5193,
    CmdSelectChatBubbleCsReq = 5111,
}
impl Nmcfcoggnmj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nmcfcoggnmj::CmdPhoneTypeNone => "CmdPhoneTypeNone",
            Nmcfcoggnmj::CmdUnlockChatBubbleScNotify => "CmdUnlockChatBubbleScNotify",
            Nmcfcoggnmj::CmdGetPhoneDataCsReq => "CmdGetPhoneDataCsReq",
            Nmcfcoggnmj::CmdGetPhoneDataScRsp => "CmdGetPhoneDataScRsp",
            Nmcfcoggnmj::CmdSelectChatBubbleScRsp => "CmdSelectChatBubbleScRsp",
            Nmcfcoggnmj::CmdUnlockPhoneThemeScNotify => "CmdUnlockPhoneThemeScNotify",
            Nmcfcoggnmj::CmdSelectPhoneThemeScRsp => "CmdSelectPhoneThemeScRsp",
            Nmcfcoggnmj::CmdSelectPhoneThemeCsReq => "CmdSelectPhoneThemeCsReq",
            Nmcfcoggnmj::CmdSelectChatBubbleCsReq => "CmdSelectChatBubbleCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPhoneTypeNone" => Some(Self::CmdPhoneTypeNone),
            "CmdUnlockChatBubbleScNotify" => Some(Self::CmdUnlockChatBubbleScNotify),
            "CmdGetPhoneDataCsReq" => Some(Self::CmdGetPhoneDataCsReq),
            "CmdGetPhoneDataScRsp" => Some(Self::CmdGetPhoneDataScRsp),
            "CmdSelectChatBubbleScRsp" => Some(Self::CmdSelectChatBubbleScRsp),
            "CmdUnlockPhoneThemeScNotify" => Some(Self::CmdUnlockPhoneThemeScNotify),
            "CmdSelectPhoneThemeScRsp" => Some(Self::CmdSelectPhoneThemeScRsp),
            "CmdSelectPhoneThemeCsReq" => Some(Self::CmdSelectPhoneThemeCsReq),
            "CmdSelectChatBubbleCsReq" => Some(Self::CmdSelectChatBubbleCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerType {
    None = 0,
    CmdGetVideoVersionKeyCsReq = 42,
    CmdExchangeStaminaCsReq = 48,
    CmdPlayerLoginFinishScRsp = 86,
    CmdSetPlayerInfoScRsp = 95,
    CmdGetBasicInfoScRsp = 85,
    CmdPlayerGetTokenScRsp = 93,
    CmdExchangeStaminaScRsp = 82,
    CmdAceAntiCheaterScRsp = 59,
    CmdUnlockAvatarPathCsReq = 63,
    CmdUpdatePlayerSettingScRsp = 70,
    CmdSetMultipleAvatarPathsCsReq = 80,
    CmdPlayerLogoutScRsp = 43,
    CmdGetLevelRewardScRsp = 9,
    CmdReserveStaminaExchangeCsReq = 50,
    CmdGetMultiPathAvatarInfoScRsp = 77,
    CmdGmTalkScRsp = 99,
    CmdRetcodeNotify = 41,
    CmdClientDownloadDataScNotify = 15,
    CmdPlayerLoginScRsp = 6,
    CmdFeatureSwitchClosedScNotify = 13,
    CmdSetLanguageCsReq = 81,
    CmdGetLevelRewardCsReq = 28,
    CmdAceAntiCheaterCsReq = 47,
    CmdStaminaInfoScNotify = 5,
    CmdPlayerHeartBeatScRsp = 3,
    CmdSetNicknameScRsp = 17,
    CmdAntiAddictScNotify = 25,
    CmdUpdatePsnSettingsInfoCsReq = 2,
    CmdGetVideoVersionKeyScRsp = 83,
    CmdClientObjDownloadDataScNotify = 61,
    CmdPlayerLogoutCsReq = 11,
    CmdSetNicknameCsReq = 24,
    CmdPlayerLoginCsReq = 68,
    CmdDailyRefreshNotify = 100,
    CmdReserveStaminaExchangeScRsp = 72,
    CmdGetAuthkeyScRsp = 97,
    CmdGetBasicInfoCsReq = 40,
    CmdSetRedPointStatusScNotify = 96,
    CmdSetLanguageScRsp = 32,
    CmdUpdateFeatureSwitchScNotify = 75,
    CmdSetPlayerInfoCsReq = 30,
    CmdServerAnnounceNotify = 16,
    CmdQueryProductInfoScRsp = 67,
    CmdUnlockAvatarPathScRsp = 38,
    CmdGmTalkScNotify = 29,
    CmdSetAvatarPathCsReq = 20,
    CmdGetMultiPathAvatarInfoCsReq = 27,
    CmdAvatarPathChangedNotify = 55,
    CmdGetLevelRewardTakenListCsReq = 92,
    CmdMonthCardRewardNotify = 7,
    CmdPlayerHeartBeatCsReq = 31,
    CmdRegionStopScNotify = 98,
    CmdPlayerLoginFinishCsReq = 73,
    CmdSetAvatarPathScRsp = 57,
    CmdGetSecretKeyInfoCsReq = 21,
    CmdClientObjUploadCsReq = 79,
    CmdSetGenderScRsp = 12,
    CmdUpdatePsnSettingsInfoScRsp = 62,
    CmdPlayerGetTokenCsReq = 56,
    CmdClientObjUploadScRsp = 52,
    CmdSetMultipleAvatarPathsScRsp = 4,
    CmdSetGenderCsReq = 46,
    CmdGmTalkCsReq = 33,
    CmdGetAuthkeyCsReq = 34,
    CmdQueryProductInfoCsReq = 69,
    CmdSetGameplayBirthdayScRsp = 58,
    CmdUpdatePlayerSettingCsReq = 64,
    CmdSetGameplayBirthdayCsReq = 53,
    CmdGateServerScNotify = 26,
    CmdGetSecretKeyInfoScRsp = 71,
    CmdPlayerKickOutScNotify = 51,
    CmdGetLevelRewardTakenListScRsp = 90,
}
impl CmdPlayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdPlayerType::None => "CmdPlayerTypeNone",
            CmdPlayerType::CmdGetVideoVersionKeyCsReq => "CmdGetVideoVersionKeyCsReq",
            CmdPlayerType::CmdExchangeStaminaCsReq => "CmdExchangeStaminaCsReq",
            CmdPlayerType::CmdPlayerLoginFinishScRsp => "CmdPlayerLoginFinishScRsp",
            CmdPlayerType::CmdSetPlayerInfoScRsp => "CmdSetPlayerInfoScRsp",
            CmdPlayerType::CmdGetBasicInfoScRsp => "CmdGetBasicInfoScRsp",
            CmdPlayerType::CmdPlayerGetTokenScRsp => "CmdPlayerGetTokenScRsp",
            CmdPlayerType::CmdExchangeStaminaScRsp => "CmdExchangeStaminaScRsp",
            CmdPlayerType::CmdAceAntiCheaterScRsp => "CmdAceAntiCheaterScRsp",
            CmdPlayerType::CmdUnlockAvatarPathCsReq => "CmdUnlockAvatarPathCsReq",
            CmdPlayerType::CmdUpdatePlayerSettingScRsp => "CmdUpdatePlayerSettingScRsp",
            CmdPlayerType::CmdSetMultipleAvatarPathsCsReq => {
                "CmdSetMultipleAvatarPathsCsReq"
            }
            CmdPlayerType::CmdPlayerLogoutScRsp => "CmdPlayerLogoutScRsp",
            CmdPlayerType::CmdGetLevelRewardScRsp => "CmdGetLevelRewardScRsp",
            CmdPlayerType::CmdReserveStaminaExchangeCsReq => {
                "CmdReserveStaminaExchangeCsReq"
            }
            CmdPlayerType::CmdGetMultiPathAvatarInfoScRsp => {
                "CmdGetMultiPathAvatarInfoScRsp"
            }
            CmdPlayerType::CmdGmTalkScRsp => "CmdGmTalkScRsp",
            CmdPlayerType::CmdRetcodeNotify => "CmdRetcodeNotify",
            CmdPlayerType::CmdClientDownloadDataScNotify => {
                "CmdClientDownloadDataScNotify"
            }
            CmdPlayerType::CmdPlayerLoginScRsp => "CmdPlayerLoginScRsp",
            CmdPlayerType::CmdFeatureSwitchClosedScNotify => {
                "CmdFeatureSwitchClosedScNotify"
            }
            CmdPlayerType::CmdSetLanguageCsReq => "CmdSetLanguageCsReq",
            CmdPlayerType::CmdGetLevelRewardCsReq => "CmdGetLevelRewardCsReq",
            CmdPlayerType::CmdAceAntiCheaterCsReq => "CmdAceAntiCheaterCsReq",
            CmdPlayerType::CmdStaminaInfoScNotify => "CmdStaminaInfoScNotify",
            CmdPlayerType::CmdPlayerHeartBeatScRsp => "CmdPlayerHeartBeatScRsp",
            CmdPlayerType::CmdSetNicknameScRsp => "CmdSetNicknameScRsp",
            CmdPlayerType::CmdAntiAddictScNotify => "CmdAntiAddictScNotify",
            CmdPlayerType::CmdUpdatePsnSettingsInfoCsReq => {
                "CmdUpdatePsnSettingsInfoCsReq"
            }
            CmdPlayerType::CmdGetVideoVersionKeyScRsp => "CmdGetVideoVersionKeyScRsp",
            CmdPlayerType::CmdClientObjDownloadDataScNotify => {
                "CmdClientObjDownloadDataScNotify"
            }
            CmdPlayerType::CmdPlayerLogoutCsReq => "CmdPlayerLogoutCsReq",
            CmdPlayerType::CmdSetNicknameCsReq => "CmdSetNicknameCsReq",
            CmdPlayerType::CmdPlayerLoginCsReq => "CmdPlayerLoginCsReq",
            CmdPlayerType::CmdDailyRefreshNotify => "CmdDailyRefreshNotify",
            CmdPlayerType::CmdReserveStaminaExchangeScRsp => {
                "CmdReserveStaminaExchangeScRsp"
            }
            CmdPlayerType::CmdGetAuthkeyScRsp => "CmdGetAuthkeyScRsp",
            CmdPlayerType::CmdGetBasicInfoCsReq => "CmdGetBasicInfoCsReq",
            CmdPlayerType::CmdSetRedPointStatusScNotify => "CmdSetRedPointStatusScNotify",
            CmdPlayerType::CmdSetLanguageScRsp => "CmdSetLanguageScRsp",
            CmdPlayerType::CmdUpdateFeatureSwitchScNotify => {
                "CmdUpdateFeatureSwitchScNotify"
            }
            CmdPlayerType::CmdSetPlayerInfoCsReq => "CmdSetPlayerInfoCsReq",
            CmdPlayerType::CmdServerAnnounceNotify => "CmdServerAnnounceNotify",
            CmdPlayerType::CmdQueryProductInfoScRsp => "CmdQueryProductInfoScRsp",
            CmdPlayerType::CmdUnlockAvatarPathScRsp => "CmdUnlockAvatarPathScRsp",
            CmdPlayerType::CmdGmTalkScNotify => "CmdGmTalkScNotify",
            CmdPlayerType::CmdSetAvatarPathCsReq => "CmdSetAvatarPathCsReq",
            CmdPlayerType::CmdGetMultiPathAvatarInfoCsReq => {
                "CmdGetMultiPathAvatarInfoCsReq"
            }
            CmdPlayerType::CmdAvatarPathChangedNotify => "CmdAvatarPathChangedNotify",
            CmdPlayerType::CmdGetLevelRewardTakenListCsReq => {
                "CmdGetLevelRewardTakenListCsReq"
            }
            CmdPlayerType::CmdMonthCardRewardNotify => "CmdMonthCardRewardNotify",
            CmdPlayerType::CmdPlayerHeartBeatCsReq => "CmdPlayerHeartBeatCsReq",
            CmdPlayerType::CmdRegionStopScNotify => "CmdRegionStopScNotify",
            CmdPlayerType::CmdPlayerLoginFinishCsReq => "CmdPlayerLoginFinishCsReq",
            CmdPlayerType::CmdSetAvatarPathScRsp => "CmdSetAvatarPathScRsp",
            CmdPlayerType::CmdGetSecretKeyInfoCsReq => "CmdGetSecretKeyInfoCsReq",
            CmdPlayerType::CmdClientObjUploadCsReq => "CmdClientObjUploadCsReq",
            CmdPlayerType::CmdSetGenderScRsp => "CmdSetGenderScRsp",
            CmdPlayerType::CmdUpdatePsnSettingsInfoScRsp => {
                "CmdUpdatePsnSettingsInfoScRsp"
            }
            CmdPlayerType::CmdPlayerGetTokenCsReq => "CmdPlayerGetTokenCsReq",
            CmdPlayerType::CmdClientObjUploadScRsp => "CmdClientObjUploadScRsp",
            CmdPlayerType::CmdSetMultipleAvatarPathsScRsp => {
                "CmdSetMultipleAvatarPathsScRsp"
            }
            CmdPlayerType::CmdSetGenderCsReq => "CmdSetGenderCsReq",
            CmdPlayerType::CmdGmTalkCsReq => "CmdGmTalkCsReq",
            CmdPlayerType::CmdGetAuthkeyCsReq => "CmdGetAuthkeyCsReq",
            CmdPlayerType::CmdQueryProductInfoCsReq => "CmdQueryProductInfoCsReq",
            CmdPlayerType::CmdSetGameplayBirthdayScRsp => "CmdSetGameplayBirthdayScRsp",
            CmdPlayerType::CmdUpdatePlayerSettingCsReq => "CmdUpdatePlayerSettingCsReq",
            CmdPlayerType::CmdSetGameplayBirthdayCsReq => "CmdSetGameplayBirthdayCsReq",
            CmdPlayerType::CmdGateServerScNotify => "CmdGateServerScNotify",
            CmdPlayerType::CmdGetSecretKeyInfoScRsp => "CmdGetSecretKeyInfoScRsp",
            CmdPlayerType::CmdPlayerKickOutScNotify => "CmdPlayerKickOutScNotify",
            CmdPlayerType::CmdGetLevelRewardTakenListScRsp => {
                "CmdGetLevelRewardTakenListScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerTypeNone" => Some(Self::None),
            "CmdGetVideoVersionKeyCsReq" => Some(Self::CmdGetVideoVersionKeyCsReq),
            "CmdExchangeStaminaCsReq" => Some(Self::CmdExchangeStaminaCsReq),
            "CmdPlayerLoginFinishScRsp" => Some(Self::CmdPlayerLoginFinishScRsp),
            "CmdSetPlayerInfoScRsp" => Some(Self::CmdSetPlayerInfoScRsp),
            "CmdGetBasicInfoScRsp" => Some(Self::CmdGetBasicInfoScRsp),
            "CmdPlayerGetTokenScRsp" => Some(Self::CmdPlayerGetTokenScRsp),
            "CmdExchangeStaminaScRsp" => Some(Self::CmdExchangeStaminaScRsp),
            "CmdAceAntiCheaterScRsp" => Some(Self::CmdAceAntiCheaterScRsp),
            "CmdUnlockAvatarPathCsReq" => Some(Self::CmdUnlockAvatarPathCsReq),
            "CmdUpdatePlayerSettingScRsp" => Some(Self::CmdUpdatePlayerSettingScRsp),
            "CmdSetMultipleAvatarPathsCsReq" => {
                Some(Self::CmdSetMultipleAvatarPathsCsReq)
            }
            "CmdPlayerLogoutScRsp" => Some(Self::CmdPlayerLogoutScRsp),
            "CmdGetLevelRewardScRsp" => Some(Self::CmdGetLevelRewardScRsp),
            "CmdReserveStaminaExchangeCsReq" => {
                Some(Self::CmdReserveStaminaExchangeCsReq)
            }
            "CmdGetMultiPathAvatarInfoScRsp" => {
                Some(Self::CmdGetMultiPathAvatarInfoScRsp)
            }
            "CmdGmTalkScRsp" => Some(Self::CmdGmTalkScRsp),
            "CmdRetcodeNotify" => Some(Self::CmdRetcodeNotify),
            "CmdClientDownloadDataScNotify" => Some(Self::CmdClientDownloadDataScNotify),
            "CmdPlayerLoginScRsp" => Some(Self::CmdPlayerLoginScRsp),
            "CmdFeatureSwitchClosedScNotify" => {
                Some(Self::CmdFeatureSwitchClosedScNotify)
            }
            "CmdSetLanguageCsReq" => Some(Self::CmdSetLanguageCsReq),
            "CmdGetLevelRewardCsReq" => Some(Self::CmdGetLevelRewardCsReq),
            "CmdAceAntiCheaterCsReq" => Some(Self::CmdAceAntiCheaterCsReq),
            "CmdStaminaInfoScNotify" => Some(Self::CmdStaminaInfoScNotify),
            "CmdPlayerHeartBeatScRsp" => Some(Self::CmdPlayerHeartBeatScRsp),
            "CmdSetNicknameScRsp" => Some(Self::CmdSetNicknameScRsp),
            "CmdAntiAddictScNotify" => Some(Self::CmdAntiAddictScNotify),
            "CmdUpdatePsnSettingsInfoCsReq" => Some(Self::CmdUpdatePsnSettingsInfoCsReq),
            "CmdGetVideoVersionKeyScRsp" => Some(Self::CmdGetVideoVersionKeyScRsp),
            "CmdClientObjDownloadDataScNotify" => {
                Some(Self::CmdClientObjDownloadDataScNotify)
            }
            "CmdPlayerLogoutCsReq" => Some(Self::CmdPlayerLogoutCsReq),
            "CmdSetNicknameCsReq" => Some(Self::CmdSetNicknameCsReq),
            "CmdPlayerLoginCsReq" => Some(Self::CmdPlayerLoginCsReq),
            "CmdDailyRefreshNotify" => Some(Self::CmdDailyRefreshNotify),
            "CmdReserveStaminaExchangeScRsp" => {
                Some(Self::CmdReserveStaminaExchangeScRsp)
            }
            "CmdGetAuthkeyScRsp" => Some(Self::CmdGetAuthkeyScRsp),
            "CmdGetBasicInfoCsReq" => Some(Self::CmdGetBasicInfoCsReq),
            "CmdSetRedPointStatusScNotify" => Some(Self::CmdSetRedPointStatusScNotify),
            "CmdSetLanguageScRsp" => Some(Self::CmdSetLanguageScRsp),
            "CmdUpdateFeatureSwitchScNotify" => {
                Some(Self::CmdUpdateFeatureSwitchScNotify)
            }
            "CmdSetPlayerInfoCsReq" => Some(Self::CmdSetPlayerInfoCsReq),
            "CmdServerAnnounceNotify" => Some(Self::CmdServerAnnounceNotify),
            "CmdQueryProductInfoScRsp" => Some(Self::CmdQueryProductInfoScRsp),
            "CmdUnlockAvatarPathScRsp" => Some(Self::CmdUnlockAvatarPathScRsp),
            "CmdGmTalkScNotify" => Some(Self::CmdGmTalkScNotify),
            "CmdSetAvatarPathCsReq" => Some(Self::CmdSetAvatarPathCsReq),
            "CmdGetMultiPathAvatarInfoCsReq" => {
                Some(Self::CmdGetMultiPathAvatarInfoCsReq)
            }
            "CmdAvatarPathChangedNotify" => Some(Self::CmdAvatarPathChangedNotify),
            "CmdGetLevelRewardTakenListCsReq" => {
                Some(Self::CmdGetLevelRewardTakenListCsReq)
            }
            "CmdMonthCardRewardNotify" => Some(Self::CmdMonthCardRewardNotify),
            "CmdPlayerHeartBeatCsReq" => Some(Self::CmdPlayerHeartBeatCsReq),
            "CmdRegionStopScNotify" => Some(Self::CmdRegionStopScNotify),
            "CmdPlayerLoginFinishCsReq" => Some(Self::CmdPlayerLoginFinishCsReq),
            "CmdSetAvatarPathScRsp" => Some(Self::CmdSetAvatarPathScRsp),
            "CmdGetSecretKeyInfoCsReq" => Some(Self::CmdGetSecretKeyInfoCsReq),
            "CmdClientObjUploadCsReq" => Some(Self::CmdClientObjUploadCsReq),
            "CmdSetGenderScRsp" => Some(Self::CmdSetGenderScRsp),
            "CmdUpdatePsnSettingsInfoScRsp" => Some(Self::CmdUpdatePsnSettingsInfoScRsp),
            "CmdPlayerGetTokenCsReq" => Some(Self::CmdPlayerGetTokenCsReq),
            "CmdClientObjUploadScRsp" => Some(Self::CmdClientObjUploadScRsp),
            "CmdSetMultipleAvatarPathsScRsp" => {
                Some(Self::CmdSetMultipleAvatarPathsScRsp)
            }
            "CmdSetGenderCsReq" => Some(Self::CmdSetGenderCsReq),
            "CmdGmTalkCsReq" => Some(Self::CmdGmTalkCsReq),
            "CmdGetAuthkeyCsReq" => Some(Self::CmdGetAuthkeyCsReq),
            "CmdQueryProductInfoCsReq" => Some(Self::CmdQueryProductInfoCsReq),
            "CmdSetGameplayBirthdayScRsp" => Some(Self::CmdSetGameplayBirthdayScRsp),
            "CmdUpdatePlayerSettingCsReq" => Some(Self::CmdUpdatePlayerSettingCsReq),
            "CmdSetGameplayBirthdayCsReq" => Some(Self::CmdSetGameplayBirthdayCsReq),
            "CmdGateServerScNotify" => Some(Self::CmdGateServerScNotify),
            "CmdGetSecretKeyInfoScRsp" => Some(Self::CmdGetSecretKeyInfoScRsp),
            "CmdPlayerKickOutScNotify" => Some(Self::CmdPlayerKickOutScNotify),
            "CmdGetLevelRewardTakenListScRsp" => {
                Some(Self::CmdGetLevelRewardTakenListScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum AuthkeySignType {
    None = 0,
    Default = 1,
    Rsa = 2,
}
impl AuthkeySignType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            AuthkeySignType::None => "AUTHKEY_SIGN_TYPE_NONE",
            AuthkeySignType::Default => "AUTHKEY_SIGN_TYPE_DEFAULT",
            AuthkeySignType::Rsa => "AUTHKEY_SIGN_TYPE_RSA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUTHKEY_SIGN_TYPE_NONE" => Some(Self::None),
            "AUTHKEY_SIGN_TYPE_DEFAULT" => Some(Self::Default),
            "AUTHKEY_SIGN_TYPE_RSA" => Some(Self::Rsa),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum KickType {
    KickSqueezed = 0,
    KickBlack = 1,
    KickChangePwd = 2,
    KickLoginWhiteTimeout = 3,
    KickAceAntiCheater = 4,
    KickByGm = 5,
}
impl KickType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            KickType::KickSqueezed => "KICK_SQUEEZED",
            KickType::KickBlack => "KICK_BLACK",
            KickType::KickChangePwd => "KICK_CHANGE_PWD",
            KickType::KickLoginWhiteTimeout => "KICK_LOGIN_WHITE_TIMEOUT",
            KickType::KickAceAntiCheater => "KICK_ACE_ANTI_CHEATER",
            KickType::KickByGm => "KICK_BY_GM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "KICK_SQUEEZED" => Some(Self::KickSqueezed),
            "KICK_BLACK" => Some(Self::KickBlack),
            "KICK_CHANGE_PWD" => Some(Self::KickChangePwd),
            "KICK_LOGIN_WHITE_TIMEOUT" => Some(Self::KickLoginWhiteTimeout),
            "KICK_ACE_ANTI_CHEATER" => Some(Self::KickAceAntiCheater),
            "KICK_BY_GM" => Some(Self::KickByGm),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ipdiefeccfp {
    Nfmnkphlpji = 0,
    Pncbimmkgpp = 1,
    Ddpbgjjdmhl = 2,
    Lodfdopnidg = 3,
    Dpnogoadhhl = 4,
    Hlhnikjghnb = 5,
}
impl Ipdiefeccfp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ipdiefeccfp::Nfmnkphlpji => "NFMNKPHLPJI",
            Ipdiefeccfp::Pncbimmkgpp => "PNCBIMMKGPP",
            Ipdiefeccfp::Ddpbgjjdmhl => "DDPBGJJDMHL",
            Ipdiefeccfp::Lodfdopnidg => "LODFDOPNIDG",
            Ipdiefeccfp::Dpnogoadhhl => "DPNOGOADHHL",
            Ipdiefeccfp::Hlhnikjghnb => "HLHNIKJGHNB",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NFMNKPHLPJI" => Some(Self::Nfmnkphlpji),
            "PNCBIMMKGPP" => Some(Self::Pncbimmkgpp),
            "DDPBGJJDMHL" => Some(Self::Ddpbgjjdmhl),
            "LODFDOPNIDG" => Some(Self::Lodfdopnidg),
            "DPNOGOADHHL" => Some(Self::Dpnogoadhhl),
            "HLHNIKJGHNB" => Some(Self::Hlhnikjghnb),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gdcclebbecc {
    CmdPlayerBoardTypeNone = 0,
    CmdSetHeadIconScRsp = 2843,
    CmdSetIsDisplayAvatarInfoCsReq = 2839,
    CmdGetPlayerBoardDataScRsp = 2806,
    CmdSetAssistAvatarScRsp = 2865,
    CmdSetSignatureCsReq = 2833,
    CmdSetHeadIconCsReq = 2811,
    CmdSetDisplayAvatarScRsp = 2893,
    CmdUnlockHeadIconScNotify = 2851,
    CmdSetSignatureScRsp = 2899,
    CmdGetPlayerBoardDataCsReq = 2868,
    CmdSetAssistAvatarCsReq = 2854,
    CmdSetDisplayAvatarCsReq = 2856,
    CmdSetIsDisplayAvatarInfoScRsp = 2829,
}
impl Gdcclebbecc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gdcclebbecc::CmdPlayerBoardTypeNone => "CmdPlayerBoardTypeNone",
            Gdcclebbecc::CmdSetHeadIconScRsp => "CmdSetHeadIconScRsp",
            Gdcclebbecc::CmdSetIsDisplayAvatarInfoCsReq => {
                "CmdSetIsDisplayAvatarInfoCsReq"
            }
            Gdcclebbecc::CmdGetPlayerBoardDataScRsp => "CmdGetPlayerBoardDataScRsp",
            Gdcclebbecc::CmdSetAssistAvatarScRsp => "CmdSetAssistAvatarScRsp",
            Gdcclebbecc::CmdSetSignatureCsReq => "CmdSetSignatureCsReq",
            Gdcclebbecc::CmdSetHeadIconCsReq => "CmdSetHeadIconCsReq",
            Gdcclebbecc::CmdSetDisplayAvatarScRsp => "CmdSetDisplayAvatarScRsp",
            Gdcclebbecc::CmdUnlockHeadIconScNotify => "CmdUnlockHeadIconScNotify",
            Gdcclebbecc::CmdSetSignatureScRsp => "CmdSetSignatureScRsp",
            Gdcclebbecc::CmdGetPlayerBoardDataCsReq => "CmdGetPlayerBoardDataCsReq",
            Gdcclebbecc::CmdSetAssistAvatarCsReq => "CmdSetAssistAvatarCsReq",
            Gdcclebbecc::CmdSetDisplayAvatarCsReq => "CmdSetDisplayAvatarCsReq",
            Gdcclebbecc::CmdSetIsDisplayAvatarInfoScRsp => {
                "CmdSetIsDisplayAvatarInfoScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerBoardTypeNone" => Some(Self::CmdPlayerBoardTypeNone),
            "CmdSetHeadIconScRsp" => Some(Self::CmdSetHeadIconScRsp),
            "CmdSetIsDisplayAvatarInfoCsReq" => {
                Some(Self::CmdSetIsDisplayAvatarInfoCsReq)
            }
            "CmdGetPlayerBoardDataScRsp" => Some(Self::CmdGetPlayerBoardDataScRsp),
            "CmdSetAssistAvatarScRsp" => Some(Self::CmdSetAssistAvatarScRsp),
            "CmdSetSignatureCsReq" => Some(Self::CmdSetSignatureCsReq),
            "CmdSetHeadIconCsReq" => Some(Self::CmdSetHeadIconCsReq),
            "CmdSetDisplayAvatarScRsp" => Some(Self::CmdSetDisplayAvatarScRsp),
            "CmdUnlockHeadIconScNotify" => Some(Self::CmdUnlockHeadIconScNotify),
            "CmdSetSignatureScRsp" => Some(Self::CmdSetSignatureScRsp),
            "CmdGetPlayerBoardDataCsReq" => Some(Self::CmdGetPlayerBoardDataCsReq),
            "CmdSetAssistAvatarCsReq" => Some(Self::CmdSetAssistAvatarCsReq),
            "CmdSetDisplayAvatarCsReq" => Some(Self::CmdSetDisplayAvatarCsReq),
            "CmdSetIsDisplayAvatarInfoScRsp" => {
                Some(Self::CmdSetIsDisplayAvatarInfoScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kcmabmfmigk {
    CmdPlayerReturnTypeNone = 0,
    CmdPlayerReturnSignScRsp = 4511,
    CmdPlayerReturnTakePointRewardScRsp = 4593,
    CmdPlayerReturnStartScNotify = 4568,
    CmdPlayerReturnInfoQueryCsReq = 4551,
    CmdPlayerReturnTakeRewardCsReq = 4539,
    CmdPlayerReturnSignCsReq = 4506,
    CmdPlayerReturnForceFinishScNotify = 4599,
    CmdPlayerReturnTakeRewardScRsp = 4529,
    CmdPlayerReturnTakePointRewardCsReq = 4556,
    CmdPlayerReturnPointChangeScNotify = 4543,
    CmdPlayerReturnInfoQueryScRsp = 4533,
}
impl Kcmabmfmigk {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kcmabmfmigk::CmdPlayerReturnTypeNone => "CmdPlayerReturnTypeNone",
            Kcmabmfmigk::CmdPlayerReturnSignScRsp => "CmdPlayerReturnSignScRsp",
            Kcmabmfmigk::CmdPlayerReturnTakePointRewardScRsp => {
                "CmdPlayerReturnTakePointRewardScRsp"
            }
            Kcmabmfmigk::CmdPlayerReturnStartScNotify => "CmdPlayerReturnStartScNotify",
            Kcmabmfmigk::CmdPlayerReturnInfoQueryCsReq => "CmdPlayerReturnInfoQueryCsReq",
            Kcmabmfmigk::CmdPlayerReturnTakeRewardCsReq => {
                "CmdPlayerReturnTakeRewardCsReq"
            }
            Kcmabmfmigk::CmdPlayerReturnSignCsReq => "CmdPlayerReturnSignCsReq",
            Kcmabmfmigk::CmdPlayerReturnForceFinishScNotify => {
                "CmdPlayerReturnForceFinishScNotify"
            }
            Kcmabmfmigk::CmdPlayerReturnTakeRewardScRsp => {
                "CmdPlayerReturnTakeRewardScRsp"
            }
            Kcmabmfmigk::CmdPlayerReturnTakePointRewardCsReq => {
                "CmdPlayerReturnTakePointRewardCsReq"
            }
            Kcmabmfmigk::CmdPlayerReturnPointChangeScNotify => {
                "CmdPlayerReturnPointChangeScNotify"
            }
            Kcmabmfmigk::CmdPlayerReturnInfoQueryScRsp => "CmdPlayerReturnInfoQueryScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerReturnTypeNone" => Some(Self::CmdPlayerReturnTypeNone),
            "CmdPlayerReturnSignScRsp" => Some(Self::CmdPlayerReturnSignScRsp),
            "CmdPlayerReturnTakePointRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakePointRewardScRsp)
            }
            "CmdPlayerReturnStartScNotify" => Some(Self::CmdPlayerReturnStartScNotify),
            "CmdPlayerReturnInfoQueryCsReq" => Some(Self::CmdPlayerReturnInfoQueryCsReq),
            "CmdPlayerReturnTakeRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakeRewardCsReq)
            }
            "CmdPlayerReturnSignCsReq" => Some(Self::CmdPlayerReturnSignCsReq),
            "CmdPlayerReturnForceFinishScNotify" => {
                Some(Self::CmdPlayerReturnForceFinishScNotify)
            }
            "CmdPlayerReturnTakeRewardScRsp" => {
                Some(Self::CmdPlayerReturnTakeRewardScRsp)
            }
            "CmdPlayerReturnTakePointRewardCsReq" => {
                Some(Self::CmdPlayerReturnTakePointRewardCsReq)
            }
            "CmdPlayerReturnPointChangeScNotify" => {
                Some(Self::CmdPlayerReturnPointChangeScNotify)
            }
            "CmdPlayerReturnInfoQueryScRsp" => Some(Self::CmdPlayerReturnInfoQueryScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nnbobagndpf {
    PlayerReturnNone = 0,
    PlayerReturnProcessing = 1,
    PlayerReturnFinish = 2,
}
impl Nnbobagndpf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nnbobagndpf::PlayerReturnNone => "PLAYER_RETURN_NONE",
            Nnbobagndpf::PlayerReturnProcessing => "PLAYER_RETURN_PROCESSING",
            Nnbobagndpf::PlayerReturnFinish => "PLAYER_RETURN_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PLAYER_RETURN_NONE" => Some(Self::PlayerReturnNone),
            "PLAYER_RETURN_PROCESSING" => Some(Self::PlayerReturnProcessing),
            "PLAYER_RETURN_FINISH" => Some(Self::PlayerReturnFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlotType {
    None = 0,
    CmdFinishPlotScRsp = 1106,
    CmdFinishPlotCsReq = 1168,
}
impl CmdPlotType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdPlotType::None => "CmdPlotTypeNone",
            CmdPlotType::CmdFinishPlotScRsp => "CmdFinishPlotScRsp",
            CmdPlotType::CmdFinishPlotCsReq => "CmdFinishPlotCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlotTypeNone" => Some(Self::None),
            "CmdFinishPlotScRsp" => Some(Self::CmdFinishPlotScRsp),
            "CmdFinishPlotCsReq" => Some(Self::CmdFinishPlotCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Clplinbmjbm {
    CmdPunkLordTypeNone = 0,
    CmdGetPunkLordBattleRecordScRsp = 3278,
    CmdPunkLordRaidTimeOutScNotify = 3225,
    CmdSharePunkLordMonsterCsReq = 3256,
    CmdSharePunkLordMonsterScRsp = 3293,
    CmdPunkLordDataChangeNotify = 3284,
    CmdSummonPunkLordMonsterScRsp = 3229,
    CmdGetKilledPunkLordMonsterDataCsReq = 3228,
    CmdTakePunkLordPointRewardScRsp = 3248,
    CmdGetPunkLordDataScRsp = 3297,
    CmdStartPunkLordRaidCsReq = 3211,
    CmdGetPunkLordDataCsReq = 3234,
    CmdPunkLordMonsterInfoScNotify = 3282,
    CmdSummonPunkLordMonsterCsReq = 3239,
    CmdPunkLordBattleResultScNotify = 3290,
    CmdGetPunkLordMonsterDataScRsp = 3206,
    CmdTakeKilledPunkLordMonsterScoreCsReq = 3232,
    CmdStartPunkLordRaidScRsp = 3243,
    CmdTakeKilledPunkLordMonsterScoreScRsp = 3216,
    CmdPunkLordMonsterKilledNotify = 3281,
    CmdGetPunkLordBattleRecordCsReq = 3223,
    CmdTakePunkLordPointRewardCsReq = 3265,
    CmdGetKilledPunkLordMonsterDataScRsp = 3209,
    CmdGetPunkLordMonsterDataCsReq = 3268,
}
impl Clplinbmjbm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Clplinbmjbm::CmdPunkLordTypeNone => "CmdPunkLordTypeNone",
            Clplinbmjbm::CmdGetPunkLordBattleRecordScRsp => {
                "CmdGetPunkLordBattleRecordScRsp"
            }
            Clplinbmjbm::CmdPunkLordRaidTimeOutScNotify => {
                "CmdPunkLordRaidTimeOutScNotify"
            }
            Clplinbmjbm::CmdSharePunkLordMonsterCsReq => "CmdSharePunkLordMonsterCsReq",
            Clplinbmjbm::CmdSharePunkLordMonsterScRsp => "CmdSharePunkLordMonsterScRsp",
            Clplinbmjbm::CmdPunkLordDataChangeNotify => "CmdPunkLordDataChangeNotify",
            Clplinbmjbm::CmdSummonPunkLordMonsterScRsp => "CmdSummonPunkLordMonsterScRsp",
            Clplinbmjbm::CmdGetKilledPunkLordMonsterDataCsReq => {
                "CmdGetKilledPunkLordMonsterDataCsReq"
            }
            Clplinbmjbm::CmdTakePunkLordPointRewardScRsp => {
                "CmdTakePunkLordPointRewardScRsp"
            }
            Clplinbmjbm::CmdGetPunkLordDataScRsp => "CmdGetPunkLordDataScRsp",
            Clplinbmjbm::CmdStartPunkLordRaidCsReq => "CmdStartPunkLordRaidCsReq",
            Clplinbmjbm::CmdGetPunkLordDataCsReq => "CmdGetPunkLordDataCsReq",
            Clplinbmjbm::CmdPunkLordMonsterInfoScNotify => {
                "CmdPunkLordMonsterInfoScNotify"
            }
            Clplinbmjbm::CmdSummonPunkLordMonsterCsReq => "CmdSummonPunkLordMonsterCsReq",
            Clplinbmjbm::CmdPunkLordBattleResultScNotify => {
                "CmdPunkLordBattleResultScNotify"
            }
            Clplinbmjbm::CmdGetPunkLordMonsterDataScRsp => {
                "CmdGetPunkLordMonsterDataScRsp"
            }
            Clplinbmjbm::CmdTakeKilledPunkLordMonsterScoreCsReq => {
                "CmdTakeKilledPunkLordMonsterScoreCsReq"
            }
            Clplinbmjbm::CmdStartPunkLordRaidScRsp => "CmdStartPunkLordRaidScRsp",
            Clplinbmjbm::CmdTakeKilledPunkLordMonsterScoreScRsp => {
                "CmdTakeKilledPunkLordMonsterScoreScRsp"
            }
            Clplinbmjbm::CmdPunkLordMonsterKilledNotify => {
                "CmdPunkLordMonsterKilledNotify"
            }
            Clplinbmjbm::CmdGetPunkLordBattleRecordCsReq => {
                "CmdGetPunkLordBattleRecordCsReq"
            }
            Clplinbmjbm::CmdTakePunkLordPointRewardCsReq => {
                "CmdTakePunkLordPointRewardCsReq"
            }
            Clplinbmjbm::CmdGetKilledPunkLordMonsterDataScRsp => {
                "CmdGetKilledPunkLordMonsterDataScRsp"
            }
            Clplinbmjbm::CmdGetPunkLordMonsterDataCsReq => {
                "CmdGetPunkLordMonsterDataCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPunkLordTypeNone" => Some(Self::CmdPunkLordTypeNone),
            "CmdGetPunkLordBattleRecordScRsp" => {
                Some(Self::CmdGetPunkLordBattleRecordScRsp)
            }
            "CmdPunkLordRaidTimeOutScNotify" => {
                Some(Self::CmdPunkLordRaidTimeOutScNotify)
            }
            "CmdSharePunkLordMonsterCsReq" => Some(Self::CmdSharePunkLordMonsterCsReq),
            "CmdSharePunkLordMonsterScRsp" => Some(Self::CmdSharePunkLordMonsterScRsp),
            "CmdPunkLordDataChangeNotify" => Some(Self::CmdPunkLordDataChangeNotify),
            "CmdSummonPunkLordMonsterScRsp" => Some(Self::CmdSummonPunkLordMonsterScRsp),
            "CmdGetKilledPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataCsReq)
            }
            "CmdTakePunkLordPointRewardScRsp" => {
                Some(Self::CmdTakePunkLordPointRewardScRsp)
            }
            "CmdGetPunkLordDataScRsp" => Some(Self::CmdGetPunkLordDataScRsp),
            "CmdStartPunkLordRaidCsReq" => Some(Self::CmdStartPunkLordRaidCsReq),
            "CmdGetPunkLordDataCsReq" => Some(Self::CmdGetPunkLordDataCsReq),
            "CmdPunkLordMonsterInfoScNotify" => {
                Some(Self::CmdPunkLordMonsterInfoScNotify)
            }
            "CmdSummonPunkLordMonsterCsReq" => Some(Self::CmdSummonPunkLordMonsterCsReq),
            "CmdPunkLordBattleResultScNotify" => {
                Some(Self::CmdPunkLordBattleResultScNotify)
            }
            "CmdGetPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetPunkLordMonsterDataScRsp)
            }
            "CmdTakeKilledPunkLordMonsterScoreCsReq" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreCsReq)
            }
            "CmdStartPunkLordRaidScRsp" => Some(Self::CmdStartPunkLordRaidScRsp),
            "CmdTakeKilledPunkLordMonsterScoreScRsp" => {
                Some(Self::CmdTakeKilledPunkLordMonsterScoreScRsp)
            }
            "CmdPunkLordMonsterKilledNotify" => {
                Some(Self::CmdPunkLordMonsterKilledNotify)
            }
            "CmdGetPunkLordBattleRecordCsReq" => {
                Some(Self::CmdGetPunkLordBattleRecordCsReq)
            }
            "CmdTakePunkLordPointRewardCsReq" => {
                Some(Self::CmdTakePunkLordPointRewardCsReq)
            }
            "CmdGetKilledPunkLordMonsterDataScRsp" => {
                Some(Self::CmdGetKilledPunkLordMonsterDataScRsp)
            }
            "CmdGetPunkLordMonsterDataCsReq" => {
                Some(Self::CmdGetPunkLordMonsterDataCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Anphoopdlbn {
    PunkLordOperationNone = 0,
    PunkLordOperationRefresh = 1,
    PunkLordOperationShare = 2,
    PunkLordOperationStartRaid = 3,
    PunkLordOperationGetBattleRecord = 4,
}
impl Anphoopdlbn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Anphoopdlbn::PunkLordOperationNone => "PUNK_LORD_OPERATION_NONE",
            Anphoopdlbn::PunkLordOperationRefresh => "PUNK_LORD_OPERATION_REFRESH",
            Anphoopdlbn::PunkLordOperationShare => "PUNK_LORD_OPERATION_SHARE",
            Anphoopdlbn::PunkLordOperationStartRaid => "PUNK_LORD_OPERATION_START_RAID",
            Anphoopdlbn::PunkLordOperationGetBattleRecord => {
                "PUNK_LORD_OPERATION_GET_BATTLE_RECORD"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PUNK_LORD_OPERATION_NONE" => Some(Self::PunkLordOperationNone),
            "PUNK_LORD_OPERATION_REFRESH" => Some(Self::PunkLordOperationRefresh),
            "PUNK_LORD_OPERATION_SHARE" => Some(Self::PunkLordOperationShare),
            "PUNK_LORD_OPERATION_START_RAID" => Some(Self::PunkLordOperationStartRaid),
            "PUNK_LORD_OPERATION_GET_BATTLE_RECORD" => {
                Some(Self::PunkLordOperationGetBattleRecord)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdQuestType {
    None = 0,
    CmdBatchGetQuestDataScRsp = 934,
    CmdGetQuestDataCsReq = 968,
    CmdTakeQuestOptionalRewardScRsp = 965,
    CmdQuestRecordScNotify = 951,
    CmdFinishQuestScRsp = 999,
    CmdBatchGetQuestDataCsReq = 982,
    CmdGetQuestRecordCsReq = 939,
    CmdTakeQuestOptionalRewardCsReq = 954,
    CmdGetQuestDataScRsp = 906,
    CmdTakeQuestRewardCsReq = 911,
    CmdFinishQuestCsReq = 933,
    CmdTakeQuestRewardScRsp = 943,
    CmdGetQuestRecordScRsp = 929,
}
impl CmdQuestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdQuestType::None => "CmdQuestTypeNone",
            CmdQuestType::CmdBatchGetQuestDataScRsp => "CmdBatchGetQuestDataScRsp",
            CmdQuestType::CmdGetQuestDataCsReq => "CmdGetQuestDataCsReq",
            CmdQuestType::CmdTakeQuestOptionalRewardScRsp => {
                "CmdTakeQuestOptionalRewardScRsp"
            }
            CmdQuestType::CmdQuestRecordScNotify => "CmdQuestRecordScNotify",
            CmdQuestType::CmdFinishQuestScRsp => "CmdFinishQuestScRsp",
            CmdQuestType::CmdBatchGetQuestDataCsReq => "CmdBatchGetQuestDataCsReq",
            CmdQuestType::CmdGetQuestRecordCsReq => "CmdGetQuestRecordCsReq",
            CmdQuestType::CmdTakeQuestOptionalRewardCsReq => {
                "CmdTakeQuestOptionalRewardCsReq"
            }
            CmdQuestType::CmdGetQuestDataScRsp => "CmdGetQuestDataScRsp",
            CmdQuestType::CmdTakeQuestRewardCsReq => "CmdTakeQuestRewardCsReq",
            CmdQuestType::CmdFinishQuestCsReq => "CmdFinishQuestCsReq",
            CmdQuestType::CmdTakeQuestRewardScRsp => "CmdTakeQuestRewardScRsp",
            CmdQuestType::CmdGetQuestRecordScRsp => "CmdGetQuestRecordScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdQuestTypeNone" => Some(Self::None),
            "CmdBatchGetQuestDataScRsp" => Some(Self::CmdBatchGetQuestDataScRsp),
            "CmdGetQuestDataCsReq" => Some(Self::CmdGetQuestDataCsReq),
            "CmdTakeQuestOptionalRewardScRsp" => {
                Some(Self::CmdTakeQuestOptionalRewardScRsp)
            }
            "CmdQuestRecordScNotify" => Some(Self::CmdQuestRecordScNotify),
            "CmdFinishQuestScRsp" => Some(Self::CmdFinishQuestScRsp),
            "CmdBatchGetQuestDataCsReq" => Some(Self::CmdBatchGetQuestDataCsReq),
            "CmdGetQuestRecordCsReq" => Some(Self::CmdGetQuestRecordCsReq),
            "CmdTakeQuestOptionalRewardCsReq" => {
                Some(Self::CmdTakeQuestOptionalRewardCsReq)
            }
            "CmdGetQuestDataScRsp" => Some(Self::CmdGetQuestDataScRsp),
            "CmdTakeQuestRewardCsReq" => Some(Self::CmdTakeQuestRewardCsReq),
            "CmdFinishQuestCsReq" => Some(Self::CmdFinishQuestCsReq),
            "CmdTakeQuestRewardScRsp" => Some(Self::CmdTakeQuestRewardScRsp),
            "CmdGetQuestRecordScRsp" => Some(Self::CmdGetQuestRecordScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum QuestStatus {
    QuestNone = 0,
    QuestDoing = 1,
    QuestFinish = 2,
    QuestClose = 3,
    QuestDelete = 4,
}
impl QuestStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            QuestStatus::QuestNone => "QUEST_NONE",
            QuestStatus::QuestDoing => "QUEST_DOING",
            QuestStatus::QuestFinish => "QUEST_FINISH",
            QuestStatus::QuestClose => "QUEST_CLOSE",
            QuestStatus::QuestDelete => "QUEST_DELETE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "QUEST_NONE" => Some(Self::QuestNone),
            "QUEST_DOING" => Some(Self::QuestDoing),
            "QUEST_FINISH" => Some(Self::QuestFinish),
            "QUEST_CLOSE" => Some(Self::QuestClose),
            "QUEST_DELETE" => Some(Self::QuestDelete),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRaidType {
    None = 0,
    CmdStartRaidScRsp = 2206,
    CmdGetChallengeRaidInfoScRsp = 2239,
    CmdStartRaidCsReq = 2268,
    CmdSetClientRaidTargetCountCsReq = 2265,
    CmdRaidKickByServerScNotify = 2224,
    CmdGetSaveRaidScRsp = 2234,
    CmdGetAllSaveRaidCsReq = 2297,
    CmdChallengeRaidNotify = 2233,
    CmdRaidInfoNotify = 2256,
    CmdLeaveRaidCsReq = 2211,
    CmdGetAllSaveRaidScRsp = 2298,
    CmdGetRaidInfoScRsp = 2254,
    CmdTakeChallengeRaidRewardCsReq = 2229,
    CmdGetRaidInfoCsReq = 2299,
    CmdDelSaveRaidScNotify = 2225,
    CmdTakeChallengeRaidRewardScRsp = 2251,
    CmdSetClientRaidTargetCountScRsp = 2248,
    CmdGetSaveRaidCsReq = 2282,
    CmdLeaveRaidScRsp = 2243,
    CmdGetChallengeRaidInfoCsReq = 2293,
}
impl CmdRaidType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdRaidType::None => "CmdRaidTypeNone",
            CmdRaidType::CmdStartRaidScRsp => "CmdStartRaidScRsp",
            CmdRaidType::CmdGetChallengeRaidInfoScRsp => "CmdGetChallengeRaidInfoScRsp",
            CmdRaidType::CmdStartRaidCsReq => "CmdStartRaidCsReq",
            CmdRaidType::CmdSetClientRaidTargetCountCsReq => {
                "CmdSetClientRaidTargetCountCsReq"
            }
            CmdRaidType::CmdRaidKickByServerScNotify => "CmdRaidKickByServerScNotify",
            CmdRaidType::CmdGetSaveRaidScRsp => "CmdGetSaveRaidScRsp",
            CmdRaidType::CmdGetAllSaveRaidCsReq => "CmdGetAllSaveRaidCsReq",
            CmdRaidType::CmdChallengeRaidNotify => "CmdChallengeRaidNotify",
            CmdRaidType::CmdRaidInfoNotify => "CmdRaidInfoNotify",
            CmdRaidType::CmdLeaveRaidCsReq => "CmdLeaveRaidCsReq",
            CmdRaidType::CmdGetAllSaveRaidScRsp => "CmdGetAllSaveRaidScRsp",
            CmdRaidType::CmdGetRaidInfoScRsp => "CmdGetRaidInfoScRsp",
            CmdRaidType::CmdTakeChallengeRaidRewardCsReq => {
                "CmdTakeChallengeRaidRewardCsReq"
            }
            CmdRaidType::CmdGetRaidInfoCsReq => "CmdGetRaidInfoCsReq",
            CmdRaidType::CmdDelSaveRaidScNotify => "CmdDelSaveRaidScNotify",
            CmdRaidType::CmdTakeChallengeRaidRewardScRsp => {
                "CmdTakeChallengeRaidRewardScRsp"
            }
            CmdRaidType::CmdSetClientRaidTargetCountScRsp => {
                "CmdSetClientRaidTargetCountScRsp"
            }
            CmdRaidType::CmdGetSaveRaidCsReq => "CmdGetSaveRaidCsReq",
            CmdRaidType::CmdLeaveRaidScRsp => "CmdLeaveRaidScRsp",
            CmdRaidType::CmdGetChallengeRaidInfoCsReq => "CmdGetChallengeRaidInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidTypeNone" => Some(Self::None),
            "CmdStartRaidScRsp" => Some(Self::CmdStartRaidScRsp),
            "CmdGetChallengeRaidInfoScRsp" => Some(Self::CmdGetChallengeRaidInfoScRsp),
            "CmdStartRaidCsReq" => Some(Self::CmdStartRaidCsReq),
            "CmdSetClientRaidTargetCountCsReq" => {
                Some(Self::CmdSetClientRaidTargetCountCsReq)
            }
            "CmdRaidKickByServerScNotify" => Some(Self::CmdRaidKickByServerScNotify),
            "CmdGetSaveRaidScRsp" => Some(Self::CmdGetSaveRaidScRsp),
            "CmdGetAllSaveRaidCsReq" => Some(Self::CmdGetAllSaveRaidCsReq),
            "CmdChallengeRaidNotify" => Some(Self::CmdChallengeRaidNotify),
            "CmdRaidInfoNotify" => Some(Self::CmdRaidInfoNotify),
            "CmdLeaveRaidCsReq" => Some(Self::CmdLeaveRaidCsReq),
            "CmdGetAllSaveRaidScRsp" => Some(Self::CmdGetAllSaveRaidScRsp),
            "CmdGetRaidInfoScRsp" => Some(Self::CmdGetRaidInfoScRsp),
            "CmdTakeChallengeRaidRewardCsReq" => {
                Some(Self::CmdTakeChallengeRaidRewardCsReq)
            }
            "CmdGetRaidInfoCsReq" => Some(Self::CmdGetRaidInfoCsReq),
            "CmdDelSaveRaidScNotify" => Some(Self::CmdDelSaveRaidScNotify),
            "CmdTakeChallengeRaidRewardScRsp" => {
                Some(Self::CmdTakeChallengeRaidRewardScRsp)
            }
            "CmdSetClientRaidTargetCountScRsp" => {
                Some(Self::CmdSetClientRaidTargetCountScRsp)
            }
            "CmdGetSaveRaidCsReq" => Some(Self::CmdGetSaveRaidCsReq),
            "CmdLeaveRaidScRsp" => Some(Self::CmdLeaveRaidScRsp),
            "CmdGetChallengeRaidInfoCsReq" => Some(Self::CmdGetChallengeRaidInfoCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RaidStatus {
    None = 0,
    Doing = 1,
    Finish = 2,
    Failed = 3,
}
impl RaidStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RaidStatus::None => "RAID_STATUS_NONE",
            RaidStatus::Doing => "RAID_STATUS_DOING",
            RaidStatus::Finish => "RAID_STATUS_FINISH",
            RaidStatus::Failed => "RAID_STATUS_FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_STATUS_NONE" => Some(Self::None),
            "RAID_STATUS_DOING" => Some(Self::Doing),
            "RAID_STATUS_FINISH" => Some(Self::Finish),
            "RAID_STATUS_FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Lgbplphaacb {
    RaidTargetStatusNone = 0,
    RaidTargetStatusDoing = 1,
    RaidTargetStatusFinish = 2,
}
impl Lgbplphaacb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Lgbplphaacb::RaidTargetStatusNone => "RAID_TARGET_STATUS_NONE",
            Lgbplphaacb::RaidTargetStatusDoing => "RAID_TARGET_STATUS_DOING",
            Lgbplphaacb::RaidTargetStatusFinish => "RAID_TARGET_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_TARGET_STATUS_NONE" => Some(Self::RaidTargetStatusNone),
            "RAID_TARGET_STATUS_DOING" => Some(Self::RaidTargetStatusDoing),
            "RAID_TARGET_STATUS_FINISH" => Some(Self::RaidTargetStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ehhjocaaaba {
    RaidKickReasonNone = 0,
    RaidKickReasonActivityScheduleFinish = 1,
}
impl Ehhjocaaaba {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ehhjocaaaba::RaidKickReasonNone => "RAID_KICK_REASON_NONE",
            Ehhjocaaaba::RaidKickReasonActivityScheduleFinish => {
                "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RAID_KICK_REASON_NONE" => Some(Self::RaidKickReasonNone),
            "RAID_KICK_REASON_ACTIVITY_SCHEDULE_FINISH" => {
                Some(Self::RaidKickReasonActivityScheduleFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hflgjkjjmim {
    CmdRaidCollectionTypeNone = 0,
    CmdRaidCollectionEnterNextRaidCsReq = 6960,
    CmdRaidCollectionEnterNextRaidScRsp = 6944,
    CmdRaidCollectionDataScNotify = 6952,
    CmdRaidCollectionDataScRsp = 6943,
    CmdRaidCollectionDataCsReq = 6959,
}
impl Hflgjkjjmim {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hflgjkjjmim::CmdRaidCollectionTypeNone => "CmdRaidCollectionTypeNone",
            Hflgjkjjmim::CmdRaidCollectionEnterNextRaidCsReq => {
                "CmdRaidCollectionEnterNextRaidCsReq"
            }
            Hflgjkjjmim::CmdRaidCollectionEnterNextRaidScRsp => {
                "CmdRaidCollectionEnterNextRaidScRsp"
            }
            Hflgjkjjmim::CmdRaidCollectionDataScNotify => "CmdRaidCollectionDataScNotify",
            Hflgjkjjmim::CmdRaidCollectionDataScRsp => "CmdRaidCollectionDataScRsp",
            Hflgjkjjmim::CmdRaidCollectionDataCsReq => "CmdRaidCollectionDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRaidCollectionTypeNone" => Some(Self::CmdRaidCollectionTypeNone),
            "CmdRaidCollectionEnterNextRaidCsReq" => {
                Some(Self::CmdRaidCollectionEnterNextRaidCsReq)
            }
            "CmdRaidCollectionEnterNextRaidScRsp" => {
                Some(Self::CmdRaidCollectionEnterNextRaidScRsp)
            }
            "CmdRaidCollectionDataScNotify" => Some(Self::CmdRaidCollectionDataScNotify),
            "CmdRaidCollectionDataScRsp" => Some(Self::CmdRaidCollectionDataScRsp),
            "CmdRaidCollectionDataCsReq" => Some(Self::CmdRaidCollectionDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Iipfogjkbdd {
    CmdRedDotTypeNone = 0,
    CmdUpdateRedDotDataCsReq = 5911,
    CmdGetSingleRedDotParamGroupCsReq = 5956,
    CmdGetSingleRedDotParamGroupScRsp = 5993,
    CmdGetAllRedDotDataCsReq = 5968,
    CmdUpdateRedDotDataScRsp = 5943,
    CmdGetAllRedDotDataScRsp = 5906,
}
impl Iipfogjkbdd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Iipfogjkbdd::CmdRedDotTypeNone => "CmdRedDotTypeNone",
            Iipfogjkbdd::CmdUpdateRedDotDataCsReq => "CmdUpdateRedDotDataCsReq",
            Iipfogjkbdd::CmdGetSingleRedDotParamGroupCsReq => {
                "CmdGetSingleRedDotParamGroupCsReq"
            }
            Iipfogjkbdd::CmdGetSingleRedDotParamGroupScRsp => {
                "CmdGetSingleRedDotParamGroupScRsp"
            }
            Iipfogjkbdd::CmdGetAllRedDotDataCsReq => "CmdGetAllRedDotDataCsReq",
            Iipfogjkbdd::CmdUpdateRedDotDataScRsp => "CmdUpdateRedDotDataScRsp",
            Iipfogjkbdd::CmdGetAllRedDotDataScRsp => "CmdGetAllRedDotDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRedDotTypeNone" => Some(Self::CmdRedDotTypeNone),
            "CmdUpdateRedDotDataCsReq" => Some(Self::CmdUpdateRedDotDataCsReq),
            "CmdGetSingleRedDotParamGroupCsReq" => {
                Some(Self::CmdGetSingleRedDotParamGroupCsReq)
            }
            "CmdGetSingleRedDotParamGroupScRsp" => {
                Some(Self::CmdGetSingleRedDotParamGroupScRsp)
            }
            "CmdGetAllRedDotDataCsReq" => Some(Self::CmdGetAllRedDotDataCsReq),
            "CmdUpdateRedDotDataScRsp" => Some(Self::CmdUpdateRedDotDataScRsp),
            "CmdGetAllRedDotDataScRsp" => Some(Self::CmdGetAllRedDotDataScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ljhkjfilggp {
    UpdateReddotNone = 0,
    UpdateReddotAdd = 1,
    UpdateReddotReplace = 2,
}
impl Ljhkjfilggp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ljhkjfilggp::UpdateReddotNone => "UPDATE_REDDOT_NONE",
            Ljhkjfilggp::UpdateReddotAdd => "UPDATE_REDDOT_ADD",
            Ljhkjfilggp::UpdateReddotReplace => "UPDATE_REDDOT_REPLACE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UPDATE_REDDOT_NONE" => Some(Self::UpdateReddotNone),
            "UPDATE_REDDOT_ADD" => Some(Self::UpdateReddotAdd),
            "UPDATE_REDDOT_REPLACE" => Some(Self::UpdateReddotReplace),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pfmnoejepaf {
    CmdReplayTypeNone = 0,
    CmdGetReplayTokenScRsp = 3506,
    CmdGetReplayTokenCsReq = 3568,
    CmdGetPlayerReplayInfoCsReq = 3511,
    CmdGetPlayerReplayInfoScRsp = 3543,
}
impl Pfmnoejepaf {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pfmnoejepaf::CmdReplayTypeNone => "CmdReplayTypeNone",
            Pfmnoejepaf::CmdGetReplayTokenScRsp => "CmdGetReplayTokenScRsp",
            Pfmnoejepaf::CmdGetReplayTokenCsReq => "CmdGetReplayTokenCsReq",
            Pfmnoejepaf::CmdGetPlayerReplayInfoCsReq => "CmdGetPlayerReplayInfoCsReq",
            Pfmnoejepaf::CmdGetPlayerReplayInfoScRsp => "CmdGetPlayerReplayInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdReplayTypeNone" => Some(Self::CmdReplayTypeNone),
            "CmdGetReplayTokenScRsp" => Some(Self::CmdGetReplayTokenScRsp),
            "CmdGetReplayTokenCsReq" => Some(Self::CmdGetReplayTokenCsReq),
            "CmdGetPlayerReplayInfoCsReq" => Some(Self::CmdGetPlayerReplayInfoCsReq),
            "CmdGetPlayerReplayInfoScRsp" => Some(Self::CmdGetPlayerReplayInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mjejbpdgghg {
    CmdRndOptionTypeNone = 0,
    CmdDailyFirstMeetPamScRsp = 3443,
    CmdGetRndOptionCsReq = 3468,
    CmdGetRndOptionScRsp = 3406,
    CmdDailyFirstMeetPamCsReq = 3411,
}
impl Mjejbpdgghg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mjejbpdgghg::CmdRndOptionTypeNone => "CmdRndOptionTypeNone",
            Mjejbpdgghg::CmdDailyFirstMeetPamScRsp => "CmdDailyFirstMeetPamScRsp",
            Mjejbpdgghg::CmdGetRndOptionCsReq => "CmdGetRndOptionCsReq",
            Mjejbpdgghg::CmdGetRndOptionScRsp => "CmdGetRndOptionScRsp",
            Mjejbpdgghg::CmdDailyFirstMeetPamCsReq => "CmdDailyFirstMeetPamCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRndOptionTypeNone" => Some(Self::CmdRndOptionTypeNone),
            "CmdDailyFirstMeetPamScRsp" => Some(Self::CmdDailyFirstMeetPamScRsp),
            "CmdGetRndOptionCsReq" => Some(Self::CmdGetRndOptionCsReq),
            "CmdGetRndOptionScRsp" => Some(Self::CmdGetRndOptionScRsp),
            "CmdDailyFirstMeetPamCsReq" => Some(Self::CmdDailyFirstMeetPamCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueType {
    None = 0,
    CmdGetRogueInfoCsReq = 1868,
    CmdGetRogueBuffEnhanceInfoCsReq = 1890,
    CmdExchangeRogueRewardKeyScRsp = 1803,
    CmdSyncRogueExploreWinScNotify = 1849,
    CmdSyncRogueStatusScNotify = 1887,
    CmdLeaveRogueScRsp = 1829,
    CmdGetRogueInfoScRsp = 1806,
    CmdTakeRogueScoreRewardCsReq = 1817,
    CmdSyncRogueAeonLevelUpRewardScNotify = 1870,
    CmdFinishAeonDialogueGroupScRsp = 1855,
    CmdEnableRogueTalentCsReq = 1880,
    CmdOpenRogueChestScRsp = 1841,
    CmdGetRogueScoreRewardInfoCsReq = 1861,
    CmdSyncRogueRewardInfoScNotify = 1818,
    CmdReviveRogueAvatarCsReq = 1825,
    CmdGetRogueInitialScoreCsReq = 1895,
    CmdEnterRogueCsReq = 1856,
    CmdFinishAeonDialogueGroupCsReq = 1877,
    CmdGetRogueTalentInfoScRsp = 1838,
    CmdTakeRogueAeonLevelRewardCsReq = 1810,
    CmdQuitRogueScRsp = 1878,
    CmdLeaveRogueCsReq = 1839,
    CmdTakeRogueAeonLevelRewardScRsp = 1850,
    CmdGetRogueAeonInfoScRsp = 1827,
    CmdGetRogueScoreRewardInfoScRsp = 1879,
    CmdSyncRogueAreaUnlockScNotify = 1896,
    CmdEnhanceRogueBuffScRsp = 1888,
    CmdEnterRogueMapRoomCsReq = 1812,
    CmdReviveRogueAvatarScRsp = 1824,
    CmdPickRogueAvatarCsReq = 1834,
    CmdSyncRogueAeonScNotify = 1883,
    CmdSyncRogueVirtualItemInfoScNotify = 1819,
    CmdOpenRogueChestCsReq = 1807,
    CmdEnterRogueScRsp = 1893,
    CmdSyncRogueGetItemScNotify = 1836,
    CmdSyncRoguePickAvatarInfoScNotify = 1835,
    CmdEnhanceRogueBuffCsReq = 1809,
    CmdTakeRogueScoreRewardScRsp = 1892,
    CmdExchangeRogueRewardKeyCsReq = 1831,
    CmdGetRogueBuffEnhanceInfoScRsp = 1828,
    CmdEnableRogueTalentScRsp = 1804,
    CmdGetRogueAeonInfoCsReq = 1857,
    CmdQuitRogueCsReq = 1823,
    CmdSyncRogueReviveInfoScNotify = 1884,
    CmdGetRogueTalentInfoCsReq = 1863,
    CmdSyncRogueMapRoomScNotify = 1869,
    CmdSyncRogueFinishScNotify = 1882,
    CmdSyncRogueSeasonFinishScNotify = 1845,
    CmdPickRogueAvatarScRsp = 1897,
    CmdGetRogueInitialScoreScRsp = 1889,
    CmdStartRogueCsReq = 1811,
    CmdEnterRogueMapRoomScRsp = 1830,
    CmdStartRogueScRsp = 1843,
}
impl CmdRogueType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdRogueType::None => "CmdRogueTypeNone",
            CmdRogueType::CmdGetRogueInfoCsReq => "CmdGetRogueInfoCsReq",
            CmdRogueType::CmdGetRogueBuffEnhanceInfoCsReq => {
                "CmdGetRogueBuffEnhanceInfoCsReq"
            }
            CmdRogueType::CmdExchangeRogueRewardKeyScRsp => {
                "CmdExchangeRogueRewardKeyScRsp"
            }
            CmdRogueType::CmdSyncRogueExploreWinScNotify => {
                "CmdSyncRogueExploreWinScNotify"
            }
            CmdRogueType::CmdSyncRogueStatusScNotify => "CmdSyncRogueStatusScNotify",
            CmdRogueType::CmdLeaveRogueScRsp => "CmdLeaveRogueScRsp",
            CmdRogueType::CmdGetRogueInfoScRsp => "CmdGetRogueInfoScRsp",
            CmdRogueType::CmdTakeRogueScoreRewardCsReq => "CmdTakeRogueScoreRewardCsReq",
            CmdRogueType::CmdSyncRogueAeonLevelUpRewardScNotify => {
                "CmdSyncRogueAeonLevelUpRewardScNotify"
            }
            CmdRogueType::CmdFinishAeonDialogueGroupScRsp => {
                "CmdFinishAeonDialogueGroupScRsp"
            }
            CmdRogueType::CmdEnableRogueTalentCsReq => "CmdEnableRogueTalentCsReq",
            CmdRogueType::CmdOpenRogueChestScRsp => "CmdOpenRogueChestScRsp",
            CmdRogueType::CmdGetRogueScoreRewardInfoCsReq => {
                "CmdGetRogueScoreRewardInfoCsReq"
            }
            CmdRogueType::CmdSyncRogueRewardInfoScNotify => {
                "CmdSyncRogueRewardInfoScNotify"
            }
            CmdRogueType::CmdReviveRogueAvatarCsReq => "CmdReviveRogueAvatarCsReq",
            CmdRogueType::CmdGetRogueInitialScoreCsReq => "CmdGetRogueInitialScoreCsReq",
            CmdRogueType::CmdEnterRogueCsReq => "CmdEnterRogueCsReq",
            CmdRogueType::CmdFinishAeonDialogueGroupCsReq => {
                "CmdFinishAeonDialogueGroupCsReq"
            }
            CmdRogueType::CmdGetRogueTalentInfoScRsp => "CmdGetRogueTalentInfoScRsp",
            CmdRogueType::CmdTakeRogueAeonLevelRewardCsReq => {
                "CmdTakeRogueAeonLevelRewardCsReq"
            }
            CmdRogueType::CmdQuitRogueScRsp => "CmdQuitRogueScRsp",
            CmdRogueType::CmdLeaveRogueCsReq => "CmdLeaveRogueCsReq",
            CmdRogueType::CmdTakeRogueAeonLevelRewardScRsp => {
                "CmdTakeRogueAeonLevelRewardScRsp"
            }
            CmdRogueType::CmdGetRogueAeonInfoScRsp => "CmdGetRogueAeonInfoScRsp",
            CmdRogueType::CmdGetRogueScoreRewardInfoScRsp => {
                "CmdGetRogueScoreRewardInfoScRsp"
            }
            CmdRogueType::CmdSyncRogueAreaUnlockScNotify => {
                "CmdSyncRogueAreaUnlockScNotify"
            }
            CmdRogueType::CmdEnhanceRogueBuffScRsp => "CmdEnhanceRogueBuffScRsp",
            CmdRogueType::CmdEnterRogueMapRoomCsReq => "CmdEnterRogueMapRoomCsReq",
            CmdRogueType::CmdReviveRogueAvatarScRsp => "CmdReviveRogueAvatarScRsp",
            CmdRogueType::CmdPickRogueAvatarCsReq => "CmdPickRogueAvatarCsReq",
            CmdRogueType::CmdSyncRogueAeonScNotify => "CmdSyncRogueAeonScNotify",
            CmdRogueType::CmdSyncRogueVirtualItemInfoScNotify => {
                "CmdSyncRogueVirtualItemInfoScNotify"
            }
            CmdRogueType::CmdOpenRogueChestCsReq => "CmdOpenRogueChestCsReq",
            CmdRogueType::CmdEnterRogueScRsp => "CmdEnterRogueScRsp",
            CmdRogueType::CmdSyncRogueGetItemScNotify => "CmdSyncRogueGetItemScNotify",
            CmdRogueType::CmdSyncRoguePickAvatarInfoScNotify => {
                "CmdSyncRoguePickAvatarInfoScNotify"
            }
            CmdRogueType::CmdEnhanceRogueBuffCsReq => "CmdEnhanceRogueBuffCsReq",
            CmdRogueType::CmdTakeRogueScoreRewardScRsp => "CmdTakeRogueScoreRewardScRsp",
            CmdRogueType::CmdExchangeRogueRewardKeyCsReq => {
                "CmdExchangeRogueRewardKeyCsReq"
            }
            CmdRogueType::CmdGetRogueBuffEnhanceInfoScRsp => {
                "CmdGetRogueBuffEnhanceInfoScRsp"
            }
            CmdRogueType::CmdEnableRogueTalentScRsp => "CmdEnableRogueTalentScRsp",
            CmdRogueType::CmdGetRogueAeonInfoCsReq => "CmdGetRogueAeonInfoCsReq",
            CmdRogueType::CmdQuitRogueCsReq => "CmdQuitRogueCsReq",
            CmdRogueType::CmdSyncRogueReviveInfoScNotify => {
                "CmdSyncRogueReviveInfoScNotify"
            }
            CmdRogueType::CmdGetRogueTalentInfoCsReq => "CmdGetRogueTalentInfoCsReq",
            CmdRogueType::CmdSyncRogueMapRoomScNotify => "CmdSyncRogueMapRoomScNotify",
            CmdRogueType::CmdSyncRogueFinishScNotify => "CmdSyncRogueFinishScNotify",
            CmdRogueType::CmdSyncRogueSeasonFinishScNotify => {
                "CmdSyncRogueSeasonFinishScNotify"
            }
            CmdRogueType::CmdPickRogueAvatarScRsp => "CmdPickRogueAvatarScRsp",
            CmdRogueType::CmdGetRogueInitialScoreScRsp => "CmdGetRogueInitialScoreScRsp",
            CmdRogueType::CmdStartRogueCsReq => "CmdStartRogueCsReq",
            CmdRogueType::CmdEnterRogueMapRoomScRsp => "CmdEnterRogueMapRoomScRsp",
            CmdRogueType::CmdStartRogueScRsp => "CmdStartRogueScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTypeNone" => Some(Self::None),
            "CmdGetRogueInfoCsReq" => Some(Self::CmdGetRogueInfoCsReq),
            "CmdGetRogueBuffEnhanceInfoCsReq" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoCsReq)
            }
            "CmdExchangeRogueRewardKeyScRsp" => {
                Some(Self::CmdExchangeRogueRewardKeyScRsp)
            }
            "CmdSyncRogueExploreWinScNotify" => {
                Some(Self::CmdSyncRogueExploreWinScNotify)
            }
            "CmdSyncRogueStatusScNotify" => Some(Self::CmdSyncRogueStatusScNotify),
            "CmdLeaveRogueScRsp" => Some(Self::CmdLeaveRogueScRsp),
            "CmdGetRogueInfoScRsp" => Some(Self::CmdGetRogueInfoScRsp),
            "CmdTakeRogueScoreRewardCsReq" => Some(Self::CmdTakeRogueScoreRewardCsReq),
            "CmdSyncRogueAeonLevelUpRewardScNotify" => {
                Some(Self::CmdSyncRogueAeonLevelUpRewardScNotify)
            }
            "CmdFinishAeonDialogueGroupScRsp" => {
                Some(Self::CmdFinishAeonDialogueGroupScRsp)
            }
            "CmdEnableRogueTalentCsReq" => Some(Self::CmdEnableRogueTalentCsReq),
            "CmdOpenRogueChestScRsp" => Some(Self::CmdOpenRogueChestScRsp),
            "CmdGetRogueScoreRewardInfoCsReq" => {
                Some(Self::CmdGetRogueScoreRewardInfoCsReq)
            }
            "CmdSyncRogueRewardInfoScNotify" => {
                Some(Self::CmdSyncRogueRewardInfoScNotify)
            }
            "CmdReviveRogueAvatarCsReq" => Some(Self::CmdReviveRogueAvatarCsReq),
            "CmdGetRogueInitialScoreCsReq" => Some(Self::CmdGetRogueInitialScoreCsReq),
            "CmdEnterRogueCsReq" => Some(Self::CmdEnterRogueCsReq),
            "CmdFinishAeonDialogueGroupCsReq" => {
                Some(Self::CmdFinishAeonDialogueGroupCsReq)
            }
            "CmdGetRogueTalentInfoScRsp" => Some(Self::CmdGetRogueTalentInfoScRsp),
            "CmdTakeRogueAeonLevelRewardCsReq" => {
                Some(Self::CmdTakeRogueAeonLevelRewardCsReq)
            }
            "CmdQuitRogueScRsp" => Some(Self::CmdQuitRogueScRsp),
            "CmdLeaveRogueCsReq" => Some(Self::CmdLeaveRogueCsReq),
            "CmdTakeRogueAeonLevelRewardScRsp" => {
                Some(Self::CmdTakeRogueAeonLevelRewardScRsp)
            }
            "CmdGetRogueAeonInfoScRsp" => Some(Self::CmdGetRogueAeonInfoScRsp),
            "CmdGetRogueScoreRewardInfoScRsp" => {
                Some(Self::CmdGetRogueScoreRewardInfoScRsp)
            }
            "CmdSyncRogueAreaUnlockScNotify" => {
                Some(Self::CmdSyncRogueAreaUnlockScNotify)
            }
            "CmdEnhanceRogueBuffScRsp" => Some(Self::CmdEnhanceRogueBuffScRsp),
            "CmdEnterRogueMapRoomCsReq" => Some(Self::CmdEnterRogueMapRoomCsReq),
            "CmdReviveRogueAvatarScRsp" => Some(Self::CmdReviveRogueAvatarScRsp),
            "CmdPickRogueAvatarCsReq" => Some(Self::CmdPickRogueAvatarCsReq),
            "CmdSyncRogueAeonScNotify" => Some(Self::CmdSyncRogueAeonScNotify),
            "CmdSyncRogueVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueVirtualItemInfoScNotify)
            }
            "CmdOpenRogueChestCsReq" => Some(Self::CmdOpenRogueChestCsReq),
            "CmdEnterRogueScRsp" => Some(Self::CmdEnterRogueScRsp),
            "CmdSyncRogueGetItemScNotify" => Some(Self::CmdSyncRogueGetItemScNotify),
            "CmdSyncRoguePickAvatarInfoScNotify" => {
                Some(Self::CmdSyncRoguePickAvatarInfoScNotify)
            }
            "CmdEnhanceRogueBuffCsReq" => Some(Self::CmdEnhanceRogueBuffCsReq),
            "CmdTakeRogueScoreRewardScRsp" => Some(Self::CmdTakeRogueScoreRewardScRsp),
            "CmdExchangeRogueRewardKeyCsReq" => {
                Some(Self::CmdExchangeRogueRewardKeyCsReq)
            }
            "CmdGetRogueBuffEnhanceInfoScRsp" => {
                Some(Self::CmdGetRogueBuffEnhanceInfoScRsp)
            }
            "CmdEnableRogueTalentScRsp" => Some(Self::CmdEnableRogueTalentScRsp),
            "CmdGetRogueAeonInfoCsReq" => Some(Self::CmdGetRogueAeonInfoCsReq),
            "CmdQuitRogueCsReq" => Some(Self::CmdQuitRogueCsReq),
            "CmdSyncRogueReviveInfoScNotify" => {
                Some(Self::CmdSyncRogueReviveInfoScNotify)
            }
            "CmdGetRogueTalentInfoCsReq" => Some(Self::CmdGetRogueTalentInfoCsReq),
            "CmdSyncRogueMapRoomScNotify" => Some(Self::CmdSyncRogueMapRoomScNotify),
            "CmdSyncRogueFinishScNotify" => Some(Self::CmdSyncRogueFinishScNotify),
            "CmdSyncRogueSeasonFinishScNotify" => {
                Some(Self::CmdSyncRogueSeasonFinishScNotify)
            }
            "CmdPickRogueAvatarScRsp" => Some(Self::CmdPickRogueAvatarScRsp),
            "CmdGetRogueInitialScoreScRsp" => Some(Self::CmdGetRogueInitialScoreScRsp),
            "CmdStartRogueCsReq" => Some(Self::CmdStartRogueCsReq),
            "CmdEnterRogueMapRoomScRsp" => Some(Self::CmdEnterRogueMapRoomScRsp),
            "CmdStartRogueScRsp" => Some(Self::CmdStartRogueScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueStatus {
    None = 0,
    Doing = 1,
    Pending = 2,
    Endless = 3,
    Finish = 4,
}
impl RogueStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RogueStatus::None => "ROGUE_STATUS_NONE",
            RogueStatus::Doing => "ROGUE_STATUS_DOING",
            RogueStatus::Pending => "ROGUE_STATUS_PENDING",
            RogueStatus::Endless => "ROGUE_STATUS_ENDLESS",
            RogueStatus::Finish => "ROGUE_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_STATUS_NONE" => Some(Self::None),
            "ROGUE_STATUS_DOING" => Some(Self::Doing),
            "ROGUE_STATUS_PENDING" => Some(Self::Pending),
            "ROGUE_STATUS_ENDLESS" => Some(Self::Endless),
            "ROGUE_STATUS_FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RogueRoomStatus {
    None = 0,
    Lock = 1,
    Unlock = 2,
    Play = 3,
    Finish = 4,
}
impl RogueRoomStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            RogueRoomStatus::None => "ROGUE_ROOM_STATUS_NONE",
            RogueRoomStatus::Lock => "ROGUE_ROOM_STATUS_LOCK",
            RogueRoomStatus::Unlock => "ROGUE_ROOM_STATUS_UNLOCK",
            RogueRoomStatus::Play => "ROGUE_ROOM_STATUS_PLAY",
            RogueRoomStatus::Finish => "ROGUE_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ROOM_STATUS_NONE" => Some(Self::None),
            "ROGUE_ROOM_STATUS_LOCK" => Some(Self::Lock),
            "ROGUE_ROOM_STATUS_UNLOCK" => Some(Self::Unlock),
            "ROGUE_ROOM_STATUS_PLAY" => Some(Self::Play),
            "ROGUE_ROOM_STATUS_FINISH" => Some(Self::Finish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gjdmagoenld {
    RogueAreaStatusLock = 0,
    RogueAreaStatusUnlock = 1,
    RogueAreaStatusFirstPass = 2,
    RogueAreaStatusClose = 3,
}
impl Gjdmagoenld {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gjdmagoenld::RogueAreaStatusLock => "ROGUE_AREA_STATUS_LOCK",
            Gjdmagoenld::RogueAreaStatusUnlock => "ROGUE_AREA_STATUS_UNLOCK",
            Gjdmagoenld::RogueAreaStatusFirstPass => "ROGUE_AREA_STATUS_FIRST_PASS",
            Gjdmagoenld::RogueAreaStatusClose => "ROGUE_AREA_STATUS_CLOSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_AREA_STATUS_LOCK" => Some(Self::RogueAreaStatusLock),
            "ROGUE_AREA_STATUS_UNLOCK" => Some(Self::RogueAreaStatusUnlock),
            "ROGUE_AREA_STATUS_FIRST_PASS" => Some(Self::RogueAreaStatusFirstPass),
            "ROGUE_AREA_STATUS_CLOSE" => Some(Self::RogueAreaStatusClose),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nnnopllagge {
    RogueBuffSourceTypeNone = 0,
    RogueBuffSourceTypeSelect = 1,
    RogueBuffSourceTypeEnhance = 2,
    RogueBuffSourceTypeMiracle = 3,
    RogueBuffSourceTypeDialogue = 4,
    RogueBuffSourceTypeBonus = 5,
    RogueBuffSourceTypeMazeSkill = 6,
    RogueBuffSourceTypeShop = 7,
    RogueBuffSourceTypeLevelMechanism = 8,
    RogueBuffSourceTypeEndlessLevelStart = 9,
}
impl Nnnopllagge {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nnnopllagge::RogueBuffSourceTypeNone => "ROGUE_BUFF_SOURCE_TYPE_NONE",
            Nnnopllagge::RogueBuffSourceTypeSelect => "ROGUE_BUFF_SOURCE_TYPE_SELECT",
            Nnnopllagge::RogueBuffSourceTypeEnhance => "ROGUE_BUFF_SOURCE_TYPE_ENHANCE",
            Nnnopllagge::RogueBuffSourceTypeMiracle => "ROGUE_BUFF_SOURCE_TYPE_MIRACLE",
            Nnnopllagge::RogueBuffSourceTypeDialogue => "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE",
            Nnnopllagge::RogueBuffSourceTypeBonus => "ROGUE_BUFF_SOURCE_TYPE_BONUS",
            Nnnopllagge::RogueBuffSourceTypeMazeSkill => {
                "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL"
            }
            Nnnopllagge::RogueBuffSourceTypeShop => "ROGUE_BUFF_SOURCE_TYPE_SHOP",
            Nnnopllagge::RogueBuffSourceTypeLevelMechanism => {
                "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Nnnopllagge::RogueBuffSourceTypeEndlessLevelStart => {
                "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BUFF_SOURCE_TYPE_NONE" => Some(Self::RogueBuffSourceTypeNone),
            "ROGUE_BUFF_SOURCE_TYPE_SELECT" => Some(Self::RogueBuffSourceTypeSelect),
            "ROGUE_BUFF_SOURCE_TYPE_ENHANCE" => Some(Self::RogueBuffSourceTypeEnhance),
            "ROGUE_BUFF_SOURCE_TYPE_MIRACLE" => Some(Self::RogueBuffSourceTypeMiracle),
            "ROGUE_BUFF_SOURCE_TYPE_DIALOGUE" => Some(Self::RogueBuffSourceTypeDialogue),
            "ROGUE_BUFF_SOURCE_TYPE_BONUS" => Some(Self::RogueBuffSourceTypeBonus),
            "ROGUE_BUFF_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueBuffSourceTypeMazeSkill)
            }
            "ROGUE_BUFF_SOURCE_TYPE_SHOP" => Some(Self::RogueBuffSourceTypeShop),
            "ROGUE_BUFF_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueBuffSourceTypeLevelMechanism)
            }
            "ROGUE_BUFF_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueBuffSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dblpgacnlah {
    RogueMiracleSourceTypeNone = 0,
    RogueMiracleSourceTypeSelect = 1,
    RogueMiracleSourceTypeDialogue = 2,
    RogueMiracleSourceTypeBonus = 3,
    RogueMiracleSourceTypeUse = 4,
    RogueMiracleSourceTypeReset = 5,
    RogueMiracleSourceTypeReplace = 6,
    RogueMiracleSourceTypeTrade = 7,
    RogueMiracleSourceTypeGet = 8,
    RogueMiracleSourceTypeShop = 9,
    RogueMiracleSourceTypeMazeSkill = 10,
    RogueMiracleSourceTypeLevelMechanism = 11,
    RogueMiracleSourceTypeEndlessLevelStart = 12,
}
impl Dblpgacnlah {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Dblpgacnlah::RogueMiracleSourceTypeNone => "ROGUE_MIRACLE_SOURCE_TYPE_NONE",
            Dblpgacnlah::RogueMiracleSourceTypeSelect => {
                "ROGUE_MIRACLE_SOURCE_TYPE_SELECT"
            }
            Dblpgacnlah::RogueMiracleSourceTypeDialogue => {
                "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE"
            }
            Dblpgacnlah::RogueMiracleSourceTypeBonus => "ROGUE_MIRACLE_SOURCE_TYPE_BONUS",
            Dblpgacnlah::RogueMiracleSourceTypeUse => "ROGUE_MIRACLE_SOURCE_TYPE_USE",
            Dblpgacnlah::RogueMiracleSourceTypeReset => "ROGUE_MIRACLE_SOURCE_TYPE_RESET",
            Dblpgacnlah::RogueMiracleSourceTypeReplace => {
                "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE"
            }
            Dblpgacnlah::RogueMiracleSourceTypeTrade => "ROGUE_MIRACLE_SOURCE_TYPE_TRADE",
            Dblpgacnlah::RogueMiracleSourceTypeGet => "ROGUE_MIRACLE_SOURCE_TYPE_GET",
            Dblpgacnlah::RogueMiracleSourceTypeShop => "ROGUE_MIRACLE_SOURCE_TYPE_SHOP",
            Dblpgacnlah::RogueMiracleSourceTypeMazeSkill => {
                "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL"
            }
            Dblpgacnlah::RogueMiracleSourceTypeLevelMechanism => {
                "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Dblpgacnlah::RogueMiracleSourceTypeEndlessLevelStart => {
                "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MIRACLE_SOURCE_TYPE_NONE" => Some(Self::RogueMiracleSourceTypeNone),
            "ROGUE_MIRACLE_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueMiracleSourceTypeSelect)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueMiracleSourceTypeDialogue)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_BONUS" => Some(Self::RogueMiracleSourceTypeBonus),
            "ROGUE_MIRACLE_SOURCE_TYPE_USE" => Some(Self::RogueMiracleSourceTypeUse),
            "ROGUE_MIRACLE_SOURCE_TYPE_RESET" => Some(Self::RogueMiracleSourceTypeReset),
            "ROGUE_MIRACLE_SOURCE_TYPE_REPLACE" => {
                Some(Self::RogueMiracleSourceTypeReplace)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_TRADE" => Some(Self::RogueMiracleSourceTypeTrade),
            "ROGUE_MIRACLE_SOURCE_TYPE_GET" => Some(Self::RogueMiracleSourceTypeGet),
            "ROGUE_MIRACLE_SOURCE_TYPE_SHOP" => Some(Self::RogueMiracleSourceTypeShop),
            "ROGUE_MIRACLE_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueMiracleSourceTypeMazeSkill)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueMiracleSourceTypeLevelMechanism)
            }
            "ROGUE_MIRACLE_SOURCE_TYPE_ENDLESS_LEVEL_START" => {
                Some(Self::RogueMiracleSourceTypeEndlessLevelStart)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Npbmfealpda {
    RogueDialogueResultSucc = 0,
    RogueDialogueResultFail = 1,
}
impl Npbmfealpda {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Npbmfealpda::RogueDialogueResultSucc => "ROGUE_DIALOGUE_RESULT_SUCC",
            Npbmfealpda::RogueDialogueResultFail => "ROGUE_DIALOGUE_RESULT_FAIL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_DIALOGUE_RESULT_SUCC" => Some(Self::RogueDialogueResultSucc),
            "ROGUE_DIALOGUE_RESULT_FAIL" => Some(Self::RogueDialogueResultFail),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ogoiebcjefd {
    CmdRogueArcadeTypeNone = 0,
    CmdRogueArcadeLeaveCsReq = 7665,
    CmdRogueArcadeStartCsReq = 7657,
    CmdRogueArcadeRestartCsReq = 7661,
    CmdRogueArcadeGetInfoCsReq = 7673,
    CmdRogueArcadeGetInfoScRsp = 7654,
    CmdRogueArcadeLeaveScRsp = 7667,
    CmdRogueArcadeStartScRsp = 7674,
    CmdRogueArcadeRestartScRsp = 7658,
}
impl Ogoiebcjefd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ogoiebcjefd::CmdRogueArcadeTypeNone => "CmdRogueArcadeTypeNone",
            Ogoiebcjefd::CmdRogueArcadeLeaveCsReq => "CmdRogueArcadeLeaveCsReq",
            Ogoiebcjefd::CmdRogueArcadeStartCsReq => "CmdRogueArcadeStartCsReq",
            Ogoiebcjefd::CmdRogueArcadeRestartCsReq => "CmdRogueArcadeRestartCsReq",
            Ogoiebcjefd::CmdRogueArcadeGetInfoCsReq => "CmdRogueArcadeGetInfoCsReq",
            Ogoiebcjefd::CmdRogueArcadeGetInfoScRsp => "CmdRogueArcadeGetInfoScRsp",
            Ogoiebcjefd::CmdRogueArcadeLeaveScRsp => "CmdRogueArcadeLeaveScRsp",
            Ogoiebcjefd::CmdRogueArcadeStartScRsp => "CmdRogueArcadeStartScRsp",
            Ogoiebcjefd::CmdRogueArcadeRestartScRsp => "CmdRogueArcadeRestartScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueArcadeTypeNone" => Some(Self::CmdRogueArcadeTypeNone),
            "CmdRogueArcadeLeaveCsReq" => Some(Self::CmdRogueArcadeLeaveCsReq),
            "CmdRogueArcadeStartCsReq" => Some(Self::CmdRogueArcadeStartCsReq),
            "CmdRogueArcadeRestartCsReq" => Some(Self::CmdRogueArcadeRestartCsReq),
            "CmdRogueArcadeGetInfoCsReq" => Some(Self::CmdRogueArcadeGetInfoCsReq),
            "CmdRogueArcadeGetInfoScRsp" => Some(Self::CmdRogueArcadeGetInfoScRsp),
            "CmdRogueArcadeLeaveScRsp" => Some(Self::CmdRogueArcadeLeaveScRsp),
            "CmdRogueArcadeStartScRsp" => Some(Self::CmdRogueArcadeStartScRsp),
            "CmdRogueArcadeRestartScRsp" => Some(Self::CmdRogueArcadeRestartScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdRogueCommonType {
    None = 0,
    CmdHandleRogueCommonPendingActionScRsp = 5659,
    CmdCommonRogueUpdateScNotify = 5631,
    CmdRogueWorkbenchSelectFuncCsReq = 5677,
    CmdTakeRogueMiracleHandbookRewardCsReq = 5630,
    CmdRogueWorkbenchSelectFuncScRsp = 5655,
    CmdRogueWorkbenchHandleFuncCsReq = 5696,
    CmdSyncRogueCommonPendingActionScNotify = 5615,
    CmdGetRogueCollectionCsReq = 5610,
    CmdGetRogueShopBuffInfoScRsp = 5639,
    CmdPrepareRogueAdventureRoomCsReq = 5606,
    CmdFinishRogueCommonDialogueScRsp = 5621,
    CmdRogueWorkbenchGetInfoCsReq = 5642,
    CmdTakeRogueEventHandbookRewardScRsp = 5669,
    CmdRogueWorkbenchHandleFuncScRsp = 5636,
    CmdRogueGetGambleInfoCsReq = 5691,
    CmdSetRogueCollectionCsReq = 5672,
    CmdRogueNpcDisappearCsReq = 5654,
    CmdSyncRogueCommonDialogueDataScNotify = 5671,
    CmdSetRogueExhibitionCsReq = 5661,
    CmdGetRogueAdventureRoomInfoScRsp = 5682,
    CmdGetRogueShopMiracleInfoCsReq = 5643,
    CmdBuyRogueShopMiracleCsReq = 5629,
    CmdGetEnhanceCommonRogueBuffInfoScRsp = 5692,
    CmdCommonRogueQueryCsReq = 5607,
    CmdRogueWorkbenchGetInfoScRsp = 5683,
    CmdRogueGetGambleInfoScRsp = 5620,
    CmdHandleRogueCommonPendingActionCsReq = 5647,
    CmdSyncRogueHandbookDataUpdateScNotify = 5612,
    CmdGetRogueCommonDialogueDataCsReq = 5603,
    CmdRogueNpcDisappearScRsp = 5665,
    CmdCommonRogueComponentUpdateScNotify = 5686,
    CmdGetRogueExhibitionScRsp = 5670,
    CmdBuyRogueShopMiracleScRsp = 5651,
    CmdUpdateRogueAdventureRoomScoreCsReq = 5675,
    CmdGetRogueCommonDialogueDataScRsp = 5626,
    CmdGetRogueHandbookDataScRsp = 5646,
    CmdPrepareRogueAdventureRoomScRsp = 5611,
    CmdSetRogueExhibitionScRsp = 5679,
    CmdStopRogueAdventureRoomCsReq = 5609,
    CmdGetRogueExhibitionCsReq = 5664,
    CmdGetRogueCollectionScRsp = 5650,
    CmdGetRogueHandbookDataCsReq = 5666,
    CmdGetEnhanceCommonRogueBuffInfoCsReq = 5617,
    CmdSyncRogueAdventureRoomInfoScNotify = 5668,
    CmdSelectRogueCommonDialogueOptionCsReq = 5613,
    CmdExchangeRogueBuffWithMiracleScRsp = 5624,
    CmdExchangeRogueBuffWithMiracleCsReq = 5625,
    CmdUpdateRogueAdventureRoomScoreScRsp = 5640,
    CmdGetRogueShopMiracleInfoScRsp = 5656,
    CmdSyncRogueCommonVirtualItemInfoScNotify = 5685,
    CmdSyncRogueCommonDialogueOptionFinishScNotify = 5673,
    CmdSelectRogueCommonDialogueOptionScRsp = 5614,
    CmdEnhanceCommonRogueBuffCsReq = 5690,
    CmdCommonRogueQueryScRsp = 5641,
    CmdFinishRogueCommonDialogueCsReq = 5622,
    CmdGetRogueShopBuffInfoCsReq = 5693,
    CmdStopRogueAdventureRoomScRsp = 5688,
    CmdBuyRogueShopBuffCsReq = 5633,
    CmdSetRogueCollectionScRsp = 5605,
    CmdRogueDoGambleCsReq = 5657,
    CmdSyncRogueCommonActionResultScNotify = 5667,
    CmdEnhanceCommonRogueBuffScRsp = 5628,
    CmdBuyRogueShopBuffScRsp = 5699,
    CmdTakeRogueEventHandbookRewardCsReq = 5689,
    CmdGetRogueAdventureRoomInfoCsReq = 5648,
    CmdRogueDoGambleScRsp = 5627,
    CmdTakeRogueMiracleHandbookRewardScRsp = 5695,
}
impl CmdRogueCommonType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdRogueCommonType::None => "CmdRogueCommonTypeNone",
            CmdRogueCommonType::CmdHandleRogueCommonPendingActionScRsp => {
                "CmdHandleRogueCommonPendingActionScRsp"
            }
            CmdRogueCommonType::CmdCommonRogueUpdateScNotify => {
                "CmdCommonRogueUpdateScNotify"
            }
            CmdRogueCommonType::CmdRogueWorkbenchSelectFuncCsReq => {
                "CmdRogueWorkbenchSelectFuncCsReq"
            }
            CmdRogueCommonType::CmdTakeRogueMiracleHandbookRewardCsReq => {
                "CmdTakeRogueMiracleHandbookRewardCsReq"
            }
            CmdRogueCommonType::CmdRogueWorkbenchSelectFuncScRsp => {
                "CmdRogueWorkbenchSelectFuncScRsp"
            }
            CmdRogueCommonType::CmdRogueWorkbenchHandleFuncCsReq => {
                "CmdRogueWorkbenchHandleFuncCsReq"
            }
            CmdRogueCommonType::CmdSyncRogueCommonPendingActionScNotify => {
                "CmdSyncRogueCommonPendingActionScNotify"
            }
            CmdRogueCommonType::CmdGetRogueCollectionCsReq => {
                "CmdGetRogueCollectionCsReq"
            }
            CmdRogueCommonType::CmdGetRogueShopBuffInfoScRsp => {
                "CmdGetRogueShopBuffInfoScRsp"
            }
            CmdRogueCommonType::CmdPrepareRogueAdventureRoomCsReq => {
                "CmdPrepareRogueAdventureRoomCsReq"
            }
            CmdRogueCommonType::CmdFinishRogueCommonDialogueScRsp => {
                "CmdFinishRogueCommonDialogueScRsp"
            }
            CmdRogueCommonType::CmdRogueWorkbenchGetInfoCsReq => {
                "CmdRogueWorkbenchGetInfoCsReq"
            }
            CmdRogueCommonType::CmdTakeRogueEventHandbookRewardScRsp => {
                "CmdTakeRogueEventHandbookRewardScRsp"
            }
            CmdRogueCommonType::CmdRogueWorkbenchHandleFuncScRsp => {
                "CmdRogueWorkbenchHandleFuncScRsp"
            }
            CmdRogueCommonType::CmdRogueGetGambleInfoCsReq => {
                "CmdRogueGetGambleInfoCsReq"
            }
            CmdRogueCommonType::CmdSetRogueCollectionCsReq => {
                "CmdSetRogueCollectionCsReq"
            }
            CmdRogueCommonType::CmdRogueNpcDisappearCsReq => "CmdRogueNpcDisappearCsReq",
            CmdRogueCommonType::CmdSyncRogueCommonDialogueDataScNotify => {
                "CmdSyncRogueCommonDialogueDataScNotify"
            }
            CmdRogueCommonType::CmdSetRogueExhibitionCsReq => {
                "CmdSetRogueExhibitionCsReq"
            }
            CmdRogueCommonType::CmdGetRogueAdventureRoomInfoScRsp => {
                "CmdGetRogueAdventureRoomInfoScRsp"
            }
            CmdRogueCommonType::CmdGetRogueShopMiracleInfoCsReq => {
                "CmdGetRogueShopMiracleInfoCsReq"
            }
            CmdRogueCommonType::CmdBuyRogueShopMiracleCsReq => {
                "CmdBuyRogueShopMiracleCsReq"
            }
            CmdRogueCommonType::CmdGetEnhanceCommonRogueBuffInfoScRsp => {
                "CmdGetEnhanceCommonRogueBuffInfoScRsp"
            }
            CmdRogueCommonType::CmdCommonRogueQueryCsReq => "CmdCommonRogueQueryCsReq",
            CmdRogueCommonType::CmdRogueWorkbenchGetInfoScRsp => {
                "CmdRogueWorkbenchGetInfoScRsp"
            }
            CmdRogueCommonType::CmdRogueGetGambleInfoScRsp => {
                "CmdRogueGetGambleInfoScRsp"
            }
            CmdRogueCommonType::CmdHandleRogueCommonPendingActionCsReq => {
                "CmdHandleRogueCommonPendingActionCsReq"
            }
            CmdRogueCommonType::CmdSyncRogueHandbookDataUpdateScNotify => {
                "CmdSyncRogueHandbookDataUpdateScNotify"
            }
            CmdRogueCommonType::CmdGetRogueCommonDialogueDataCsReq => {
                "CmdGetRogueCommonDialogueDataCsReq"
            }
            CmdRogueCommonType::CmdRogueNpcDisappearScRsp => "CmdRogueNpcDisappearScRsp",
            CmdRogueCommonType::CmdCommonRogueComponentUpdateScNotify => {
                "CmdCommonRogueComponentUpdateScNotify"
            }
            CmdRogueCommonType::CmdGetRogueExhibitionScRsp => {
                "CmdGetRogueExhibitionScRsp"
            }
            CmdRogueCommonType::CmdBuyRogueShopMiracleScRsp => {
                "CmdBuyRogueShopMiracleScRsp"
            }
            CmdRogueCommonType::CmdUpdateRogueAdventureRoomScoreCsReq => {
                "CmdUpdateRogueAdventureRoomScoreCsReq"
            }
            CmdRogueCommonType::CmdGetRogueCommonDialogueDataScRsp => {
                "CmdGetRogueCommonDialogueDataScRsp"
            }
            CmdRogueCommonType::CmdGetRogueHandbookDataScRsp => {
                "CmdGetRogueHandbookDataScRsp"
            }
            CmdRogueCommonType::CmdPrepareRogueAdventureRoomScRsp => {
                "CmdPrepareRogueAdventureRoomScRsp"
            }
            CmdRogueCommonType::CmdSetRogueExhibitionScRsp => {
                "CmdSetRogueExhibitionScRsp"
            }
            CmdRogueCommonType::CmdStopRogueAdventureRoomCsReq => {
                "CmdStopRogueAdventureRoomCsReq"
            }
            CmdRogueCommonType::CmdGetRogueExhibitionCsReq => {
                "CmdGetRogueExhibitionCsReq"
            }
            CmdRogueCommonType::CmdGetRogueCollectionScRsp => {
                "CmdGetRogueCollectionScRsp"
            }
            CmdRogueCommonType::CmdGetRogueHandbookDataCsReq => {
                "CmdGetRogueHandbookDataCsReq"
            }
            CmdRogueCommonType::CmdGetEnhanceCommonRogueBuffInfoCsReq => {
                "CmdGetEnhanceCommonRogueBuffInfoCsReq"
            }
            CmdRogueCommonType::CmdSyncRogueAdventureRoomInfoScNotify => {
                "CmdSyncRogueAdventureRoomInfoScNotify"
            }
            CmdRogueCommonType::CmdSelectRogueCommonDialogueOptionCsReq => {
                "CmdSelectRogueCommonDialogueOptionCsReq"
            }
            CmdRogueCommonType::CmdExchangeRogueBuffWithMiracleScRsp => {
                "CmdExchangeRogueBuffWithMiracleScRsp"
            }
            CmdRogueCommonType::CmdExchangeRogueBuffWithMiracleCsReq => {
                "CmdExchangeRogueBuffWithMiracleCsReq"
            }
            CmdRogueCommonType::CmdUpdateRogueAdventureRoomScoreScRsp => {
                "CmdUpdateRogueAdventureRoomScoreScRsp"
            }
            CmdRogueCommonType::CmdGetRogueShopMiracleInfoScRsp => {
                "CmdGetRogueShopMiracleInfoScRsp"
            }
            CmdRogueCommonType::CmdSyncRogueCommonVirtualItemInfoScNotify => {
                "CmdSyncRogueCommonVirtualItemInfoScNotify"
            }
            CmdRogueCommonType::CmdSyncRogueCommonDialogueOptionFinishScNotify => {
                "CmdSyncRogueCommonDialogueOptionFinishScNotify"
            }
            CmdRogueCommonType::CmdSelectRogueCommonDialogueOptionScRsp => {
                "CmdSelectRogueCommonDialogueOptionScRsp"
            }
            CmdRogueCommonType::CmdEnhanceCommonRogueBuffCsReq => {
                "CmdEnhanceCommonRogueBuffCsReq"
            }
            CmdRogueCommonType::CmdCommonRogueQueryScRsp => "CmdCommonRogueQueryScRsp",
            CmdRogueCommonType::CmdFinishRogueCommonDialogueCsReq => {
                "CmdFinishRogueCommonDialogueCsReq"
            }
            CmdRogueCommonType::CmdGetRogueShopBuffInfoCsReq => {
                "CmdGetRogueShopBuffInfoCsReq"
            }
            CmdRogueCommonType::CmdStopRogueAdventureRoomScRsp => {
                "CmdStopRogueAdventureRoomScRsp"
            }
            CmdRogueCommonType::CmdBuyRogueShopBuffCsReq => "CmdBuyRogueShopBuffCsReq",
            CmdRogueCommonType::CmdSetRogueCollectionScRsp => {
                "CmdSetRogueCollectionScRsp"
            }
            CmdRogueCommonType::CmdRogueDoGambleCsReq => "CmdRogueDoGambleCsReq",
            CmdRogueCommonType::CmdSyncRogueCommonActionResultScNotify => {
                "CmdSyncRogueCommonActionResultScNotify"
            }
            CmdRogueCommonType::CmdEnhanceCommonRogueBuffScRsp => {
                "CmdEnhanceCommonRogueBuffScRsp"
            }
            CmdRogueCommonType::CmdBuyRogueShopBuffScRsp => "CmdBuyRogueShopBuffScRsp",
            CmdRogueCommonType::CmdTakeRogueEventHandbookRewardCsReq => {
                "CmdTakeRogueEventHandbookRewardCsReq"
            }
            CmdRogueCommonType::CmdGetRogueAdventureRoomInfoCsReq => {
                "CmdGetRogueAdventureRoomInfoCsReq"
            }
            CmdRogueCommonType::CmdRogueDoGambleScRsp => "CmdRogueDoGambleScRsp",
            CmdRogueCommonType::CmdTakeRogueMiracleHandbookRewardScRsp => {
                "CmdTakeRogueMiracleHandbookRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueCommonTypeNone" => Some(Self::None),
            "CmdHandleRogueCommonPendingActionScRsp" => {
                Some(Self::CmdHandleRogueCommonPendingActionScRsp)
            }
            "CmdCommonRogueUpdateScNotify" => Some(Self::CmdCommonRogueUpdateScNotify),
            "CmdRogueWorkbenchSelectFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchSelectFuncCsReq)
            }
            "CmdTakeRogueMiracleHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardCsReq)
            }
            "CmdRogueWorkbenchSelectFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchSelectFuncScRsp)
            }
            "CmdRogueWorkbenchHandleFuncCsReq" => {
                Some(Self::CmdRogueWorkbenchHandleFuncCsReq)
            }
            "CmdSyncRogueCommonPendingActionScNotify" => {
                Some(Self::CmdSyncRogueCommonPendingActionScNotify)
            }
            "CmdGetRogueCollectionCsReq" => Some(Self::CmdGetRogueCollectionCsReq),
            "CmdGetRogueShopBuffInfoScRsp" => Some(Self::CmdGetRogueShopBuffInfoScRsp),
            "CmdPrepareRogueAdventureRoomCsReq" => {
                Some(Self::CmdPrepareRogueAdventureRoomCsReq)
            }
            "CmdFinishRogueCommonDialogueScRsp" => {
                Some(Self::CmdFinishRogueCommonDialogueScRsp)
            }
            "CmdRogueWorkbenchGetInfoCsReq" => Some(Self::CmdRogueWorkbenchGetInfoCsReq),
            "CmdTakeRogueEventHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueEventHandbookRewardScRsp)
            }
            "CmdRogueWorkbenchHandleFuncScRsp" => {
                Some(Self::CmdRogueWorkbenchHandleFuncScRsp)
            }
            "CmdRogueGetGambleInfoCsReq" => Some(Self::CmdRogueGetGambleInfoCsReq),
            "CmdSetRogueCollectionCsReq" => Some(Self::CmdSetRogueCollectionCsReq),
            "CmdRogueNpcDisappearCsReq" => Some(Self::CmdRogueNpcDisappearCsReq),
            "CmdSyncRogueCommonDialogueDataScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueDataScNotify)
            }
            "CmdSetRogueExhibitionCsReq" => Some(Self::CmdSetRogueExhibitionCsReq),
            "CmdGetRogueAdventureRoomInfoScRsp" => {
                Some(Self::CmdGetRogueAdventureRoomInfoScRsp)
            }
            "CmdGetRogueShopMiracleInfoCsReq" => {
                Some(Self::CmdGetRogueShopMiracleInfoCsReq)
            }
            "CmdBuyRogueShopMiracleCsReq" => Some(Self::CmdBuyRogueShopMiracleCsReq),
            "CmdGetEnhanceCommonRogueBuffInfoScRsp" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoScRsp)
            }
            "CmdCommonRogueQueryCsReq" => Some(Self::CmdCommonRogueQueryCsReq),
            "CmdRogueWorkbenchGetInfoScRsp" => Some(Self::CmdRogueWorkbenchGetInfoScRsp),
            "CmdRogueGetGambleInfoScRsp" => Some(Self::CmdRogueGetGambleInfoScRsp),
            "CmdHandleRogueCommonPendingActionCsReq" => {
                Some(Self::CmdHandleRogueCommonPendingActionCsReq)
            }
            "CmdSyncRogueHandbookDataUpdateScNotify" => {
                Some(Self::CmdSyncRogueHandbookDataUpdateScNotify)
            }
            "CmdGetRogueCommonDialogueDataCsReq" => {
                Some(Self::CmdGetRogueCommonDialogueDataCsReq)
            }
            "CmdRogueNpcDisappearScRsp" => Some(Self::CmdRogueNpcDisappearScRsp),
            "CmdCommonRogueComponentUpdateScNotify" => {
                Some(Self::CmdCommonRogueComponentUpdateScNotify)
            }
            "CmdGetRogueExhibitionScRsp" => Some(Self::CmdGetRogueExhibitionScRsp),
            "CmdBuyRogueShopMiracleScRsp" => Some(Self::CmdBuyRogueShopMiracleScRsp),
            "CmdUpdateRogueAdventureRoomScoreCsReq" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreCsReq)
            }
            "CmdGetRogueCommonDialogueDataScRsp" => {
                Some(Self::CmdGetRogueCommonDialogueDataScRsp)
            }
            "CmdGetRogueHandbookDataScRsp" => Some(Self::CmdGetRogueHandbookDataScRsp),
            "CmdPrepareRogueAdventureRoomScRsp" => {
                Some(Self::CmdPrepareRogueAdventureRoomScRsp)
            }
            "CmdSetRogueExhibitionScRsp" => Some(Self::CmdSetRogueExhibitionScRsp),
            "CmdStopRogueAdventureRoomCsReq" => {
                Some(Self::CmdStopRogueAdventureRoomCsReq)
            }
            "CmdGetRogueExhibitionCsReq" => Some(Self::CmdGetRogueExhibitionCsReq),
            "CmdGetRogueCollectionScRsp" => Some(Self::CmdGetRogueCollectionScRsp),
            "CmdGetRogueHandbookDataCsReq" => Some(Self::CmdGetRogueHandbookDataCsReq),
            "CmdGetEnhanceCommonRogueBuffInfoCsReq" => {
                Some(Self::CmdGetEnhanceCommonRogueBuffInfoCsReq)
            }
            "CmdSyncRogueAdventureRoomInfoScNotify" => {
                Some(Self::CmdSyncRogueAdventureRoomInfoScNotify)
            }
            "CmdSelectRogueCommonDialogueOptionCsReq" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionCsReq)
            }
            "CmdExchangeRogueBuffWithMiracleScRsp" => {
                Some(Self::CmdExchangeRogueBuffWithMiracleScRsp)
            }
            "CmdExchangeRogueBuffWithMiracleCsReq" => {
                Some(Self::CmdExchangeRogueBuffWithMiracleCsReq)
            }
            "CmdUpdateRogueAdventureRoomScoreScRsp" => {
                Some(Self::CmdUpdateRogueAdventureRoomScoreScRsp)
            }
            "CmdGetRogueShopMiracleInfoScRsp" => {
                Some(Self::CmdGetRogueShopMiracleInfoScRsp)
            }
            "CmdSyncRogueCommonVirtualItemInfoScNotify" => {
                Some(Self::CmdSyncRogueCommonVirtualItemInfoScNotify)
            }
            "CmdSyncRogueCommonDialogueOptionFinishScNotify" => {
                Some(Self::CmdSyncRogueCommonDialogueOptionFinishScNotify)
            }
            "CmdSelectRogueCommonDialogueOptionScRsp" => {
                Some(Self::CmdSelectRogueCommonDialogueOptionScRsp)
            }
            "CmdEnhanceCommonRogueBuffCsReq" => {
                Some(Self::CmdEnhanceCommonRogueBuffCsReq)
            }
            "CmdCommonRogueQueryScRsp" => Some(Self::CmdCommonRogueQueryScRsp),
            "CmdFinishRogueCommonDialogueCsReq" => {
                Some(Self::CmdFinishRogueCommonDialogueCsReq)
            }
            "CmdGetRogueShopBuffInfoCsReq" => Some(Self::CmdGetRogueShopBuffInfoCsReq),
            "CmdStopRogueAdventureRoomScRsp" => {
                Some(Self::CmdStopRogueAdventureRoomScRsp)
            }
            "CmdBuyRogueShopBuffCsReq" => Some(Self::CmdBuyRogueShopBuffCsReq),
            "CmdSetRogueCollectionScRsp" => Some(Self::CmdSetRogueCollectionScRsp),
            "CmdRogueDoGambleCsReq" => Some(Self::CmdRogueDoGambleCsReq),
            "CmdSyncRogueCommonActionResultScNotify" => {
                Some(Self::CmdSyncRogueCommonActionResultScNotify)
            }
            "CmdEnhanceCommonRogueBuffScRsp" => {
                Some(Self::CmdEnhanceCommonRogueBuffScRsp)
            }
            "CmdBuyRogueShopBuffScRsp" => Some(Self::CmdBuyRogueShopBuffScRsp),
            "CmdTakeRogueEventHandbookRewardCsReq" => {
                Some(Self::CmdTakeRogueEventHandbookRewardCsReq)
            }
            "CmdGetRogueAdventureRoomInfoCsReq" => {
                Some(Self::CmdGetRogueAdventureRoomInfoCsReq)
            }
            "CmdRogueDoGambleScRsp" => Some(Self::CmdRogueDoGambleScRsp),
            "CmdTakeRogueMiracleHandbookRewardScRsp" => {
                Some(Self::CmdTakeRogueMiracleHandbookRewardScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hjbbihgchli {
    RogueAdventureRoomStatusNone = 0,
    RogueAdventureRoomStatusPrepare = 1,
    RogueAdventureRoomStatusStarted = 2,
    RogueAdventureRoomStatusStopped = 3,
}
impl Hjbbihgchli {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hjbbihgchli::RogueAdventureRoomStatusNone => {
                "ROGUE_ADVENTURE_ROOM_STATUS_NONE"
            }
            Hjbbihgchli::RogueAdventureRoomStatusPrepare => {
                "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE"
            }
            Hjbbihgchli::RogueAdventureRoomStatusStarted => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STARTED"
            }
            Hjbbihgchli::RogueAdventureRoomStatusStopped => {
                "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_ADVENTURE_ROOM_STATUS_NONE" => {
                Some(Self::RogueAdventureRoomStatusNone)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_PREPARE" => {
                Some(Self::RogueAdventureRoomStatusPrepare)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STARTED" => {
                Some(Self::RogueAdventureRoomStatusStarted)
            }
            "ROGUE_ADVENTURE_ROOM_STATUS_STOPPED" => {
                Some(Self::RogueAdventureRoomStatusStopped)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hbdomioniba {
    RogueCommonBuffSelectSourceTypeNone = 0,
    RogueCommonBuffSelectSourceTypeDiceRoll = 1,
    RogueCommonBuffSelectSourceTypeAeon = 2,
    RogueCommonBuffSelectSourceTypeBoardEvent = 3,
    RogueCommonBuffSelectSourceTypeLevelMechanism = 4,
}
impl Hbdomioniba {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hbdomioniba::RogueCommonBuffSelectSourceTypeNone => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE"
            }
            Hbdomioniba::RogueCommonBuffSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Hbdomioniba::RogueCommonBuffSelectSourceTypeAeon => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON"
            }
            Hbdomioniba::RogueCommonBuffSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Hbdomioniba::RogueCommonBuffSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonBuffSelectSourceTypeNone)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonBuffSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonBuffSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonBuffSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonBuffSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oodgnonfgkc {
    RogueUnlockFunctionTypeMiracle = 0,
    RogueUnlockFunctionTypeShowHint = 1,
    RogueUnlockFunctionTypeCosmosBanAeon = 2,
    RogueUnlockFuntionTypeExhibition = 3,
    RogueUnlockFuntionTypeCollection = 4,
}
impl Oodgnonfgkc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Oodgnonfgkc::RogueUnlockFunctionTypeMiracle => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE"
            }
            Oodgnonfgkc::RogueUnlockFunctionTypeShowHint => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT"
            }
            Oodgnonfgkc::RogueUnlockFunctionTypeCosmosBanAeon => {
                "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON"
            }
            Oodgnonfgkc::RogueUnlockFuntionTypeExhibition => {
                "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION"
            }
            Oodgnonfgkc::RogueUnlockFuntionTypeCollection => {
                "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_UNLOCK_FUNCTION_TYPE_MIRACLE" => {
                Some(Self::RogueUnlockFunctionTypeMiracle)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_SHOW_HINT" => {
                Some(Self::RogueUnlockFunctionTypeShowHint)
            }
            "ROGUE_UNLOCK_FUNCTION_TYPE_COSMOS_BAN_AEON" => {
                Some(Self::RogueUnlockFunctionTypeCosmosBanAeon)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_EXHIBITION" => {
                Some(Self::RogueUnlockFuntionTypeExhibition)
            }
            "ROGUE_UNLOCK_FUNTION_TYPE_COLLECTION" => {
                Some(Self::RogueUnlockFuntionTypeCollection)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mmgfibbpbmh {
    RogueCommonMiracleSelectSourceTypeNone = 0,
    RogueCommonMiracleSelectSourceTypeDiceRoll = 1,
    RogueCommonMiracleSelectSourceTypeAeon = 2,
    RogueCommonMiracleSelectSourceTypeBoardEvent = 3,
    RogueCommonMiracleSelectSourceTypeLevelMechanism = 4,
}
impl Mmgfibbpbmh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mmgfibbpbmh::RogueCommonMiracleSelectSourceTypeNone => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE"
            }
            Mmgfibbpbmh::RogueCommonMiracleSelectSourceTypeDiceRoll => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL"
            }
            Mmgfibbpbmh::RogueCommonMiracleSelectSourceTypeAeon => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON"
            }
            Mmgfibbpbmh::RogueCommonMiracleSelectSourceTypeBoardEvent => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT"
            }
            Mmgfibbpbmh::RogueCommonMiracleSelectSourceTypeLevelMechanism => {
                "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_DICE_ROLL" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeDiceRoll)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeAeon)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_MIRACLE_SELECT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonMiracleSelectSourceTypeLevelMechanism)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Cmocllepeoj {
    RogueCommonBuffDisplayTypeNone = 0,
    RogueCommonBuffDisplayTypeAdd = 1,
    RogueCommonBuffDisplayTypeRemove = 2,
}
impl Cmocllepeoj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Cmocllepeoj::RogueCommonBuffDisplayTypeNone => {
                "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE"
            }
            Cmocllepeoj::RogueCommonBuffDisplayTypeAdd => {
                "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD"
            }
            Cmocllepeoj::RogueCommonBuffDisplayTypeRemove => {
                "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonBuffDisplayTypeNone)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonBuffDisplayTypeAdd)
            }
            "ROGUE_COMMON_BUFF_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonBuffDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Fnfcolliige {
    RogueCommonMiracleDisplayTypeNone = 0,
    RogueCommonMiracleDisplayTypeAdd = 1,
    RogueCommonMiracleDisplayTypeRemove = 2,
    RogueCommonMiracleDisplayTypeRepair = 3,
}
impl Fnfcolliige {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Fnfcolliige::RogueCommonMiracleDisplayTypeNone => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE"
            }
            Fnfcolliige::RogueCommonMiracleDisplayTypeAdd => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD"
            }
            Fnfcolliige::RogueCommonMiracleDisplayTypeRemove => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE"
            }
            Fnfcolliige::RogueCommonMiracleDisplayTypeRepair => {
                "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonMiracleDisplayTypeNone)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonMiracleDisplayTypeAdd)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonMiracleDisplayTypeRemove)
            }
            "ROGUE_COMMON_MIRACLE_DISPLAY_TYPE_REPAIR" => {
                Some(Self::RogueCommonMiracleDisplayTypeRepair)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Jeefcjoabhc {
    RogueCommonItemDisplayTypeNone = 0,
    RogueCommonItemDisplayTypeAdd = 1,
    RogueCommonItemDisplayTypeRemove = 2,
}
impl Jeefcjoabhc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Jeefcjoabhc::RogueCommonItemDisplayTypeNone => {
                "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE"
            }
            Jeefcjoabhc::RogueCommonItemDisplayTypeAdd => {
                "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD"
            }
            Jeefcjoabhc::RogueCommonItemDisplayTypeRemove => {
                "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonItemDisplayTypeNone)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_ADD" => {
                Some(Self::RogueCommonItemDisplayTypeAdd)
            }
            "ROGUE_COMMON_ITEM_DISPLAY_TYPE_REMOVE" => {
                Some(Self::RogueCommonItemDisplayTypeRemove)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bnlkbheaggj {
    RogueCommonActionResultDisplayTypeNone = 0,
    RogueCommonActionResultDisplayTypeSingle = 1,
    RogueCommonActionResultDisplayTypeMulti = 2,
}
impl Bnlkbheaggj {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Bnlkbheaggj::RogueCommonActionResultDisplayTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE"
            }
            Bnlkbheaggj::RogueCommonActionResultDisplayTypeSingle => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE"
            }
            Bnlkbheaggj::RogueCommonActionResultDisplayTypeMulti => {
                "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultDisplayTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_SINGLE" => {
                Some(Self::RogueCommonActionResultDisplayTypeSingle)
            }
            "ROGUE_COMMON_ACTION_RESULT_DISPLAY_TYPE_MULTI" => {
                Some(Self::RogueCommonActionResultDisplayTypeMulti)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Npkhcnmhkdp {
    RogueCommonActionResultSourceTypeNone = 0,
    RogueCommonActionResultSourceTypeSelect = 1,
    RogueCommonActionResultSourceTypeEnhance = 2,
    RogueCommonActionResultSourceTypeMiracle = 3,
    RogueCommonActionResultSourceTypeDialogue = 4,
    RogueCommonActionResultSourceTypeBonus = 5,
    RogueCommonActionResultSourceTypeShop = 6,
    RogueCommonActionResultSourceTypeDice = 7,
    RogueCommonActionResultSourceTypeAeon = 8,
    RogueCommonActionResultSourceTypeBoardEvent = 9,
    RogueCommonActionResultSourceTypeMazeSkill = 10,
    RogueCommonActionResultSourceTypeLevelMechanism = 11,
    RogueCommonActionResultSourceTypeBuff = 12,
    RogueCommonActionResultSourceTypeReforge = 13,
}
impl Npkhcnmhkdp {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeNone => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeSelect => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeEnhance => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeMiracle => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeDialogue => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeBonus => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeShop => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeDice => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeAeon => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeBoardEvent => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeMazeSkill => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeLevelMechanism => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeBuff => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF"
            }
            Npkhcnmhkdp::RogueCommonActionResultSourceTypeReforge => {
                "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_NONE" => {
                Some(Self::RogueCommonActionResultSourceTypeNone)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SELECT" => {
                Some(Self::RogueCommonActionResultSourceTypeSelect)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_ENHANCE" => {
                Some(Self::RogueCommonActionResultSourceTypeEnhance)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MIRACLE" => {
                Some(Self::RogueCommonActionResultSourceTypeMiracle)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::RogueCommonActionResultSourceTypeDialogue)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BONUS" => {
                Some(Self::RogueCommonActionResultSourceTypeBonus)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_SHOP" => {
                Some(Self::RogueCommonActionResultSourceTypeShop)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_DICE" => {
                Some(Self::RogueCommonActionResultSourceTypeDice)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_AEON" => {
                Some(Self::RogueCommonActionResultSourceTypeAeon)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BOARD_EVENT" => {
                Some(Self::RogueCommonActionResultSourceTypeBoardEvent)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_MAZE_SKILL" => {
                Some(Self::RogueCommonActionResultSourceTypeMazeSkill)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_LEVEL_MECHANISM" => {
                Some(Self::RogueCommonActionResultSourceTypeLevelMechanism)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_BUFF" => {
                Some(Self::RogueCommonActionResultSourceTypeBuff)
            }
            "ROGUE_COMMON_ACTION_RESULT_SOURCE_TYPE_REFORGE" => {
                Some(Self::RogueCommonActionResultSourceTypeReforge)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oimmmlnoicd {
    RogueTalentStatusLock = 0,
    RogueTalentStatusUnlock = 1,
    RogueTalentStatusEnable = 2,
}
impl Oimmmlnoicd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Oimmmlnoicd::RogueTalentStatusLock => "ROGUE_TALENT_STATUS_LOCK",
            Oimmmlnoicd::RogueTalentStatusUnlock => "ROGUE_TALENT_STATUS_UNLOCK",
            Oimmmlnoicd::RogueTalentStatusEnable => "ROGUE_TALENT_STATUS_ENABLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TALENT_STATUS_LOCK" => Some(Self::RogueTalentStatusLock),
            "ROGUE_TALENT_STATUS_UNLOCK" => Some(Self::RogueTalentStatusUnlock),
            "ROGUE_TALENT_STATUS_ENABLE" => Some(Self::RogueTalentStatusEnable),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kogippjmdkb {
    RogueCollectionOperateNone = 0,
    RogueCollectionOperateSet = 1,
    RogueCollectionOperateUnset = 2,
}
impl Kogippjmdkb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kogippjmdkb::RogueCollectionOperateNone => "ROGUE_COLLECTION_OPERATE_NONE",
            Kogippjmdkb::RogueCollectionOperateSet => "ROGUE_COLLECTION_OPERATE_SET",
            Kogippjmdkb::RogueCollectionOperateUnset => "ROGUE_COLLECTION_OPERATE_UNSET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_OPERATE_NONE" => Some(Self::RogueCollectionOperateNone),
            "ROGUE_COLLECTION_OPERATE_SET" => Some(Self::RogueCollectionOperateSet),
            "ROGUE_COLLECTION_OPERATE_UNSET" => Some(Self::RogueCollectionOperateUnset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bpibjehipof {
    RogueBoothNone = 0,
    RogueBoothEmpty = 1,
    RogueBoothDisplay = 2,
}
impl Bpibjehipof {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Bpibjehipof::RogueBoothNone => "ROGUE_BOOTH_NONE",
            Bpibjehipof::RogueBoothEmpty => "ROGUE_BOOTH_EMPTY",
            Bpibjehipof::RogueBoothDisplay => "ROGUE_BOOTH_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_BOOTH_NONE" => Some(Self::RogueBoothNone),
            "ROGUE_BOOTH_EMPTY" => Some(Self::RogueBoothEmpty),
            "ROGUE_BOOTH_DISPLAY" => Some(Self::RogueBoothDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Eeaceekbbik {
    RogueCollectionNone = 0,
    RogueCollectionUnlocked = 1,
    RogueCollectionDisplay = 2,
}
impl Eeaceekbbik {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Eeaceekbbik::RogueCollectionNone => "ROGUE_COLLECTION_NONE",
            Eeaceekbbik::RogueCollectionUnlocked => "ROGUE_COLLECTION_UNLOCKED",
            Eeaceekbbik::RogueCollectionDisplay => "ROGUE_COLLECTION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_COLLECTION_NONE" => Some(Self::RogueCollectionNone),
            "ROGUE_COLLECTION_UNLOCKED" => Some(Self::RogueCollectionUnlocked),
            "ROGUE_COLLECTION_DISPLAY" => Some(Self::RogueCollectionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Odijleidcnd {
    RogueExhibitionNone = 0,
    RogueExhibitionUnlocked = 1,
    RogueExhibitionDisplay = 2,
}
impl Odijleidcnd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Odijleidcnd::RogueExhibitionNone => "ROGUE_EXHIBITION_NONE",
            Odijleidcnd::RogueExhibitionUnlocked => "ROGUE_EXHIBITION_UNLOCKED",
            Odijleidcnd::RogueExhibitionDisplay => "ROGUE_EXHIBITION_DISPLAY",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_EXHIBITION_NONE" => Some(Self::RogueExhibitionNone),
            "ROGUE_EXHIBITION_UNLOCKED" => Some(Self::RogueExhibitionUnlocked),
            "ROGUE_EXHIBITION_DISPLAY" => Some(Self::RogueExhibitionDisplay),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ebjgjhclibc {
    CmdRogueEndlessNone = 0,
    CmdTakeRogueEndlessActivityPointRewardCsReq = 6006,
    CmdEnterRogueEndlessActivityStageScRsp = 6010,
    CmdRogueEndlessActivityBattleEndScNotify = 6002,
    CmdTakeRogueEndlessActivityAllBonusRewardScRsp = 6005,
    CmdTakeRogueEndlessActivityAllBonusRewardCsReq = 6003,
    CmdEnterRogueEndlessActivityStageCsReq = 6009,
    CmdGetRogueEndlessActivityDataScRsp = 6004,
    CmdGetRogueEndlessActivityDataCsReq = 6001,
    CmdTakeRogueEndlessActivityPointRewardScRsp = 6007,
}
impl Ebjgjhclibc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ebjgjhclibc::CmdRogueEndlessNone => "CmdRogueEndlessNone",
            Ebjgjhclibc::CmdTakeRogueEndlessActivityPointRewardCsReq => {
                "CmdTakeRogueEndlessActivityPointRewardCsReq"
            }
            Ebjgjhclibc::CmdEnterRogueEndlessActivityStageScRsp => {
                "CmdEnterRogueEndlessActivityStageScRsp"
            }
            Ebjgjhclibc::CmdRogueEndlessActivityBattleEndScNotify => {
                "CmdRogueEndlessActivityBattleEndScNotify"
            }
            Ebjgjhclibc::CmdTakeRogueEndlessActivityAllBonusRewardScRsp => {
                "CmdTakeRogueEndlessActivityAllBonusRewardScRsp"
            }
            Ebjgjhclibc::CmdTakeRogueEndlessActivityAllBonusRewardCsReq => {
                "CmdTakeRogueEndlessActivityAllBonusRewardCsReq"
            }
            Ebjgjhclibc::CmdEnterRogueEndlessActivityStageCsReq => {
                "CmdEnterRogueEndlessActivityStageCsReq"
            }
            Ebjgjhclibc::CmdGetRogueEndlessActivityDataScRsp => {
                "CmdGetRogueEndlessActivityDataScRsp"
            }
            Ebjgjhclibc::CmdGetRogueEndlessActivityDataCsReq => {
                "CmdGetRogueEndlessActivityDataCsReq"
            }
            Ebjgjhclibc::CmdTakeRogueEndlessActivityPointRewardScRsp => {
                "CmdTakeRogueEndlessActivityPointRewardScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueEndlessNone" => Some(Self::CmdRogueEndlessNone),
            "CmdTakeRogueEndlessActivityPointRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardCsReq)
            }
            "CmdEnterRogueEndlessActivityStageScRsp" => {
                Some(Self::CmdEnterRogueEndlessActivityStageScRsp)
            }
            "CmdRogueEndlessActivityBattleEndScNotify" => {
                Some(Self::CmdRogueEndlessActivityBattleEndScNotify)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardScRsp)
            }
            "CmdTakeRogueEndlessActivityAllBonusRewardCsReq" => {
                Some(Self::CmdTakeRogueEndlessActivityAllBonusRewardCsReq)
            }
            "CmdEnterRogueEndlessActivityStageCsReq" => {
                Some(Self::CmdEnterRogueEndlessActivityStageCsReq)
            }
            "CmdGetRogueEndlessActivityDataScRsp" => {
                Some(Self::CmdGetRogueEndlessActivityDataScRsp)
            }
            "CmdGetRogueEndlessActivityDataCsReq" => {
                Some(Self::CmdGetRogueEndlessActivityDataCsReq)
            }
            "CmdTakeRogueEndlessActivityPointRewardScRsp" => {
                Some(Self::CmdTakeRogueEndlessActivityPointRewardScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Bjpgeildfec {
    CmdRogueModifierTypeNone = 0,
    CmdRogueModifierSelectCellCsReq = 5343,
    CmdRogueModifierAddNotify = 5311,
    CmdRogueModifierSelectCellScRsp = 5356,
    CmdRogueModifierStageStartNotify = 5333,
    CmdRogueModifierUpdateNotify = 5329,
    CmdRogueModifierDelNotify = 5351,
}
impl Bjpgeildfec {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Bjpgeildfec::CmdRogueModifierTypeNone => "CmdRogueModifierTypeNone",
            Bjpgeildfec::CmdRogueModifierSelectCellCsReq => {
                "CmdRogueModifierSelectCellCsReq"
            }
            Bjpgeildfec::CmdRogueModifierAddNotify => "CmdRogueModifierAddNotify",
            Bjpgeildfec::CmdRogueModifierSelectCellScRsp => {
                "CmdRogueModifierSelectCellScRsp"
            }
            Bjpgeildfec::CmdRogueModifierStageStartNotify => {
                "CmdRogueModifierStageStartNotify"
            }
            Bjpgeildfec::CmdRogueModifierUpdateNotify => "CmdRogueModifierUpdateNotify",
            Bjpgeildfec::CmdRogueModifierDelNotify => "CmdRogueModifierDelNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueModifierTypeNone" => Some(Self::CmdRogueModifierTypeNone),
            "CmdRogueModifierSelectCellCsReq" => {
                Some(Self::CmdRogueModifierSelectCellCsReq)
            }
            "CmdRogueModifierAddNotify" => Some(Self::CmdRogueModifierAddNotify),
            "CmdRogueModifierSelectCellScRsp" => {
                Some(Self::CmdRogueModifierSelectCellScRsp)
            }
            "CmdRogueModifierStageStartNotify" => {
                Some(Self::CmdRogueModifierStageStartNotify)
            }
            "CmdRogueModifierUpdateNotify" => Some(Self::CmdRogueModifierUpdateNotify),
            "CmdRogueModifierDelNotify" => Some(Self::CmdRogueModifierDelNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Idlkgpjlfhc {
    RogueModifierSourceNone = 0,
    RogueModifierSourceDiceRoll = 1,
    RogueModifierSourceAeon = 2,
    RogueModifierSourceBoardEvent = 3,
    RogueModifierSourceDialogEvent = 4,
    RogueModifierSourceMiracle = 5,
    RogueModifierSourceCellMark = 6,
    RogueModifierSourceAeonTalent = 7,
    RogueModifierSourceBossDecay = 8,
    RogueModifierSourceDiceBranch = 9,
}
impl Idlkgpjlfhc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Idlkgpjlfhc::RogueModifierSourceNone => "ROGUE_MODIFIER_SOURCE_NONE",
            Idlkgpjlfhc::RogueModifierSourceDiceRoll => "ROGUE_MODIFIER_SOURCE_DICE_ROLL",
            Idlkgpjlfhc::RogueModifierSourceAeon => "ROGUE_MODIFIER_SOURCE_AEON",
            Idlkgpjlfhc::RogueModifierSourceBoardEvent => {
                "ROGUE_MODIFIER_SOURCE_BOARD_EVENT"
            }
            Idlkgpjlfhc::RogueModifierSourceDialogEvent => {
                "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT"
            }
            Idlkgpjlfhc::RogueModifierSourceMiracle => "ROGUE_MODIFIER_SOURCE_MIRACLE",
            Idlkgpjlfhc::RogueModifierSourceCellMark => "ROGUE_MODIFIER_SOURCE_CELL_MARK",
            Idlkgpjlfhc::RogueModifierSourceAeonTalent => {
                "ROGUE_MODIFIER_SOURCE_AEON_TALENT"
            }
            Idlkgpjlfhc::RogueModifierSourceBossDecay => {
                "ROGUE_MODIFIER_SOURCE_BOSS_DECAY"
            }
            Idlkgpjlfhc::RogueModifierSourceDiceBranch => {
                "ROGUE_MODIFIER_SOURCE_DICE_BRANCH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_SOURCE_NONE" => Some(Self::RogueModifierSourceNone),
            "ROGUE_MODIFIER_SOURCE_DICE_ROLL" => Some(Self::RogueModifierSourceDiceRoll),
            "ROGUE_MODIFIER_SOURCE_AEON" => Some(Self::RogueModifierSourceAeon),
            "ROGUE_MODIFIER_SOURCE_BOARD_EVENT" => {
                Some(Self::RogueModifierSourceBoardEvent)
            }
            "ROGUE_MODIFIER_SOURCE_DIALOG_EVENT" => {
                Some(Self::RogueModifierSourceDialogEvent)
            }
            "ROGUE_MODIFIER_SOURCE_MIRACLE" => Some(Self::RogueModifierSourceMiracle),
            "ROGUE_MODIFIER_SOURCE_CELL_MARK" => Some(Self::RogueModifierSourceCellMark),
            "ROGUE_MODIFIER_SOURCE_AEON_TALENT" => {
                Some(Self::RogueModifierSourceAeonTalent)
            }
            "ROGUE_MODIFIER_SOURCE_BOSS_DECAY" => {
                Some(Self::RogueModifierSourceBossDecay)
            }
            "ROGUE_MODIFIER_SOURCE_DICE_BRANCH" => {
                Some(Self::RogueModifierSourceDiceBranch)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oeafacbejbl {
    RogueModifierContentDefinite = 0,
    RogueModifierContentRandom = 1,
}
impl Oeafacbejbl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Oeafacbejbl::RogueModifierContentDefinite => {
                "ROGUE_MODIFIER_CONTENT_DEFINITE"
            }
            Oeafacbejbl::RogueModifierContentRandom => "ROGUE_MODIFIER_CONTENT_RANDOM",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_MODIFIER_CONTENT_DEFINITE" => Some(Self::RogueModifierContentDefinite),
            "ROGUE_MODIFIER_CONTENT_RANDOM" => Some(Self::RogueModifierContentRandom),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Oklcifjakhm {
    CmdRogueTournTypeNone = 0,
    CmdRogueTournSettleScRsp = 6043,
    CmdRogueTournLeaveScRsp = 6078,
    CmdRogueTournEnterLayerScRsp = 6058,
    CmdRogueTournStartCsReq = 6083,
    CmdRogueTournLeaveRogueCocoonSceneCsReq = 6064,
    CmdRogueTournLeaveRogueCocoonSceneScRsp = 6086,
    CmdRogueTournDeleteArchiveCsReq = 6016,
    CmdRogueTournLevelInfoUpdateScNotify = 6038,
    CmdRogueTournExpNotify = 6017,
    CmdRogueTournGetMiscRealTimeDataScRsp = 6013,
    CmdRogueTournReviveAvatarScRsp = 6042,
    CmdRogueTournReviveAvatarCsReq = 6081,
    CmdRogueTournGetAllArchiveCsReq = 6068,
    CmdRogueTournQueryScRsp = 6040,
    CmdRogueTournDeleteArchiveScRsp = 6035,
    CmdRogueTournReEnterRogueCocoonStageCsReq = 6063,
    CmdRogueTournTakeExpRewardCsReq = 6027,
    CmdRogueTournEnterRogueCocoonSceneCsReq = 6095,
    CmdRogueTournGetCurRogueCocoonInfoScRsp = 6041,
    CmdRogueTournGetArchiveRepositoryScRsp = 6031,
    CmdRogueTournRenameArchiveScRsp = 6088,
    CmdRogueTournResetPermanentTalentScRsp = 6096,
    CmdRogueTournQueryCsReq = 6034,
    CmdRogueTournWeekChallengeUpdateScNotify = 6032,
    CmdRogueTournGetCurRogueCocoonInfoCsReq = 6051,
    CmdRogueTournRenameArchiveCsReq = 6044,
    CmdRogueTournTakeExpRewardScRsp = 6049,
    CmdRogueTournEnterCsReq = 6099,
    CmdRogueTournConfirmSettleScRsp = 6024,
    CmdRogueTournGetMiscRealTimeDataCsReq = 6079,
    CmdRogueTournEnterLayerCsReq = 6092,
    CmdRogueTournGetAllArchiveScRsp = 6018,
    CmdRogueTournReviveCostUpdateScNotify = 6087,
    CmdRogueTournDifficultyCompNotify = 6055,
    CmdRogueTournGetArchiveRepositoryCsReq = 6082,
    CmdRogueTournEnablePermanentTalentScRsp = 6053,
    CmdRogueTournGetPermanentTalentInfoCsReq = 6026,
    CmdRogueTournGetPermanentTalentInfoScRsp = 6085,
    CmdRogueTournHandBookNotify = 6056,
    CmdRogueTournAreaUpdateScNotify = 6066,
    CmdRogueTournEnablePermanentTalentCsReq = 6022,
    CmdRogueTournEnterRoomScRsp = 6019,
    CmdRogueTournLeaveCsReq = 6059,
    CmdRogueTournEnterRoomCsReq = 6089,
    CmdRogueTournSettleCsReq = 6100,
    CmdRogueTournConfirmSettleCsReq = 6023,
    CmdRogueTournGetSettleInfoScRsp = 6036,
    CmdRogueTournReEnterRogueCocoonStageScRsp = 6050,
    CmdRogueTournEnterRogueCocoonSceneScRsp = 6025,
    CmdRogueTournEnterScRsp = 6033,
    CmdRogueTournClearArchiveNameScNotify = 6057,
    CmdRogueTournGetSettleInfoCsReq = 6077,
    CmdRogueTournStartScRsp = 6039,
    CmdRogueTournBattleFailSettleInfoScNotify = 6020,
    CmdRogueTournResetPermanentTalentCsReq = 6021,
}
impl Oklcifjakhm {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Oklcifjakhm::CmdRogueTournTypeNone => "CmdRogueTournTypeNone",
            Oklcifjakhm::CmdRogueTournSettleScRsp => "CmdRogueTournSettleScRsp",
            Oklcifjakhm::CmdRogueTournLeaveScRsp => "CmdRogueTournLeaveScRsp",
            Oklcifjakhm::CmdRogueTournEnterLayerScRsp => "CmdRogueTournEnterLayerScRsp",
            Oklcifjakhm::CmdRogueTournStartCsReq => "CmdRogueTournStartCsReq",
            Oklcifjakhm::CmdRogueTournLeaveRogueCocoonSceneCsReq => {
                "CmdRogueTournLeaveRogueCocoonSceneCsReq"
            }
            Oklcifjakhm::CmdRogueTournLeaveRogueCocoonSceneScRsp => {
                "CmdRogueTournLeaveRogueCocoonSceneScRsp"
            }
            Oklcifjakhm::CmdRogueTournDeleteArchiveCsReq => {
                "CmdRogueTournDeleteArchiveCsReq"
            }
            Oklcifjakhm::CmdRogueTournLevelInfoUpdateScNotify => {
                "CmdRogueTournLevelInfoUpdateScNotify"
            }
            Oklcifjakhm::CmdRogueTournExpNotify => "CmdRogueTournExpNotify",
            Oklcifjakhm::CmdRogueTournGetMiscRealTimeDataScRsp => {
                "CmdRogueTournGetMiscRealTimeDataScRsp"
            }
            Oklcifjakhm::CmdRogueTournReviveAvatarScRsp => {
                "CmdRogueTournReviveAvatarScRsp"
            }
            Oklcifjakhm::CmdRogueTournReviveAvatarCsReq => {
                "CmdRogueTournReviveAvatarCsReq"
            }
            Oklcifjakhm::CmdRogueTournGetAllArchiveCsReq => {
                "CmdRogueTournGetAllArchiveCsReq"
            }
            Oklcifjakhm::CmdRogueTournQueryScRsp => "CmdRogueTournQueryScRsp",
            Oklcifjakhm::CmdRogueTournDeleteArchiveScRsp => {
                "CmdRogueTournDeleteArchiveScRsp"
            }
            Oklcifjakhm::CmdRogueTournReEnterRogueCocoonStageCsReq => {
                "CmdRogueTournReEnterRogueCocoonStageCsReq"
            }
            Oklcifjakhm::CmdRogueTournTakeExpRewardCsReq => {
                "CmdRogueTournTakeExpRewardCsReq"
            }
            Oklcifjakhm::CmdRogueTournEnterRogueCocoonSceneCsReq => {
                "CmdRogueTournEnterRogueCocoonSceneCsReq"
            }
            Oklcifjakhm::CmdRogueTournGetCurRogueCocoonInfoScRsp => {
                "CmdRogueTournGetCurRogueCocoonInfoScRsp"
            }
            Oklcifjakhm::CmdRogueTournGetArchiveRepositoryScRsp => {
                "CmdRogueTournGetArchiveRepositoryScRsp"
            }
            Oklcifjakhm::CmdRogueTournRenameArchiveScRsp => {
                "CmdRogueTournRenameArchiveScRsp"
            }
            Oklcifjakhm::CmdRogueTournResetPermanentTalentScRsp => {
                "CmdRogueTournResetPermanentTalentScRsp"
            }
            Oklcifjakhm::CmdRogueTournQueryCsReq => "CmdRogueTournQueryCsReq",
            Oklcifjakhm::CmdRogueTournWeekChallengeUpdateScNotify => {
                "CmdRogueTournWeekChallengeUpdateScNotify"
            }
            Oklcifjakhm::CmdRogueTournGetCurRogueCocoonInfoCsReq => {
                "CmdRogueTournGetCurRogueCocoonInfoCsReq"
            }
            Oklcifjakhm::CmdRogueTournRenameArchiveCsReq => {
                "CmdRogueTournRenameArchiveCsReq"
            }
            Oklcifjakhm::CmdRogueTournTakeExpRewardScRsp => {
                "CmdRogueTournTakeExpRewardScRsp"
            }
            Oklcifjakhm::CmdRogueTournEnterCsReq => "CmdRogueTournEnterCsReq",
            Oklcifjakhm::CmdRogueTournConfirmSettleScRsp => {
                "CmdRogueTournConfirmSettleScRsp"
            }
            Oklcifjakhm::CmdRogueTournGetMiscRealTimeDataCsReq => {
                "CmdRogueTournGetMiscRealTimeDataCsReq"
            }
            Oklcifjakhm::CmdRogueTournEnterLayerCsReq => "CmdRogueTournEnterLayerCsReq",
            Oklcifjakhm::CmdRogueTournGetAllArchiveScRsp => {
                "CmdRogueTournGetAllArchiveScRsp"
            }
            Oklcifjakhm::CmdRogueTournReviveCostUpdateScNotify => {
                "CmdRogueTournReviveCostUpdateScNotify"
            }
            Oklcifjakhm::CmdRogueTournDifficultyCompNotify => {
                "CmdRogueTournDifficultyCompNotify"
            }
            Oklcifjakhm::CmdRogueTournGetArchiveRepositoryCsReq => {
                "CmdRogueTournGetArchiveRepositoryCsReq"
            }
            Oklcifjakhm::CmdRogueTournEnablePermanentTalentScRsp => {
                "CmdRogueTournEnablePermanentTalentScRsp"
            }
            Oklcifjakhm::CmdRogueTournGetPermanentTalentInfoCsReq => {
                "CmdRogueTournGetPermanentTalentInfoCsReq"
            }
            Oklcifjakhm::CmdRogueTournGetPermanentTalentInfoScRsp => {
                "CmdRogueTournGetPermanentTalentInfoScRsp"
            }
            Oklcifjakhm::CmdRogueTournHandBookNotify => "CmdRogueTournHandBookNotify",
            Oklcifjakhm::CmdRogueTournAreaUpdateScNotify => {
                "CmdRogueTournAreaUpdateScNotify"
            }
            Oklcifjakhm::CmdRogueTournEnablePermanentTalentCsReq => {
                "CmdRogueTournEnablePermanentTalentCsReq"
            }
            Oklcifjakhm::CmdRogueTournEnterRoomScRsp => "CmdRogueTournEnterRoomScRsp",
            Oklcifjakhm::CmdRogueTournLeaveCsReq => "CmdRogueTournLeaveCsReq",
            Oklcifjakhm::CmdRogueTournEnterRoomCsReq => "CmdRogueTournEnterRoomCsReq",
            Oklcifjakhm::CmdRogueTournSettleCsReq => "CmdRogueTournSettleCsReq",
            Oklcifjakhm::CmdRogueTournConfirmSettleCsReq => {
                "CmdRogueTournConfirmSettleCsReq"
            }
            Oklcifjakhm::CmdRogueTournGetSettleInfoScRsp => {
                "CmdRogueTournGetSettleInfoScRsp"
            }
            Oklcifjakhm::CmdRogueTournReEnterRogueCocoonStageScRsp => {
                "CmdRogueTournReEnterRogueCocoonStageScRsp"
            }
            Oklcifjakhm::CmdRogueTournEnterRogueCocoonSceneScRsp => {
                "CmdRogueTournEnterRogueCocoonSceneScRsp"
            }
            Oklcifjakhm::CmdRogueTournEnterScRsp => "CmdRogueTournEnterScRsp",
            Oklcifjakhm::CmdRogueTournClearArchiveNameScNotify => {
                "CmdRogueTournClearArchiveNameScNotify"
            }
            Oklcifjakhm::CmdRogueTournGetSettleInfoCsReq => {
                "CmdRogueTournGetSettleInfoCsReq"
            }
            Oklcifjakhm::CmdRogueTournStartScRsp => "CmdRogueTournStartScRsp",
            Oklcifjakhm::CmdRogueTournBattleFailSettleInfoScNotify => {
                "CmdRogueTournBattleFailSettleInfoScNotify"
            }
            Oklcifjakhm::CmdRogueTournResetPermanentTalentCsReq => {
                "CmdRogueTournResetPermanentTalentCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRogueTournTypeNone" => Some(Self::CmdRogueTournTypeNone),
            "CmdRogueTournSettleScRsp" => Some(Self::CmdRogueTournSettleScRsp),
            "CmdRogueTournLeaveScRsp" => Some(Self::CmdRogueTournLeaveScRsp),
            "CmdRogueTournEnterLayerScRsp" => Some(Self::CmdRogueTournEnterLayerScRsp),
            "CmdRogueTournStartCsReq" => Some(Self::CmdRogueTournStartCsReq),
            "CmdRogueTournLeaveRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneCsReq)
            }
            "CmdRogueTournLeaveRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournLeaveRogueCocoonSceneScRsp)
            }
            "CmdRogueTournDeleteArchiveCsReq" => {
                Some(Self::CmdRogueTournDeleteArchiveCsReq)
            }
            "CmdRogueTournLevelInfoUpdateScNotify" => {
                Some(Self::CmdRogueTournLevelInfoUpdateScNotify)
            }
            "CmdRogueTournExpNotify" => Some(Self::CmdRogueTournExpNotify),
            "CmdRogueTournGetMiscRealTimeDataScRsp" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataScRsp)
            }
            "CmdRogueTournReviveAvatarScRsp" => {
                Some(Self::CmdRogueTournReviveAvatarScRsp)
            }
            "CmdRogueTournReviveAvatarCsReq" => {
                Some(Self::CmdRogueTournReviveAvatarCsReq)
            }
            "CmdRogueTournGetAllArchiveCsReq" => {
                Some(Self::CmdRogueTournGetAllArchiveCsReq)
            }
            "CmdRogueTournQueryScRsp" => Some(Self::CmdRogueTournQueryScRsp),
            "CmdRogueTournDeleteArchiveScRsp" => {
                Some(Self::CmdRogueTournDeleteArchiveScRsp)
            }
            "CmdRogueTournReEnterRogueCocoonStageCsReq" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageCsReq)
            }
            "CmdRogueTournTakeExpRewardCsReq" => {
                Some(Self::CmdRogueTournTakeExpRewardCsReq)
            }
            "CmdRogueTournEnterRogueCocoonSceneCsReq" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneCsReq)
            }
            "CmdRogueTournGetCurRogueCocoonInfoScRsp" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoScRsp)
            }
            "CmdRogueTournGetArchiveRepositoryScRsp" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryScRsp)
            }
            "CmdRogueTournRenameArchiveScRsp" => {
                Some(Self::CmdRogueTournRenameArchiveScRsp)
            }
            "CmdRogueTournResetPermanentTalentScRsp" => {
                Some(Self::CmdRogueTournResetPermanentTalentScRsp)
            }
            "CmdRogueTournQueryCsReq" => Some(Self::CmdRogueTournQueryCsReq),
            "CmdRogueTournWeekChallengeUpdateScNotify" => {
                Some(Self::CmdRogueTournWeekChallengeUpdateScNotify)
            }
            "CmdRogueTournGetCurRogueCocoonInfoCsReq" => {
                Some(Self::CmdRogueTournGetCurRogueCocoonInfoCsReq)
            }
            "CmdRogueTournRenameArchiveCsReq" => {
                Some(Self::CmdRogueTournRenameArchiveCsReq)
            }
            "CmdRogueTournTakeExpRewardScRsp" => {
                Some(Self::CmdRogueTournTakeExpRewardScRsp)
            }
            "CmdRogueTournEnterCsReq" => Some(Self::CmdRogueTournEnterCsReq),
            "CmdRogueTournConfirmSettleScRsp" => {
                Some(Self::CmdRogueTournConfirmSettleScRsp)
            }
            "CmdRogueTournGetMiscRealTimeDataCsReq" => {
                Some(Self::CmdRogueTournGetMiscRealTimeDataCsReq)
            }
            "CmdRogueTournEnterLayerCsReq" => Some(Self::CmdRogueTournEnterLayerCsReq),
            "CmdRogueTournGetAllArchiveScRsp" => {
                Some(Self::CmdRogueTournGetAllArchiveScRsp)
            }
            "CmdRogueTournReviveCostUpdateScNotify" => {
                Some(Self::CmdRogueTournReviveCostUpdateScNotify)
            }
            "CmdRogueTournDifficultyCompNotify" => {
                Some(Self::CmdRogueTournDifficultyCompNotify)
            }
            "CmdRogueTournGetArchiveRepositoryCsReq" => {
                Some(Self::CmdRogueTournGetArchiveRepositoryCsReq)
            }
            "CmdRogueTournEnablePermanentTalentScRsp" => {
                Some(Self::CmdRogueTournEnablePermanentTalentScRsp)
            }
            "CmdRogueTournGetPermanentTalentInfoCsReq" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoCsReq)
            }
            "CmdRogueTournGetPermanentTalentInfoScRsp" => {
                Some(Self::CmdRogueTournGetPermanentTalentInfoScRsp)
            }
            "CmdRogueTournHandBookNotify" => Some(Self::CmdRogueTournHandBookNotify),
            "CmdRogueTournAreaUpdateScNotify" => {
                Some(Self::CmdRogueTournAreaUpdateScNotify)
            }
            "CmdRogueTournEnablePermanentTalentCsReq" => {
                Some(Self::CmdRogueTournEnablePermanentTalentCsReq)
            }
            "CmdRogueTournEnterRoomScRsp" => Some(Self::CmdRogueTournEnterRoomScRsp),
            "CmdRogueTournLeaveCsReq" => Some(Self::CmdRogueTournLeaveCsReq),
            "CmdRogueTournEnterRoomCsReq" => Some(Self::CmdRogueTournEnterRoomCsReq),
            "CmdRogueTournSettleCsReq" => Some(Self::CmdRogueTournSettleCsReq),
            "CmdRogueTournConfirmSettleCsReq" => {
                Some(Self::CmdRogueTournConfirmSettleCsReq)
            }
            "CmdRogueTournGetSettleInfoScRsp" => {
                Some(Self::CmdRogueTournGetSettleInfoScRsp)
            }
            "CmdRogueTournReEnterRogueCocoonStageScRsp" => {
                Some(Self::CmdRogueTournReEnterRogueCocoonStageScRsp)
            }
            "CmdRogueTournEnterRogueCocoonSceneScRsp" => {
                Some(Self::CmdRogueTournEnterRogueCocoonSceneScRsp)
            }
            "CmdRogueTournEnterScRsp" => Some(Self::CmdRogueTournEnterScRsp),
            "CmdRogueTournClearArchiveNameScNotify" => {
                Some(Self::CmdRogueTournClearArchiveNameScNotify)
            }
            "CmdRogueTournGetSettleInfoCsReq" => {
                Some(Self::CmdRogueTournGetSettleInfoCsReq)
            }
            "CmdRogueTournStartScRsp" => Some(Self::CmdRogueTournStartScRsp),
            "CmdRogueTournBattleFailSettleInfoScNotify" => {
                Some(Self::CmdRogueTournBattleFailSettleInfoScNotify)
            }
            "CmdRogueTournResetPermanentTalentCsReq" => {
                Some(Self::CmdRogueTournResetPermanentTalentCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Dmgmpocpddc {
    RogueTournLevelStatusNone = 0,
    RogueTournLevelStatusProcessing = 1,
    RogueTournLevelStatusFinished = 2,
    RogueTournLevelStatusSettled = 3,
}
impl Dmgmpocpddc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Dmgmpocpddc::RogueTournLevelStatusNone => "ROGUE_TOURN_LEVEL_STATUS_NONE",
            Dmgmpocpddc::RogueTournLevelStatusProcessing => {
                "ROGUE_TOURN_LEVEL_STATUS_PROCESSING"
            }
            Dmgmpocpddc::RogueTournLevelStatusFinished => {
                "ROGUE_TOURN_LEVEL_STATUS_FINISHED"
            }
            Dmgmpocpddc::RogueTournLevelStatusSettled => {
                "ROGUE_TOURN_LEVEL_STATUS_SETTLED"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LEVEL_STATUS_NONE" => Some(Self::RogueTournLevelStatusNone),
            "ROGUE_TOURN_LEVEL_STATUS_PROCESSING" => {
                Some(Self::RogueTournLevelStatusProcessing)
            }
            "ROGUE_TOURN_LEVEL_STATUS_FINISHED" => {
                Some(Self::RogueTournLevelStatusFinished)
            }
            "ROGUE_TOURN_LEVEL_STATUS_SETTLED" => {
                Some(Self::RogueTournLevelStatusSettled)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nioandilghd {
    RogueTournLayerStatusNone = 0,
    RogueTournLayerStatusProcessing = 1,
    RogueTournLayerStatusFinish = 2,
}
impl Nioandilghd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nioandilghd::RogueTournLayerStatusNone => "ROGUE_TOURN_LAYER_STATUS_NONE",
            Nioandilghd::RogueTournLayerStatusProcessing => {
                "ROGUE_TOURN_LAYER_STATUS_PROCESSING"
            }
            Nioandilghd::RogueTournLayerStatusFinish => "ROGUE_TOURN_LAYER_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_LAYER_STATUS_NONE" => Some(Self::RogueTournLayerStatusNone),
            "ROGUE_TOURN_LAYER_STATUS_PROCESSING" => {
                Some(Self::RogueTournLayerStatusProcessing)
            }
            "ROGUE_TOURN_LAYER_STATUS_FINISH" => Some(Self::RogueTournLayerStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kgcifmhjoag {
    RogueTournRoomStatusNone = 0,
    RogueTournRoomStatusInited = 1,
    RogueTournRoomStatusProcessing = 2,
    RogueTournRoomStatusFinish = 3,
}
impl Kgcifmhjoag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kgcifmhjoag::RogueTournRoomStatusNone => "ROGUE_TOURN_ROOM_STATUS_NONE",
            Kgcifmhjoag::RogueTournRoomStatusInited => "ROGUE_TOURN_ROOM_STATUS_INITED",
            Kgcifmhjoag::RogueTournRoomStatusProcessing => {
                "ROGUE_TOURN_ROOM_STATUS_PROCESSING"
            }
            Kgcifmhjoag::RogueTournRoomStatusFinish => "ROGUE_TOURN_ROOM_STATUS_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_ROOM_STATUS_NONE" => Some(Self::RogueTournRoomStatusNone),
            "ROGUE_TOURN_ROOM_STATUS_INITED" => Some(Self::RogueTournRoomStatusInited),
            "ROGUE_TOURN_ROOM_STATUS_PROCESSING" => {
                Some(Self::RogueTournRoomStatusProcessing)
            }
            "ROGUE_TOURN_ROOM_STATUS_FINISH" => Some(Self::RogueTournRoomStatusFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Meahibhbfon {
    RogueTournSettleReasonNone = 0,
    RogueTournSettleReasonWin = 1,
    RogueTournSettleReasonFail = 2,
    RogueTournSettleReasonInterrupt = 3,
}
impl Meahibhbfon {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Meahibhbfon::RogueTournSettleReasonNone => "ROGUE_TOURN_SETTLE_REASON_NONE",
            Meahibhbfon::RogueTournSettleReasonWin => "ROGUE_TOURN_SETTLE_REASON_WIN",
            Meahibhbfon::RogueTournSettleReasonFail => "ROGUE_TOURN_SETTLE_REASON_FAIL",
            Meahibhbfon::RogueTournSettleReasonInterrupt => {
                "ROGUE_TOURN_SETTLE_REASON_INTERRUPT"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_SETTLE_REASON_NONE" => Some(Self::RogueTournSettleReasonNone),
            "ROGUE_TOURN_SETTLE_REASON_WIN" => Some(Self::RogueTournSettleReasonWin),
            "ROGUE_TOURN_SETTLE_REASON_FAIL" => Some(Self::RogueTournSettleReasonFail),
            "ROGUE_TOURN_SETTLE_REASON_INTERRUPT" => {
                Some(Self::RogueTournSettleReasonInterrupt)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Llecchannpc {
    RogueTournHandbookNone = 0,
    RogueTournHandbookSimpleMiracle = 1,
    RogueTournHandbookHexMiracle = 2,
    RogueTournHandbookBuff = 3,
    RogueTournHandbookEvent = 4,
    RogueTournHandbookFormula = 5,
}
impl Llecchannpc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Llecchannpc::RogueTournHandbookNone => "ROGUE_TOURN_HANDBOOK_NONE",
            Llecchannpc::RogueTournHandbookSimpleMiracle => {
                "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE"
            }
            Llecchannpc::RogueTournHandbookHexMiracle => {
                "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE"
            }
            Llecchannpc::RogueTournHandbookBuff => "ROGUE_TOURN_HANDBOOK_BUFF",
            Llecchannpc::RogueTournHandbookEvent => "ROGUE_TOURN_HANDBOOK_EVENT",
            Llecchannpc::RogueTournHandbookFormula => "ROGUE_TOURN_HANDBOOK_FORMULA",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROGUE_TOURN_HANDBOOK_NONE" => Some(Self::RogueTournHandbookNone),
            "ROGUE_TOURN_HANDBOOK_SIMPLE_MIRACLE" => {
                Some(Self::RogueTournHandbookSimpleMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_HEX_MIRACLE" => {
                Some(Self::RogueTournHandbookHexMiracle)
            }
            "ROGUE_TOURN_HANDBOOK_BUFF" => Some(Self::RogueTournHandbookBuff),
            "ROGUE_TOURN_HANDBOOK_EVENT" => Some(Self::RogueTournHandbookEvent),
            "ROGUE_TOURN_HANDBOOK_FORMULA" => Some(Self::RogueTournHandbookFormula),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Khaicemhkel {
    CmdRollShopTypeNone = 0,
    CmdGetRollShopInfoCsReq = 6919,
    CmdTakeRollShopRewardScRsp = 6902,
    CmdDoGachaInRollShopScRsp = 6920,
    CmdDoGachaInRollShopCsReq = 6912,
    CmdTakeRollShopRewardCsReq = 6904,
    CmdGetRollShopInfoScRsp = 6903,
}
impl Khaicemhkel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Khaicemhkel::CmdRollShopTypeNone => "CmdRollShopTypeNone",
            Khaicemhkel::CmdGetRollShopInfoCsReq => "CmdGetRollShopInfoCsReq",
            Khaicemhkel::CmdTakeRollShopRewardScRsp => "CmdTakeRollShopRewardScRsp",
            Khaicemhkel::CmdDoGachaInRollShopScRsp => "CmdDoGachaInRollShopScRsp",
            Khaicemhkel::CmdDoGachaInRollShopCsReq => "CmdDoGachaInRollShopCsReq",
            Khaicemhkel::CmdTakeRollShopRewardCsReq => "CmdTakeRollShopRewardCsReq",
            Khaicemhkel::CmdGetRollShopInfoScRsp => "CmdGetRollShopInfoScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdRollShopTypeNone" => Some(Self::CmdRollShopTypeNone),
            "CmdGetRollShopInfoCsReq" => Some(Self::CmdGetRollShopInfoCsReq),
            "CmdTakeRollShopRewardScRsp" => Some(Self::CmdTakeRollShopRewardScRsp),
            "CmdDoGachaInRollShopScRsp" => Some(Self::CmdDoGachaInRollShopScRsp),
            "CmdDoGachaInRollShopCsReq" => Some(Self::CmdDoGachaInRollShopCsReq),
            "CmdTakeRollShopRewardCsReq" => Some(Self::CmdTakeRollShopRewardCsReq),
            "CmdGetRollShopInfoScRsp" => Some(Self::CmdGetRollShopInfoScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdSceneType {
    None = 0,
    CmdInteractPropCsReq = 1411,
    CmdReturnLastTownScRsp = 1492,
    CmdSetSpringRecoverConfigCsReq = 1500,
    CmdSyncServerSceneChangeNotify = 1450,
    CmdSceneUpdatePositionVersionNotify = 1454,
    CmdGroupStateChangeScRsp = 1420,
    CmdSpringRecoverCsReq = 1458,
    CmdGetEnteredSceneScRsp = 1477,
    CmdScenePlaneEventScNotify = 1496,
    CmdStartTimedCocoonStageCsReq = 1444,
    CmdActivateFarmElementScRsp = 1475,
    CmdSetGroupCustomSaveDataScRsp = 1426,
    CmdSceneEntityTeleportScRsp = 1473,
    CmdSceneCastSkillCsReq = 1456,
    CmdSceneEntityMoveScNotify = 1499,
    CmdStartTimedFarmElementScRsp = 1487,
    CmdGetEnteredSceneCsReq = 1427,
    CmdSceneReviveAfterRebattleCsReq = 1409,
    CmdUnlockTeleportNotify = 1418,
    CmdSceneCastSkillCostMpCsReq = 1448,
    CmdSyncEntityBuffChangeListScNotify = 1465,
    CmdGetSceneMapInfoScRsp = 1410,
    CmdSceneCastSkillMpUpdateScNotify = 1434,
    CmdGameplayCounterCountDownCsReq = 1461,
    CmdGetSceneMapInfoCsReq = 1436,
    CmdActivateFarmElementCsReq = 1415,
    CmdEnterSceneByServerScNotify = 1483,
    CmdSetGroupCustomSaveDataCsReq = 1403,
    CmdSetClientPausedScRsp = 1495,
    CmdGroupStateChangeScNotify = 1457,
    CmdEnterSectionCsReq = 1408,
    CmdSavePointsInfoNotify = 1449,
    CmdDeleteSummonUnitCsReq = 1404,
    CmdDeactivateFarmElementCsReq = 1469,
    CmdSceneCastSkillScRsp = 1493,
    CmdRefreshTriggerByClientScRsp = 1438,
    CmdReEnterLastElementStageCsReq = 1422,
    CmdRefreshTriggerByClientScNotify = 1480,
    CmdSceneEntityTeleportCsReq = 1471,
    CmdSceneGroupRefreshScNotify = 1402,
    CmdEntityBindPropScRsp = 1412,
    CmdUpdateFloorSavedValueNotify = 1470,
    CmdSetCurInteractEntityCsReq = 1484,
    CmdGetCurSceneInfoCsReq = 1439,
    CmdDeactivateFarmElementScRsp = 1467,
    CmdStartCocoonStageCsReq = 1445,
    CmdHealPoolInfoNotify = 1459,
    CmdSpringRecoverSingleAvatarScRsp = 1441,
    CmdGameplayCounterUpdateScNotify = 1452,
    CmdSetCurInteractEntityScRsp = 1423,
    CmdRecoverAllLineupScRsp = 1476,
    CmdUpdateMechanismBarScNotify = 1431,
    CmdReturnLastTownCsReq = 1417,
    CmdSceneCastSkillCostMpScRsp = 1482,
    CmdEnteredSceneChangeScNotify = 1455,
    CmdEnterSectionScRsp = 1481,
    CmdGetUnlockTeleportCsReq = 1472,
    CmdSetClientPausedCsReq = 1430,
    CmdSpringRecoverScRsp = 1447,
    CmdSetSpringRecoverConfigScRsp = 1453,
    CmdStartCocoonStageScRsp = 1466,
    CmdGetSpringRecoverDataScRsp = 1485,
    CmdSceneEntityMoveScRsp = 1406,
    CmdGameplayCounterCountDownScRsp = 1479,
    CmdGroupStateChangeCsReq = 1491,
    CmdReEnterLastElementStageScRsp = 1421,
    CmdSceneEntityMoveCsReq = 1468,
    CmdGameplayCounterRecoverScRsp = 1401,
    CmdStartTimedFarmElementCsReq = 1419,
    CmdStartTimedCocoonStageScRsp = 1474,
    CmdEnterSceneScRsp = 1442,
    CmdLastSpringRefreshTimeNotify = 1424,
    CmdGetCurSceneInfoScRsp = 1429,
    CmdSceneEnterStageScRsp = 1428,
    CmdSceneReviveAfterRebattleScRsp = 1488,
    CmdEnterSceneCsReq = 1486,
    CmdInteractPropScRsp = 1443,
    CmdEntityBindPropCsReq = 1446,
    CmdSpringRecoverSingleAvatarCsReq = 1407,
    CmdRefreshTriggerByClientCsReq = 1463,
    CmdSpringRefreshScRsp = 1425,
    CmdSpringRefreshCsReq = 1498,
    CmdGameplayCounterRecoverCsReq = 1462,
    CmdDeleteSummonUnitScRsp = 1437,
    CmdSceneEnterStageCsReq = 1490,
    CmdGetUnlockTeleportScRsp = 1405,
    CmdUnlockedAreaMapScNotify = 1494,
    CmdRecoverAllLineupCsReq = 1478,
    CmdGetSpringRecoverDataCsReq = 1440,
}
impl CmdSceneType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdSceneType::None => "CmdSceneTypeNone",
            CmdSceneType::CmdInteractPropCsReq => "CmdInteractPropCsReq",
            CmdSceneType::CmdReturnLastTownScRsp => "CmdReturnLastTownScRsp",
            CmdSceneType::CmdSetSpringRecoverConfigCsReq => {
                "CmdSetSpringRecoverConfigCsReq"
            }
            CmdSceneType::CmdSyncServerSceneChangeNotify => {
                "CmdSyncServerSceneChangeNotify"
            }
            CmdSceneType::CmdSceneUpdatePositionVersionNotify => {
                "CmdSceneUpdatePositionVersionNotify"
            }
            CmdSceneType::CmdGroupStateChangeScRsp => "CmdGroupStateChangeScRsp",
            CmdSceneType::CmdSpringRecoverCsReq => "CmdSpringRecoverCsReq",
            CmdSceneType::CmdGetEnteredSceneScRsp => "CmdGetEnteredSceneScRsp",
            CmdSceneType::CmdScenePlaneEventScNotify => "CmdScenePlaneEventScNotify",
            CmdSceneType::CmdStartTimedCocoonStageCsReq => {
                "CmdStartTimedCocoonStageCsReq"
            }
            CmdSceneType::CmdActivateFarmElementScRsp => "CmdActivateFarmElementScRsp",
            CmdSceneType::CmdSetGroupCustomSaveDataScRsp => {
                "CmdSetGroupCustomSaveDataScRsp"
            }
            CmdSceneType::CmdSceneEntityTeleportScRsp => "CmdSceneEntityTeleportScRsp",
            CmdSceneType::CmdSceneCastSkillCsReq => "CmdSceneCastSkillCsReq",
            CmdSceneType::CmdSceneEntityMoveScNotify => "CmdSceneEntityMoveScNotify",
            CmdSceneType::CmdStartTimedFarmElementScRsp => {
                "CmdStartTimedFarmElementScRsp"
            }
            CmdSceneType::CmdGetEnteredSceneCsReq => "CmdGetEnteredSceneCsReq",
            CmdSceneType::CmdSceneReviveAfterRebattleCsReq => {
                "CmdSceneReviveAfterRebattleCsReq"
            }
            CmdSceneType::CmdUnlockTeleportNotify => "CmdUnlockTeleportNotify",
            CmdSceneType::CmdSceneCastSkillCostMpCsReq => "CmdSceneCastSkillCostMpCsReq",
            CmdSceneType::CmdSyncEntityBuffChangeListScNotify => {
                "CmdSyncEntityBuffChangeListScNotify"
            }
            CmdSceneType::CmdGetSceneMapInfoScRsp => "CmdGetSceneMapInfoScRsp",
            CmdSceneType::CmdSceneCastSkillMpUpdateScNotify => {
                "CmdSceneCastSkillMpUpdateScNotify"
            }
            CmdSceneType::CmdGameplayCounterCountDownCsReq => {
                "CmdGameplayCounterCountDownCsReq"
            }
            CmdSceneType::CmdGetSceneMapInfoCsReq => "CmdGetSceneMapInfoCsReq",
            CmdSceneType::CmdActivateFarmElementCsReq => "CmdActivateFarmElementCsReq",
            CmdSceneType::CmdEnterSceneByServerScNotify => {
                "CmdEnterSceneByServerScNotify"
            }
            CmdSceneType::CmdSetGroupCustomSaveDataCsReq => {
                "CmdSetGroupCustomSaveDataCsReq"
            }
            CmdSceneType::CmdSetClientPausedScRsp => "CmdSetClientPausedScRsp",
            CmdSceneType::CmdGroupStateChangeScNotify => "CmdGroupStateChangeScNotify",
            CmdSceneType::CmdEnterSectionCsReq => "CmdEnterSectionCsReq",
            CmdSceneType::CmdSavePointsInfoNotify => "CmdSavePointsInfoNotify",
            CmdSceneType::CmdDeleteSummonUnitCsReq => "CmdDeleteSummonUnitCsReq",
            CmdSceneType::CmdDeactivateFarmElementCsReq => {
                "CmdDeactivateFarmElementCsReq"
            }
            CmdSceneType::CmdSceneCastSkillScRsp => "CmdSceneCastSkillScRsp",
            CmdSceneType::CmdRefreshTriggerByClientScRsp => {
                "CmdRefreshTriggerByClientScRsp"
            }
            CmdSceneType::CmdReEnterLastElementStageCsReq => {
                "CmdReEnterLastElementStageCsReq"
            }
            CmdSceneType::CmdRefreshTriggerByClientScNotify => {
                "CmdRefreshTriggerByClientScNotify"
            }
            CmdSceneType::CmdSceneEntityTeleportCsReq => "CmdSceneEntityTeleportCsReq",
            CmdSceneType::CmdSceneGroupRefreshScNotify => "CmdSceneGroupRefreshScNotify",
            CmdSceneType::CmdEntityBindPropScRsp => "CmdEntityBindPropScRsp",
            CmdSceneType::CmdUpdateFloorSavedValueNotify => {
                "CmdUpdateFloorSavedValueNotify"
            }
            CmdSceneType::CmdSetCurInteractEntityCsReq => "CmdSetCurInteractEntityCsReq",
            CmdSceneType::CmdGetCurSceneInfoCsReq => "CmdGetCurSceneInfoCsReq",
            CmdSceneType::CmdDeactivateFarmElementScRsp => {
                "CmdDeactivateFarmElementScRsp"
            }
            CmdSceneType::CmdStartCocoonStageCsReq => "CmdStartCocoonStageCsReq",
            CmdSceneType::CmdHealPoolInfoNotify => "CmdHealPoolInfoNotify",
            CmdSceneType::CmdSpringRecoverSingleAvatarScRsp => {
                "CmdSpringRecoverSingleAvatarScRsp"
            }
            CmdSceneType::CmdGameplayCounterUpdateScNotify => {
                "CmdGameplayCounterUpdateScNotify"
            }
            CmdSceneType::CmdSetCurInteractEntityScRsp => "CmdSetCurInteractEntityScRsp",
            CmdSceneType::CmdRecoverAllLineupScRsp => "CmdRecoverAllLineupScRsp",
            CmdSceneType::CmdUpdateMechanismBarScNotify => {
                "CmdUpdateMechanismBarScNotify"
            }
            CmdSceneType::CmdReturnLastTownCsReq => "CmdReturnLastTownCsReq",
            CmdSceneType::CmdSceneCastSkillCostMpScRsp => "CmdSceneCastSkillCostMpScRsp",
            CmdSceneType::CmdEnteredSceneChangeScNotify => {
                "CmdEnteredSceneChangeScNotify"
            }
            CmdSceneType::CmdEnterSectionScRsp => "CmdEnterSectionScRsp",
            CmdSceneType::CmdGetUnlockTeleportCsReq => "CmdGetUnlockTeleportCsReq",
            CmdSceneType::CmdSetClientPausedCsReq => "CmdSetClientPausedCsReq",
            CmdSceneType::CmdSpringRecoverScRsp => "CmdSpringRecoverScRsp",
            CmdSceneType::CmdSetSpringRecoverConfigScRsp => {
                "CmdSetSpringRecoverConfigScRsp"
            }
            CmdSceneType::CmdStartCocoonStageScRsp => "CmdStartCocoonStageScRsp",
            CmdSceneType::CmdGetSpringRecoverDataScRsp => "CmdGetSpringRecoverDataScRsp",
            CmdSceneType::CmdSceneEntityMoveScRsp => "CmdSceneEntityMoveScRsp",
            CmdSceneType::CmdGameplayCounterCountDownScRsp => {
                "CmdGameplayCounterCountDownScRsp"
            }
            CmdSceneType::CmdGroupStateChangeCsReq => "CmdGroupStateChangeCsReq",
            CmdSceneType::CmdReEnterLastElementStageScRsp => {
                "CmdReEnterLastElementStageScRsp"
            }
            CmdSceneType::CmdSceneEntityMoveCsReq => "CmdSceneEntityMoveCsReq",
            CmdSceneType::CmdGameplayCounterRecoverScRsp => {
                "CmdGameplayCounterRecoverScRsp"
            }
            CmdSceneType::CmdStartTimedFarmElementCsReq => {
                "CmdStartTimedFarmElementCsReq"
            }
            CmdSceneType::CmdStartTimedCocoonStageScRsp => {
                "CmdStartTimedCocoonStageScRsp"
            }
            CmdSceneType::CmdEnterSceneScRsp => "CmdEnterSceneScRsp",
            CmdSceneType::CmdLastSpringRefreshTimeNotify => {
                "CmdLastSpringRefreshTimeNotify"
            }
            CmdSceneType::CmdGetCurSceneInfoScRsp => "CmdGetCurSceneInfoScRsp",
            CmdSceneType::CmdSceneEnterStageScRsp => "CmdSceneEnterStageScRsp",
            CmdSceneType::CmdSceneReviveAfterRebattleScRsp => {
                "CmdSceneReviveAfterRebattleScRsp"
            }
            CmdSceneType::CmdEnterSceneCsReq => "CmdEnterSceneCsReq",
            CmdSceneType::CmdInteractPropScRsp => "CmdInteractPropScRsp",
            CmdSceneType::CmdEntityBindPropCsReq => "CmdEntityBindPropCsReq",
            CmdSceneType::CmdSpringRecoverSingleAvatarCsReq => {
                "CmdSpringRecoverSingleAvatarCsReq"
            }
            CmdSceneType::CmdRefreshTriggerByClientCsReq => {
                "CmdRefreshTriggerByClientCsReq"
            }
            CmdSceneType::CmdSpringRefreshScRsp => "CmdSpringRefreshScRsp",
            CmdSceneType::CmdSpringRefreshCsReq => "CmdSpringRefreshCsReq",
            CmdSceneType::CmdGameplayCounterRecoverCsReq => {
                "CmdGameplayCounterRecoverCsReq"
            }
            CmdSceneType::CmdDeleteSummonUnitScRsp => "CmdDeleteSummonUnitScRsp",
            CmdSceneType::CmdSceneEnterStageCsReq => "CmdSceneEnterStageCsReq",
            CmdSceneType::CmdGetUnlockTeleportScRsp => "CmdGetUnlockTeleportScRsp",
            CmdSceneType::CmdUnlockedAreaMapScNotify => "CmdUnlockedAreaMapScNotify",
            CmdSceneType::CmdRecoverAllLineupCsReq => "CmdRecoverAllLineupCsReq",
            CmdSceneType::CmdGetSpringRecoverDataCsReq => "CmdGetSpringRecoverDataCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSceneTypeNone" => Some(Self::None),
            "CmdInteractPropCsReq" => Some(Self::CmdInteractPropCsReq),
            "CmdReturnLastTownScRsp" => Some(Self::CmdReturnLastTownScRsp),
            "CmdSetSpringRecoverConfigCsReq" => {
                Some(Self::CmdSetSpringRecoverConfigCsReq)
            }
            "CmdSyncServerSceneChangeNotify" => {
                Some(Self::CmdSyncServerSceneChangeNotify)
            }
            "CmdSceneUpdatePositionVersionNotify" => {
                Some(Self::CmdSceneUpdatePositionVersionNotify)
            }
            "CmdGroupStateChangeScRsp" => Some(Self::CmdGroupStateChangeScRsp),
            "CmdSpringRecoverCsReq" => Some(Self::CmdSpringRecoverCsReq),
            "CmdGetEnteredSceneScRsp" => Some(Self::CmdGetEnteredSceneScRsp),
            "CmdScenePlaneEventScNotify" => Some(Self::CmdScenePlaneEventScNotify),
            "CmdStartTimedCocoonStageCsReq" => Some(Self::CmdStartTimedCocoonStageCsReq),
            "CmdActivateFarmElementScRsp" => Some(Self::CmdActivateFarmElementScRsp),
            "CmdSetGroupCustomSaveDataScRsp" => {
                Some(Self::CmdSetGroupCustomSaveDataScRsp)
            }
            "CmdSceneEntityTeleportScRsp" => Some(Self::CmdSceneEntityTeleportScRsp),
            "CmdSceneCastSkillCsReq" => Some(Self::CmdSceneCastSkillCsReq),
            "CmdSceneEntityMoveScNotify" => Some(Self::CmdSceneEntityMoveScNotify),
            "CmdStartTimedFarmElementScRsp" => Some(Self::CmdStartTimedFarmElementScRsp),
            "CmdGetEnteredSceneCsReq" => Some(Self::CmdGetEnteredSceneCsReq),
            "CmdSceneReviveAfterRebattleCsReq" => {
                Some(Self::CmdSceneReviveAfterRebattleCsReq)
            }
            "CmdUnlockTeleportNotify" => Some(Self::CmdUnlockTeleportNotify),
            "CmdSceneCastSkillCostMpCsReq" => Some(Self::CmdSceneCastSkillCostMpCsReq),
            "CmdSyncEntityBuffChangeListScNotify" => {
                Some(Self::CmdSyncEntityBuffChangeListScNotify)
            }
            "CmdGetSceneMapInfoScRsp" => Some(Self::CmdGetSceneMapInfoScRsp),
            "CmdSceneCastSkillMpUpdateScNotify" => {
                Some(Self::CmdSceneCastSkillMpUpdateScNotify)
            }
            "CmdGameplayCounterCountDownCsReq" => {
                Some(Self::CmdGameplayCounterCountDownCsReq)
            }
            "CmdGetSceneMapInfoCsReq" => Some(Self::CmdGetSceneMapInfoCsReq),
            "CmdActivateFarmElementCsReq" => Some(Self::CmdActivateFarmElementCsReq),
            "CmdEnterSceneByServerScNotify" => Some(Self::CmdEnterSceneByServerScNotify),
            "CmdSetGroupCustomSaveDataCsReq" => {
                Some(Self::CmdSetGroupCustomSaveDataCsReq)
            }
            "CmdSetClientPausedScRsp" => Some(Self::CmdSetClientPausedScRsp),
            "CmdGroupStateChangeScNotify" => Some(Self::CmdGroupStateChangeScNotify),
            "CmdEnterSectionCsReq" => Some(Self::CmdEnterSectionCsReq),
            "CmdSavePointsInfoNotify" => Some(Self::CmdSavePointsInfoNotify),
            "CmdDeleteSummonUnitCsReq" => Some(Self::CmdDeleteSummonUnitCsReq),
            "CmdDeactivateFarmElementCsReq" => Some(Self::CmdDeactivateFarmElementCsReq),
            "CmdSceneCastSkillScRsp" => Some(Self::CmdSceneCastSkillScRsp),
            "CmdRefreshTriggerByClientScRsp" => {
                Some(Self::CmdRefreshTriggerByClientScRsp)
            }
            "CmdReEnterLastElementStageCsReq" => {
                Some(Self::CmdReEnterLastElementStageCsReq)
            }
            "CmdRefreshTriggerByClientScNotify" => {
                Some(Self::CmdRefreshTriggerByClientScNotify)
            }
            "CmdSceneEntityTeleportCsReq" => Some(Self::CmdSceneEntityTeleportCsReq),
            "CmdSceneGroupRefreshScNotify" => Some(Self::CmdSceneGroupRefreshScNotify),
            "CmdEntityBindPropScRsp" => Some(Self::CmdEntityBindPropScRsp),
            "CmdUpdateFloorSavedValueNotify" => {
                Some(Self::CmdUpdateFloorSavedValueNotify)
            }
            "CmdSetCurInteractEntityCsReq" => Some(Self::CmdSetCurInteractEntityCsReq),
            "CmdGetCurSceneInfoCsReq" => Some(Self::CmdGetCurSceneInfoCsReq),
            "CmdDeactivateFarmElementScRsp" => Some(Self::CmdDeactivateFarmElementScRsp),
            "CmdStartCocoonStageCsReq" => Some(Self::CmdStartCocoonStageCsReq),
            "CmdHealPoolInfoNotify" => Some(Self::CmdHealPoolInfoNotify),
            "CmdSpringRecoverSingleAvatarScRsp" => {
                Some(Self::CmdSpringRecoverSingleAvatarScRsp)
            }
            "CmdGameplayCounterUpdateScNotify" => {
                Some(Self::CmdGameplayCounterUpdateScNotify)
            }
            "CmdSetCurInteractEntityScRsp" => Some(Self::CmdSetCurInteractEntityScRsp),
            "CmdRecoverAllLineupScRsp" => Some(Self::CmdRecoverAllLineupScRsp),
            "CmdUpdateMechanismBarScNotify" => Some(Self::CmdUpdateMechanismBarScNotify),
            "CmdReturnLastTownCsReq" => Some(Self::CmdReturnLastTownCsReq),
            "CmdSceneCastSkillCostMpScRsp" => Some(Self::CmdSceneCastSkillCostMpScRsp),
            "CmdEnteredSceneChangeScNotify" => Some(Self::CmdEnteredSceneChangeScNotify),
            "CmdEnterSectionScRsp" => Some(Self::CmdEnterSectionScRsp),
            "CmdGetUnlockTeleportCsReq" => Some(Self::CmdGetUnlockTeleportCsReq),
            "CmdSetClientPausedCsReq" => Some(Self::CmdSetClientPausedCsReq),
            "CmdSpringRecoverScRsp" => Some(Self::CmdSpringRecoverScRsp),
            "CmdSetSpringRecoverConfigScRsp" => {
                Some(Self::CmdSetSpringRecoverConfigScRsp)
            }
            "CmdStartCocoonStageScRsp" => Some(Self::CmdStartCocoonStageScRsp),
            "CmdGetSpringRecoverDataScRsp" => Some(Self::CmdGetSpringRecoverDataScRsp),
            "CmdSceneEntityMoveScRsp" => Some(Self::CmdSceneEntityMoveScRsp),
            "CmdGameplayCounterCountDownScRsp" => {
                Some(Self::CmdGameplayCounterCountDownScRsp)
            }
            "CmdGroupStateChangeCsReq" => Some(Self::CmdGroupStateChangeCsReq),
            "CmdReEnterLastElementStageScRsp" => {
                Some(Self::CmdReEnterLastElementStageScRsp)
            }
            "CmdSceneEntityMoveCsReq" => Some(Self::CmdSceneEntityMoveCsReq),
            "CmdGameplayCounterRecoverScRsp" => {
                Some(Self::CmdGameplayCounterRecoverScRsp)
            }
            "CmdStartTimedFarmElementCsReq" => Some(Self::CmdStartTimedFarmElementCsReq),
            "CmdStartTimedCocoonStageScRsp" => Some(Self::CmdStartTimedCocoonStageScRsp),
            "CmdEnterSceneScRsp" => Some(Self::CmdEnterSceneScRsp),
            "CmdLastSpringRefreshTimeNotify" => {
                Some(Self::CmdLastSpringRefreshTimeNotify)
            }
            "CmdGetCurSceneInfoScRsp" => Some(Self::CmdGetCurSceneInfoScRsp),
            "CmdSceneEnterStageScRsp" => Some(Self::CmdSceneEnterStageScRsp),
            "CmdSceneReviveAfterRebattleScRsp" => {
                Some(Self::CmdSceneReviveAfterRebattleScRsp)
            }
            "CmdEnterSceneCsReq" => Some(Self::CmdEnterSceneCsReq),
            "CmdInteractPropScRsp" => Some(Self::CmdInteractPropScRsp),
            "CmdEntityBindPropCsReq" => Some(Self::CmdEntityBindPropCsReq),
            "CmdSpringRecoverSingleAvatarCsReq" => {
                Some(Self::CmdSpringRecoverSingleAvatarCsReq)
            }
            "CmdRefreshTriggerByClientCsReq" => {
                Some(Self::CmdRefreshTriggerByClientCsReq)
            }
            "CmdSpringRefreshScRsp" => Some(Self::CmdSpringRefreshScRsp),
            "CmdSpringRefreshCsReq" => Some(Self::CmdSpringRefreshCsReq),
            "CmdGameplayCounterRecoverCsReq" => {
                Some(Self::CmdGameplayCounterRecoverCsReq)
            }
            "CmdDeleteSummonUnitScRsp" => Some(Self::CmdDeleteSummonUnitScRsp),
            "CmdSceneEnterStageCsReq" => Some(Self::CmdSceneEnterStageCsReq),
            "CmdGetUnlockTeleportScRsp" => Some(Self::CmdGetUnlockTeleportScRsp),
            "CmdUnlockedAreaMapScNotify" => Some(Self::CmdUnlockedAreaMapScNotify),
            "CmdRecoverAllLineupCsReq" => Some(Self::CmdRecoverAllLineupCsReq),
            "CmdGetSpringRecoverDataCsReq" => Some(Self::CmdGetSpringRecoverDataCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneCastSkillType {
    SceneCastSkillNone = 0,
    SceneCastSkillProjectileHit = 1,
    SceneCastSkillProjectileLifetimeFinish = 2,
}
impl SceneCastSkillType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SceneCastSkillType::SceneCastSkillNone => "SCENE_CAST_SKILL_NONE",
            SceneCastSkillType::SceneCastSkillProjectileHit => {
                "SCENE_CAST_SKILL_PROJECTILE_HIT"
            }
            SceneCastSkillType::SceneCastSkillProjectileLifetimeFinish => {
                "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_CAST_SKILL_NONE" => Some(Self::SceneCastSkillNone),
            "SCENE_CAST_SKILL_PROJECTILE_HIT" => Some(Self::SceneCastSkillProjectileHit),
            "SCENE_CAST_SKILL_PROJECTILE_LIFETIME_FINISH" => {
                Some(Self::SceneCastSkillProjectileLifetimeFinish)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MonsterBattleType {
    None = 0,
    TriggerBattle = 1,
    DirectDieSimulateBattle = 2,
    DirectDieSkipBattle = 3,
    NoBattle = 4,
}
impl MonsterBattleType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MonsterBattleType::None => "MONSTER_BATTLE_TYPE_NONE",
            MonsterBattleType::TriggerBattle => "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE",
            MonsterBattleType::DirectDieSimulateBattle => {
                "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE"
            }
            MonsterBattleType::DirectDieSkipBattle => {
                "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE"
            }
            MonsterBattleType::NoBattle => "MONSTER_BATTLE_TYPE_NO_BATTLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MONSTER_BATTLE_TYPE_NONE" => Some(Self::None),
            "MONSTER_BATTLE_TYPE_TRIGGER_BATTLE" => Some(Self::TriggerBattle),
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SIMULATE_BATTLE" => {
                Some(Self::DirectDieSimulateBattle)
            }
            "MONSTER_BATTLE_TYPE_DIRECT_DIE_SKIP_BATTLE" => {
                Some(Self::DirectDieSkipBattle)
            }
            "MONSTER_BATTLE_TYPE_NO_BATTLE" => Some(Self::NoBattle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneEntityBuffChangeType {
    Default = 0,
    AddMazebuff = 1,
    AddAdvModifier = 2,
}
impl SceneEntityBuffChangeType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SceneEntityBuffChangeType::Default => "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT",
            SceneEntityBuffChangeType::AddMazebuff => {
                "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF"
            }
            SceneEntityBuffChangeType::AddAdvModifier => {
                "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_DEFAULT" => Some(Self::Default),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_MAZEBUFF" => Some(Self::AddMazebuff),
            "SCENE_ENTITY_BUFF_CHANGE_TYPE_ADD_ADV_MODIFIER" => {
                Some(Self::AddAdvModifier)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EnterSceneReason {
    None = 0,
    ChallengeTimeout = 1,
    RogueTimeout = 2,
    ChangeStoryline = 3,
    DimensionMerge = 4,
}
impl EnterSceneReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            EnterSceneReason::None => "ENTER_SCENE_REASON_NONE",
            EnterSceneReason::ChallengeTimeout => "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT",
            EnterSceneReason::RogueTimeout => "ENTER_SCENE_REASON_ROGUE_TIMEOUT",
            EnterSceneReason::ChangeStoryline => "ENTER_SCENE_REASON_CHANGE_STORYLINE",
            EnterSceneReason::DimensionMerge => "ENTER_SCENE_REASON_DIMENSION_MERGE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTER_SCENE_REASON_NONE" => Some(Self::None),
            "ENTER_SCENE_REASON_CHALLENGE_TIMEOUT" => Some(Self::ChallengeTimeout),
            "ENTER_SCENE_REASON_ROGUE_TIMEOUT" => Some(Self::RogueTimeout),
            "ENTER_SCENE_REASON_CHANGE_STORYLINE" => Some(Self::ChangeStoryline),
            "ENTER_SCENE_REASON_DIMENSION_MERGE" => Some(Self::DimensionMerge),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum MapInfoChestType {
    None = 0,
    Normal = 101,
    Challenge = 102,
    Puzzle = 104,
}
impl MapInfoChestType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            MapInfoChestType::None => "MAP_INFO_CHEST_TYPE_NONE",
            MapInfoChestType::Normal => "MAP_INFO_CHEST_TYPE_NORMAL",
            MapInfoChestType::Challenge => "MAP_INFO_CHEST_TYPE_CHALLENGE",
            MapInfoChestType::Puzzle => "MAP_INFO_CHEST_TYPE_PUZZLE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "MAP_INFO_CHEST_TYPE_NONE" => Some(Self::None),
            "MAP_INFO_CHEST_TYPE_NORMAL" => Some(Self::Normal),
            "MAP_INFO_CHEST_TYPE_CHALLENGE" => Some(Self::Challenge),
            "MAP_INFO_CHEST_TYPE_PUZZLE" => Some(Self::Puzzle),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum GameplayCounterUpdateReason {
    None = 0,
    Activate = 1,
    Deactivate = 2,
    Change = 3,
}
impl GameplayCounterUpdateReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            GameplayCounterUpdateReason::None => "GAMEPLAY_COUNTER_UPDATE_REASON_NONE",
            GameplayCounterUpdateReason::Activate => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE"
            }
            GameplayCounterUpdateReason::Deactivate => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE"
            }
            GameplayCounterUpdateReason::Change => {
                "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "GAMEPLAY_COUNTER_UPDATE_REASON_NONE" => Some(Self::None),
            "GAMEPLAY_COUNTER_UPDATE_REASON_ACTIVATE" => Some(Self::Activate),
            "GAMEPLAY_COUNTER_UPDATE_REASON_DEACTIVATE" => Some(Self::Deactivate),
            "GAMEPLAY_COUNTER_UPDATE_REASON_CHANGE" => Some(Self::Change),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SceneGroupRefreshType {
    None = 0,
    Loaded = 1,
    Unload = 2,
}
impl SceneGroupRefreshType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SceneGroupRefreshType::None => "SCENE_GROUP_REFRESH_TYPE_NONE",
            SceneGroupRefreshType::Loaded => "SCENE_GROUP_REFRESH_TYPE_LOADED",
            SceneGroupRefreshType::Unload => "SCENE_GROUP_REFRESH_TYPE_UNLOAD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SCENE_GROUP_REFRESH_TYPE_NONE" => Some(Self::None),
            "SCENE_GROUP_REFRESH_TYPE_LOADED" => Some(Self::Loaded),
            "SCENE_GROUP_REFRESH_TYPE_UNLOAD" => Some(Self::Unload),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ckemiclfafc {
    CmdServerPrefsTypeNone = 0,
    CmdGetServerPrefsDataCsReq = 6111,
    CmdUpdateServerPrefsDataCsReq = 6156,
    CmdUpdateServerPrefsDataScRsp = 6193,
    CmdGetAllServerPrefsDataCsReq = 6168,
    CmdGetServerPrefsDataScRsp = 6143,
    CmdGetAllServerPrefsDataScRsp = 6106,
}
impl Ckemiclfafc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ckemiclfafc::CmdServerPrefsTypeNone => "CmdServerPrefsTypeNone",
            Ckemiclfafc::CmdGetServerPrefsDataCsReq => "CmdGetServerPrefsDataCsReq",
            Ckemiclfafc::CmdUpdateServerPrefsDataCsReq => "CmdUpdateServerPrefsDataCsReq",
            Ckemiclfafc::CmdUpdateServerPrefsDataScRsp => "CmdUpdateServerPrefsDataScRsp",
            Ckemiclfafc::CmdGetAllServerPrefsDataCsReq => "CmdGetAllServerPrefsDataCsReq",
            Ckemiclfafc::CmdGetServerPrefsDataScRsp => "CmdGetServerPrefsDataScRsp",
            Ckemiclfafc::CmdGetAllServerPrefsDataScRsp => "CmdGetAllServerPrefsDataScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdServerPrefsTypeNone" => Some(Self::CmdServerPrefsTypeNone),
            "CmdGetServerPrefsDataCsReq" => Some(Self::CmdGetServerPrefsDataCsReq),
            "CmdUpdateServerPrefsDataCsReq" => Some(Self::CmdUpdateServerPrefsDataCsReq),
            "CmdUpdateServerPrefsDataScRsp" => Some(Self::CmdUpdateServerPrefsDataScRsp),
            "CmdGetAllServerPrefsDataCsReq" => Some(Self::CmdGetAllServerPrefsDataCsReq),
            "CmdGetServerPrefsDataScRsp" => Some(Self::CmdGetServerPrefsDataScRsp),
            "CmdGetAllServerPrefsDataScRsp" => Some(Self::CmdGetAllServerPrefsDataScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdShopType {
    None = 0,
    CmdTakeCityShopRewardCsReq = 1556,
    CmdCityShopInfoScNotify = 1539,
    CmdBuyGoodsScRsp = 1543,
    CmdGetShopListCsReq = 1568,
    CmdGetShopListScRsp = 1506,
    CmdBuyGoodsCsReq = 1511,
    CmdTakeCityShopRewardScRsp = 1593,
}
impl CmdShopType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdShopType::None => "CmdShopTypeNone",
            CmdShopType::CmdTakeCityShopRewardCsReq => "CmdTakeCityShopRewardCsReq",
            CmdShopType::CmdCityShopInfoScNotify => "CmdCityShopInfoScNotify",
            CmdShopType::CmdBuyGoodsScRsp => "CmdBuyGoodsScRsp",
            CmdShopType::CmdGetShopListCsReq => "CmdGetShopListCsReq",
            CmdShopType::CmdGetShopListScRsp => "CmdGetShopListScRsp",
            CmdShopType::CmdBuyGoodsCsReq => "CmdBuyGoodsCsReq",
            CmdShopType::CmdTakeCityShopRewardScRsp => "CmdTakeCityShopRewardScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdShopTypeNone" => Some(Self::None),
            "CmdTakeCityShopRewardCsReq" => Some(Self::CmdTakeCityShopRewardCsReq),
            "CmdCityShopInfoScNotify" => Some(Self::CmdCityShopInfoScNotify),
            "CmdBuyGoodsScRsp" => Some(Self::CmdBuyGoodsScRsp),
            "CmdGetShopListCsReq" => Some(Self::CmdGetShopListCsReq),
            "CmdGetShopListScRsp" => Some(Self::CmdGetShopListScRsp),
            "CmdBuyGoodsCsReq" => Some(Self::CmdBuyGoodsCsReq),
            "CmdTakeCityShopRewardScRsp" => Some(Self::CmdTakeCityShopRewardScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Gilfkecddmc {
    CmdSpaceZooTypeNone = 0,
    CmdSpaceZooExchangeItemCsReq = 6754,
    CmdSpaceZooDeleteCatCsReq = 6751,
    CmdSpaceZooTakeCsReq = 6748,
    CmdSpaceZooTakeScRsp = 6782,
    CmdSpaceZooMutateCsReq = 6756,
    CmdSpaceZooMutateScRsp = 6793,
    CmdSpaceZooBornScRsp = 6743,
    CmdSpaceZooDataCsReq = 6768,
    CmdSpaceZooOpCatteryCsReq = 6739,
    CmdSpaceZooBornCsReq = 6711,
    CmdSpaceZooExchangeItemScRsp = 6765,
    CmdSpaceZooOpCatteryScRsp = 6729,
    CmdSpaceZooDataScRsp = 6706,
    CmdSpaceZooCatUpdateNotify = 6799,
    CmdSpaceZooDeleteCatScRsp = 6733,
}
impl Gilfkecddmc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Gilfkecddmc::CmdSpaceZooTypeNone => "CmdSpaceZooTypeNone",
            Gilfkecddmc::CmdSpaceZooExchangeItemCsReq => "CmdSpaceZooExchangeItemCsReq",
            Gilfkecddmc::CmdSpaceZooDeleteCatCsReq => "CmdSpaceZooDeleteCatCsReq",
            Gilfkecddmc::CmdSpaceZooTakeCsReq => "CmdSpaceZooTakeCsReq",
            Gilfkecddmc::CmdSpaceZooTakeScRsp => "CmdSpaceZooTakeScRsp",
            Gilfkecddmc::CmdSpaceZooMutateCsReq => "CmdSpaceZooMutateCsReq",
            Gilfkecddmc::CmdSpaceZooMutateScRsp => "CmdSpaceZooMutateScRsp",
            Gilfkecddmc::CmdSpaceZooBornScRsp => "CmdSpaceZooBornScRsp",
            Gilfkecddmc::CmdSpaceZooDataCsReq => "CmdSpaceZooDataCsReq",
            Gilfkecddmc::CmdSpaceZooOpCatteryCsReq => "CmdSpaceZooOpCatteryCsReq",
            Gilfkecddmc::CmdSpaceZooBornCsReq => "CmdSpaceZooBornCsReq",
            Gilfkecddmc::CmdSpaceZooExchangeItemScRsp => "CmdSpaceZooExchangeItemScRsp",
            Gilfkecddmc::CmdSpaceZooOpCatteryScRsp => "CmdSpaceZooOpCatteryScRsp",
            Gilfkecddmc::CmdSpaceZooDataScRsp => "CmdSpaceZooDataScRsp",
            Gilfkecddmc::CmdSpaceZooCatUpdateNotify => "CmdSpaceZooCatUpdateNotify",
            Gilfkecddmc::CmdSpaceZooDeleteCatScRsp => "CmdSpaceZooDeleteCatScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSpaceZooTypeNone" => Some(Self::CmdSpaceZooTypeNone),
            "CmdSpaceZooExchangeItemCsReq" => Some(Self::CmdSpaceZooExchangeItemCsReq),
            "CmdSpaceZooDeleteCatCsReq" => Some(Self::CmdSpaceZooDeleteCatCsReq),
            "CmdSpaceZooTakeCsReq" => Some(Self::CmdSpaceZooTakeCsReq),
            "CmdSpaceZooTakeScRsp" => Some(Self::CmdSpaceZooTakeScRsp),
            "CmdSpaceZooMutateCsReq" => Some(Self::CmdSpaceZooMutateCsReq),
            "CmdSpaceZooMutateScRsp" => Some(Self::CmdSpaceZooMutateScRsp),
            "CmdSpaceZooBornScRsp" => Some(Self::CmdSpaceZooBornScRsp),
            "CmdSpaceZooDataCsReq" => Some(Self::CmdSpaceZooDataCsReq),
            "CmdSpaceZooOpCatteryCsReq" => Some(Self::CmdSpaceZooOpCatteryCsReq),
            "CmdSpaceZooBornCsReq" => Some(Self::CmdSpaceZooBornCsReq),
            "CmdSpaceZooExchangeItemScRsp" => Some(Self::CmdSpaceZooExchangeItemScRsp),
            "CmdSpaceZooOpCatteryScRsp" => Some(Self::CmdSpaceZooOpCatteryScRsp),
            "CmdSpaceZooDataScRsp" => Some(Self::CmdSpaceZooDataScRsp),
            "CmdSpaceZooCatUpdateNotify" => Some(Self::CmdSpaceZooCatUpdateNotify),
            "CmdSpaceZooDeleteCatScRsp" => Some(Self::CmdSpaceZooDeleteCatScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mamfcgkifkh {
    CmdStarFightTypeNone = 0,
    CmdStartStarFightLevelScRsp = 7170,
    CmdGetStarFightDataScRsp = 7164,
    CmdGetStarFightDataCsReq = 7161,
    CmdStartStarFightLevelCsReq = 7169,
    CmdStarFightDataChangeNotify = 7162,
}
impl Mamfcgkifkh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mamfcgkifkh::CmdStarFightTypeNone => "CmdStarFightTypeNone",
            Mamfcgkifkh::CmdStartStarFightLevelScRsp => "CmdStartStarFightLevelScRsp",
            Mamfcgkifkh::CmdGetStarFightDataScRsp => "CmdGetStarFightDataScRsp",
            Mamfcgkifkh::CmdGetStarFightDataCsReq => "CmdGetStarFightDataCsReq",
            Mamfcgkifkh::CmdStartStarFightLevelCsReq => "CmdStartStarFightLevelCsReq",
            Mamfcgkifkh::CmdStarFightDataChangeNotify => "CmdStarFightDataChangeNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStarFightTypeNone" => Some(Self::CmdStarFightTypeNone),
            "CmdStartStarFightLevelScRsp" => Some(Self::CmdStartStarFightLevelScRsp),
            "CmdGetStarFightDataScRsp" => Some(Self::CmdGetStarFightDataScRsp),
            "CmdGetStarFightDataCsReq" => Some(Self::CmdGetStarFightDataCsReq),
            "CmdStartStarFightLevelCsReq" => Some(Self::CmdStartStarFightLevelCsReq),
            "CmdStarFightDataChangeNotify" => Some(Self::CmdStarFightDataChangeNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Djojglgfkhc {
    CmdStoryLineTypeNone = 0,
    CmdStoryLineTrialAvatarChangeScNotify = 6239,
    CmdGetStoryLineInfoScRsp = 6206,
    CmdStoryLineInfoScNotify = 6211,
    CmdChangeStoryLineFinishScNotify = 6293,
    CmdGetStoryLineInfoCsReq = 6268,
}
impl Djojglgfkhc {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Djojglgfkhc::CmdStoryLineTypeNone => "CmdStoryLineTypeNone",
            Djojglgfkhc::CmdStoryLineTrialAvatarChangeScNotify => {
                "CmdStoryLineTrialAvatarChangeScNotify"
            }
            Djojglgfkhc::CmdGetStoryLineInfoScRsp => "CmdGetStoryLineInfoScRsp",
            Djojglgfkhc::CmdStoryLineInfoScNotify => "CmdStoryLineInfoScNotify",
            Djojglgfkhc::CmdChangeStoryLineFinishScNotify => {
                "CmdChangeStoryLineFinishScNotify"
            }
            Djojglgfkhc::CmdGetStoryLineInfoCsReq => "CmdGetStoryLineInfoCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStoryLineTypeNone" => Some(Self::CmdStoryLineTypeNone),
            "CmdStoryLineTrialAvatarChangeScNotify" => {
                Some(Self::CmdStoryLineTrialAvatarChangeScNotify)
            }
            "CmdGetStoryLineInfoScRsp" => Some(Self::CmdGetStoryLineInfoScRsp),
            "CmdStoryLineInfoScNotify" => Some(Self::CmdStoryLineInfoScNotify),
            "CmdChangeStoryLineFinishScNotify" => {
                Some(Self::CmdChangeStoryLineFinishScNotify)
            }
            "CmdGetStoryLineInfoCsReq" => Some(Self::CmdGetStoryLineInfoCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kndiidhnfel {
    ChangeStoryLineActionNone = 0,
    ChangeStoryLineActionFinishAction = 1,
    ChangeStoryLineActionClient = 2,
    ChangeStoryLineActionCustomOp = 3,
}
impl Kndiidhnfel {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kndiidhnfel::ChangeStoryLineActionNone => "ChangeStoryLineAction_None",
            Kndiidhnfel::ChangeStoryLineActionFinishAction => {
                "ChangeStoryLineAction_FinishAction"
            }
            Kndiidhnfel::ChangeStoryLineActionClient => "ChangeStoryLineAction_Client",
            Kndiidhnfel::ChangeStoryLineActionCustomOp => {
                "ChangeStoryLineAction_CustomOP"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ChangeStoryLineAction_None" => Some(Self::ChangeStoryLineActionNone),
            "ChangeStoryLineAction_FinishAction" => {
                Some(Self::ChangeStoryLineActionFinishAction)
            }
            "ChangeStoryLineAction_Client" => Some(Self::ChangeStoryLineActionClient),
            "ChangeStoryLineAction_CustomOP" => Some(Self::ChangeStoryLineActionCustomOp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Amkkcfcfijl {
    CmdStrongChallengeActivityTypeNone = 0,
    CmdGetStrongChallengeActivityDataCsReq = 6668,
    CmdStrongChallengeActivityBattleEndScNotify = 6656,
    CmdEnterStrongChallengeActivityStageScRsp = 6643,
    CmdEnterStrongChallengeActivityStageCsReq = 6611,
    CmdGetStrongChallengeActivityDataScRsp = 6606,
}
impl Amkkcfcfijl {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Amkkcfcfijl::CmdStrongChallengeActivityTypeNone => {
                "CmdStrongChallengeActivityTypeNone"
            }
            Amkkcfcfijl::CmdGetStrongChallengeActivityDataCsReq => {
                "CmdGetStrongChallengeActivityDataCsReq"
            }
            Amkkcfcfijl::CmdStrongChallengeActivityBattleEndScNotify => {
                "CmdStrongChallengeActivityBattleEndScNotify"
            }
            Amkkcfcfijl::CmdEnterStrongChallengeActivityStageScRsp => {
                "CmdEnterStrongChallengeActivityStageScRsp"
            }
            Amkkcfcfijl::CmdEnterStrongChallengeActivityStageCsReq => {
                "CmdEnterStrongChallengeActivityStageCsReq"
            }
            Amkkcfcfijl::CmdGetStrongChallengeActivityDataScRsp => {
                "CmdGetStrongChallengeActivityDataScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdStrongChallengeActivityTypeNone" => {
                Some(Self::CmdStrongChallengeActivityTypeNone)
            }
            "CmdGetStrongChallengeActivityDataCsReq" => {
                Some(Self::CmdGetStrongChallengeActivityDataCsReq)
            }
            "CmdStrongChallengeActivityBattleEndScNotify" => {
                Some(Self::CmdStrongChallengeActivityBattleEndScNotify)
            }
            "CmdEnterStrongChallengeActivityStageScRsp" => {
                Some(Self::CmdEnterStrongChallengeActivityStageScRsp)
            }
            "CmdEnterStrongChallengeActivityStageCsReq" => {
                Some(Self::CmdEnterStrongChallengeActivityStageCsReq)
            }
            "CmdGetStrongChallengeActivityDataScRsp" => {
                Some(Self::CmdGetStrongChallengeActivityDataScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Obmecpmopph {
    CmdSummonActivityTypeNone = 0,
    CmdGetSummonActivityDataScRsp = 7564,
    CmdGetSummonActivityDataCsReq = 7561,
    CmdEnterSummonActivityStageCsReq = 7569,
    CmdSummonActivityBattleEndScNotify = 7562,
    CmdEnterSummonActivityStageScRsp = 7570,
}
impl Obmecpmopph {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Obmecpmopph::CmdSummonActivityTypeNone => "CmdSummonActivityTypeNone",
            Obmecpmopph::CmdGetSummonActivityDataScRsp => "CmdGetSummonActivityDataScRsp",
            Obmecpmopph::CmdGetSummonActivityDataCsReq => "CmdGetSummonActivityDataCsReq",
            Obmecpmopph::CmdEnterSummonActivityStageCsReq => {
                "CmdEnterSummonActivityStageCsReq"
            }
            Obmecpmopph::CmdSummonActivityBattleEndScNotify => {
                "CmdSummonActivityBattleEndScNotify"
            }
            Obmecpmopph::CmdEnterSummonActivityStageScRsp => {
                "CmdEnterSummonActivityStageScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSummonActivityTypeNone" => Some(Self::CmdSummonActivityTypeNone),
            "CmdGetSummonActivityDataScRsp" => Some(Self::CmdGetSummonActivityDataScRsp),
            "CmdGetSummonActivityDataCsReq" => Some(Self::CmdGetSummonActivityDataCsReq),
            "CmdEnterSummonActivityStageCsReq" => {
                Some(Self::CmdEnterSummonActivityStageCsReq)
            }
            "CmdSummonActivityBattleEndScNotify" => {
                Some(Self::CmdSummonActivityBattleEndScNotify)
            }
            "CmdEnterSummonActivityStageScRsp" => {
                Some(Self::CmdEnterSummonActivityStageScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mpiejkaoeep {
    CmdSwordTrainingTypeNone = 0,
    CmdSwordTrainingSetSkillTraceScRsp = 7494,
    CmdSwordTrainingGameSyncChangeScNotify = 7457,
    CmdSwordTrainingMarkEndingViewedScRsp = 7468,
    CmdSwordTrainingExamResultConfirmScRsp = 7478,
    CmdSwordTrainingUnlockSyncScNotify = 7481,
    CmdSwordTrainingStoryConfirmScRsp = 7475,
    CmdSwordTrainingTurnActionCsReq = 7467,
    CmdEnterSwordTrainingExamCsReq = 7462,
    CmdSwordTrainingTurnActionScRsp = 7461,
    CmdSwordTrainingRestoreGameScRsp = 7496,
    CmdSwordTrainingLearnSkillCsReq = 7455,
    CmdEnterSwordTrainingExamScRsp = 7489,
    CmdSwordTrainingExamResultConfirmCsReq = 7464,
    CmdSwordTrainingRestoreGameCsReq = 7491,
    CmdGetSwordTrainingDataCsReq = 7474,
    CmdSwordTrainingDialogueSelectOptionScRsp = 7484,
    CmdSwordTrainingGiveUpGameScRsp = 7493,
    CmdSwordTrainingResumeGameScRsp = 7497,
    CmdSwordTrainingGameSettleScNotify = 7499,
    CmdSwordTrainingMarkEndingViewedCsReq = 7459,
    CmdSwordTrainingDialogueSelectOptionCsReq = 7454,
    CmdSwordTrainingStartGameScRsp = 7453,
    CmdSwordTrainingStoryBattleScRsp = 7452,
    CmdSwordTrainingSetSkillTraceCsReq = 7460,
    CmdSwordTrainingLearnSkillScRsp = 7498,
    CmdSwordTrainingActionTurnSettleScNotify = 7479,
    CmdSwordTrainingDailyPhaseConfirmCsReq = 7458,
    CmdSwordTrainingSelectEndingScRsp = 7488,
    CmdSwordTrainingDailyPhaseConfirmScRsp = 7473,
    CmdSwordTrainingStoryBattleCsReq = 7490,
    CmdSwordTrainingGiveUpGameCsReq = 7483,
    CmdSwordTrainingStartGameCsReq = 7471,
    CmdSwordTrainingSelectEndingCsReq = 7463,
    CmdGetSwordTrainingDataScRsp = 7465,
    CmdSwordTrainingStoryConfirmCsReq = 7485,
    CmdSwordTrainingResumeGameCsReq = 7469,
}
impl Mpiejkaoeep {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mpiejkaoeep::CmdSwordTrainingTypeNone => "CmdSwordTrainingTypeNone",
            Mpiejkaoeep::CmdSwordTrainingSetSkillTraceScRsp => {
                "CmdSwordTrainingSetSkillTraceScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingGameSyncChangeScNotify => {
                "CmdSwordTrainingGameSyncChangeScNotify"
            }
            Mpiejkaoeep::CmdSwordTrainingMarkEndingViewedScRsp => {
                "CmdSwordTrainingMarkEndingViewedScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingExamResultConfirmScRsp => {
                "CmdSwordTrainingExamResultConfirmScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingUnlockSyncScNotify => {
                "CmdSwordTrainingUnlockSyncScNotify"
            }
            Mpiejkaoeep::CmdSwordTrainingStoryConfirmScRsp => {
                "CmdSwordTrainingStoryConfirmScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingTurnActionCsReq => {
                "CmdSwordTrainingTurnActionCsReq"
            }
            Mpiejkaoeep::CmdEnterSwordTrainingExamCsReq => {
                "CmdEnterSwordTrainingExamCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingTurnActionScRsp => {
                "CmdSwordTrainingTurnActionScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingRestoreGameScRsp => {
                "CmdSwordTrainingRestoreGameScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingLearnSkillCsReq => {
                "CmdSwordTrainingLearnSkillCsReq"
            }
            Mpiejkaoeep::CmdEnterSwordTrainingExamScRsp => {
                "CmdEnterSwordTrainingExamScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingExamResultConfirmCsReq => {
                "CmdSwordTrainingExamResultConfirmCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingRestoreGameCsReq => {
                "CmdSwordTrainingRestoreGameCsReq"
            }
            Mpiejkaoeep::CmdGetSwordTrainingDataCsReq => "CmdGetSwordTrainingDataCsReq",
            Mpiejkaoeep::CmdSwordTrainingDialogueSelectOptionScRsp => {
                "CmdSwordTrainingDialogueSelectOptionScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingGiveUpGameScRsp => {
                "CmdSwordTrainingGiveUpGameScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingResumeGameScRsp => {
                "CmdSwordTrainingResumeGameScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingGameSettleScNotify => {
                "CmdSwordTrainingGameSettleScNotify"
            }
            Mpiejkaoeep::CmdSwordTrainingMarkEndingViewedCsReq => {
                "CmdSwordTrainingMarkEndingViewedCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingDialogueSelectOptionCsReq => {
                "CmdSwordTrainingDialogueSelectOptionCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingStartGameScRsp => {
                "CmdSwordTrainingStartGameScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingStoryBattleScRsp => {
                "CmdSwordTrainingStoryBattleScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingSetSkillTraceCsReq => {
                "CmdSwordTrainingSetSkillTraceCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingLearnSkillScRsp => {
                "CmdSwordTrainingLearnSkillScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingActionTurnSettleScNotify => {
                "CmdSwordTrainingActionTurnSettleScNotify"
            }
            Mpiejkaoeep::CmdSwordTrainingDailyPhaseConfirmCsReq => {
                "CmdSwordTrainingDailyPhaseConfirmCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingSelectEndingScRsp => {
                "CmdSwordTrainingSelectEndingScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingDailyPhaseConfirmScRsp => {
                "CmdSwordTrainingDailyPhaseConfirmScRsp"
            }
            Mpiejkaoeep::CmdSwordTrainingStoryBattleCsReq => {
                "CmdSwordTrainingStoryBattleCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingGiveUpGameCsReq => {
                "CmdSwordTrainingGiveUpGameCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingStartGameCsReq => {
                "CmdSwordTrainingStartGameCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingSelectEndingCsReq => {
                "CmdSwordTrainingSelectEndingCsReq"
            }
            Mpiejkaoeep::CmdGetSwordTrainingDataScRsp => "CmdGetSwordTrainingDataScRsp",
            Mpiejkaoeep::CmdSwordTrainingStoryConfirmCsReq => {
                "CmdSwordTrainingStoryConfirmCsReq"
            }
            Mpiejkaoeep::CmdSwordTrainingResumeGameCsReq => {
                "CmdSwordTrainingResumeGameCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdSwordTrainingTypeNone" => Some(Self::CmdSwordTrainingTypeNone),
            "CmdSwordTrainingSetSkillTraceScRsp" => {
                Some(Self::CmdSwordTrainingSetSkillTraceScRsp)
            }
            "CmdSwordTrainingGameSyncChangeScNotify" => {
                Some(Self::CmdSwordTrainingGameSyncChangeScNotify)
            }
            "CmdSwordTrainingMarkEndingViewedScRsp" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedScRsp)
            }
            "CmdSwordTrainingExamResultConfirmScRsp" => {
                Some(Self::CmdSwordTrainingExamResultConfirmScRsp)
            }
            "CmdSwordTrainingUnlockSyncScNotify" => {
                Some(Self::CmdSwordTrainingUnlockSyncScNotify)
            }
            "CmdSwordTrainingStoryConfirmScRsp" => {
                Some(Self::CmdSwordTrainingStoryConfirmScRsp)
            }
            "CmdSwordTrainingTurnActionCsReq" => {
                Some(Self::CmdSwordTrainingTurnActionCsReq)
            }
            "CmdEnterSwordTrainingExamCsReq" => {
                Some(Self::CmdEnterSwordTrainingExamCsReq)
            }
            "CmdSwordTrainingTurnActionScRsp" => {
                Some(Self::CmdSwordTrainingTurnActionScRsp)
            }
            "CmdSwordTrainingRestoreGameScRsp" => {
                Some(Self::CmdSwordTrainingRestoreGameScRsp)
            }
            "CmdSwordTrainingLearnSkillCsReq" => {
                Some(Self::CmdSwordTrainingLearnSkillCsReq)
            }
            "CmdEnterSwordTrainingExamScRsp" => {
                Some(Self::CmdEnterSwordTrainingExamScRsp)
            }
            "CmdSwordTrainingExamResultConfirmCsReq" => {
                Some(Self::CmdSwordTrainingExamResultConfirmCsReq)
            }
            "CmdSwordTrainingRestoreGameCsReq" => {
                Some(Self::CmdSwordTrainingRestoreGameCsReq)
            }
            "CmdGetSwordTrainingDataCsReq" => Some(Self::CmdGetSwordTrainingDataCsReq),
            "CmdSwordTrainingDialogueSelectOptionScRsp" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionScRsp)
            }
            "CmdSwordTrainingGiveUpGameScRsp" => {
                Some(Self::CmdSwordTrainingGiveUpGameScRsp)
            }
            "CmdSwordTrainingResumeGameScRsp" => {
                Some(Self::CmdSwordTrainingResumeGameScRsp)
            }
            "CmdSwordTrainingGameSettleScNotify" => {
                Some(Self::CmdSwordTrainingGameSettleScNotify)
            }
            "CmdSwordTrainingMarkEndingViewedCsReq" => {
                Some(Self::CmdSwordTrainingMarkEndingViewedCsReq)
            }
            "CmdSwordTrainingDialogueSelectOptionCsReq" => {
                Some(Self::CmdSwordTrainingDialogueSelectOptionCsReq)
            }
            "CmdSwordTrainingStartGameScRsp" => {
                Some(Self::CmdSwordTrainingStartGameScRsp)
            }
            "CmdSwordTrainingStoryBattleScRsp" => {
                Some(Self::CmdSwordTrainingStoryBattleScRsp)
            }
            "CmdSwordTrainingSetSkillTraceCsReq" => {
                Some(Self::CmdSwordTrainingSetSkillTraceCsReq)
            }
            "CmdSwordTrainingLearnSkillScRsp" => {
                Some(Self::CmdSwordTrainingLearnSkillScRsp)
            }
            "CmdSwordTrainingActionTurnSettleScNotify" => {
                Some(Self::CmdSwordTrainingActionTurnSettleScNotify)
            }
            "CmdSwordTrainingDailyPhaseConfirmCsReq" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmCsReq)
            }
            "CmdSwordTrainingSelectEndingScRsp" => {
                Some(Self::CmdSwordTrainingSelectEndingScRsp)
            }
            "CmdSwordTrainingDailyPhaseConfirmScRsp" => {
                Some(Self::CmdSwordTrainingDailyPhaseConfirmScRsp)
            }
            "CmdSwordTrainingStoryBattleCsReq" => {
                Some(Self::CmdSwordTrainingStoryBattleCsReq)
            }
            "CmdSwordTrainingGiveUpGameCsReq" => {
                Some(Self::CmdSwordTrainingGiveUpGameCsReq)
            }
            "CmdSwordTrainingStartGameCsReq" => {
                Some(Self::CmdSwordTrainingStartGameCsReq)
            }
            "CmdSwordTrainingSelectEndingCsReq" => {
                Some(Self::CmdSwordTrainingSelectEndingCsReq)
            }
            "CmdGetSwordTrainingDataScRsp" => Some(Self::CmdGetSwordTrainingDataScRsp),
            "CmdSwordTrainingStoryConfirmCsReq" => {
                Some(Self::CmdSwordTrainingStoryConfirmCsReq)
            }
            "CmdSwordTrainingResumeGameCsReq" => {
                Some(Self::CmdSwordTrainingResumeGameCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nmabognbiph {
    SwordTrainGameSourceTypeNone = 0,
    SwordTrainGameSourceTypeTurnSettle = 1,
    SwordTrainGameSourceTypeStatusUpgrade = 2,
    SwordTrainGameSourceTypeAction = 3,
    SwordTrainGameSourceTypeActionHint = 4,
    SwordTrainGameSourceTypeStory = 5,
    SwordTrainGameSourceTypeExamBonus = 6,
    SwordTrainGameSourceTypeDialogue = 7,
}
impl Nmabognbiph {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nmabognbiph::SwordTrainGameSourceTypeNone => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE"
            }
            Nmabognbiph::SwordTrainGameSourceTypeTurnSettle => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE"
            }
            Nmabognbiph::SwordTrainGameSourceTypeStatusUpgrade => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE"
            }
            Nmabognbiph::SwordTrainGameSourceTypeAction => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION"
            }
            Nmabognbiph::SwordTrainGameSourceTypeActionHint => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT"
            }
            Nmabognbiph::SwordTrainGameSourceTypeStory => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY"
            }
            Nmabognbiph::SwordTrainGameSourceTypeExamBonus => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS"
            }
            Nmabognbiph::SwordTrainGameSourceTypeDialogue => {
                "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAIN_GAME_SOURCE_TYPE_NONE" => {
                Some(Self::SwordTrainGameSourceTypeNone)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_TURN_SETTLE" => {
                Some(Self::SwordTrainGameSourceTypeTurnSettle)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STATUS_UPGRADE" => {
                Some(Self::SwordTrainGameSourceTypeStatusUpgrade)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION" => {
                Some(Self::SwordTrainGameSourceTypeAction)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_ACTION_HINT" => {
                Some(Self::SwordTrainGameSourceTypeActionHint)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_STORY" => {
                Some(Self::SwordTrainGameSourceTypeStory)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_EXAM_BONUS" => {
                Some(Self::SwordTrainGameSourceTypeExamBonus)
            }
            "SWORD_TRAIN_GAME_SOURCE_TYPE_DIALOGUE" => {
                Some(Self::SwordTrainGameSourceTypeDialogue)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Kkigfnbambb {
    SwordTrainingDailyPhaseTypeNone = 0,
    SwordTrainingDailyPhaseTypeMorning = 1,
    SwordTrainingDailyPhaseTypeNoon = 2,
    SwordTrainingDailyPhaseTypeAfternoon = 3,
    SwordTrainingDailyPhaseTypeEvening = 4,
}
impl Kkigfnbambb {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Kkigfnbambb::SwordTrainingDailyPhaseTypeNone => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE"
            }
            Kkigfnbambb::SwordTrainingDailyPhaseTypeMorning => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING"
            }
            Kkigfnbambb::SwordTrainingDailyPhaseTypeNoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON"
            }
            Kkigfnbambb::SwordTrainingDailyPhaseTypeAfternoon => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON"
            }
            Kkigfnbambb::SwordTrainingDailyPhaseTypeEvening => {
                "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NONE" => {
                Some(Self::SwordTrainingDailyPhaseTypeNone)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_MORNING" => {
                Some(Self::SwordTrainingDailyPhaseTypeMorning)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_NOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeNoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_AFTERNOON" => {
                Some(Self::SwordTrainingDailyPhaseTypeAfternoon)
            }
            "SWORD_TRAINING_DAILY_PHASE_TYPE_EVENING" => {
                Some(Self::SwordTrainingDailyPhaseTypeEvening)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ehamhholmlo {
    SwordTrainingStatusTypeNone = 0,
    SwordTrainingStatusTypePower = 1,
    SwordTrainingStatusTypeAgility = 2,
    SwordTrainingStatusTypeToughness = 3,
    SwordTrainingStatusTypePerception = 4,
    SwordTrainingStatusTypeMax = 5,
}
impl Ehamhholmlo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ehamhholmlo::SwordTrainingStatusTypeNone => "SWORD_TRAINING_STATUS_TYPE_NONE",
            Ehamhholmlo::SwordTrainingStatusTypePower => {
                "SWORD_TRAINING_STATUS_TYPE_POWER"
            }
            Ehamhholmlo::SwordTrainingStatusTypeAgility => {
                "SWORD_TRAINING_STATUS_TYPE_AGILITY"
            }
            Ehamhholmlo::SwordTrainingStatusTypeToughness => {
                "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS"
            }
            Ehamhholmlo::SwordTrainingStatusTypePerception => {
                "SWORD_TRAINING_STATUS_TYPE_PERCEPTION"
            }
            Ehamhholmlo::SwordTrainingStatusTypeMax => "_SWORD_TRAINING_STATUS_TYPE_MAX",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_STATUS_TYPE_NONE" => Some(Self::SwordTrainingStatusTypeNone),
            "SWORD_TRAINING_STATUS_TYPE_POWER" => {
                Some(Self::SwordTrainingStatusTypePower)
            }
            "SWORD_TRAINING_STATUS_TYPE_AGILITY" => {
                Some(Self::SwordTrainingStatusTypeAgility)
            }
            "SWORD_TRAINING_STATUS_TYPE_TOUGHNESS" => {
                Some(Self::SwordTrainingStatusTypeToughness)
            }
            "SWORD_TRAINING_STATUS_TYPE_PERCEPTION" => {
                Some(Self::SwordTrainingStatusTypePerception)
            }
            "_SWORD_TRAINING_STATUS_TYPE_MAX" => Some(Self::SwordTrainingStatusTypeMax),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Depohhphajh {
    SwordTrainingGameSettleNone = 0,
    SwordTrainingGameSettleFinish = 1,
    SwordTrainingGameSettleGiveUp = 2,
    SwordTrainingGameSettleBattleFailed = 3,
    SwordTrainingGameSettleForce = 4,
    SwordTrainingGameSettleByRestore = 5,
}
impl Depohhphajh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Depohhphajh::SwordTrainingGameSettleNone => "SWORD_TRAINING_GAME_SETTLE_NONE",
            Depohhphajh::SwordTrainingGameSettleFinish => {
                "SWORD_TRAINING_GAME_SETTLE_FINISH"
            }
            Depohhphajh::SwordTrainingGameSettleGiveUp => {
                "SWORD_TRAINING_GAME_SETTLE_GIVE_UP"
            }
            Depohhphajh::SwordTrainingGameSettleBattleFailed => {
                "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED"
            }
            Depohhphajh::SwordTrainingGameSettleForce => {
                "SWORD_TRAINING_GAME_SETTLE_FORCE"
            }
            Depohhphajh::SwordTrainingGameSettleByRestore => {
                "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SWORD_TRAINING_GAME_SETTLE_NONE" => Some(Self::SwordTrainingGameSettleNone),
            "SWORD_TRAINING_GAME_SETTLE_FINISH" => {
                Some(Self::SwordTrainingGameSettleFinish)
            }
            "SWORD_TRAINING_GAME_SETTLE_GIVE_UP" => {
                Some(Self::SwordTrainingGameSettleGiveUp)
            }
            "SWORD_TRAINING_GAME_SETTLE_BATTLE_FAILED" => {
                Some(Self::SwordTrainingGameSettleBattleFailed)
            }
            "SWORD_TRAINING_GAME_SETTLE_FORCE" => {
                Some(Self::SwordTrainingGameSettleForce)
            }
            "SWORD_TRAINING_GAME_SETTLE_BY_RESTORE" => {
                Some(Self::SwordTrainingGameSettleByRestore)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdPlayerSyncType {
    CmdPlayerSyncNone = 0,
    CmdPlayerSyncScNotify = 668,
}
impl CmdPlayerSyncType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdPlayerSyncType::CmdPlayerSyncNone => "CmdPlayerSyncNone",
            CmdPlayerSyncType::CmdPlayerSyncScNotify => "CmdPlayerSyncScNotify",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdPlayerSyncNone" => Some(Self::CmdPlayerSyncNone),
            "CmdPlayerSyncScNotify" => Some(Self::CmdPlayerSyncScNotify),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTalkEventType {
    CmdTalkRewardTypeNone = 0,
    CmdFinishFirstTalkByPerformanceNpcScRsp = 2148,
    CmdFinishFirstTalkNpcCsReq = 2139,
    CmdTakeTalkRewardScRsp = 2143,
    CmdFinishFirstTalkNpcScRsp = 2129,
    CmdSelectInclinationTextCsReq = 2151,
    CmdGetFirstTalkNpcScRsp = 2193,
    CmdSelectInclinationTextScRsp = 2133,
    CmdGetFirstTalkNpcCsReq = 2156,
    CmdFinishFirstTalkByPerformanceNpcCsReq = 2165,
    CmdGetNpcTakenRewardScRsp = 2106,
    CmdGetFirstTalkByPerformanceNpcScRsp = 2154,
    CmdGetFirstTalkByPerformanceNpcCsReq = 2199,
    CmdTakeTalkRewardCsReq = 2111,
    CmdGetNpcTakenRewardCsReq = 2168,
}
impl CmdTalkEventType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdTalkEventType::CmdTalkRewardTypeNone => "CmdTalkRewardTypeNone",
            CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcScRsp => {
                "CmdFinishFirstTalkByPerformanceNpcScRsp"
            }
            CmdTalkEventType::CmdFinishFirstTalkNpcCsReq => "CmdFinishFirstTalkNpcCsReq",
            CmdTalkEventType::CmdTakeTalkRewardScRsp => "CmdTakeTalkRewardScRsp",
            CmdTalkEventType::CmdFinishFirstTalkNpcScRsp => "CmdFinishFirstTalkNpcScRsp",
            CmdTalkEventType::CmdSelectInclinationTextCsReq => {
                "CmdSelectInclinationTextCsReq"
            }
            CmdTalkEventType::CmdGetFirstTalkNpcScRsp => "CmdGetFirstTalkNpcScRsp",
            CmdTalkEventType::CmdSelectInclinationTextScRsp => {
                "CmdSelectInclinationTextScRsp"
            }
            CmdTalkEventType::CmdGetFirstTalkNpcCsReq => "CmdGetFirstTalkNpcCsReq",
            CmdTalkEventType::CmdFinishFirstTalkByPerformanceNpcCsReq => {
                "CmdFinishFirstTalkByPerformanceNpcCsReq"
            }
            CmdTalkEventType::CmdGetNpcTakenRewardScRsp => "CmdGetNpcTakenRewardScRsp",
            CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcScRsp => {
                "CmdGetFirstTalkByPerformanceNpcScRsp"
            }
            CmdTalkEventType::CmdGetFirstTalkByPerformanceNpcCsReq => {
                "CmdGetFirstTalkByPerformanceNpcCsReq"
            }
            CmdTalkEventType::CmdTakeTalkRewardCsReq => "CmdTakeTalkRewardCsReq",
            CmdTalkEventType::CmdGetNpcTakenRewardCsReq => "CmdGetNpcTakenRewardCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTalkRewardTypeNone" => Some(Self::CmdTalkRewardTypeNone),
            "CmdFinishFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcScRsp)
            }
            "CmdFinishFirstTalkNpcCsReq" => Some(Self::CmdFinishFirstTalkNpcCsReq),
            "CmdTakeTalkRewardScRsp" => Some(Self::CmdTakeTalkRewardScRsp),
            "CmdFinishFirstTalkNpcScRsp" => Some(Self::CmdFinishFirstTalkNpcScRsp),
            "CmdSelectInclinationTextCsReq" => Some(Self::CmdSelectInclinationTextCsReq),
            "CmdGetFirstTalkNpcScRsp" => Some(Self::CmdGetFirstTalkNpcScRsp),
            "CmdSelectInclinationTextScRsp" => Some(Self::CmdSelectInclinationTextScRsp),
            "CmdGetFirstTalkNpcCsReq" => Some(Self::CmdGetFirstTalkNpcCsReq),
            "CmdFinishFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdFinishFirstTalkByPerformanceNpcCsReq)
            }
            "CmdGetNpcTakenRewardScRsp" => Some(Self::CmdGetNpcTakenRewardScRsp),
            "CmdGetFirstTalkByPerformanceNpcScRsp" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcScRsp)
            }
            "CmdGetFirstTalkByPerformanceNpcCsReq" => {
                Some(Self::CmdGetFirstTalkByPerformanceNpcCsReq)
            }
            "CmdTakeTalkRewardCsReq" => Some(Self::CmdTakeTalkRewardCsReq),
            "CmdGetNpcTakenRewardCsReq" => Some(Self::CmdGetNpcTakenRewardCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Pdmgpjhhpbn {
    CmdTelevisionActivityTypeNone = 0,
    CmdGetTelevisionActivityDataScRsp = 6963,
    CmdGetTelevisionActivityDataCsReq = 6979,
    CmdTelevisionActivityDataChangeScNotify = 6972,
    CmdTelevisionActivityBattleEndScNotify = 6962,
    CmdEnterTelevisionActivityStageCsReq = 6980,
    CmdEnterTelevisionActivityStageScRsp = 6964,
}
impl Pdmgpjhhpbn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Pdmgpjhhpbn::CmdTelevisionActivityTypeNone => "CmdTelevisionActivityTypeNone",
            Pdmgpjhhpbn::CmdGetTelevisionActivityDataScRsp => {
                "CmdGetTelevisionActivityDataScRsp"
            }
            Pdmgpjhhpbn::CmdGetTelevisionActivityDataCsReq => {
                "CmdGetTelevisionActivityDataCsReq"
            }
            Pdmgpjhhpbn::CmdTelevisionActivityDataChangeScNotify => {
                "CmdTelevisionActivityDataChangeScNotify"
            }
            Pdmgpjhhpbn::CmdTelevisionActivityBattleEndScNotify => {
                "CmdTelevisionActivityBattleEndScNotify"
            }
            Pdmgpjhhpbn::CmdEnterTelevisionActivityStageCsReq => {
                "CmdEnterTelevisionActivityStageCsReq"
            }
            Pdmgpjhhpbn::CmdEnterTelevisionActivityStageScRsp => {
                "CmdEnterTelevisionActivityStageScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTelevisionActivityTypeNone" => Some(Self::CmdTelevisionActivityTypeNone),
            "CmdGetTelevisionActivityDataScRsp" => {
                Some(Self::CmdGetTelevisionActivityDataScRsp)
            }
            "CmdGetTelevisionActivityDataCsReq" => {
                Some(Self::CmdGetTelevisionActivityDataCsReq)
            }
            "CmdTelevisionActivityDataChangeScNotify" => {
                Some(Self::CmdTelevisionActivityDataChangeScNotify)
            }
            "CmdTelevisionActivityBattleEndScNotify" => {
                Some(Self::CmdTelevisionActivityBattleEndScNotify)
            }
            "CmdEnterTelevisionActivityStageCsReq" => {
                Some(Self::CmdEnterTelevisionActivityStageCsReq)
            }
            "CmdEnterTelevisionActivityStageScRsp" => {
                Some(Self::CmdEnterTelevisionActivityStageScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Blnbpchkmop {
    CmdTextJoinTypeNone = 0,
    CmdTextJoinQueryCsReq = 3811,
    CmdTextJoinQueryScRsp = 3843,
    CmdTextJoinSaveScRsp = 3806,
    CmdTextJoinBatchSaveScRsp = 3893,
    CmdTextJoinBatchSaveCsReq = 3856,
    CmdTextJoinSaveCsReq = 3868,
}
impl Blnbpchkmop {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Blnbpchkmop::CmdTextJoinTypeNone => "CmdTextJoinTypeNone",
            Blnbpchkmop::CmdTextJoinQueryCsReq => "CmdTextJoinQueryCsReq",
            Blnbpchkmop::CmdTextJoinQueryScRsp => "CmdTextJoinQueryScRsp",
            Blnbpchkmop::CmdTextJoinSaveScRsp => "CmdTextJoinSaveScRsp",
            Blnbpchkmop::CmdTextJoinBatchSaveScRsp => "CmdTextJoinBatchSaveScRsp",
            Blnbpchkmop::CmdTextJoinBatchSaveCsReq => "CmdTextJoinBatchSaveCsReq",
            Blnbpchkmop::CmdTextJoinSaveCsReq => "CmdTextJoinSaveCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTextJoinTypeNone" => Some(Self::CmdTextJoinTypeNone),
            "CmdTextJoinQueryCsReq" => Some(Self::CmdTextJoinQueryCsReq),
            "CmdTextJoinQueryScRsp" => Some(Self::CmdTextJoinQueryScRsp),
            "CmdTextJoinSaveScRsp" => Some(Self::CmdTextJoinSaveScRsp),
            "CmdTextJoinBatchSaveScRsp" => Some(Self::CmdTextJoinBatchSaveScRsp),
            "CmdTextJoinBatchSaveCsReq" => Some(Self::CmdTextJoinBatchSaveCsReq),
            "CmdTextJoinSaveCsReq" => Some(Self::CmdTextJoinSaveCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ppefpjcekag {
    CmdTrackPhotoActivityTypeNone = 0,
    CmdStartTrackPhotoStageScRsp = 7556,
    CmdSettleTrackPhotoStageCsReq = 7559,
    CmdQuitTrackPhotoStageCsReq = 7557,
    CmdGetTrackPhotoActivityDataCsReq = 7551,
    CmdSettleTrackPhotoStageScRsp = 7560,
    CmdStartTrackPhotoStageCsReq = 7552,
    CmdQuitTrackPhotoStageScRsp = 7553,
    CmdGetTrackPhotoActivityDataScRsp = 7554,
}
impl Ppefpjcekag {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ppefpjcekag::CmdTrackPhotoActivityTypeNone => "CmdTrackPhotoActivityTypeNone",
            Ppefpjcekag::CmdStartTrackPhotoStageScRsp => "CmdStartTrackPhotoStageScRsp",
            Ppefpjcekag::CmdSettleTrackPhotoStageCsReq => "CmdSettleTrackPhotoStageCsReq",
            Ppefpjcekag::CmdQuitTrackPhotoStageCsReq => "CmdQuitTrackPhotoStageCsReq",
            Ppefpjcekag::CmdGetTrackPhotoActivityDataCsReq => {
                "CmdGetTrackPhotoActivityDataCsReq"
            }
            Ppefpjcekag::CmdSettleTrackPhotoStageScRsp => "CmdSettleTrackPhotoStageScRsp",
            Ppefpjcekag::CmdStartTrackPhotoStageCsReq => "CmdStartTrackPhotoStageCsReq",
            Ppefpjcekag::CmdQuitTrackPhotoStageScRsp => "CmdQuitTrackPhotoStageScRsp",
            Ppefpjcekag::CmdGetTrackPhotoActivityDataScRsp => {
                "CmdGetTrackPhotoActivityDataScRsp"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrackPhotoActivityTypeNone" => Some(Self::CmdTrackPhotoActivityTypeNone),
            "CmdStartTrackPhotoStageScRsp" => Some(Self::CmdStartTrackPhotoStageScRsp),
            "CmdSettleTrackPhotoStageCsReq" => Some(Self::CmdSettleTrackPhotoStageCsReq),
            "CmdQuitTrackPhotoStageCsReq" => Some(Self::CmdQuitTrackPhotoStageCsReq),
            "CmdGetTrackPhotoActivityDataCsReq" => {
                Some(Self::CmdGetTrackPhotoActivityDataCsReq)
            }
            "CmdSettleTrackPhotoStageScRsp" => Some(Self::CmdSettleTrackPhotoStageScRsp),
            "CmdStartTrackPhotoStageCsReq" => Some(Self::CmdStartTrackPhotoStageCsReq),
            "CmdQuitTrackPhotoStageScRsp" => Some(Self::CmdQuitTrackPhotoStageScRsp),
            "CmdGetTrackPhotoActivityDataScRsp" => {
                Some(Self::CmdGetTrackPhotoActivityDataScRsp)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Hcgenkapobn {
    CmdTrainVisitorTypeNone = 0,
    CmdTakeTrainVisitorUntakenBehaviorRewardCsReq = 3751,
    CmdGetTrainVisitorBehaviorCsReq = 3711,
    CmdGetTrainVisitorBehaviorScRsp = 3743,
    CmdGetTrainVisitorRegisterScRsp = 3729,
    CmdTrainVisitorRewardSendNotify = 3793,
    CmdTakeTrainVisitorUntakenBehaviorRewardScRsp = 3733,
    CmdTrainVisitorBehaviorFinishScRsp = 3706,
    CmdShowNewSupplementVisitorScRsp = 3754,
    CmdShowNewSupplementVisitorCsReq = 3799,
    CmdTrainRefreshTimeNotify = 3756,
    CmdTrainVisitorBehaviorFinishCsReq = 3768,
    CmdGetTrainVisitorRegisterCsReq = 3739,
}
impl Hcgenkapobn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Hcgenkapobn::CmdTrainVisitorTypeNone => "CmdTrainVisitorTypeNone",
            Hcgenkapobn::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq"
            }
            Hcgenkapobn::CmdGetTrainVisitorBehaviorCsReq => {
                "CmdGetTrainVisitorBehaviorCsReq"
            }
            Hcgenkapobn::CmdGetTrainVisitorBehaviorScRsp => {
                "CmdGetTrainVisitorBehaviorScRsp"
            }
            Hcgenkapobn::CmdGetTrainVisitorRegisterScRsp => {
                "CmdGetTrainVisitorRegisterScRsp"
            }
            Hcgenkapobn::CmdTrainVisitorRewardSendNotify => {
                "CmdTrainVisitorRewardSendNotify"
            }
            Hcgenkapobn::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp => {
                "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp"
            }
            Hcgenkapobn::CmdTrainVisitorBehaviorFinishScRsp => {
                "CmdTrainVisitorBehaviorFinishScRsp"
            }
            Hcgenkapobn::CmdShowNewSupplementVisitorScRsp => {
                "CmdShowNewSupplementVisitorScRsp"
            }
            Hcgenkapobn::CmdShowNewSupplementVisitorCsReq => {
                "CmdShowNewSupplementVisitorCsReq"
            }
            Hcgenkapobn::CmdTrainRefreshTimeNotify => "CmdTrainRefreshTimeNotify",
            Hcgenkapobn::CmdTrainVisitorBehaviorFinishCsReq => {
                "CmdTrainVisitorBehaviorFinishCsReq"
            }
            Hcgenkapobn::CmdGetTrainVisitorRegisterCsReq => {
                "CmdGetTrainVisitorRegisterCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTrainVisitorTypeNone" => Some(Self::CmdTrainVisitorTypeNone),
            "CmdTakeTrainVisitorUntakenBehaviorRewardCsReq" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardCsReq)
            }
            "CmdGetTrainVisitorBehaviorCsReq" => {
                Some(Self::CmdGetTrainVisitorBehaviorCsReq)
            }
            "CmdGetTrainVisitorBehaviorScRsp" => {
                Some(Self::CmdGetTrainVisitorBehaviorScRsp)
            }
            "CmdGetTrainVisitorRegisterScRsp" => {
                Some(Self::CmdGetTrainVisitorRegisterScRsp)
            }
            "CmdTrainVisitorRewardSendNotify" => {
                Some(Self::CmdTrainVisitorRewardSendNotify)
            }
            "CmdTakeTrainVisitorUntakenBehaviorRewardScRsp" => {
                Some(Self::CmdTakeTrainVisitorUntakenBehaviorRewardScRsp)
            }
            "CmdTrainVisitorBehaviorFinishScRsp" => {
                Some(Self::CmdTrainVisitorBehaviorFinishScRsp)
            }
            "CmdShowNewSupplementVisitorScRsp" => {
                Some(Self::CmdShowNewSupplementVisitorScRsp)
            }
            "CmdShowNewSupplementVisitorCsReq" => {
                Some(Self::CmdShowNewSupplementVisitorCsReq)
            }
            "CmdTrainRefreshTimeNotify" => Some(Self::CmdTrainRefreshTimeNotify),
            "CmdTrainVisitorBehaviorFinishCsReq" => {
                Some(Self::CmdTrainVisitorBehaviorFinishCsReq)
            }
            "CmdGetTrainVisitorRegisterCsReq" => {
                Some(Self::CmdGetTrainVisitorRegisterCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Indhbbjiean {
    TrainVisitorRewardSendNone = 0,
    TrainVisitorRewardSendRegister = 1,
    TrainVisitorRewardSendMission = 2,
}
impl Indhbbjiean {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Indhbbjiean::TrainVisitorRewardSendNone => "TRAIN_VISITOR_REWARD_SEND_NONE",
            Indhbbjiean::TrainVisitorRewardSendRegister => {
                "TRAIN_VISITOR_REWARD_SEND_REGISTER"
            }
            Indhbbjiean::TrainVisitorRewardSendMission => {
                "TRAIN_VISITOR_REWARD_SEND_MISSION"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REWARD_SEND_NONE" => Some(Self::TrainVisitorRewardSendNone),
            "TRAIN_VISITOR_REWARD_SEND_REGISTER" => {
                Some(Self::TrainVisitorRewardSendRegister)
            }
            "TRAIN_VISITOR_REWARD_SEND_MISSION" => {
                Some(Self::TrainVisitorRewardSendMission)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ffppaobdjgo {
    TrainVisitorStatusNone = 0,
    TrainVisitorStatusInit = 1,
    TrainVisitorStatusGetOn = 2,
    TrainVisitorStatusGetOff = 3,
}
impl Ffppaobdjgo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ffppaobdjgo::TrainVisitorStatusNone => "TRAIN_VISITOR_STATUS_NONE",
            Ffppaobdjgo::TrainVisitorStatusInit => "TRAIN_VISITOR_STATUS_INIT",
            Ffppaobdjgo::TrainVisitorStatusGetOn => "TRAIN_VISITOR_STATUS_GET_ON",
            Ffppaobdjgo::TrainVisitorStatusGetOff => "TRAIN_VISITOR_STATUS_GET_OFF",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_STATUS_NONE" => Some(Self::TrainVisitorStatusNone),
            "TRAIN_VISITOR_STATUS_INIT" => Some(Self::TrainVisitorStatusInit),
            "TRAIN_VISITOR_STATUS_GET_ON" => Some(Self::TrainVisitorStatusGetOn),
            "TRAIN_VISITOR_STATUS_GET_OFF" => Some(Self::TrainVisitorStatusGetOff),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Heppgbeaopd {
    TrainVisitorRegisterGetTypeNone = 0,
    TrainVisitorRegisterGetTypeAuto = 1,
    TrainVisitorRegisterGetTypeManual = 2,
}
impl Heppgbeaopd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Heppgbeaopd::TrainVisitorRegisterGetTypeNone => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE"
            }
            Heppgbeaopd::TrainVisitorRegisterGetTypeAuto => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO"
            }
            Heppgbeaopd::TrainVisitorRegisterGetTypeManual => {
                "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRAIN_VISITOR_REGISTER_GET_TYPE_NONE" => {
                Some(Self::TrainVisitorRegisterGetTypeNone)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_AUTO" => {
                Some(Self::TrainVisitorRegisterGetTypeAuto)
            }
            "TRAIN_VISITOR_REGISTER_GET_TYPE_MANUAL" => {
                Some(Self::TrainVisitorRegisterGetTypeManual)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Ahohoegfkcn {
    CmdTravelBrochureNone = 0,
    CmdTravelBrochureApplyPasterCsReq = 6439,
    CmdTravelBrochureSetPageDescStatusCsReq = 6497,
    CmdTravelBrochurePageResetScRsp = 6424,
    CmdTravelBrochurePageResetCsReq = 6425,
    CmdTravelBrochureUpdatePasterPosCsReq = 6499,
    CmdTravelBrochureSetCustomValueCsReq = 6482,
    CmdTravelBrochureGetPasterScNotify = 6465,
    CmdTravelBrochurePageUnlockScNotify = 6411,
    CmdTravelBrochureSetPageDescStatusScRsp = 6498,
    CmdTravelBrochureSelectMessageCsReq = 6456,
    CmdTravelBrochureRemovePasterScRsp = 6433,
    CmdTravelBrochureApplyPasterScRsp = 6429,
    CmdTravelBrochureSetCustomValueScRsp = 6434,
    CmdTravelBrochureGetDataCsReq = 6468,
    CmdTravelBrochureSelectMessageScRsp = 6493,
    CmdTravelBrochureUpdatePasterPosScRsp = 6454,
    CmdTravelBrochureApplyPasterListCsReq = 6417,
    CmdTravelBrochureApplyPasterListScRsp = 6492,
    CmdTravelBrochureGetDataScRsp = 6406,
    CmdTravelBrochureRemovePasterCsReq = 6451,
}
impl Ahohoegfkcn {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Ahohoegfkcn::CmdTravelBrochureNone => "CmdTravelBrochureNone",
            Ahohoegfkcn::CmdTravelBrochureApplyPasterCsReq => {
                "CmdTravelBrochureApplyPasterCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochureSetPageDescStatusCsReq => {
                "CmdTravelBrochureSetPageDescStatusCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochurePageResetScRsp => {
                "CmdTravelBrochurePageResetScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochurePageResetCsReq => {
                "CmdTravelBrochurePageResetCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochureUpdatePasterPosCsReq => {
                "CmdTravelBrochureUpdatePasterPosCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochureSetCustomValueCsReq => {
                "CmdTravelBrochureSetCustomValueCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochureGetPasterScNotify => {
                "CmdTravelBrochureGetPasterScNotify"
            }
            Ahohoegfkcn::CmdTravelBrochurePageUnlockScNotify => {
                "CmdTravelBrochurePageUnlockScNotify"
            }
            Ahohoegfkcn::CmdTravelBrochureSetPageDescStatusScRsp => {
                "CmdTravelBrochureSetPageDescStatusScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureSelectMessageCsReq => {
                "CmdTravelBrochureSelectMessageCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochureRemovePasterScRsp => {
                "CmdTravelBrochureRemovePasterScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureApplyPasterScRsp => {
                "CmdTravelBrochureApplyPasterScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureSetCustomValueScRsp => {
                "CmdTravelBrochureSetCustomValueScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureGetDataCsReq => "CmdTravelBrochureGetDataCsReq",
            Ahohoegfkcn::CmdTravelBrochureSelectMessageScRsp => {
                "CmdTravelBrochureSelectMessageScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureUpdatePasterPosScRsp => {
                "CmdTravelBrochureUpdatePasterPosScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureApplyPasterListCsReq => {
                "CmdTravelBrochureApplyPasterListCsReq"
            }
            Ahohoegfkcn::CmdTravelBrochureApplyPasterListScRsp => {
                "CmdTravelBrochureApplyPasterListScRsp"
            }
            Ahohoegfkcn::CmdTravelBrochureGetDataScRsp => "CmdTravelBrochureGetDataScRsp",
            Ahohoegfkcn::CmdTravelBrochureRemovePasterCsReq => {
                "CmdTravelBrochureRemovePasterCsReq"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTravelBrochureNone" => Some(Self::CmdTravelBrochureNone),
            "CmdTravelBrochureApplyPasterCsReq" => {
                Some(Self::CmdTravelBrochureApplyPasterCsReq)
            }
            "CmdTravelBrochureSetPageDescStatusCsReq" => {
                Some(Self::CmdTravelBrochureSetPageDescStatusCsReq)
            }
            "CmdTravelBrochurePageResetScRsp" => {
                Some(Self::CmdTravelBrochurePageResetScRsp)
            }
            "CmdTravelBrochurePageResetCsReq" => {
                Some(Self::CmdTravelBrochurePageResetCsReq)
            }
            "CmdTravelBrochureUpdatePasterPosCsReq" => {
                Some(Self::CmdTravelBrochureUpdatePasterPosCsReq)
            }
            "CmdTravelBrochureSetCustomValueCsReq" => {
                Some(Self::CmdTravelBrochureSetCustomValueCsReq)
            }
            "CmdTravelBrochureGetPasterScNotify" => {
                Some(Self::CmdTravelBrochureGetPasterScNotify)
            }
            "CmdTravelBrochurePageUnlockScNotify" => {
                Some(Self::CmdTravelBrochurePageUnlockScNotify)
            }
            "CmdTravelBrochureSetPageDescStatusScRsp" => {
                Some(Self::CmdTravelBrochureSetPageDescStatusScRsp)
            }
            "CmdTravelBrochureSelectMessageCsReq" => {
                Some(Self::CmdTravelBrochureSelectMessageCsReq)
            }
            "CmdTravelBrochureRemovePasterScRsp" => {
                Some(Self::CmdTravelBrochureRemovePasterScRsp)
            }
            "CmdTravelBrochureApplyPasterScRsp" => {
                Some(Self::CmdTravelBrochureApplyPasterScRsp)
            }
            "CmdTravelBrochureSetCustomValueScRsp" => {
                Some(Self::CmdTravelBrochureSetCustomValueScRsp)
            }
            "CmdTravelBrochureGetDataCsReq" => Some(Self::CmdTravelBrochureGetDataCsReq),
            "CmdTravelBrochureSelectMessageScRsp" => {
                Some(Self::CmdTravelBrochureSelectMessageScRsp)
            }
            "CmdTravelBrochureUpdatePasterPosScRsp" => {
                Some(Self::CmdTravelBrochureUpdatePasterPosScRsp)
            }
            "CmdTravelBrochureApplyPasterListCsReq" => {
                Some(Self::CmdTravelBrochureApplyPasterListCsReq)
            }
            "CmdTravelBrochureApplyPasterListScRsp" => {
                Some(Self::CmdTravelBrochureApplyPasterListScRsp)
            }
            "CmdTravelBrochureGetDataScRsp" => Some(Self::CmdTravelBrochureGetDataScRsp),
            "CmdTravelBrochureRemovePasterCsReq" => {
                Some(Self::CmdTravelBrochureRemovePasterCsReq)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nbdeaohmgpd {
    PageNone = 0,
    PageUnlocked = 1,
    PageInteracted = 2,
}
impl Nbdeaohmgpd {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nbdeaohmgpd::PageNone => "PAGE_NONE",
            Nbdeaohmgpd::PageUnlocked => "PAGE_UNLOCKED",
            Nbdeaohmgpd::PageInteracted => "PAGE_INTERACTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_NONE" => Some(Self::PageNone),
            "PAGE_UNLOCKED" => Some(Self::PageUnlocked),
            "PAGE_INTERACTED" => Some(Self::PageInteracted),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Nepgcakaimg {
    PageDescNone = 0,
    PageDescShowDetail = 1,
    PageDescCollapse = 2,
}
impl Nepgcakaimg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Nepgcakaimg::PageDescNone => "PAGE_DESC_NONE",
            Nepgcakaimg::PageDescShowDetail => "PAGE_DESC_SHOW_DETAIL",
            Nepgcakaimg::PageDescCollapse => "PAGE_DESC_COLLAPSE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PAGE_DESC_NONE" => Some(Self::PageDescNone),
            "PAGE_DESC_SHOW_DETAIL" => Some(Self::PageDescShowDetail),
            "PAGE_DESC_COLLAPSE" => Some(Self::PageDescCollapse),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Mmfbpfacamh {
    CmdTreasureDungeonTypeNone = 0,
    CmdFightTreasureDungeonMonsterScRsp = 4498,
    CmdUseTreasureDungeonItemScRsp = 4492,
    CmdUseTreasureDungeonItemCsReq = 4417,
    CmdQuitTreasureDungeonScRsp = 4428,
    CmdQuitTreasureDungeonCsReq = 4490,
    CmdOpenTreasureDungeonGridScRsp = 4434,
    CmdTreasureDungeonDataScNotify = 4468,
    CmdInteractTreasureDungeonGridScRsp = 4424,
    CmdOpenTreasureDungeonGridCsReq = 4482,
    CmdInteractTreasureDungeonGridCsReq = 4425,
    CmdFightTreasureDungeonMonsterCsReq = 4497,
    CmdGetTreasureDungeonActivityDataCsReq = 4499,
    CmdGetTreasureDungeonActivityDataScRsp = 4454,
    CmdEnterTreasureDungeonScRsp = 4448,
    CmdTreasureDungeonFinishScNotify = 4406,
    CmdEnterTreasureDungeonCsReq = 4465,
}
impl Mmfbpfacamh {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Mmfbpfacamh::CmdTreasureDungeonTypeNone => "CmdTreasureDungeonTypeNone",
            Mmfbpfacamh::CmdFightTreasureDungeonMonsterScRsp => {
                "CmdFightTreasureDungeonMonsterScRsp"
            }
            Mmfbpfacamh::CmdUseTreasureDungeonItemScRsp => {
                "CmdUseTreasureDungeonItemScRsp"
            }
            Mmfbpfacamh::CmdUseTreasureDungeonItemCsReq => {
                "CmdUseTreasureDungeonItemCsReq"
            }
            Mmfbpfacamh::CmdQuitTreasureDungeonScRsp => "CmdQuitTreasureDungeonScRsp",
            Mmfbpfacamh::CmdQuitTreasureDungeonCsReq => "CmdQuitTreasureDungeonCsReq",
            Mmfbpfacamh::CmdOpenTreasureDungeonGridScRsp => {
                "CmdOpenTreasureDungeonGridScRsp"
            }
            Mmfbpfacamh::CmdTreasureDungeonDataScNotify => {
                "CmdTreasureDungeonDataScNotify"
            }
            Mmfbpfacamh::CmdInteractTreasureDungeonGridScRsp => {
                "CmdInteractTreasureDungeonGridScRsp"
            }
            Mmfbpfacamh::CmdOpenTreasureDungeonGridCsReq => {
                "CmdOpenTreasureDungeonGridCsReq"
            }
            Mmfbpfacamh::CmdInteractTreasureDungeonGridCsReq => {
                "CmdInteractTreasureDungeonGridCsReq"
            }
            Mmfbpfacamh::CmdFightTreasureDungeonMonsterCsReq => {
                "CmdFightTreasureDungeonMonsterCsReq"
            }
            Mmfbpfacamh::CmdGetTreasureDungeonActivityDataCsReq => {
                "CmdGetTreasureDungeonActivityDataCsReq"
            }
            Mmfbpfacamh::CmdGetTreasureDungeonActivityDataScRsp => {
                "CmdGetTreasureDungeonActivityDataScRsp"
            }
            Mmfbpfacamh::CmdEnterTreasureDungeonScRsp => "CmdEnterTreasureDungeonScRsp",
            Mmfbpfacamh::CmdTreasureDungeonFinishScNotify => {
                "CmdTreasureDungeonFinishScNotify"
            }
            Mmfbpfacamh::CmdEnterTreasureDungeonCsReq => "CmdEnterTreasureDungeonCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTreasureDungeonTypeNone" => Some(Self::CmdTreasureDungeonTypeNone),
            "CmdFightTreasureDungeonMonsterScRsp" => {
                Some(Self::CmdFightTreasureDungeonMonsterScRsp)
            }
            "CmdUseTreasureDungeonItemScRsp" => {
                Some(Self::CmdUseTreasureDungeonItemScRsp)
            }
            "CmdUseTreasureDungeonItemCsReq" => {
                Some(Self::CmdUseTreasureDungeonItemCsReq)
            }
            "CmdQuitTreasureDungeonScRsp" => Some(Self::CmdQuitTreasureDungeonScRsp),
            "CmdQuitTreasureDungeonCsReq" => Some(Self::CmdQuitTreasureDungeonCsReq),
            "CmdOpenTreasureDungeonGridScRsp" => {
                Some(Self::CmdOpenTreasureDungeonGridScRsp)
            }
            "CmdTreasureDungeonDataScNotify" => {
                Some(Self::CmdTreasureDungeonDataScNotify)
            }
            "CmdInteractTreasureDungeonGridScRsp" => {
                Some(Self::CmdInteractTreasureDungeonGridScRsp)
            }
            "CmdOpenTreasureDungeonGridCsReq" => {
                Some(Self::CmdOpenTreasureDungeonGridCsReq)
            }
            "CmdInteractTreasureDungeonGridCsReq" => {
                Some(Self::CmdInteractTreasureDungeonGridCsReq)
            }
            "CmdFightTreasureDungeonMonsterCsReq" => {
                Some(Self::CmdFightTreasureDungeonMonsterCsReq)
            }
            "CmdGetTreasureDungeonActivityDataCsReq" => {
                Some(Self::CmdGetTreasureDungeonActivityDataCsReq)
            }
            "CmdGetTreasureDungeonActivityDataScRsp" => {
                Some(Self::CmdGetTreasureDungeonActivityDataScRsp)
            }
            "CmdEnterTreasureDungeonScRsp" => Some(Self::CmdEnterTreasureDungeonScRsp),
            "CmdTreasureDungeonFinishScNotify" => {
                Some(Self::CmdTreasureDungeonFinishScNotify)
            }
            "CmdEnterTreasureDungeonCsReq" => Some(Self::CmdEnterTreasureDungeonCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Domnbbdobkg {
    TreasureDungeonRecordNone = 0,
    TreasureDungeonRecordAddHp = 1,
    TreasureDungeonRecordSubHp = 2,
    TreasureDungeonRecordSubHpNoExplore = 3,
    TreasureDungeonRecordAddAttack = 5,
    TreasureDungeonRecordAddDefence = 6,
    TreasureDungeonRecordAddExplore = 9,
    TreasureDungeonRecordSubExplore = 10,
    TreasureDungeonRecordAddExploreOverflow = 11,
    TreasureDungeonRecordSummon = 15,
    TreasureDungeonRecordKill = 16,
    TreasureDungeonRecordAddTrialAvatar = 20,
    TreasureDungeonRecordAddBuff = 24,
    TreasureDungeonRecordUnlockDoor = 25,
    TreasureDungeonRecordEnemyEnhance = 27,
    TreasureDungeonRecordEnemyWeaken = 28,
    TreasureDungeonRecordEnemyAuraRemove = 29,
    TreasureDungeonRecordSpecialMonsterRun = 30,
    TreasureDungeonRecordSpecialMonsterKill = 31,
    TreasureDungeonRecordBattleBuffTriggerSuccess = 33,
    TreasureDungeonRecordBattleBuffTriggerFail = 34,
    TreasureDungeonRecordBattleBuffAddExplore = 35,
    TreasureDungeonRecordBattleBuffOpenGrid = 36,
    TreasureDungeonRecordBattleBuffAddItem = 37,
    TreasureDungeonRecordAvatarDead = 40,
    TreasureDungeonRecordTrialAvatarDead = 41,
    TreasureDungeonRecordAllAvatarDead = 42,
    TreasureDungeonRecordOpenItemChest = 43,
}
impl Domnbbdobkg {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Domnbbdobkg::TreasureDungeonRecordNone => "TREASURE_DUNGEON_RECORD_NONE",
            Domnbbdobkg::TreasureDungeonRecordAddHp => "TREASURE_DUNGEON_RECORD_ADD_HP",
            Domnbbdobkg::TreasureDungeonRecordSubHp => "TREASURE_DUNGEON_RECORD_SUB_HP",
            Domnbbdobkg::TreasureDungeonRecordSubHpNoExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE"
            }
            Domnbbdobkg::TreasureDungeonRecordAddAttack => {
                "TREASURE_DUNGEON_RECORD_ADD_ATTACK"
            }
            Domnbbdobkg::TreasureDungeonRecordAddDefence => {
                "TREASURE_DUNGEON_RECORD_ADD_DEFENCE"
            }
            Domnbbdobkg::TreasureDungeonRecordAddExplore => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE"
            }
            Domnbbdobkg::TreasureDungeonRecordSubExplore => {
                "TREASURE_DUNGEON_RECORD_SUB_EXPLORE"
            }
            Domnbbdobkg::TreasureDungeonRecordAddExploreOverflow => {
                "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW"
            }
            Domnbbdobkg::TreasureDungeonRecordSummon => "TREASURE_DUNGEON_RECORD_SUMMON",
            Domnbbdobkg::TreasureDungeonRecordKill => "TREASURE_DUNGEON_RECORD_KILL",
            Domnbbdobkg::TreasureDungeonRecordAddTrialAvatar => {
                "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR"
            }
            Domnbbdobkg::TreasureDungeonRecordAddBuff => {
                "TREASURE_DUNGEON_RECORD_ADD_BUFF"
            }
            Domnbbdobkg::TreasureDungeonRecordUnlockDoor => {
                "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR"
            }
            Domnbbdobkg::TreasureDungeonRecordEnemyEnhance => {
                "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE"
            }
            Domnbbdobkg::TreasureDungeonRecordEnemyWeaken => {
                "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN"
            }
            Domnbbdobkg::TreasureDungeonRecordEnemyAuraRemove => {
                "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE"
            }
            Domnbbdobkg::TreasureDungeonRecordSpecialMonsterRun => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN"
            }
            Domnbbdobkg::TreasureDungeonRecordSpecialMonsterKill => {
                "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL"
            }
            Domnbbdobkg::TreasureDungeonRecordBattleBuffTriggerSuccess => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS"
            }
            Domnbbdobkg::TreasureDungeonRecordBattleBuffTriggerFail => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL"
            }
            Domnbbdobkg::TreasureDungeonRecordBattleBuffAddExplore => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE"
            }
            Domnbbdobkg::TreasureDungeonRecordBattleBuffOpenGrid => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID"
            }
            Domnbbdobkg::TreasureDungeonRecordBattleBuffAddItem => {
                "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM"
            }
            Domnbbdobkg::TreasureDungeonRecordAvatarDead => {
                "TREASURE_DUNGEON_RECORD_AVATAR_DEAD"
            }
            Domnbbdobkg::TreasureDungeonRecordTrialAvatarDead => {
                "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD"
            }
            Domnbbdobkg::TreasureDungeonRecordAllAvatarDead => {
                "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD"
            }
            Domnbbdobkg::TreasureDungeonRecordOpenItemChest => {
                "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TREASURE_DUNGEON_RECORD_NONE" => Some(Self::TreasureDungeonRecordNone),
            "TREASURE_DUNGEON_RECORD_ADD_HP" => Some(Self::TreasureDungeonRecordAddHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP" => Some(Self::TreasureDungeonRecordSubHp),
            "TREASURE_DUNGEON_RECORD_SUB_HP_NO_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubHpNoExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_ATTACK" => {
                Some(Self::TreasureDungeonRecordAddAttack)
            }
            "TREASURE_DUNGEON_RECORD_ADD_DEFENCE" => {
                Some(Self::TreasureDungeonRecordAddDefence)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_SUB_EXPLORE" => {
                Some(Self::TreasureDungeonRecordSubExplore)
            }
            "TREASURE_DUNGEON_RECORD_ADD_EXPLORE_OVERFLOW" => {
                Some(Self::TreasureDungeonRecordAddExploreOverflow)
            }
            "TREASURE_DUNGEON_RECORD_SUMMON" => Some(Self::TreasureDungeonRecordSummon),
            "TREASURE_DUNGEON_RECORD_KILL" => Some(Self::TreasureDungeonRecordKill),
            "TREASURE_DUNGEON_RECORD_ADD_TRIAL_AVATAR" => {
                Some(Self::TreasureDungeonRecordAddTrialAvatar)
            }
            "TREASURE_DUNGEON_RECORD_ADD_BUFF" => {
                Some(Self::TreasureDungeonRecordAddBuff)
            }
            "TREASURE_DUNGEON_RECORD_UNLOCK_DOOR" => {
                Some(Self::TreasureDungeonRecordUnlockDoor)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_ENHANCE" => {
                Some(Self::TreasureDungeonRecordEnemyEnhance)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_WEAKEN" => {
                Some(Self::TreasureDungeonRecordEnemyWeaken)
            }
            "TREASURE_DUNGEON_RECORD_ENEMY_AURA_REMOVE" => {
                Some(Self::TreasureDungeonRecordEnemyAuraRemove)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_RUN" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterRun)
            }
            "TREASURE_DUNGEON_RECORD_SPECIAL_MONSTER_KILL" => {
                Some(Self::TreasureDungeonRecordSpecialMonsterKill)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_SUCCESS" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerSuccess)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_TRIGGER_FAIL" => {
                Some(Self::TreasureDungeonRecordBattleBuffTriggerFail)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_EXPLORE" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddExplore)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_OPEN_GRID" => {
                Some(Self::TreasureDungeonRecordBattleBuffOpenGrid)
            }
            "TREASURE_DUNGEON_RECORD_BATTLE_BUFF_ADD_ITEM" => {
                Some(Self::TreasureDungeonRecordBattleBuffAddItem)
            }
            "TREASURE_DUNGEON_RECORD_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_TRIAL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordTrialAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_ALL_AVATAR_DEAD" => {
                Some(Self::TreasureDungeonRecordAllAvatarDead)
            }
            "TREASURE_DUNGEON_RECORD_OPEN_ITEM_CHEST" => {
                Some(Self::TreasureDungeonRecordOpenItemChest)
            }
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdTutorialType {
    None = 0,
    CmdGetTutorialCsReq = 1668,
    CmdUnlockTutorialCsReq = 1656,
    CmdFinishTutorialGuideCsReq = 1699,
    CmdGetTutorialGuideCsReq = 1611,
    CmdFinishTutorialCsReq = 1651,
    CmdUnlockTutorialGuideScRsp = 1629,
    CmdFinishTutorialScRsp = 1633,
    CmdUnlockTutorialScRsp = 1693,
    CmdUnlockTutorialGuideCsReq = 1639,
    CmdGetTutorialScRsp = 1606,
    CmdGetTutorialGuideScRsp = 1643,
    CmdFinishTutorialGuideScRsp = 1654,
}
impl CmdTutorialType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdTutorialType::None => "CmdTutorialTypeNone",
            CmdTutorialType::CmdGetTutorialCsReq => "CmdGetTutorialCsReq",
            CmdTutorialType::CmdUnlockTutorialCsReq => "CmdUnlockTutorialCsReq",
            CmdTutorialType::CmdFinishTutorialGuideCsReq => "CmdFinishTutorialGuideCsReq",
            CmdTutorialType::CmdGetTutorialGuideCsReq => "CmdGetTutorialGuideCsReq",
            CmdTutorialType::CmdFinishTutorialCsReq => "CmdFinishTutorialCsReq",
            CmdTutorialType::CmdUnlockTutorialGuideScRsp => "CmdUnlockTutorialGuideScRsp",
            CmdTutorialType::CmdFinishTutorialScRsp => "CmdFinishTutorialScRsp",
            CmdTutorialType::CmdUnlockTutorialScRsp => "CmdUnlockTutorialScRsp",
            CmdTutorialType::CmdUnlockTutorialGuideCsReq => "CmdUnlockTutorialGuideCsReq",
            CmdTutorialType::CmdGetTutorialScRsp => "CmdGetTutorialScRsp",
            CmdTutorialType::CmdGetTutorialGuideScRsp => "CmdGetTutorialGuideScRsp",
            CmdTutorialType::CmdFinishTutorialGuideScRsp => "CmdFinishTutorialGuideScRsp",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdTutorialTypeNone" => Some(Self::None),
            "CmdGetTutorialCsReq" => Some(Self::CmdGetTutorialCsReq),
            "CmdUnlockTutorialCsReq" => Some(Self::CmdUnlockTutorialCsReq),
            "CmdFinishTutorialGuideCsReq" => Some(Self::CmdFinishTutorialGuideCsReq),
            "CmdGetTutorialGuideCsReq" => Some(Self::CmdGetTutorialGuideCsReq),
            "CmdFinishTutorialCsReq" => Some(Self::CmdFinishTutorialCsReq),
            "CmdUnlockTutorialGuideScRsp" => Some(Self::CmdUnlockTutorialGuideScRsp),
            "CmdFinishTutorialScRsp" => Some(Self::CmdFinishTutorialScRsp),
            "CmdUnlockTutorialScRsp" => Some(Self::CmdUnlockTutorialScRsp),
            "CmdUnlockTutorialGuideCsReq" => Some(Self::CmdUnlockTutorialGuideCsReq),
            "CmdGetTutorialScRsp" => Some(Self::CmdGetTutorialScRsp),
            "CmdGetTutorialGuideScRsp" => Some(Self::CmdGetTutorialGuideScRsp),
            "CmdFinishTutorialGuideScRsp" => Some(Self::CmdFinishTutorialGuideScRsp),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TutorialStatus {
    TutorialNone = 0,
    TutorialUnlock = 1,
    TutorialFinish = 2,
}
impl TutorialStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            TutorialStatus::TutorialNone => "TUTORIAL_NONE",
            TutorialStatus::TutorialUnlock => "TUTORIAL_UNLOCK",
            TutorialStatus::TutorialFinish => "TUTORIAL_FINISH",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TUTORIAL_NONE" => Some(Self::TutorialNone),
            "TUTORIAL_UNLOCK" => Some(Self::TutorialUnlock),
            "TUTORIAL_FINISH" => Some(Self::TutorialFinish),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CmdWaypointType {
    None = 0,
    CmdSetCurWaypointScRsp = 443,
    CmdTakeChapterRewardScRsp = 451,
    CmdGetChapterScRsp = 493,
    CmdWaypointShowNewCsNotify = 439,
    CmdSetCurWaypointCsReq = 411,
    CmdTakeChapterRewardCsReq = 429,
    CmdGetWaypointCsReq = 468,
    CmdGetWaypointScRsp = 406,
    CmdGetChapterCsReq = 456,
}
impl CmdWaypointType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            CmdWaypointType::None => "CmdWaypointTypeNone",
            CmdWaypointType::CmdSetCurWaypointScRsp => "CmdSetCurWaypointScRsp",
            CmdWaypointType::CmdTakeChapterRewardScRsp => "CmdTakeChapterRewardScRsp",
            CmdWaypointType::CmdGetChapterScRsp => "CmdGetChapterScRsp",
            CmdWaypointType::CmdWaypointShowNewCsNotify => "CmdWaypointShowNewCsNotify",
            CmdWaypointType::CmdSetCurWaypointCsReq => "CmdSetCurWaypointCsReq",
            CmdWaypointType::CmdTakeChapterRewardCsReq => "CmdTakeChapterRewardCsReq",
            CmdWaypointType::CmdGetWaypointCsReq => "CmdGetWaypointCsReq",
            CmdWaypointType::CmdGetWaypointScRsp => "CmdGetWaypointScRsp",
            CmdWaypointType::CmdGetChapterCsReq => "CmdGetChapterCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWaypointTypeNone" => Some(Self::None),
            "CmdSetCurWaypointScRsp" => Some(Self::CmdSetCurWaypointScRsp),
            "CmdTakeChapterRewardScRsp" => Some(Self::CmdTakeChapterRewardScRsp),
            "CmdGetChapterScRsp" => Some(Self::CmdGetChapterScRsp),
            "CmdWaypointShowNewCsNotify" => Some(Self::CmdWaypointShowNewCsNotify),
            "CmdSetCurWaypointCsReq" => Some(Self::CmdSetCurWaypointCsReq),
            "CmdTakeChapterRewardCsReq" => Some(Self::CmdTakeChapterRewardCsReq),
            "CmdGetWaypointCsReq" => Some(Self::CmdGetWaypointCsReq),
            "CmdGetWaypointScRsp" => Some(Self::CmdGetWaypointScRsp),
            "CmdGetChapterCsReq" => Some(Self::CmdGetChapterCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WaypointType {
    None = 0,
    Stage = 1,
    Plot = 2,
}
impl WaypointType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WaypointType::None => "WAYPOINT_TYPE_NONE",
            WaypointType::Stage => "WAYPOINT_TYPE_STAGE",
            WaypointType::Plot => "WAYPOINT_TYPE_PLOT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_TYPE_NONE" => Some(Self::None),
            "WAYPOINT_TYPE_STAGE" => Some(Self::Stage),
            "WAYPOINT_TYPE_PLOT" => Some(Self::Plot),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum WaypointUnlockType {
    WaypointUnlockNone = 0,
    WaypointUnlockPre = 1,
    WaypointUnlockLevel = 2,
}
impl WaypointUnlockType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            WaypointUnlockType::WaypointUnlockNone => "WAYPOINT_UNLOCK_NONE",
            WaypointUnlockType::WaypointUnlockPre => "WAYPOINT_UNLOCK_PRE",
            WaypointUnlockType::WaypointUnlockLevel => "WAYPOINT_UNLOCK_LEVEL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "WAYPOINT_UNLOCK_NONE" => Some(Self::WaypointUnlockNone),
            "WAYPOINT_UNLOCK_PRE" => Some(Self::WaypointUnlockPre),
            "WAYPOINT_UNLOCK_LEVEL" => Some(Self::WaypointUnlockLevel),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Olnkajodjjo {
    CmdWolfBroTypeNone = 0,
    CmdRestoreWolfBroGameArchiveScRsp = 6593,
    CmdWolfBroGamePickupBulletScRsp = 6582,
    CmdWolfBroGameDataChangeScNotify = 6599,
    CmdRestoreWolfBroGameArchiveCsReq = 6556,
    CmdGetWolfBroGameDataScRsp = 6533,
    CmdArchiveWolfBroGameScRsp = 6543,
    CmdStartWolfBroGameScRsp = 6506,
    CmdArchiveWolfBroGameCsReq = 6511,
    CmdQuitWolfBroGameCsReq = 6539,
    CmdWolfBroGameExplodeMonsterCsReq = 6598,
    CmdWolfBroGameActivateBulletCsReq = 6534,
    CmdQuitWolfBroGameScRsp = 6529,
    CmdGetWolfBroGameDataCsReq = 6551,
    CmdWolfBroGameUseBulletScRsp = 6565,
    CmdWolfBroGamePickupBulletCsReq = 6548,
    CmdStartWolfBroGameCsReq = 6568,
    CmdWolfBroGameActivateBulletScRsp = 6597,
    CmdWolfBroGameExplodeMonsterScRsp = 6525,
    CmdWolfBroGameUseBulletCsReq = 6554,
}
impl Olnkajodjjo {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Olnkajodjjo::CmdWolfBroTypeNone => "CmdWolfBroTypeNone",
            Olnkajodjjo::CmdRestoreWolfBroGameArchiveScRsp => {
                "CmdRestoreWolfBroGameArchiveScRsp"
            }
            Olnkajodjjo::CmdWolfBroGamePickupBulletScRsp => {
                "CmdWolfBroGamePickupBulletScRsp"
            }
            Olnkajodjjo::CmdWolfBroGameDataChangeScNotify => {
                "CmdWolfBroGameDataChangeScNotify"
            }
            Olnkajodjjo::CmdRestoreWolfBroGameArchiveCsReq => {
                "CmdRestoreWolfBroGameArchiveCsReq"
            }
            Olnkajodjjo::CmdGetWolfBroGameDataScRsp => "CmdGetWolfBroGameDataScRsp",
            Olnkajodjjo::CmdArchiveWolfBroGameScRsp => "CmdArchiveWolfBroGameScRsp",
            Olnkajodjjo::CmdStartWolfBroGameScRsp => "CmdStartWolfBroGameScRsp",
            Olnkajodjjo::CmdArchiveWolfBroGameCsReq => "CmdArchiveWolfBroGameCsReq",
            Olnkajodjjo::CmdQuitWolfBroGameCsReq => "CmdQuitWolfBroGameCsReq",
            Olnkajodjjo::CmdWolfBroGameExplodeMonsterCsReq => {
                "CmdWolfBroGameExplodeMonsterCsReq"
            }
            Olnkajodjjo::CmdWolfBroGameActivateBulletCsReq => {
                "CmdWolfBroGameActivateBulletCsReq"
            }
            Olnkajodjjo::CmdQuitWolfBroGameScRsp => "CmdQuitWolfBroGameScRsp",
            Olnkajodjjo::CmdGetWolfBroGameDataCsReq => "CmdGetWolfBroGameDataCsReq",
            Olnkajodjjo::CmdWolfBroGameUseBulletScRsp => "CmdWolfBroGameUseBulletScRsp",
            Olnkajodjjo::CmdWolfBroGamePickupBulletCsReq => {
                "CmdWolfBroGamePickupBulletCsReq"
            }
            Olnkajodjjo::CmdStartWolfBroGameCsReq => "CmdStartWolfBroGameCsReq",
            Olnkajodjjo::CmdWolfBroGameActivateBulletScRsp => {
                "CmdWolfBroGameActivateBulletScRsp"
            }
            Olnkajodjjo::CmdWolfBroGameExplodeMonsterScRsp => {
                "CmdWolfBroGameExplodeMonsterScRsp"
            }
            Olnkajodjjo::CmdWolfBroGameUseBulletCsReq => "CmdWolfBroGameUseBulletCsReq",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CmdWolfBroTypeNone" => Some(Self::CmdWolfBroTypeNone),
            "CmdRestoreWolfBroGameArchiveScRsp" => {
                Some(Self::CmdRestoreWolfBroGameArchiveScRsp)
            }
            "CmdWolfBroGamePickupBulletScRsp" => {
                Some(Self::CmdWolfBroGamePickupBulletScRsp)
            }
            "CmdWolfBroGameDataChangeScNotify" => {
                Some(Self::CmdWolfBroGameDataChangeScNotify)
            }
            "CmdRestoreWolfBroGameArchiveCsReq" => {
                Some(Self::CmdRestoreWolfBroGameArchiveCsReq)
            }
            "CmdGetWolfBroGameDataScRsp" => Some(Self::CmdGetWolfBroGameDataScRsp),
            "CmdArchiveWolfBroGameScRsp" => Some(Self::CmdArchiveWolfBroGameScRsp),
            "CmdStartWolfBroGameScRsp" => Some(Self::CmdStartWolfBroGameScRsp),
            "CmdArchiveWolfBroGameCsReq" => Some(Self::CmdArchiveWolfBroGameCsReq),
            "CmdQuitWolfBroGameCsReq" => Some(Self::CmdQuitWolfBroGameCsReq),
            "CmdWolfBroGameExplodeMonsterCsReq" => {
                Some(Self::CmdWolfBroGameExplodeMonsterCsReq)
            }
            "CmdWolfBroGameActivateBulletCsReq" => {
                Some(Self::CmdWolfBroGameActivateBulletCsReq)
            }
            "CmdQuitWolfBroGameScRsp" => Some(Self::CmdQuitWolfBroGameScRsp),
            "CmdGetWolfBroGameDataCsReq" => Some(Self::CmdGetWolfBroGameDataCsReq),
            "CmdWolfBroGameUseBulletScRsp" => Some(Self::CmdWolfBroGameUseBulletScRsp),
            "CmdWolfBroGamePickupBulletCsReq" => {
                Some(Self::CmdWolfBroGamePickupBulletCsReq)
            }
            "CmdStartWolfBroGameCsReq" => Some(Self::CmdStartWolfBroGameCsReq),
            "CmdWolfBroGameActivateBulletScRsp" => {
                Some(Self::CmdWolfBroGameActivateBulletScRsp)
            }
            "CmdWolfBroGameExplodeMonsterScRsp" => {
                Some(Self::CmdWolfBroGameExplodeMonsterScRsp)
            }
            "CmdWolfBroGameUseBulletCsReq" => Some(Self::CmdWolfBroGameUseBulletCsReq),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DispatchType {
    None = 0,
    ByAddr = 1,
    ByMod = 2,
    ByRand = 3,
    ByChash = 4,
    ByStickySession = 5,
    ByObject = 6,
}
impl DispatchType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            DispatchType::None => "DISPATCH_TYPE_NONE",
            DispatchType::ByAddr => "DISPATCH_TYPE_BY_ADDR",
            DispatchType::ByMod => "DISPATCH_TYPE_BY_MOD",
            DispatchType::ByRand => "DISPATCH_TYPE_BY_RAND",
            DispatchType::ByChash => "DISPATCH_TYPE_BY_CHASH",
            DispatchType::ByStickySession => "DISPATCH_TYPE_BY_STICKY_SESSION",
            DispatchType::ByObject => "DISPATCH_TYPE_BY_OBJECT",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DISPATCH_TYPE_NONE" => Some(Self::None),
            "DISPATCH_TYPE_BY_ADDR" => Some(Self::ByAddr),
            "DISPATCH_TYPE_BY_MOD" => Some(Self::ByMod),
            "DISPATCH_TYPE_BY_RAND" => Some(Self::ByRand),
            "DISPATCH_TYPE_BY_CHASH" => Some(Self::ByChash),
            "DISPATCH_TYPE_BY_STICKY_SESSION" => Some(Self::ByStickySession),
            "DISPATCH_TYPE_BY_OBJECT" => Some(Self::ByObject),
            _ => None,
        }
    }
}
